(()=>{"use strict";var __webpack_modules__={504:Q=>{Q.exports=JSON.parse('{"process":{"n_bellus_points":77,"point_ranges":{"left_eye_set":[30,31,32,33,34,35,36,37,38],"right_eye_set":[40,41,42,43,44,45,46,47,39],"left_ear_set":[0,1,2],"right_ear_set":[12,11,10]},"bounding_box_offset":{"remark":"left_right_up_down. means: offset indefinetly","ly":[-10,10,-15,15],"ry":[-10,10,-15,15],"la":[1200,-10,150,150],"ra":[-10,1200,150,150]},"filtering":{"blur_first":1,"gaus_k_size":9,"median_kernel_size":7,"canny_thresh_lower":50,"canny_thresh_upper":150,"histeq_clip_limit":3,"histeq_cell_size":[8,8]}},"process_ransac":{"seed":3474647,"iterations":1000,"radius":5.55,"max_radius_deviation":0.1,"tolerance":0.2,"min_score":10,"max_deviation_from_guess(i think is is not used anymore)":6,"remark":"this stuff here is raw data","radius_iris":5.5,"radius_eye":12.25},"process_ears":{},"process_brows":{},"output":{"remark":"use this to determine the keys of the output json","file_name":"results.json","pupil_pt_left":"pupil_pt_left","pupil_pt_right":"pupil_pt_right","pupil_pt_flat_left":"pupil_pt_flat_left","pupil_pt_flat_right":"pupil_pt_flat_right","all_dlib_points":"all_dlib_points","ear_pt_left":"ear_pt_left","ear_pt_right":"ear_pt_right","brow_pts_left":"brow_pts_left","brow_pts_right":"brow_pts_right"},"debug":{"remark":"use output_test_points to export all points generated in inbetween steps","write_debug_points":true,"silent":false,"plot":false}}')}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}(()=>{eval('\n;// CONCATENATED MODULE: ./src/data/int-matrix.ts\n// generic all-pupose matrix of ints\r\nclass int_matrix_IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Int32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new int_matrix_IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    inRange(i, j) {\r\n        return !(i < 0 || i > this._height - 1 || j < 0 || j > this._width - 1);\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn("out of range!");\r\n            return 0;\r\n        }\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for Array"\r\n        let data = new Int32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for Array"\r\n        let data = new Int32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn("out of range!");\r\n            return;\r\n        }\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new int_matrix_IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    toUInt16Array() {\r\n        return new Uint16Array(this.data);\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    forEachRow(callbackfn) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let row = this.getRow(i);\r\n            callbackfn(row, i);\r\n            this.setRow(i, row);\r\n        }\r\n        return this;\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/const.ts\n// name:    const.ts\r\n// author:  Jos Feenstra\r\n// purpose: Certain math constances\r\n// todo:    These are somewhat like the settings of the entire application. This could be expanded upon (json\'s, in-app functionalitiy)\r\nclass Const {\r\n    static IsRouglyZero(value) {\r\n        return Math.abs(value) < this.TOLERANCE;\r\n    }\r\n}\r\nConst.TOLERANCE = 0.0001; // tolerance used for determining if 1 value is the same as some other value, relatively speaking\r\nConst.TOL_SQUARED = Math.pow(Const.TOLERANCE, 2);\r\n// ----- Line Render Settings ----- \r\nConst.PLANE_RENDER_LINECOUNT = 9;\r\nConst.PLANE_RENDER_LINEDISTANCE = .3;\r\nConst.CIRCLE_SEGMENTS = 100;\r\n\n;// CONCATENATED MODULE: ./src/data/float-matrix.ts\n// generic all-pupose matrix of floats\r\nclass FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new FloatMatrix(this._height, this._width);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    // generalized multiplication\r\n    multiply(b) {\r\n        let a = this;\r\n        if (b._width !== a._height) {\r\n            throw new Error(\'Columns in A should be the same as the number of rows in B\');\r\n        }\r\n        var product = new FloatMatrix(a._height, b._width);\r\n        for (var i = 0; i < product._height; i++) {\r\n            for (var j = 0; j < b._width; j++) {\r\n                for (var k = 0; k < a._width; k++) {\r\n                    product.set(i, j, product.get(i, j) + a.get(i, k) * b.get(k, j));\r\n                }\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let width = native[0].length;\r\n        let matrix = new FloatMatrix(height, width);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    toNative() {\r\n        let native = [];\r\n        for (var i = 0; i < this._height; i++) {\r\n            native[i] = [];\r\n            for (var j = 0; j < this._width; j++) {\r\n                native[i][j] = this.get(i, j);\r\n            }\r\n        }\r\n        return native;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/matrix.ts\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE: \r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix3 extends FloatMatrix {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([\r\n            2 / width, 0, 0,\r\n            0, -2 / height, 0,\r\n            -1, 1, 1,\r\n        ]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1,\r\n        ]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([\r\n            sx, 0, 0,\r\n            0, sy, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3\'s \r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here, \r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00, -d * t10, d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix4 extends FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    clone() {\r\n        return Matrix4.newCopy(this);\r\n    }\r\n    multiplied(other) {\r\n        // NOTE: i swapped a and b, this makes more sense to me, but i could be wrong about it...\r\n        const a = other.data;\r\n        const b = this.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    multiply(other) {\r\n        this.data = this.multiplied(other).data;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = 2 * near / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 * near / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            tx, ty, tz, 1\r\n        ]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix \r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([\r\n            sx, 0, 0, 0,\r\n            0, sy, 0, 0,\r\n            0, 0, sz, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new vector_Vector3(data[0], data[1], data[2]);\r\n    }\r\n    multiplyVectors(other) {\r\n        // dumb way\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = other.getVector(i);\r\n            vec = this.multiplyVector(vec);\r\n            other.setVector(i, vec);\r\n        }\r\n        return other;\r\n        // smart way\r\n        // let matrix = new Vector3Array(other.count());\r\n        // // for every row\r\n        // for (var r = 0; r < other.count(); r++) {\r\n        //     // for every item in row\r\n        //     for (var c = 0; c < 3; ++c) {\r\n        //         let item = 0.0;\r\n        //         for (var j = 0; j < 4; ++j) {\r\n        //             item += other.get(r, c) * this.get(j, c);\r\n        //         }\r\n        //         matrix.set(r, c, item);\r\n        //     }\r\n        // }\r\n        // other.data = matrix.data;\r\n        return other;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/vector.ts\n// author: \tJos Feenstra\r\n// inspiration from Three.js\r\n// note: \trecycle the class as much as possble, building a new class is expensive,\r\n// \t\t\tespecially in javascript\r\n// todo: \tBIJ NADER INZIEN: dont go the copy route. rewrite this in a more functional way creating new classes is expensive, but we really need immutable vectors. \r\n// \t\t\tthese types of consistent vectors are only useful in niche cases, and complitate a lot of common cases. \r\n\r\n\r\nclass vector_Vector3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new vector_Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new vector_Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new vector_Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    static fromLerpWeights(p1, p2, tP1, tP2, t) {\r\n        if (Math.abs(t - tP1) < 0.00001)\r\n            return (p1);\r\n        if (Math.abs(t - tP2) < 0.00001)\r\n            return (p2);\r\n        if (Math.abs(tP1 - tP2) < 0.00001)\r\n            return (p1);\r\n        let mu = (t - tP1) / (tP2 - tP1);\r\n        return new vector_Vector3(p1.x + mu * (p2.x - p1.x), p1.y + mu * (p2.y - p1.y), p1.z + mu * (p2.z - p1.z));\r\n    }\r\n    // #endregion\r\n    // #region defaults \r\n    static zero() {\r\n        return new vector_Vector3(0, 0, 0);\r\n    }\r\n    ;\r\n    static unitX() {\r\n        return new vector_Vector3(1, 0, 0);\r\n    }\r\n    ;\r\n    static unitY() {\r\n        return new vector_Vector3(0, 1, 0);\r\n    }\r\n    ;\r\n    static unitZ() {\r\n        return new vector_Vector3(0, 0, 1);\r\n    }\r\n    ;\r\n    // #endregion\r\n    // #region basics\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return new vector_Vector3(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    added(v) {\r\n        return new vector_Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new vector_Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x,\r\n            this.y -= v.y,\r\n            this.z -= v.z;\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case (0): return this.x;\r\n            case (1): return this.y;\r\n            case (2): return this.z;\r\n            case (3): return 1;\r\n            default: throw "nope";\r\n        }\r\n    }\r\n    scaled(v) {\r\n        return new vector_Vector3(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    divVector(vector) {\r\n        return new vector_Vector3(this.x / vector.x, this.y / vector.y, this.z / vector.z);\r\n    }\r\n    dived(value) {\r\n        return new vector_Vector3(this.x / value, this.y / value, this.z / value);\r\n    }\r\n    div(value) {\r\n        this.x /= value,\r\n            this.y /= value,\r\n            this.z /= value;\r\n        return this;\r\n    }\r\n    minimumed(other) {\r\n        return new vector_Vector3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));\r\n    }\r\n    maximumed(other) {\r\n        return new vector_Vector3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));\r\n    }\r\n    clamped(min, max) {\r\n        return new vector_Vector3(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\r\n    }\r\n    clampScalared(min, max) {\r\n        return new vector_Vector3(clamp(this.x, min, max), clamp(this.y, min, max), clamp(this.z, min, max));\r\n    }\r\n    clampLengthed(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floored() {\r\n        return new vector_Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n    ceiled() {\r\n        return new vector_Vector3(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\r\n    }\r\n    rounded() {\r\n        return new vector_Vector3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    roundedToZero() {\r\n        return new vector_Vector3((this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x), (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y), (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z));\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    negated() {\r\n        return new vector_Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        return new vector_Vector3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    isNormal() {\r\n        return Math.abs(this.length() - 1) < Const.TOLERANCE;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x)\r\n            + Math.abs(this.y - v.y)\r\n            + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new vector_Vector3((other.x - this.x) * alpha, (other.y - this.y) * alpha, (other.z - this.z) * alpha);\r\n    }\r\n    // #endregion\r\n    // #region math specific \r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector \r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectedOnPlane(normal) {\r\n        // project a vector \r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.minimumed(_vector);\r\n    }\r\n    mirrored(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.minimumed(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n    rotated(axis, angle) {\r\n        let mat = Matrix4.newAxisRotation(axis, angle);\r\n        return mat.multiplyVector(this);\r\n    }\r\n}\r\nconst _vector = new vector_Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    // static from2Pt(from: Vector2, to: Vector2) : Vector2 {\r\n    // \treturn new Vector2(\r\n    // \t\tfrom.x - to.x,\r\n    // \t\tfrom.y - to.y\r\n    // \t)\r\n    // }\r\n    static fromCircle(center, radius, theta) {\r\n        return new Vector2(center.x + radius * Math.sin(theta), center.y + radius * Math.cos(theta));\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    to3D() {\r\n        return new vector_Vector3(this.x, this.y, 0);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    added(v) {\r\n        return new Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    scaled(v) {\r\n        return new Vector2(this.x * v, this.y * v);\r\n    }\r\n    divVector(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    dived(v) {\r\n        return new Vector2(this.x / v, this.y / v);\r\n    }\r\n    minimum(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    maximum(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    lengthSquared() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        let dx = this.x - v.x;\r\n        let dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector2(this.x + (other.x - this.x) * alpha, this.y + (other.y - this.y) * alpha);\r\n    }\r\n    // calculate the \'triangle sign\' of three points. Can be used to determine clockwise & counter clockwise\r\n    sign(b, c) {\r\n        return ((this.x - c.x) * (b.y - c.y)) - ((b.x - c.x) * (this.y - c.y));\r\n    }\r\n    // use dot product to project this vector on the other vector\r\n    projectOnVector(other) {\r\n        const denominator = other.lengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n}\r\nfunction clamp(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nfunction radToDeg(r) {\r\n    return r * 180 / Math.PI;\r\n}\r\nfunction degToRad(d) {\r\n    return d * Math.PI / 180;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/vector-array.ts\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3, \r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n// \r\n// NOTE:    all these small wrappers might not be good pratice, but I \r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass Vector2Array extends FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    toVector3Array() {\r\n        let array = new vector_array_Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new Vector2Array(this._height);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n}\r\nclass vector_array_Vector3Array extends FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new vector_array_Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let matrix = new vector_array_Vector3Array(height);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    fillFromList(vecs) {\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            this.data[i * 3] = vecs[i].x;\r\n            this.data[i * 3 + 1] = vecs[i].y;\r\n            this.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            vec = callbackfn(vec, i);\r\n            if (vec instanceof vector_Vector3) {\r\n                this.setVector(i, vec);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new vector_Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                clone.set(i, j, this.get(i, j));\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    clone() {\r\n        let clone = new vector_array_Vector3Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    mean() {\r\n        // the mean vector of a series of vectors\r\n        let sum = vector_Vector3.zero();\r\n        let count = this.count();\r\n        for (let i = 0; i < count; i++) {\r\n            sum.x += this.data[i * 3];\r\n            sum.y += this.data[i * 3 + 1];\r\n            sum.z += this.data[i * 3 + 2];\r\n        }\r\n        return sum.scale(1 / count);\r\n    }\r\n    average() {\r\n        return this.mean();\r\n    }\r\n    closestId(point) {\r\n        let lowScore = Infinity;\r\n        let id = -1;\r\n        this.forEach((v, i) => {\r\n            let disSquared = point.disToSquared(v);\r\n            if (disSquared < lowScore) {\r\n                lowScore = disSquared;\r\n                id = i;\r\n            }\r\n        });\r\n        return id;\r\n    }\r\n    closestIds(point, n) {\r\n        // O(m*n)... TODO implement quicksort \r\n        let ids = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let lowScore = Infinity;\r\n            let id = -1;\r\n            this.forEach((v, i) => {\r\n                if (ids.includes(id))\r\n                    return;\r\n                let disSquared = point.disToSquared(v);\r\n                if (disSquared < lowScore) {\r\n                    lowScore = disSquared;\r\n                    id = i;\r\n                }\r\n            });\r\n            ids.push(id);\r\n        }\r\n        return ids;\r\n    }\r\n}\r\nfunction getGeneralFloatMatrix(vectors) {\r\n    if (vectors instanceof Vector2Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors instanceof vector_array_Vector3Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors[0] instanceof Vector2) {\r\n        return Vector2Array.fromList(vectors);\r\n    }\r\n    else {\r\n        return vector_array_Vector3Array.fromList(vectors);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/mesh.ts\n// Mesh.Ts\r\n// Purpose: obj class for dealing with that specific filetype, and meshes in general\r\n// Author: Jos Feenstra\r\n\r\n\r\n// TODO make distinctions between\r\n// - PureMesh (only verts & links)\r\n// - NavMesh | TopoMesh (mesh which is topologically sound) \r\n// - DisplayMesh (PureMesh + uvs, texture, normals, material, etc...)\r\n// a very pure idea of a mesh : Vertices + links between vertices. \r\n// Could be anything with these properties.\r\nclass PureMesh {\r\n    constructor(verts, links) {\r\n        this.verts = verts;\r\n        this.links = links;\r\n    }\r\n    static fromEmpty() {\r\n        return new PureMesh(new Vector3Array(0), new IntMatrix(0, 0));\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.links.count();\r\n        }\r\n        let verts = new Vector3Array(vertCount);\r\n        let links = new IntMatrix(3, faceCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return new PureMesh(verts, links);\r\n    }\r\n}\r\nclass DisplayMesh {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        this.texture = undefined;\r\n        this.verts = new vector_array_Vector3Array(vertCount);\r\n        this.norms = new vector_array_Vector3Array(normCount);\r\n        this.uvs = new Vector2Array(uvCount);\r\n        this.faces = new int_matrix_IntMatrix(faceCount, 3);\r\n        this.faces.fill(-1);\r\n        this.texture = texture;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the \r\n        // Array class. \r\n        let mesh = new DisplayMesh(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        mesh.verts.fillWith(verts);\r\n        mesh.norms.fillWith(norms);\r\n        mesh.uvs.fillWith(uvs);\r\n        mesh.faces.fillWith(faces);\r\n        return mesh;\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = cube.getCorners();\r\n        // we cant handle quads yet \r\n        let faces = [];\r\n        for (let face of cubeFaces) {\r\n            faces.push(...quadToTri(face));\r\n        }\r\n        let mesh = new DisplayMesh(8, 0, 0, cubeFaces.length * 2);\r\n        mesh.verts.fillFromList(verts);\r\n        mesh.faces.setData(faces);\r\n        return mesh;\r\n    }\r\n    static fromRect(rect) {\r\n        let verts = rect.getCorners();\r\n        // we cant handle quads yet \r\n        let faces = [];\r\n        faces.push(...quadToTri(cubeFaces[0]));\r\n        let mesh = new DisplayMesh(8, 0, 0, cubeFaces.length * 2);\r\n        mesh.verts.fillFromList(verts);\r\n        mesh.faces.setData(faces);\r\n        return mesh;\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.faces.count();\r\n        }\r\n        let joined = new DisplayMesh(vertCount, 0, 0, faceCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                joined.verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.faces.count(); i++) {\r\n                let face = mesh.faces.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                joined.faces.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.faces.count();\r\n        }\r\n        return joined;\r\n    }\r\n    setTexture(texture) {\r\n        this.texture = texture;\r\n    }\r\n    exportToObj(path) {\r\n        throw "todo";\r\n    }\r\n}\r\n;\r\n// ================ Help ==================\r\n// 0 ------- 1\r\n// | \\     / |\r\n// |  4---5  |\r\n// |  |   |  |\r\n// |  6---7  |\r\n// | /     \\ | \r\n// 2 ------- 3\r\nconst cubeFaces = [\r\n    [0, 1, 3, 2],\r\n    [4, 0, 2, 6],\r\n    [1, 0, 4, 5],\r\n    [1, 5, 7, 3],\r\n    [2, 3, 7, 6],\r\n    [5, 4, 6, 7],\r\n];\r\nfunction quadToTri(abcd) {\r\n    return [\r\n        abcd[0], abcd[1], abcd[2],\r\n        abcd[0], abcd[2], abcd[3]\r\n    ];\r\n}\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how \r\n    // many vertices or faces well get. \r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float \r\n    let faces = []; // 9 long ints, u16\'s should suffice. \r\n    // note : this is very inefficient, but it\'ll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split(\'\\n\');\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === \'\' || line.startsWith(\'#\')) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case \'v\':\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vn\':\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vt\':\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'f\':\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn(\'unhandled keyword:\', keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    console.log("number of vertices: " + verts.length / 3);\r\n    console.log("number of faces: " + faces.length / 3);\r\n    console.log("number of uvs: " + uvs.length / 2);\r\n    console.log("number of norms: " + norms.length / 3);\r\n    let mesh = DisplayMesh.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face. \r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split(\'/\');\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw "invalid face found when processing";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal        \r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/domwrappers.ts\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log("setting up drag events...");\r\n    canvas.addEventListener(\'dragenter\', function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("entering entering...");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener(\'dragover\', function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("over drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\'dragleave\', function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("leaving drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\'drop\', function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then(imageData => resolve(imageData), error => reject(error));\r\n    });\r\n}\r\nfunction AddSlider(context, min = 0, max = 1, step = 0.01, start = 0.5, onchangeEvent) {\r\n    throw "TODO!";\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement(\'img\');\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement(\'canvas\');\r\n    ;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext(\'2d\');\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/img/Image.ts\n// image.ts\r\n// author: Jos Feenstra\r\n// purpose: wrapper around the ImageData class, \r\n// - in order to get more functionality out of it\r\n// \r\n// note: named GeonImage to not collide with Image classes.\r\n// TODO : x and y are not the same as i and j, and used inconsistently.\r\n// fix this. \r\nconst acceptedKernels = (/* unused pure expression or super */ null && ([3, 5, 7, 9]));\r\nclass GeonImage {\r\n    constructor(width, height, pixelSize = 4) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixelSize = pixelSize;\r\n        this.data = new Uint8ClampedArray(this.width * this.height * this.pixelSize);\r\n        this.data.fill(0);\r\n    }\r\n    static fromImageData(id) {\r\n        let image = new GeonImage(id.width, id.height);\r\n        image.setData(id.data);\r\n        return image;\r\n    }\r\n    toImageData() {\r\n        // imagedata requires pixelsize of 4.\r\n        if (this.pixelSize != 4)\r\n            throw "pixelsize must be 4 for toImageData to work";\r\n        return new ImageData(this.data, this.width, this.height);\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this.height * this.width * this.pixelSize))\r\n            throw "data.length does not match width * height ";\r\n        this.data = data;\r\n    }\r\n    clone() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        image.setData(this.data);\r\n        return image;\r\n    }\r\n    fill(pixel) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, pixel);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    fillEvery(filler) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, filler());\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    set(x, y, pixel) {\r\n        // if (x > this.width || x < 0) throw "out of bounds";\r\n        // if (y > this.height || y < 0) throw "out of bounds";\r\n        // for(let i = 0 ; i < this.pixelSize; i++) {\r\n        //     this.data[this.pixelSize * (y * this.width + x) + i] = pixel[i];\r\n        // }\r\n        this.data[4 * (y * this.width + x)] = pixel[0];\r\n        this.data[4 * (y * this.width + x) + 1] = pixel[1];\r\n        this.data[4 * (y * this.width + x) + 2] = pixel[2];\r\n        this.data[4 * (y * this.width + x) + 3] = pixel[3];\r\n    }\r\n    get(x, y) {\r\n        // if (x > this.width || x < 0) throw "out of bounds";\r\n        // if (y > this.height || y < 0) throw "out of bounds";\r\n        // let pixel = []; // \r\n        // for(let i = 0 ; i < this.pixelSize; i++) {\r\n        //     pixel.push(this.pixelSize * (y * this.width + x) + i);\r\n        // }\r\n        // return pixel;\r\n        return [\r\n            this.data[4 * (y * this.width + x)],\r\n            this.data[4 * (y * this.width + x) + 1],\r\n            this.data[4 * (y * this.width + x) + 2],\r\n            this.data[4 * (y * this.width + x) + 3]\r\n        ];\r\n    }\r\n    flipHor() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                let jMirror = this.width - 1 - j;\r\n                image.set(j, i, this.get(jMirror, i));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    flipVer() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            let iMirror = this.height - 1 - i;\r\n            for (let j = 0; j < this.width; j++) {\r\n                image.set(j, i, this.get(j, iMirror));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    applyKernel(kernel) {\r\n        // determine kernel size\r\n        let size = kernel.count();\r\n        let radius = (size / 2) - 0.5;\r\n        let image = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                let pixel = this.getWithKernel(i, j, kernel, radius);\r\n                image.set(i - radius, j - radius, pixel);\r\n            }\r\n        }\r\n        return image; // succes \r\n    }\r\n    getMinMax() {\r\n        // get the minimum and maximum pixel value\r\n        // assumes pixelsize = 1\r\n        return [\r\n            Math.min(...this.data),\r\n            Math.max(...this.data)\r\n        ];\r\n    }\r\n    applyThreshold(lower, upper) {\r\n        return this.apply((x, y) => {\r\n            let pixel = this.get(x, y);\r\n            if (pixel[0] < lower) {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            else if (pixel[0] > upper) {\r\n                return [255, 255, 255, 255];\r\n            }\r\n            else {\r\n                return pixel;\r\n            }\r\n        });\r\n    }\r\n    apply(filler) {\r\n        let copy = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                copy.set(x, y, filler(x, y));\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    applyNMS() {\r\n        // determine kernel size\r\n        let size = 3;\r\n        let radius = (size / 2) - 0.5;\r\n        let copy = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                // let pixel = this.getWithKernel(i, j, kernel, radius)\r\n                // copy.set(i-radius, j-radius, pixel);\r\n            }\r\n        }\r\n        // img.eachPixel(3, function(x, y, c, n) {\r\n        //     if (n[1][1] > n[0][1] && n[1][1] > n[2][1]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][2] && n[1][1] > n[2][0]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[1][0] && n[1][1] > n[1][2]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][0] && n[1][1] > n[2][2]) {\r\n        //         return copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         return copy.data[x][y] = 0;\r\n        //     }\r\n        // });\r\n        return copy;\r\n    }\r\n    getWithKernel(i, j, kernel, radius) {\r\n        // kernel space\r\n        let sum = [0, 0, 0, 255];\r\n        let [dimx, dimy] = kernel.getDimensions();\r\n        for (let ki = 0; ki < dimx; ki++) {\r\n            for (let kj = 0; kj < dimy; kj++) {\r\n                let weight = kernel.get(ki, kj);\r\n                let pixel = this.get(i + ki - radius, j + kj - radius);\r\n                for (let i = 0; i < 3; i++) {\r\n                    sum[i] += pixel[i] * weight;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    setAplha(a) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                this.set(x, y, [pixel[0], pixel[1], pixel[2], a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        // scale the image to a new width and height, using nearest neighbour\r\n        return this.resize(Math.round(this.width * scaleX), Math.round(this.height * scaleY));\r\n    }\r\n    resize(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        const x_factor = (1 / image.width) * old.width;\r\n        const y_factor = (1 / image.height) * old.height;\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let pixel = this.get(Math.round(x * x_factor), Math.round(y * y_factor));\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    trimWithDomain(dom) {\r\n        const x1 = Math.round(dom.x.t0);\r\n        const x2 = Math.round(dom.x.t1);\r\n        const y1 = Math.round(dom.y.t0);\r\n        const y2 = Math.round(dom.y.t1);\r\n        return this.trim(x1, y1, x2, y2);\r\n    }\r\n    trim(x1, y1, x2, y2) {\r\n        // return a hardcopy of this particular window\r\n        const imageWidth = x2 - x1;\r\n        const imageHeight = y2 - y1;\r\n        const image = new GeonImage(imageWidth, imageHeight, this.pixelSize);\r\n        for (let y = 0; y < imageHeight; y++) {\r\n            for (let x = 0; x < imageWidth; x++) {\r\n                let pixel = this.get(x + x1, y + y1);\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toGreyscale() {\r\n        if (this.pixelSize != 4)\r\n            throw "please, only use this when pixelsize is 4";\r\n        let image = new GeonImage(this.width, this.height, 4);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                let avg = (pixel[0] + pixel[1] + pixel[2]) / 3;\r\n                image.set(x, y, [avg, avg, avg, 255]);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toRGBA() {\r\n        // if (this.pixelSize != 1) throw "please, only use this when pixelsize is 1"\r\n        return this;\r\n        // let image = new GeonImage(this.width, this.height, 4);\r\n        // for (let y = 0; y < this.height; y++) {\r\n        //     for (let x = 0; x < this.width; x++) {\r\n        //         let pixel = this.get(x,y);\r\n        //         let val = pixel[0];\r\n        //         image.set(x, y, [val, val, val, 255]);\r\n        //     }\r\n        // }\r\n        // return image;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/scan-data.ts\n// BellusData.ts \r\n// \r\n// author: Jos Feenstra\r\n// purpose : \r\n// - wrapper around all data gathered from Bellus3D.\r\n// - do all file -> object convertions here.         \r\nvar scan_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass BellusScanData {\r\n    constructor(landmarkData, texture, mesh, front, settings) {\r\n        this.landmarkData = landmarkData;\r\n        this.texture = texture;\r\n        this.mesh = mesh;\r\n        this.front = front;\r\n        this.settings = settings;\r\n        this.landmarks = this.getLandmarks2f();\r\n        // this.landmarks3 = this.getLandmarks3f(); // NOTE - we will not use the bellus 3d landmarks. \r\n        // they are located within a uncypherable space\r\n    }\r\n    static fromFileList(files, settings) {\r\n        return scan_data_awaiter(this, void 0, void 0, function* () {\r\n            // assign the correct files.\r\n            let jsonFile;\r\n            let textureFile;\r\n            let objFile;\r\n            let frontFile;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let file = files.item(i);\r\n                let name = file.name;\r\n                console.log(`processing ${name}...`);\r\n                switch (name) {\r\n                    case \'facelandmarks.json\':\r\n                        jsonFile = file;\r\n                        break;\r\n                    case \'head3d.jpg\':\r\n                        textureFile = file;\r\n                        break;\r\n                    case \'head3d.obj\':\r\n                        objFile = file;\r\n                        break;\r\n                    case \'image.jpg\':\r\n                        frontFile = file;\r\n                        break;\r\n                }\r\n            }\r\n            return yield new Promise(function (resolve, reject) {\r\n                return scan_data_awaiter(this, void 0, void 0, function* () {\r\n                    if (jsonFile == undefined ||\r\n                        textureFile == undefined ||\r\n                        objFile == undefined ||\r\n                        frontFile == undefined) {\r\n                        alert("give me exactly one .json, one .ojb, and one .jpg file please!");\r\n                        reject();\r\n                    }\r\n                    else {\r\n                        console.log("converting files to usable objects...");\r\n                        let json = yield loadJSONFromFile(jsonFile);\r\n                        let texture = yield loadImageFromFile(textureFile);\r\n                        let objtext = yield loadTextFromFile(objFile);\r\n                        let mesh = meshFromObj(objtext);\r\n                        let front = yield loadImageFromFile(frontFile);\r\n                        // flip texture horizontally\r\n                        let gi = GeonImage.fromImageData(texture);\r\n                        gi = gi.flipVer();\r\n                        mesh.setTexture(gi.toImageData());\r\n                        console.log("done! bellus scan loaded.");\r\n                        resolve(new BellusScanData(json, texture, mesh, front, settings));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    fromTextureToUVSpace(vectors) {\r\n        let [scaleY, scaleX] = this.getLandmarksImageSize();\r\n        console.log("scaling landmarks down by " + scaleX + ", " + scaleY);\r\n        let tf1 = Matrix4.newScaler(1 / scaleX, -1 / scaleY, 0);\r\n        let tf2 = Matrix4.newTranslation(0, 1, 0);\r\n        let tf = tf1.multiply(tf2);\r\n        return vectors.clone().transform(tf);\r\n    }\r\n    getLandmarksImageSize() {\r\n        // image sizes as registered in the \'facelandmarks\' json.\r\n        let data = this.landmarkData.ImageSize;\r\n        return [data[0], data[1]];\r\n    }\r\n    getLandmarks2f() {\r\n        // 2d landmarks as registered in the \'facelandmarks\' json\r\n        let data = this.landmarkData.Point2f;\r\n        let size = data.cols;\r\n        let landmarks = new vector_array_Vector3Array(data.data.length / 2);\r\n        landmarks.fillWith(data.data, 2);\r\n        return landmarks;\r\n    }\r\n}\r\nclass NextcloudScanData {\r\n    // data to be found in the json\r\n    constructor(landmarkData, texture, mesh, settings, json) {\r\n        this.landmarkData = landmarkData;\r\n        this.texture = texture;\r\n        this.mesh = mesh;\r\n        this.settings = settings;\r\n        this.json = json;\r\n        this.readJson(json);\r\n    }\r\n    readJson(json) {\r\n        this.eyePoints = vector_array_Vector3Array.fromNative(json.pupil_pts);\r\n        this.eyePointsEdited = vector_array_Vector3Array.fromNative(json.pupil_pts_edited);\r\n    }\r\n    static fromFileList(files, settings) {\r\n        return scan_data_awaiter(this, void 0, void 0, function* () {\r\n            1;\r\n            // assign the correct files.\r\n            let textFile;\r\n            let textureFile;\r\n            let objFile;\r\n            let materialFile;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let file = files.item(i);\r\n                let name = file.name;\r\n                console.log(`processing ${name}...`);\r\n                switch (name) {\r\n                    case \'scaninfo.txt\':\r\n                        textFile = file;\r\n                        break;\r\n                    case \'head3d.jpg\':\r\n                        textureFile = file;\r\n                        break;\r\n                    case \'head3d.obj\':\r\n                        objFile = file;\r\n                        break;\r\n                    case \'head3d.obj.mtl\':\r\n                        materialFile = file;\r\n                        break;\r\n                }\r\n            }\r\n            return yield new Promise(function (resolve, reject) {\r\n                return scan_data_awaiter(this, void 0, void 0, function* () {\r\n                    if (textFile == undefined ||\r\n                        textureFile == undefined ||\r\n                        objFile == undefined ||\r\n                        materialFile == undefined) {\r\n                        alert("give me at least one .txt, one .obj, one .mtl and one .jpg file please!");\r\n                        reject();\r\n                    }\r\n                    else {\r\n                        console.log("converting files to usable objects...");\r\n                        // read json bit\r\n                        let jsonbit = "";\r\n                        let text = yield loadTextFromFile(textFile);\r\n                        let lines = text.split(\'\\n\');\r\n                        for (let i = 0; i < lines.length; i++) {\r\n                            let parts = lines[i].split(\';\');\r\n                            if (parts.length != 2)\r\n                                continue;\r\n                            if (parts[0] == \'FACEPOINTJSON\') {\r\n                                jsonbit = parts[1];\r\n                            }\r\n                        }\r\n                        if (jsonbit == "") {\r\n                            alert("I found a text file, but it does not contain FACEPOINTJSON key, or a valid embedded json");\r\n                            reject();\r\n                        }\r\n                        let json = JSON.parse(jsonbit);\r\n                        console.log("found the following json:");\r\n                        console.log(json);\r\n                        // read the rest\r\n                        let texture = yield loadImageFromFile(textureFile);\r\n                        let objtext = yield loadTextFromFile(objFile);\r\n                        let mesh = meshFromObj(objtext);\r\n                        // flip texture horizontally -> this is needed for some inexplicable reason\r\n                        // and put the flipped version in the mesh\r\n                        let gi = GeonImage.fromImageData(texture);\r\n                        gi = gi.flipVer();\r\n                        mesh.setTexture(gi.toImageData());\r\n                        // feedback\r\n                        console.log("done! bellus scan loaded.");\r\n                        // return\r\n                        resolve(new NextcloudScanData(json, texture, mesh, settings, json));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getTextureToUVMatrix() {\r\n        let [scaleY, scaleX] = [2048, 2048];\r\n        let tf1 = Matrix4.newScaler(1 / scaleX, -1 / scaleY, 0);\r\n        let tf2 = Matrix4.newTranslation(0, 1, 0);\r\n        return tf1.multiply(tf2);\r\n    }\r\n    fromTextureToUVSpace(vectors) {\r\n        let [scaleY, scaleX] = this.getLandmarksImageSize();\r\n        console.log("scaling landmarks down by " + scaleX + ", " + scaleY);\r\n        let tf1 = Matrix4.newScaler(1 / scaleX, -1 / scaleY, 0);\r\n        let tf2 = Matrix4.newTranslation(0, 1, 0);\r\n        let tf = tf1.multiply(tf2);\r\n        return vectors.clone().transform(tf);\r\n    }\r\n    getLandmarksImageSize() {\r\n        // image sizes as registered in the \'facelandmarks\' json.\r\n        let data = this.landmarkData.ImageSize;\r\n        return [data[0], data[1]];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/domain.ts\n// domain.ts\r\n// \r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//          \r\n\r\n\r\nclass Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        // if (t0 > t1) console.error("created a domain with negative size.");\r\n        // if (t0 == t1) console.warn("created a domain with size is 0.0. could cause problems");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain \'count\' number of times \r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of \'step\'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    // comform a number to the bound\r\n    comform(value) {\r\n        if (value < this.t0) {\r\n            return this.t0;\r\n        }\r\n        else if (value > this.t1) {\r\n            return this.t1;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nclass Domain2 {\r\n    constructor(x = new Domain(), y = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain2(Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new Domain2(new Domain(x0, x1), new Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new Domain2(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw "need 4 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners() {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass Domain3 {\r\n    constructor(x = new Domain(), y = new Domain(), z = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new Domain3(new Domain(x0, x1), new Domain(y0, y1), new Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain3(Domain.fromRadius(r), Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new Domain3(Domain.fromRadius(rx), Domain.fromRadius(ry), Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new Domain3(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)), Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw "need 6 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(matrix.multiplyVector(new Vector3(x, y, z)));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/statistics.ts\n// name:    statistics.ts\r\n// author:  Jos Feenstra\r\n// purpose: functionality and documentation of variance, \r\n//          covariance, eigen vectors, least squares, and other \r\n//          statistical operations.\r\n// source:  been a while since I did this, \r\n//          https://datascienceplus.com/understanding-the-covariance-matrix/ \r\n//          https://wiki.pathmind.com/eigenvector\r\n//          used to make sure the basics are correct :).\r\n// notes:   Whats the difference between a Principal Component and an Eigen vector? \r\n//          "Because eigenvectors trace the principal lines of force, and the axes of greatest variance and covariance illustrate where the data is most susceptible to change."\r\n\r\nclass Stat {\r\n    // calculate sum\r\n    static sum(x) {\r\n        let sum = 0;\r\n        for (let i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n        return sum;\r\n    }\r\n    // calculate average\r\n    static mean(x) {\r\n        return this.sum(x) / x.length;\r\n    }\r\n    // calculate variance\r\n    static variance(x) {\r\n        //σ^2x = (1/n−1) * n∑i=1 (x[i] – xAvr)^2\r\n        let n = x.length;\r\n        let avr = this.mean(x);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += Math.pow((x[i] - avr), 2);\r\n        }\r\n        return sum / (n - 1);\r\n    }\r\n    // calculate the standard deviation\r\n    static deviation(x) {\r\n        return Math.pow(this.variance(x), 0.5);\r\n    }\r\n    // calculate covariance\r\n    static covariance(x, y) {\r\n        if (x.length != y.length)\r\n            throw "this is not how covariance works...";\r\n        let n = x.length;\r\n        let xAvr = this.mean(x);\r\n        let yAvr = this.mean(y);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += (x[i] - xAvr) * (y[i] - yAvr);\r\n        }\r\n        return sum / (n - 1); // losing one degree of freedom\r\n    }\r\n    // calculate variance / covariance matrix\r\n    static cov(matrix) {\r\n        let size = matrix._width;\r\n        let cov = new FloatMatrix(size, size);\r\n        let columns = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            columns[i] = matrix.getColumn(i);\r\n        }\r\n        // matrix is symmertical, so only run through one half\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = i; j < size; j++) {\r\n                let value = this.covariance(columns[i], columns[j]);\r\n                cov.set(i, j, value);\r\n                cov.set(j, i, value);\r\n            }\r\n        }\r\n        return cov;\r\n    }\r\n    static eig(A) {\r\n        let results = this.svd(A);\r\n        return [results[1], results[2]];\r\n    }\r\n    /**\r\n     * Single Value Decomposition.\r\n     * Can be used for Eigen Value Decomposition\r\n     * from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970).\r\n     * Taken from numeric.js. not yet cleaned & optimized.\r\n     * https://en.wikipedia.org/wiki/Singular_value_decomposition\r\n     * @param  {FloatMatrix} A matrix to decompose, such as a covariance matrix\r\n     * @returns [U, ∑, V]\r\n     * U -> during EVD, these are the eigen vectors of A transposed, if im not mistaken\r\n     * ∑ -> during EVD, this are the eigen values\r\n     * V -> during EVD, the columns are eigen vectors\r\n     */\r\n    static svd(A) {\r\n        var prec = Math.pow(2, -52); // assumes double prec\r\n        var tolerance = 1.e-64 / prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n        var u = A.clone().toNative();\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n        if (m < n)\r\n            throw "Need more rows than columns";\r\n        var e = new Array(n);\r\n        var q = new Array(n);\r\n        for (i = 0; i < n; i++)\r\n            e[i] = q[i] = 0.0;\r\n        var v = rep([n, n], 0);\r\n        function pythag(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a * Math.sqrt(1.0 + (b * b / a / a));\r\n            else if (b == 0.0)\r\n                return a;\r\n            return b * Math.sqrt(1.0 + (a * a / b / b));\r\n        }\r\n        //rep function, [JF] : dont know what this does exactly...\r\n        function rep(s, v, k = 0) {\r\n            let n = s[k];\r\n            let ret = Array(n);\r\n            let i;\r\n            if (k === s.length - 1) {\r\n                for (i = n - 2; i >= 0; i -= 2) {\r\n                    ret[i + 1] = v;\r\n                    ret[i] = v;\r\n                }\r\n                if (i === -1) {\r\n                    ret[0] = v;\r\n                }\r\n                return ret;\r\n            }\r\n            for (i = n - 1; i >= 0; i--) {\r\n                ret[i] = rep(s, v, k + 1);\r\n            }\r\n            return ret;\r\n        }\r\n        //Householder\'s reduction to bidiagonal form\r\n        var f = 0.0;\r\n        var g = 0.0;\r\n        var h = 0.0;\r\n        var x = 0.0;\r\n        var y = 0.0;\r\n        var z = 0.0;\r\n        var s = 0.0;\r\n        for (i = 0; i < n; i++) {\r\n            e[i] = g;\r\n            s = 0.0;\r\n            l = i + 1;\r\n            for (j = i; j < m; j++)\r\n                s += (u[j][i] * u[j][i]);\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i] = f - g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = i; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n            }\r\n            q[i] = g;\r\n            s = 0.0;\r\n            for (j = l; j < n; j++)\r\n                s = s + u[i][j] * u[i][j];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i + 1];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i + 1] = f - g;\r\n                for (j = l; j < n; j++)\r\n                    e[j] = u[i][j] / h;\r\n                for (j = l; j < m; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += (u[j][k] * u[i][k]);\r\n                    for (k = l; k < n; k++)\r\n                        u[j][k] += s * e[k];\r\n                }\r\n            }\r\n            y = Math.abs(q[i]) + Math.abs(e[i]);\r\n            if (y > x)\r\n                x = y;\r\n        }\r\n        // accumulation of right hand gtransformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            if (g != 0.0) {\r\n                h = g * u[i][i + 1];\r\n                for (j = l; j < n; j++)\r\n                    v[j][i] = u[i][j] / h;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[i][k] * v[k][j];\r\n                    for (k = l; k < n; k++)\r\n                        v[k][j] += (s * v[k][i]);\r\n                }\r\n            }\r\n            for (j = l; j < n; j++) {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g = e[i];\r\n            l = i;\r\n        }\r\n        // accumulation of left hand transformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            l = i + 1;\r\n            g = q[i];\r\n            for (j = l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g != 0.0) {\r\n                h = u[i][i] * g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = u[j][i] / g;\r\n            }\r\n            else\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n        // diagonalization of the bidiagonal form\r\n        prec = prec * x;\r\n        for (k = n - 1; k != -1; k += -1) {\r\n            for (var iteration = 0; iteration < itmax; iteration++) { // test f splitting\r\n                var test_convergence = false;\r\n                for (l = k; l != -1; l += -1) {\r\n                    if (Math.abs(e[l]) <= prec) {\r\n                        test_convergence = true;\r\n                        break;\r\n                    }\r\n                    if (Math.abs(q[l - 1]) <= prec)\r\n                        break;\r\n                }\r\n                if (!test_convergence) { // cancellation of e[l] if l>0\r\n                    c = 0.0;\r\n                    s = 1.0;\r\n                    var l1 = l - 1;\r\n                    for (i = l; i < k + 1; i++) {\r\n                        f = s * e[i];\r\n                        e[i] = c * e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g = q[i];\r\n                        h = pythag(f, g);\r\n                        q[i] = h;\r\n                        c = g / h;\r\n                        s = -f / h;\r\n                        for (j = 0; j < m; j++) {\r\n                            y = u[j][l1];\r\n                            z = u[j][i];\r\n                            u[j][l1] = y * c + (z * s);\r\n                            u[j][i] = -y * s + (z * c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z = q[k];\r\n                if (l == k) { //convergence\r\n                    if (z < 0.0) { //q[k] is made non-negative\r\n                        q[k] = -z;\r\n                        for (j = 0; j < n; j++)\r\n                            v[j][k] = -v[j][k];\r\n                    }\r\n                    break; //break out of iteration loop and move on to next k value\r\n                }\r\n                if (iteration >= itmax - 1)\r\n                    throw \'Error: no convergence.\';\r\n                // shift from bottom 2x2 minor\r\n                x = q[l];\r\n                y = q[k - 1];\r\n                g = e[k - 1];\r\n                h = e[k];\r\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\r\n                g = pythag(f, 1.0);\r\n                if (f < 0.0)\r\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\r\n                else\r\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\r\n                // next QR transformation\r\n                c = 1.0;\r\n                s = 1.0;\r\n                for (i = l + 1; i < k + 1; i++) {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s * g;\r\n                    g = c * g;\r\n                    z = pythag(f, h);\r\n                    e[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = x * c + g * s;\r\n                    g = -x * s + g * c;\r\n                    h = y * s;\r\n                    y = y * c;\r\n                    for (j = 0; j < n; j++) {\r\n                        x = v[j][i - 1];\r\n                        z = v[j][i];\r\n                        v[j][i - 1] = x * c + z * s;\r\n                        v[j][i] = -x * s + z * c;\r\n                    }\r\n                    z = pythag(f, h);\r\n                    q[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = c * g + s * y;\r\n                    x = -s * g + c * y;\r\n                    for (j = 0; j < m; j++) {\r\n                        y = u[j][i - 1];\r\n                        z = u[j][i];\r\n                        u[j][i - 1] = y * c + z * s;\r\n                        u[j][i] = -y * s + z * c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n        for (i = 0; i < q.length; i++)\r\n            if (q[i] < prec)\r\n                q[i] = 0;\r\n        //sort eigenvalues\t\r\n        var temp;\r\n        for (i = 0; i < n; i++) {\r\n            for (j = i - 1; j >= 0; j--) {\r\n                if (q[j] < q[i]) {\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k = 0; k < u.length; k++) {\r\n                        temp = u[k][i];\r\n                        u[k][i] = u[k][j];\r\n                        u[k][j] = temp;\r\n                    }\r\n                    for (k = 0; k < v.length; k++) {\r\n                        temp = v[k][i];\r\n                        v[k][i] = v[k][j];\r\n                        v[k][j] = temp;\r\n                    }\r\n                    i = j;\r\n                }\r\n            }\r\n        }\r\n        return [FloatMatrix.fromNative(u),\r\n            new Float32Array(q),\r\n            FloatMatrix.fromNative(v),\r\n        ];\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/plane.ts\n// name:    plane.ts\r\n// author:  Jos Feenstra\r\n// purpose: definition of a 3d plane. \r\n// todo:    turn Center, Ihat, Jhat, Khat construction to an actual matrix\r\n\r\n\r\n\r\nclass Plane {\r\n    // _inverse!: Matrix4; // NOTE: currently im not caching this. Might be needed.\r\n    // NOTE : d is not really needed anymore...\r\n    constructor(m) {\r\n        this._matrix = m;\r\n    }\r\n    static fromPVV(a, v1, v2) {\r\n        // TODO check if we still need this -1 thing \r\n        let khat = v1.clone().cross(v2).normalize(); //.scale(-1);\r\n        let center = a.clone();\r\n        let ihat = v1.normalize();\r\n        let jhat = v1.clone().cross(khat);\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, khat);\r\n        return new Plane(mat);\r\n    }\r\n    static from3pt(a, b, c) {\r\n        let v1 = b.clone().sub(a);\r\n        let v2 = c.clone().sub(a);\r\n        return this.fromPVV(a, v1, v2);\r\n    }\r\n    static WorldXY() {\r\n        return Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitX(), vector_Vector3.unitY());\r\n    }\r\n    static WorldYZ() {\r\n        return Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitY(), vector_Vector3.unitZ());\r\n    }\r\n    static WorldXZ() {\r\n        return Plane.from3pt(vector_Vector3.zero(), vector_Vector3.unitX(), vector_Vector3.unitZ());\r\n    }\r\n    static fromLeastSquares(pts) {\r\n        let mean = pts.mean();\r\n        let cov = Stat.cov(pts);\r\n        let [eigValues, eigVectors] = Stat.eig(cov);\r\n        console.log(eigValues);\r\n        let biggestEigenVector = vector_Vector3.fromArray(eigVectors.getColumn(0));\r\n        let secondBiggestEigenVector = vector_Vector3.fromArray(eigVectors.getColumn(1));\r\n        return Plane.fromPVV(mean, biggestEigenVector, secondBiggestEigenVector);\r\n    }\r\n    static fromXYLeastSquares(pts) {\r\n        // quite specific, but this was needed.\r\n        let mean = pts.mean();\r\n        return Plane.WorldXY().transform(Matrix4.newTranslation(mean.x, mean.y, mean.z));\r\n    }\r\n    static planeMatrixFromVecs(c, i, j, k) {\r\n        return new Matrix4([\r\n            i.x, i.y, i.z, 0,\r\n            j.x, j.y, j.z, 0,\r\n            k.x, k.y, k.z, 0,\r\n            c.x, c.y, c.z, 1,\r\n        ]);\r\n    }\r\n    get ihat() { return vector_Vector3.fromArray(this._matrix.getRow(0)); }\r\n    get jhat() { return vector_Vector3.fromArray(this._matrix.getRow(1)); }\r\n    get khat() { return vector_Vector3.fromArray(this._matrix.getRow(2)); }\r\n    get center() { return vector_Vector3.fromArray(this._matrix.getRow(3)); }\r\n    get matrix() { return this._matrix.clone(); }\r\n    get normal() { return this.khat; }\r\n    get d() { return this.closestPoint(vector_Vector3.zero())[1]; }\r\n    set ihat(v) { this._matrix.setRow(0, [v.x, v.y, v.z, 0]); }\r\n    set jhat(v) { this._matrix.setRow(1, [v.x, v.y, v.z, 0]); }\r\n    set khat(v) { this._matrix.setRow(2, [v.x, v.y, v.z, 0]); }\r\n    set center(v) { this._matrix.setRow(3, [v.x, v.y, v.z, 1]); }\r\n    set matrix(m) { this._matrix = m; }\r\n    get inverse() { return this._matrix.inverse(); }\r\n    clone() {\r\n        return new Plane(this._matrix.clone());\r\n    }\r\n    transform(m) {\r\n        this._matrix = this._matrix.multiply(m);\r\n        return this;\r\n    }\r\n    move(origin) {\r\n        this.center = origin;\r\n        return this;\r\n    }\r\n    // NOTE: pulling is inefficient since i do not cache the inverse.\r\n    pullToPlane(p) {\r\n        return this.inverse.multiplyVector(p);\r\n    }\r\n    pushToWorld(p) {\r\n        return this.matrix.multiplyVector(p);\r\n    }\r\n    closestPoint(p) {\r\n        let pulled = this.pullToPlane(p);\r\n        let distance = pulled.z;\r\n        pulled.z = 0;\r\n        let vec = this.pushToWorld(pulled);\r\n        return [vec, distance];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/line-array.ts\n// name:    line-render-data.ts\r\n// author:  Jos Feenstra\r\n// purpose: represents an object which can be fed directly to a linerenderer.\r\n//          use it to not continuously have to calculate these aspects if the underlying object is unchanged.\r\n\r\n\r\n\r\n// represents a collection of multiple lines. These could form 1 polyline, but this is not a requirement\r\nclass LineArray {\r\n    constructor(verts, ids) {\r\n        this.verts = verts;\r\n        if (ids == undefined) {\r\n            this.ids = getDefaultIndices(verts.count());\r\n        }\r\n        else {\r\n            this.ids = ids;\r\n        }\r\n    }\r\n    // this assumes even vectices are \'from\' points, and odd vertices are \'to\' points\r\n    static fromLines(verts) {\r\n        let data = getGeneralFloatMatrix(verts);\r\n        return new LineArray(data);\r\n    }\r\n    // get all lines from a mesh\r\n    static fromMesh(mesh, uv = false) {\r\n        // 3 edges per face, 2 indices per edge\r\n        let count = mesh.faces.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < mesh.faces.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = mesh.faces.get(i, 0);\r\n            data[iData + 1] = mesh.faces.get(i, 1);\r\n            data[iData + 2] = mesh.faces.get(i, 1);\r\n            data[iData + 3] = mesh.faces.get(i, 2);\r\n            data[iData + 4] = mesh.faces.get(i, 2);\r\n            data[iData + 5] = mesh.faces.get(i, 0);\r\n        }\r\n        if (uv) {\r\n            return new LineArray(mesh.uvs, data);\r\n        }\r\n        else {\r\n            return new LineArray(mesh.verts, data);\r\n        }\r\n    }\r\n    // create lines as a grid centered at a plane \r\n    static fromGrid(plane, count, dis) {\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new vector_array_Vector3Array(count * 4);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new vector_Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new vector_Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new vector_Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new vector_Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines from a plane\r\n    static fromPlane(plane) {\r\n        let count = Const.PLANE_RENDER_LINECOUNT;\r\n        let dis = Const.PLANE_RENDER_LINEDISTANCE;\r\n        let disSmall = dis / 10;\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new vector_array_Vector3Array(count * 4 + 5 * 2);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new vector_Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new vector_Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new vector_Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new vector_Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // icon I  to show ihat\r\n        let iconLine1 = lines.count() - 10;\r\n        lines.setVector(iconLine1, new vector_Vector3(halfTotalSize + disSmall, -disSmall, 0));\r\n        lines.setVector(iconLine1 + 1, new vector_Vector3(halfTotalSize + disSmall * 4, disSmall, 0));\r\n        let iconLine2 = lines.count() - 8;\r\n        lines.setVector(iconLine2, new vector_Vector3(halfTotalSize + disSmall, disSmall, 0));\r\n        lines.setVector(iconLine2 + 1, new vector_Vector3(halfTotalSize + disSmall * 4, -disSmall, 0));\r\n        // icon II to show jhat\r\n        let iconLine3 = lines.count() - 6;\r\n        lines.setVector(iconLine3, new vector_Vector3(0, halfTotalSize + disSmall * 2.5, 0));\r\n        lines.setVector(iconLine3 + 1, new vector_Vector3(disSmall, halfTotalSize + disSmall * 4, 0));\r\n        let iconLine4 = lines.count() - 4;\r\n        lines.setVector(iconLine4, new vector_Vector3(disSmall, halfTotalSize + disSmall, 0));\r\n        lines.setVector(iconLine4 + 1, new vector_Vector3(-disSmall, halfTotalSize + disSmall * 4, 0));\r\n        // icon III to show khat / normal direction\r\n        let iconLine5 = lines.count() - 2;\r\n        lines.setVector(iconLine5, new vector_Vector3(0, 0, 0));\r\n        lines.setVector(iconLine5 + 1, new vector_Vector3(0, 0, dis));\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines representing a circle in 2d. use an optional matrix to \r\n    static fromCircle(c) {\r\n        let count = Const.CIRCLE_SEGMENTS;\r\n        // let count = 12;\r\n        let verts = new vector_array_Vector3Array(count);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            // radial fraction of a circle\r\n            let t = (i / count) * (Math.PI * 2);\r\n            verts.setVector(i, c.plane.pushToWorld(new vector_Vector3(Math.cos(t) * c.radius, Math.sin(t) * c.radius, 0)));\r\n        }\r\n        return new LineArray(verts, getPairIndices(count));\r\n    }\r\n    // turn a spline into a polyline, and render it\r\n    static fromSpline() {\r\n        throw "todo!";\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = vector_array_Vector3Array.fromList(cube.getCorners());\r\n        return new LineArray(verts);\r\n    }\r\n    static fromJoin(lines) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let idsCount = 0;\r\n        let vertCount = 0;\r\n        for (let line of lines) {\r\n            idsCount += line.ids.length;\r\n            vertCount += line.verts.count();\r\n        }\r\n        let verts = new vector_array_Vector3Array(vertCount);\r\n        let ids = new Uint16Array(idsCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let lineset of lines) {\r\n            for (let i = 0; i < lineset.verts.count(); i++) {\r\n                verts.setRow(accVerts + i, lineset.verts.getRow(i));\r\n            }\r\n            for (let i = 0; i < lineset.ids.length; i++) {\r\n                ids[accFaces + i] = lineset.ids[i] + accVerts;\r\n            }\r\n            accVerts += lineset.verts.count();\r\n            accFaces += lineset.ids.length;\r\n        }\r\n        return new LineArray(verts, ids);\r\n    }\r\n}\r\n// just get an int sequence from 0 to length. \r\nfunction getDefaultIndices(count) {\r\n    let data = new Uint16Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i] = i;\r\n    }\r\n    return data;\r\n}\r\nfunction getPairIndices(count) {\r\n    // given count of 3 => return 0,1 | 1,2 | 2,0\r\n    let length = count * 2;\r\n    let data = new Uint16Array(length);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i * 2] = i;\r\n        data[i * 2 + 1] = (i + 1) % count;\r\n    }\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/ray.ts\n// author:  Jos Feenstra\r\n// purpose: infinite Ray used for projection and similar actions\r\n// notes:   found some nice examples at https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld004.htm\r\n\r\nclass Ray {\r\n    // i do this to force intent : from points, or from normal. Both vector3, so otherwise confusing\r\n    constructor(origin, normal) {\r\n        this.origin = origin;\r\n        this.normal = normal.normalize();\r\n    }\r\n    static fromNormal(origin, normal) {\r\n        return new Ray(origin, normal);\r\n    }\r\n    static fromPoints(origin, through) {\r\n        return new Ray(origin, through.subbed(origin).normalize());\r\n    }\r\n    at(t) {\r\n        return this.origin.added(this.normal.scaled(t));\r\n    }\r\n    xPlane(plane) {\r\n        // ray : pt = rOrigin + t * rNormal\r\n        // plane : a, b, c, d -> pNormal(a, b, c) , d\r\n        // plane : P . N + d = 0;\r\n        // substitute for p: \r\n        // t = -(rOrigin . N + d) / (V . N)\r\n        let ray = this; // to be clear\r\n        return -(ray.origin.dot(plane.normal) + plane.d) / (ray.normal.dot(plane.normal));\r\n    }\r\n    toLine(length) {\r\n        let toPoint = this.at(length);\r\n        return LineArray.fromLines([this.origin, toPoint]);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/camera.ts\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding \r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1) {\r\n        this.angleAlpha = 0; // rotation x \r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = Vector2.zero();\r\n        // camera matrix properties\r\n        this.fov = 20. * Math.PI / 100.;\r\n        this.zFar = 10000.;\r\n        this.zNear = 0.1;\r\n        // other consts\r\n        this.speed = 1;\r\n        this.worldPlane = Plane.WorldXY();\r\n        this.pos = new vector_Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new vector_Vector3(0, 0, -z_offset);\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(canvas);\r\n    }\r\n    update(state) {\r\n        this.updateControls(state);\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(state.canvas);\r\n        this.updateClick(state);\r\n        if (state.IsKeyPressed("p")) {\r\n            console.log(this.pos);\r\n            console.log(this.offset);\r\n        }\r\n    }\r\n    lookat(position, target) {\r\n        // set matrices to the thing\r\n        let matrix = Matrix4.newLookAt(position, target, this.worldPlane.khat);\r\n    }\r\n    updateClick(state) {\r\n        // todo\r\n    }\r\n    updateControls(state) {\r\n        this.offset.z = this.z_offset - state.scrollValue * 0.5;\r\n        if (state.IsKeyPressed("Shift")) {\r\n            this.speed *= 2;\r\n            console.log("speed is now: " + this.speed);\r\n        }\r\n        if (state.IsKeyPressed("Control")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n            console.log("speed is now: " + this.speed);\r\n        }\r\n        // deal with mouse\r\n        let prevPos = this.mousePos.clone();\r\n        this.mousePos = state.mousePos.clone();\r\n        let delta = prevPos.clone().sub(this.mousePos);\r\n        this.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        if (state.mouseRightDown) {\r\n            this.angleAlpha += delta.y * 0.01;\r\n            this.angleBeta += delta.x * -0.01;\r\n        }\r\n        function relativeUnitY(angle) {\r\n            let m = Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitY());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitX());\r\n        }\r\n        if (state.IsKeyDown("s"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("w"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("a"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("d"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("q"))\r\n            this.pos.z += 0.01 * this.speed;\r\n        if (state.IsKeyDown("e"))\r\n            this.pos.z -= 0.01 * this.speed;\r\n    }\r\n    getCameraPoint() {\r\n        return this.worldMatrix.inverse().multiplyVector(new vector_Vector3(0, 0, 0));\r\n    }\r\n    getMouseWorldRay(canvasWidth, canvasHeight) {\r\n        // get a ray from origin through mousepos \r\n        // mouse unit screen position: \r\n        //       -------------- -0.5\r\n        //       |            |\r\n        //       |      .(0,0)|\r\n        //       |            | \r\n        //       -------------- 0.5\r\n        //     -0.72        0.72     \r\n        //    (0.72 = 0.5 * aspect)\r\n        // \r\n        let size = 0.5; // size indicator of the fustrum\r\n        let mp = this.mousePos;\r\n        let aspect = canvasWidth / canvasHeight;\r\n        let mouseUnitX = (-size + (mp.x / canvasWidth)) * aspect;\r\n        let mouseUnitY = -size + (mp.y / canvasHeight);\r\n        let f = size / Math.tan(this.fov / 2); // focal length \r\n        let invWorld = this.worldMatrix.inverse();\r\n        let origin = invWorld.multiplyVector(new vector_Vector3(0, 0, 0));\r\n        // TODO instead of doing this, just extract the x, y, and z columns of invWorld \r\n        let iDestiny = invWorld.multiplyVector(new vector_Vector3(1, 0, 0));\r\n        let jDestiny = invWorld.multiplyVector(new vector_Vector3(0, 1, 0));\r\n        let kDestiny = invWorld.multiplyVector(new vector_Vector3(0, 0, -1));\r\n        let ihat = iDestiny.sub(origin).normalize();\r\n        let jhat = jDestiny.sub(origin).normalize();\r\n        let khat = kDestiny.sub(origin).normalize();\r\n        let screenPoint = origin\r\n            .added(khat.scaled(f))\r\n            .add(ihat.scaled(mouseUnitX))\r\n            .add(jhat.scaled(-mouseUnitY));\r\n        return Ray.fromPoints(origin, screenPoint);\r\n    }\r\n    getWorldMatrix() {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        // translate so z means \'up\'\r\n        let yzFlip = new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n        // translated to fit screen\r\n        let position = Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = Matrix4.newXRotation(angleA);\r\n        let z_rotation = Matrix4.newZRotation(angleB);\r\n        let rotation = z_rotation.multiply(x_rotation);\r\n        // let transform = mOffset.multiply(rotation).multiply(position);\r\n        let transform = position.multiply(rotation).multiply(mOffset);\r\n        return transform;\r\n    }\r\n    getProjectionMatrix(canvas) {\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // let z_plane = -1. / Math.tan(pi / 8.);        \r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = Matrix4.newPerspective(this.fov, aspect, this.zNear, this.zFar);\r\n        return projection;\r\n    }\r\n    getTotalMatrix() {\r\n        return this.worldMatrix.multiply(this.projectMatrix);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/renderer.ts\n// webgl-helpers.ts\r\n// \r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this \r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth ||\r\n            gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n}\r\nfunction initWebglContext(canvas) {\r\n    let possiblyGl = canvas.getContext("webgl");\r\n    if (possiblyGl == undefined) {\r\n        console.log("webgl unavailable...");\r\n    }\r\n    let gl = possiblyGl;\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clearDepth(1.);\r\n    return gl;\r\n}\r\n// \r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed["StaticDraw"] = 0] = "StaticDraw";\r\n    DrawSpeed[DrawSpeed["DynamicDraw"] = 1] = "DynamicDraw"; // if you plan on using the \'set\' method every frame \r\n})(DrawSpeed || (DrawSpeed = {}));\r\n// the setup of a program containing 2 shader scripts\r\nfunction compileShader(gl, shaderSource, shaderType) {\r\n    var shader = gl.createShader(shaderType);\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        throw "could not compile shader:" + shaderSource + gl.getShaderInfoLog(shader);\r\n    }\r\n    return shader;\r\n}\r\nfunction createProgram(gl, vertexShader, fragmentShader) {\r\n    var program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        throw ("program failed to link:" + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n}\r\n;\r\nfunction createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n    var vertexShader = compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n    var fragmentShader = compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n    return createProgram(gl, vertexShader, fragmentShader);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/dot-renderer3.ts\n// jos feenstra\r\n\r\n\r\nclass DotRenderer3 extends Renderer {\r\n    constructor(gl, radius = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n        uniform float u_size;\r\n\r\n        attribute vec3 a_vertex;\r\n\r\n        void main() {\r\n            // Set the size of a rendered point.\r\n            gl_PointSize = u_size;\r\n\r\n            // Transform the location of the vertex.\r\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\r\n        }\r\n\r\n        `;\r\n        let fragmentSourceSquare = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        // vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        let fragmentSourceRound = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            if (distance(center, gl_PointCoord) > 0.5) {\r\n               discard;\r\n            }\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_size = gl.getUniformLocation(this.program, "u_size");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        this.color = color;\r\n        this.size = radius;\r\n        this.count = 0;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_vertex");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set(vectors, speed) {\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        // convert all possible entries to a general entry\r\n        let array = getGeneralFloatMatrix(vectors);\r\n        // from some other thing\r\n        this.count = array.count();\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, array._width, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, array.data, super.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, this.count);\r\n    }\r\n    setAndRender(gl, matrix, vectors) {\r\n        this.set(vectors, DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/simple-line-renderer.ts\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\nclass SimpleLineRenderer extends Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n\r\n        void main () {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n    }\r\n    set(gl, data, speed = DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = data.ids.length;\r\n        this.vertCount = data.verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data.verts.data, drawspeed);\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data.ids.buffer, drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(gl, matrix, data) {\r\n        this.set(gl, data, DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/app.ts\nclass App {\r\n    constructor(gl) {\r\n        // unique constructor    \r\n        this.gl = gl;\r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/img/kernels.ts\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated \r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, (kernel.get(i, j) / sum));\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new FloatMatrix(3, 3, [\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 1, 1\r\n]).forEachValue((i) => i * 1 / 9);\r\nKernels.SmoothKernel5 = new FloatMatrix(5, 5, [\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1\r\n]).forEachValue((v) => v * 1 / 25);\r\nKernels.Gauss5 = new FloatMatrix(5, 5, [\r\n    2, 4, 5, 4, 2,\r\n    4, 9, 12, 9, 4,\r\n    5, 12, 15, 12, 5,\r\n    4, 9, 12, 9, 4,\r\n    2, 4, 5, 4, 2,\r\n]).forEachValue((v) => v * 1 / 159);\r\nKernels.TestKernel = new FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    0, 0, 0,\r\n    -1, 0, 1,\r\n]);\r\nKernels.SobelLeft = new FloatMatrix(3, 3, [\r\n    1, 2, 1,\r\n    0, 0, 0,\r\n    -1, -2, -1,\r\n]);\r\nKernels.SobelRight = new FloatMatrix(3, 3, [\r\n    -1, -2, -1,\r\n    0, 0, 0,\r\n    1, 2, 1,\r\n]);\r\nKernels.SobelUp = new FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    2, 0, -2,\r\n    1, 0, -1,\r\n]);\r\nKernels.SobelDown = new FloatMatrix(3, 3, [\r\n    -1, 0, 1,\r\n    -2, 0, 2,\r\n    -1, 0, 1,\r\n]);\r\n\n;// CONCATENATED MODULE: ./src/data/hash-table.ts\n// note: this wont always work, but it does in most cases\r\n// todo: implement proper hashtable\r\nclass HashTable {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    stringify(key) {\r\n        return key.toString();\r\n    }\r\n    set(key, value) {\r\n        return this.data.set(this.stringify(key), value);\r\n    }\r\n    has(key) {\r\n        return this.data.has(this.stringify(key));\r\n    }\r\n    get(key) {\r\n        return this.data.get(this.stringify(key));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/line.ts\n\r\n\r\n// heavy weight Line class\r\nclass LineCurve2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.vector = to.subbed(this.from);\r\n        this.normal = this.vector.normalized();\r\n        this.bounds = new Domain(0, this.vector.length());\r\n        this.length = this.vector.length();\r\n    }\r\n    at(t, bounded = true) {\r\n        if (bounded)\r\n            t = this.bounds.comform(t);\r\n        return Vector2.fromLerp(this.from, this.to, t / this.length);\r\n    }\r\n    atNormal(t, bounded = true) {\r\n        if (bounded)\r\n            t = new Domain(0, 1).comform(t);\r\n        return Vector2.fromLerp(this.from, this.to, t);\r\n    }\r\n    closestPoint(point, bounded = true) {\r\n        const d = this.vector.length();\r\n        if (d === 0)\r\n            return;\r\n        let lineToPoint = point.subbed(this.from);\r\n        let dot = lineToPoint.dot(this.vector);\r\n        return this.at(dot, bounded);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/triangle.ts\n\r\n\r\n\r\n\r\nclass Triangle2 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return Vector2Array.fromList([this.a, this.b, this.c]);\r\n    }\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new vector_Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.scaled(bari.x);\r\n        let b = this.b.scaled(bari.y);\r\n        let c = this.c.scaled(bari.z);\r\n        return a.add(b).add(c);\r\n    }\r\n    closestPoint(point) {\r\n        // figure out roughly where the point is. \r\n        // note: \r\n        let ab = point.sign(this.a, this.b);\r\n        let bc = point.sign(this.b, this.c);\r\n        let ca = point.sign(this.c, this.a);\r\n        // if its fully within, return it!\r\n        if ((ab < 0 && bc < 0 && ca < 0) ||\r\n            (ab > 0 && bc > 0 && ca > 0)) {\r\n            console.log("fully inside!");\r\n            return point;\r\n        }\r\n        else {\r\n            let abs = Math.abs(ab);\r\n            let bcs = Math.abs(bc);\r\n            let cas = Math.abs(ca);\r\n            if (abs < bcs && abs < cas) {\r\n                // ab\r\n                return new LineCurve2(this.a, this.b).closestPoint(point);\r\n            }\r\n            else if (bcs < cas) {\r\n                // bc\r\n                return new LineCurve2(this.b, this.c).closestPoint(point);\r\n            }\r\n            else {\r\n                // ca\r\n                return new LineCurve2(this.c, this.a).closestPoint(point);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Triangle3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    getPlane() {\r\n        return Plane.from3pt(this.a, this.b, this.c);\r\n    }\r\n    to2D(plane = Plane.WorldXY()) {\r\n        return new Triangle2(plane.pullToPlane(this.a).to2D(), plane.pullToPlane(this.b).to2D(), plane.pullToPlane(this.c).to2D());\r\n    }\r\n    closestPoint(point) {\r\n        let plane = this.getPlane();\r\n        let [cp, _] = plane.closestPoint(point);\r\n        let planeCP = plane.pullToPlane(cp);\r\n        let planeTriangle = this.to2D(plane);\r\n        return point;\r\n    }\r\n    // Transcribed from Christer Ericson\'s Real-Time Collision Detection:\r\n    // http://realtimecollisiondetection.net/\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new vector_Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.clone().scale(bari.x);\r\n        let b = this.b.clone().scale(bari.y);\r\n        let c = this.c.clone().scale(bari.z);\r\n        return a.added(b).add(c);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/topo-mesh.ts\n\r\n\r\n\r\n\r\n\r\n\r\n// a mesh with topological information\r\nclass TopoMesh extends DisplayMesh {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new int_matrix_IntMatrix(this.faces.count(), 3);\r\n    }\r\n    static copyFromMesh(mesh) {\r\n        let topoMesh = new TopoMesh(mesh.verts.count(), mesh.norms.count(), mesh.uvs.count(), mesh.faces.count());\r\n        topoMesh.verts = mesh.verts.clone();\r\n        topoMesh.norms = mesh.norms.clone();\r\n        topoMesh.uvs = mesh.uvs.clone();\r\n        topoMesh.faces = mesh.faces.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        // this method fills this.neighborMap after data is loaded\r\n        // \r\n        let edges = new HashTable();\r\n        let pairs = new HashTable();\r\n        // 1 | per triangle\r\n        this.faces.forEachRow((f, faceIndex) => {\r\n            let faceEdges = [\r\n                [f[0], f[1]],\r\n                [f[1], f[2]],\r\n                [f[2], f[0]]\r\n            ];\r\n            faceEdges.forEach(e => {\r\n                // if (4, 1), orientation is True | if (1, 4), orientation is False\r\n                let orientation = e[0] > e[1];\r\n                // use this min max construction to only store one edge per triangle pair\r\n                // let edge: [number, number] = e.sort();\r\n                let edge = new Int32Array([Math.min(...e), Math.max(...e)]);\r\n                // console.log(edge);\r\n                if (!edges.has(edge)) {\r\n                    // orientation, first tr ID, second tr ID\r\n                    edges.set(edge, [orientation, faceIndex, -1]);\r\n                }\r\n                else {\r\n                    // an edge match is made!\r\n                    // console.log("matched!");\r\n                    let other = edges.get(edge);\r\n                    let nbOrientation = other[0];\r\n                    let nbIndex = other[1];\r\n                    other[2] = faceIndex;\r\n                    edges.set(edge, other); // edge is put away again, if an edge map is ever needed.\r\n                    // assign neighbours\r\n                    this.setNb(faceIndex, edge, nbIndex);\r\n                    this.setNb(nbIndex, edge, faceIndex);\r\n                    // use this info to fill self.pairs\r\n                    // if orientation != other orientation, edge is \'good\' -> False\r\n                    // else -> True, one of the neighbour triangles needs to be flipped\r\n                    let pair = [nbIndex, faceIndex];\r\n                    pair.sort();\r\n                    // pair = (Math.min(...pair), Math.max(...pair))\r\n                    if (orientation != nbOrientation)\r\n                        pairs.set(pair, false);\r\n                    else\r\n                        pairs.set(pair, true);\r\n                }\r\n            });\r\n        });\r\n        // Done. Give feedback\r\n        let count = 0;\r\n        // for pair in pairs.items():\r\n        //     if not pair: count +=1;\r\n        console.log("number of \'wrong\' face neighbours: ", count);\r\n        return;\r\n    }\r\n    /**\r\n     * Get the triangle based on a UV point somewhere on the mesh.\r\n     * Returns -1 if the point is not on the mesh TODO OR IF THE PATH HAS HOLES IN IT TODO FIX THIS!\r\n     * @param  {Vector2} point\r\n     * @returns triangleIndex, or -1 if failure\r\n     */\r\n    walkUV(point) {\r\n        // start where we last stopped\r\n        let faceIndex = this.lastTouched;\r\n        // make sure we never take more steps than triangles in the triangulation.\r\n        // this would mean something went wrong\r\n        let count = this.faces.count();\r\n        for (let _ = 0; _ < count; _++) {\r\n            // i dont know how, but if we accidentally landed outside of the mesh\r\n            if (faceIndex == -1) {\r\n                return -1;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                let j = (i + 1) % 3;\r\n                let face = this.faces.getRow(faceIndex);\r\n                let edge = [face[i], face[j]];\r\n                let b = this.uvs.getVector(edge[0]);\r\n                let c = this.uvs.getVector(edge[1]);\r\n                let sign = point.sign(b, c);\r\n                if (sign < 0) {\r\n                    faceIndex = this.getNb(faceIndex, edge);\r\n                    // if its ouside, return -1\r\n                    if (faceIndex == -1)\r\n                        return -1;\r\n                    // else: go there immidiately\r\n                    this.lastTouched = faceIndex;\r\n                    break;\r\n                }\r\n                // if this ran 3 times, the point must be within the triangle\r\n                if (i == 2)\r\n                    return faceIndex;\r\n            }\r\n        }\r\n        // something went wrong\r\n        return -1;\r\n    }\r\n    // find the faces closest to the point \r\n    // -1 if the mesh does not contain triangles\r\n    closestFaces(point) {\r\n        let closestVertexId = this.verts.closestId(point);\r\n        // get all face ids containing closestVertex, along with their centers\r\n        let closestFaces = [];\r\n        //let centers: Vector3[] = []\r\n        this.faces.forEachRow((tr, i) => {\r\n            if (tr.includes(closestVertexId)) {\r\n                closestFaces.push(i);\r\n                //let center = Vector3Array.fromList(this.getFacePoints(i, false)).average();\r\n                //centers.push(center);\r\n            }\r\n        });\r\n        // select the triangle with the closest baricenter\r\n        return closestFaces;\r\n    }\r\n    elevate(p) {\r\n        // \'elevate\' a point in UV space to vertex space using a barycentric remap   \r\n        // figure out where this point is located on the mesh\r\n        let face = this.walkUV(p);\r\n        if (face == -1) {\r\n            console.warn("got a point not on triangle...");\r\n            return new vector_Vector3(0, 0, 0);\r\n        }\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr2.toBarycentric(p);\r\n        return tr3.fromBarycentric(bari);\r\n    }\r\n    closestPoint(p) {\r\n        let faceIds = this.closestFaces(p);\r\n        let closestPoints = new vector_array_Vector3Array(faceIds.length);\r\n        faceIds.forEach((id, i) => {\r\n            let tr = this.getTriangle3(id);\r\n            let cp = tr.closestPoint(p);\r\n            closestPoints.setVector(i, cp);\r\n        });\r\n        // find the closest closest point \r\n        let id = closestPoints.closestId(p);\r\n        return [closestPoints.getVector(id), faceIds[id]];\r\n    }\r\n    // \'flatten\' a point in vertex space to uv space using a barycentric remap\r\n    // NOTE : this is not exactly a \'project to closest triangle\', something like that wouldnt always work\r\n    flatten(p, face) {\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr3.toBarycentric(p);\r\n        return tr2.fromBarycentric(bari);\r\n    }\r\n    // combo\r\n    flattenClosestPoint(p) {\r\n        let [cp, face] = this.closestPoint(p);\r\n        return this.flatten(cp, face);\r\n    }\r\n    getTriangle2(id) {\r\n        let p = this.getFacePoints(id, true);\r\n        return new Triangle2(p[0], p[1], p[2]);\r\n    }\r\n    getTriangle3(id) {\r\n        let p = this.getFacePoints(id, false);\r\n        return new Triangle3(p[0], p[1], p[2]);\r\n    }\r\n    setNb(faceIndex, commonEdge, nbIndex) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.faces.get(faceIndex, j))) {\r\n                this.neighborMap.set(faceIndex, j, nbIndex);\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.faces.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw "these are not actually neighbors!";\r\n    }\r\n    getNb(faceIndex, commonEdge) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.faces.get(faceIndex, j))) {\r\n                return this.neighborMap.get(faceIndex, j);\r\n            }\r\n        }\r\n        console.log(this.faces.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw "common edge does not match triangle index!";\r\n    }\r\n    getFacePoints(tr, uv) {\r\n        let pointIds = this.faces.getRow(tr);\r\n        if (uv) {\r\n            return [\r\n                this.uvs.getVector(pointIds[0]),\r\n                this.uvs.getVector(pointIds[1]),\r\n                this.uvs.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n        else {\r\n            return [\r\n                this.verts.getVector(pointIds[0]),\r\n                this.verts.getVector(pointIds[1]),\r\n                this.verts.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/circle2.ts\n\r\n\r\nclass Circle2 {\r\n    constructor(center, radius) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    // thank you mr Mitteldorf for making me remember how basic math works\r\n    // http://mathforum.org/library/drmath/view/53027.html\r\n    // calculate the centers of two circles, defined by two points and a radius\r\n    static centersFromPPR(a, b, radius) {\r\n        // throw new Error("Method not implemented.");\r\n        // get in between length and halfway point\r\n        let normal = b.clone().sub(a);\r\n        let dis = normal.length();\r\n        let middle = a.clone().add(b).scale(1 / 2);\r\n        // scalar length on mirror line (pythagoras)\r\n        let value = Math.pow(radius, 2) - Math.pow((dis / 2), 2);\r\n        if (value < -Const.TOLERANCE) {\r\n            // no sollution\r\n            return [];\r\n        }\r\n        else if (value < Const.TOLERANCE) {\r\n            // center roughly in the middle, so just return the middle\r\n            return [middle];\r\n        }\r\n        else {\r\n            // two circles possible:\r\n            let disToCenter = Math.pow((value), 0.5);\r\n            let normY = new Vector2(normal.y, -normal.x).normalize();\r\n            // move the middle point up and down\r\n            return [\r\n                middle.clone().add(normY.clone().scale(disToCenter)),\r\n                middle.clone().add(normY.clone().scale(-disToCenter)),\r\n            ];\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/ransac.ts\n\r\n\r\nfunction RansacCircle2d(points, iterations, radius, tolerance, seed, min_score, max_radius_deviation) {\r\n    //  Extract circle parameters from points in 2D space.\r\n    //  IN\r\n    //      - points : np.array[n, 2] -> sample points\r\n    //      - iterations : int -> how many times to repeat\r\n    //      - radius : float -> radius to create circles from\r\n    //      - tolerance : float -> point counts if within tolerance distance\r\n    //      - seed for randomization : int -> for random picking\r\n    //      - min_score : int -> if high_score is below min_score, its invalid\r\n    //      - num_scores : int -> if higher than one: use an average of the top x highscores for a more acurate result\r\n    //  OUT\r\n    //      - best circle, null if none passed the minimum score (\'failsave\')\r\n    //      - number of matches\r\n    //  Algorithm:\r\n    //  - iterate for MAX_TRIES times\r\n    //  - Pick 2 random \'points\'\r\n    //  - Construct two circles with \'radius\'\r\n    //  - per circle, per point in \'points\'\r\n    //    - if distance to circle < \'tolerance\'\r\n    //      - add 1 to score\r\n    //  - return the high score circle\r\n    //  TODO ideeen:\r\n    //  - varreer kleine beetjes in de radius?\r\n    //  - high score : top 5 gemiddelde <- might not be useful: results already amazing\r\n    //  - embrace ovaal vorm \r\n    // seed\r\n    // TODO SEED\r\n    //np.random.seed(seed)\r\n    console.log(points);\r\n    // TODO do-over of high score system\r\n    let high_score = 0;\r\n    let high_score_center = new Vector2(0, 0);\r\n    let high_score_radius = 0.0;\r\n    let high_score_ids = [];\r\n    let num_points = points.count();\r\n    for (let i = 0; i < iterations; i++) {\r\n        // randomize the radius a bit\r\n        let this_radius = radius + (Math.random() - 0.5) * max_radius_deviation;\r\n        // choose two, and create a circle with it\r\n        let id1 = randInt(0, num_points);\r\n        let id2 = randInt(0, num_points);\r\n        let centers = Circle2.centersFromPPR(points.getVector(id1), points.getVector(id2), this_radius);\r\n        // print("found some centers: ", centers)\r\n        for (let center of centers) {\r\n            // figure out the score\r\n            let includedIds = idsWithinCircle(points, center, radius, tolerance);\r\n            let score = includedIds.length;\r\n            // save if high score\r\n            if (score > high_score) {\r\n                high_score = score;\r\n                high_score_radius = this_radius;\r\n                high_score_center = center;\r\n                high_score_ids = includedIds;\r\n            }\r\n        }\r\n    }\r\n    // feedback\r\n    console.log("best score", high_score);\r\n    if (high_score < min_score) {\r\n        console.log("this is smaller than the minimum score: ransac failed.");\r\n        return undefined;\r\n    }\r\n    // construct the best circle, and return it\r\n    let best_circle = new Circle2(high_score_center, high_score_radius);\r\n    return [best_circle, high_score_ids];\r\n}\r\nfunction idsWithinCircle(pts, center, radius, tolerance) {\r\n    let indices = [];\r\n    pts.forEach((p, i) => {\r\n        let distance = p.disTo(center);\r\n        if (Math.abs(distance - radius) < tolerance) {\r\n            indices.push(i);\r\n        }\r\n    });\r\n    return indices;\r\n}\r\n/**\r\n * @param  {number} lower=0, including\r\n * @param  {number} upper=1, excluding\r\n */\r\nfunction randInt(lower, upper) {\r\n    return Math.floor(lower + (Math.random() * (upper - lower)));\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/circle3.ts\n// purpose: represents a 3d circle\r\n\r\n\r\nclass Circle3 {\r\n    constructor(plane, radius) {\r\n        this.plane = plane;\r\n        this.radius = radius;\r\n    }\r\n    static fromCircle2(circle2, plane = Plane.WorldXY()) {\r\n        // elevate center of circle, make it the center of a plane\r\n        let center3d = plane.pushToWorld(circle2.center.to3D());\r\n        plane = plane.clone();\r\n        plane.center = center3d;\r\n        return new Circle3(plane, circle2.radius);\r\n    }\r\n    includes(p) {\r\n        // test if the point falls in range of the circle, by regarding\r\n        // the circle as a torus\r\n        // CHANGE NOTE: i set this to zero, for testing\r\n        // vertical error\r\n        let [projPoint, yError] = this.plane.closestPoint(p);\r\n        yError = yError / 3;\r\n        // horizontal error: get the difference between point\r\n        let xError = this.plane.center.clone().disTo(projPoint) - this.radius;\r\n        // length of total error vector needs to be smaller than the given\r\n        // tolerance\r\n        return Math.pow(yError, 2) + Math.pow(xError, 2) < Const.TOL_SQUARED;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/eye-finder.ts\n// name:    eye-finder.ts\r\n// author:  Jos Feenstra\r\n// purpose: Keeper of the full pupil-point.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass EyeFinder {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    findPupilsFromNextcloud(data) {\r\n        console.log("finding eyes from nextcloud set...");\r\n        let topo = TopoMesh.copyFromMesh(data.mesh);\r\n        let image = GeonImage.fromImageData(data.texture);\r\n        let [winLeft, winRight] = this.getEyeWindowsNextcloud(data, topo);\r\n        console.log("windows: ", winLeft, winRight);\r\n        return this.findPupils(image, topo, data.settings, winLeft, winRight);\r\n    }\r\n    findPupilsFromBellus(bsd) {\r\n        console.log("finding eyes from bellus...");\r\n        // get the window with which the eyes can be extracted\r\n        let topo = TopoMesh.copyFromMesh(bsd.mesh);\r\n        let image = GeonImage.fromImageData(bsd.texture);\r\n        let [winLeft, winRight] = this.getEyeWindows(bsd);\r\n        console.log("windows: ", winLeft, winRight);\r\n        return this.findPupils(image, topo, bsd.settings, winLeft, winRight);\r\n    }\r\n    // some stupid wrapping\r\n    findPupils(image, topo, settings, winLeft, winRight) {\r\n        // left side\r\n        let ransacSettings = settings.process_ransac;\r\n        let leftPupilPoint = this.findPupilFromEye(image, topo, winLeft, ransacSettings);\r\n        // right side\r\n        let rightPupilPoint = this.findPupilFromEye(image, topo, winRight, ransacSettings);\r\n        if (leftPupilPoint && rightPupilPoint) {\r\n            return [leftPupilPoint, rightPupilPoint];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    findPupilFromEye(image, mesh, window, ransacSettings) {\r\n        var _a, _b, _c, _d, _e;\r\n        // step 1: get points (vectors) which symbolize pixels in contrasting areas of the image (the iris).\r\n        let eyeImg = image.trimWithDomain(window);\r\n        let contrastEyeImg = this.contrastDetection(eyeImg);\r\n        let contrastPoints = this.pixelsToPoints(contrastEyeImg, 50);\r\n        if (contrastPoints.count() < 0) {\r\n            return;\r\n        }\r\n        let scaleVec = new Vector2(1 / image.width, 1 / image.height);\r\n        // convert these points to the same space as the uv points of the mesh\r\n        contrastPoints.forEach((p) => {\r\n            // move from eyetrim to original image space\r\n            p.add(new Vector2(window.x.t0, window.y.t0));\r\n            // move from pixel space to normalized uv space\r\n            p.mul(scaleVec);\r\n            // flip and move according to uv parameters\r\n            p.mul(new Vector2(1, -1));\r\n            p.add(new Vector2(0, 1));\r\n        });\r\n        // debug\r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.dots2.push(...contrastPoints.toList());\r\n        // step 2: elevate from uv space to vertex space of the mesh\r\n        // HIER GAAT IETS GOED MIS \r\n        let cps = new vector_array_Vector3Array(contrastPoints.count());\r\n        contrastPoints.forEach((p, i) => {\r\n            cps.setVector(i, mesh.elevate(p));\r\n        });\r\n        (_b = this.app) === null || _b === void 0 ? void 0 : _b.whiteDots.push(...cps.toList());\r\n        // step 3: fit a plane through the points, and project to this plane\r\n        let plane = Plane.fromLeastSquares(cps);\r\n        cps.forEach((p) => plane.pullToPlane(p));\r\n        let cpsFixed = cps.to2D();\r\n        1;\r\n        // step 4: ransac! \r\n        let rss = ransacSettings;\r\n        let r = RansacCircle2d(cpsFixed, rss.iterations, rss.radius, rss.tolerance, rss.seed, rss.min_score, rss.max_radius_deviation);\r\n        let eyepoint;\r\n        let bestCircle;\r\n        if (!r) {\r\n            console.error("couldnt find eyepoint...");\r\n            return;\r\n        }\r\n        else {\r\n            let [bestCircle, values] = r;\r\n            eyepoint = plane.pushToWorld(bestCircle.center.to3D());\r\n            (_c = this.app) === null || _c === void 0 ? void 0 : _c.lineRenderables.push(LineArray.fromCircle(Circle3.fromCircle2(bestCircle, plane)));\r\n        }\r\n        // debug\r\n        cps.forEach((p) => {\r\n            p.z = 0;\r\n            return plane.pushToWorld(p);\r\n        });\r\n        (_d = this.app) === null || _d === void 0 ? void 0 : _d.lineRenderables.push(LineArray.fromPlane(plane));\r\n        (_e = this.app) === null || _e === void 0 ? void 0 : _e.redDots.push(eyepoint);\r\n        return eyepoint;\r\n    }\r\n    contrastDetection(image) {\r\n        var _a;\r\n        let grey = image.toGreyscale();\r\n        let blurred = grey.applyKernel(Kernels.Gauss5);\r\n        let left = blurred.applyKernel(Kernels.SobelLeft);\r\n        let right = blurred.applyKernel(Kernels.SobelRight);\r\n        let sum = this.SobelSum(left, right);\r\n        let [min, max] = sum.getMinMax();\r\n        console.log("minmax: ", min, max);\r\n        let upper = max * 0.7;\r\n        let lower = upper * 0.3;\r\n        let thres = sum.applyThreshold(lower, upper);\r\n        // debug \r\n        console.log("adding images:");\r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.images.push(blurred.toRGBA(), sum.toRGBA(), thres.toRGBA());\r\n        return thres;\r\n    }\r\n    SobelSum(hor, ver) {\r\n        let width = hor.width; // assume the same as ver\r\n        let height = hor.height; // assume the same as ver\r\n        let ps = hor.pixelSize;\r\n        let sum = new GeonImage(width, height, ps);\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // assume grey value\r\n                let one = hor.get(x, y)[0];\r\n                let two = ver.get(x, y)[0];\r\n                let value = Math.round(Math.pow((Math.pow(one, 2) + Math.pow(two, 2)), 0.5));\r\n                sum.set(x, y, [value, value, value, 255]);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    getEyeWindowsNextcloud(data, mesh) {\r\n        var _a, _b, _c, _d;\r\n        let bb_o = data.settings.process.bounding_box_offset;\r\n        let eyeGuessLeft = data.eyePointsEdited.getVector(0);\r\n        let eyeGuessRight = data.eyePointsEdited.getVector(1);\r\n        console.log("groundTruthLeft, groundTruthRight");\r\n        console.log(eyeGuessLeft, eyeGuessRight);\r\n        (_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.whiteDots) === null || _b === void 0 ? void 0 : _b.push(eyeGuessLeft);\r\n        (_d = (_c = this.app) === null || _c === void 0 ? void 0 : _c.whiteDots) === null || _d === void 0 ? void 0 : _d.push(eyeGuessRight);\r\n        let eyeLandmarksLeft = mesh.flattenClosestPoint(eyeGuessLeft);\r\n        let eyeLandmarksRight = mesh.flattenClosestPoint(eyeGuessRight);\r\n        console.log("eyeLandmarksLeft, eyeLandmarksRight: ");\r\n        console.log(eyeLandmarksLeft, eyeLandmarksRight);\r\n        // to texture pixel space \r\n        let mat = data.getTextureToUVMatrix().inverse();\r\n        let leftPixel = mat.multiplyVector(eyeLandmarksLeft.to3D()).to2D();\r\n        let rightPixel = mat.multiplyVector(eyeLandmarksRight.to3D()).to2D();\r\n        console.log("in pixelspace: ");\r\n        console.log(leftPixel, rightPixel);\r\n        let rightWindow = Domain2.fromInclude(Vector2Array.fromList([leftPixel])).offset(bb_o.ly);\r\n        let leftWindow = Domain2.fromInclude(Vector2Array.fromList([rightPixel])).offset(bb_o.ry);\r\n        return [rightWindow, leftWindow];\r\n    }\r\n    getEyeWindows(bsd) {\r\n        let pr = bsd.settings.process.point_ranges;\r\n        let bb_o = bsd.settings.process.bounding_box_offset;\r\n        let eyeLandmarksLeft = bsd.landmarks.takeRows(pr.left_eye_set);\r\n        let eyeLandmarksRight = bsd.landmarks.takeRows(pr.right_eye_set);\r\n        let rightWindow = Domain2.fromInclude(eyeLandmarksLeft).offset(bb_o.ly);\r\n        let leftWindow = Domain2.fromInclude(eyeLandmarksRight).offset(bb_o.ry);\r\n        return [rightWindow, leftWindow];\r\n    }\r\n    pixelsToPoints(image, threshold) {\r\n        let points = [];\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let value = image.get(x, y)[0];\r\n                if (value > threshold) {\r\n                    points.push(new Vector2(x, y));\r\n                }\r\n            }\r\n        }\r\n        return Vector2Array.fromList(points);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/image-renderer.ts\n// name:    image-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of images / textures\r\n\r\nclass ImageRenderer extends Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        attribute vec2 a_position;\r\n        attribute vec2 a_texCoord;\r\n\r\n        uniform vec2 u_resolution;\r\n\r\n        varying vec2 v_texCoord;\r\n\r\n        void main() {\r\n            // convert the rectangle from pixels to 0.0 to 1.0\r\n            vec2 zeroToOne = ((a_position / u_resolution) * 2.0) - 1.0;\r\n\r\n            gl_Position = vec4(zeroToOne * vec2(1, -1), 0, 1);\r\n\r\n            v_texCoord = a_texCoord;\r\n        }\r\n        `;\r\n        let fragmentSource = `\r\n        precision mediump float;\r\n \r\n        uniform sampler2D u_image;\r\n\r\n        varying vec2 v_texCoord;\r\n        \r\n        void main() {\r\n            // Look up a color from the texture.\r\n            gl_FragColor = texture2D(u_image, v_texCoord);\r\n        }\r\n        `;\r\n        // setup program\r\n        super(gl, vertexSource, fragmentSource);\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.u_image = gl.getUniformLocation(this.program, "u_image");\r\n        this.u_resolution = gl.getUniformLocation(this.program, "u_resolution");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // look up where the texture coordinates need to go.\r\n        var a_texCoord = gl.getAttribLocation(this.program, "a_texCoord");\r\n        // provide texture coordinates for the rectangle.\r\n        var a_texCoord_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, a_texCoord_buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            0.0, 0.0,\r\n            1.0, 0.0,\r\n            0.0, 1.0,\r\n            0.0, 1.0,\r\n            1.0, 0.0,\r\n            1.0, 1.0\r\n        ]), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(a_texCoord);\r\n        gl.vertexAttribPointer(a_texCoord, 2, gl.FLOAT, false, 0, 0);\r\n        // Create a texture.\r\n        this.texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // Set the parameters so we can render any size image.\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    }\r\n    // render 1 image to the screen\r\n    setAndRender(gl, r, image) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // gl.uniform1i(this.u_image, 1);\r\n        // activate & fill texture\r\n        // gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n        // Turn on the attribute\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don\'t normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        this.setRectangle(gl, r);\r\n        // Set a random color.\r\n        gl.uniform4f(this.u_color, Math.random(), Math.random(), Math.random(), 1);\r\n        // Draw the rectangle.\r\n        var primitiveType = gl.TRIANGLES;\r\n        var offset = 0;\r\n        var count = 6;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    setRectangle(gl, r) {\r\n        let verts = r.getVertices();\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            verts[0].x, verts[0].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[3].x, verts[3].y,\r\n        ]), gl.STATIC_DRAW);\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/rectangle2.ts\n\r\n// basic 2d rectangle\r\n// a Matrix3 and Domain2 is used. \r\n// this way, a rectangle can be rotated around an arbirtary point it regards as its center.\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/texture-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass TextureMeshRenderer extends Renderer {\r\n    constructor(gl) {\r\n        const vs = `\r\n        // precision mediump int;\r\n        // precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        attribute vec2 a_texcoord;\r\n\r\n        uniform mat4 u_transform;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n            v_texcoord = a_texcoord;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump float;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        uniform sampler2D u_texture;\r\n\r\n        void main() {\r\n            gl_FragColor = texture2D(u_texture, v_texcoord);\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // create uniforms & buffers, get pointers for all data to be used\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_texture = gl.getUniformLocation(this.program, "u_texture");\r\n        // we need 3 buffers \r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 float buffer for texture positions\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_texcoord = gl.getAttribLocation(this.program, "a_texcoord");\r\n        this.a_texcoord_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh, DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, mesh, speed = DrawSpeed.StaticDraw) {\r\n        if (!mesh.texture) {\r\n            console.warn("Mesh does not contain a texture!");\r\n            return;\r\n        }\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.faces.data.length;\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // buffer 2 \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs.data, this.convertDrawSpeed(speed));\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mesh.faces.data), this.convertDrawSpeed(speed));\r\n        // texture \r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture);\r\n        // alternative texture -> Fill the texture with a 1x1 blue pixel.\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 128, 128, 255]));\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture.data);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n        console.log("setting texture stuff ..");\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // console.log("rendering..");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        gl.uniform1i(this.u_texture, 0);\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_texcoord);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/eye-finder-app.ts\n// name:    debug-app\r\n// author:  Jos Feenstra\r\n// purpose: environment to test eyefinder functionalities\r\nvar eye_finder_app_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst settings = __webpack_require__(504); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// note : sadly, this doesnt quite work. \r\n// TODO : figure out some serialize sceme, aka: spitting out obj data in json format. \r\n// const DEBUG_LANDMARKS: any = require(\'../../data/scan/facelandmarks.json\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_JPG: any = require(\'../../data/scan/head3d.jpg\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_OBJ: any = require(\'../../data/scan/head3d.obj\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_FRONT_IMAGE: any = require(\'../../data/scan/image.obj\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// console.log(DEBUG_JPG);\r\nclass EyeFinderApp extends App {\r\n    constructor(gl, canvas, context) {\r\n        super(gl);\r\n        this.dots2 = [];\r\n        this.whiteDots = [];\r\n        this.redDots = [];\r\n        this.images = [];\r\n        this.lines = [];\r\n        this.lineRenderables = [];\r\n        this.eyefinder = new EyeFinder(this);\r\n        // setup render stuff \r\n        this.blueDotRenderer = new DotRenderer3(gl, 6, [0, 0, 1, 1], false);\r\n        this.redDotRenderer = new DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.whiteDotRenderer = new DotRenderer3(gl, 5, [0.8, 0.8, 0.8, 1], false);\r\n        this.whiteLineRenderer = new SimpleLineRenderer(gl, [0.9, 0.9, 0.9, 0.9]);\r\n        this.blueLineRenderer = new SimpleLineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.redLineRenderer = new SimpleLineRenderer(gl, [1, 0, 0, 0.5]);\r\n        this.meshRenderer = new TextureMeshRenderer(gl);\r\n        this.imageRenderer = new ImageRenderer(gl);\r\n        this.camera = new Camera(canvas, 0.1);\r\n        addDropFileEventListeners(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        let lines = LineArray.fromCircle(new Circle3(Plane.WorldXY(), 0.5));\r\n        this.lineRenderables.push(lines);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.getTotalMatrix();\r\n        this.lineRenderables.forEach((renderable) => {\r\n            this.redLineRenderer.setAndRender(gl, matrix, renderable);\r\n        });\r\n        if (this.mesh == undefined)\r\n            this.redDotRenderer.setAndRender(gl, matrix, vector_array_Vector3Array.fromList([new vector_Vector3(0, 0, 0), new vector_Vector3(1, 1, 1)]));\r\n        else {\r\n            let mesh = this.mesh;\r\n            let landmarks = this.landmarks;\r\n            // show the mesh\r\n            // this.meshRenderer.render(gl, matrix);\r\n            this.blueLineRenderer.render(gl, matrix);\r\n            // this.blueLineRenderer.setAndRender(gl, matrix, LineArray.fromMesh(mesh, false))\r\n            if (landmarks)\r\n                this.redDotRenderer.setAndRender(gl, matrix, landmarks);\r\n            // this.blueDotRenderer.setAndRender(gl, matrix, mesh.uvs);   \r\n            // debug data from eyefinder process\r\n            this.redDotRenderer.setAndRender(gl, matrix, this.dots2);\r\n            this.whiteDotRenderer.setAndRender(gl, matrix, this.whiteDots);\r\n            this.redDotRenderer.setAndRender(gl, matrix, this.redDots);\r\n            this.whiteLineRenderer.setAndRender(gl, matrix, LineArray.fromLines(this.lines));\r\n            this.redLineRenderer.render(gl, matrix);\r\n            // render images\r\n            let height = 200;\r\n            let width = 300;\r\n            this.images.forEach((image, i) => {\r\n                this.imageRenderer.setAndRender(gl, new Rectangle2(Matrix3.newIdentity(), Domain2.fromBounds(10, 10 + width, i * (height + 10), i * (height + 10) + height)), image.toImageData());\r\n            });\r\n            // render some dots \r\n            if (this.dots) {\r\n                //\r\n                this.redDotRenderer.setAndRender(gl, matrix, this.dots);\r\n            }\r\n        }\r\n    }\r\n    addNextcloudData(data) {\r\n        // start the eyefinder\r\n        let r = this.eyefinder.findPupilsFromNextcloud(data);\r\n        if (r) {\r\n            console.log("eyepoints found");\r\n        }\r\n        else {\r\n            console.log("eyepoints couldnt be found...");\r\n        }\r\n        // console.log(left);\r\n        // console.log(right);\r\n        let mesh = data.mesh;\r\n        // this.meshRenderer.set(this.gl, mesh);\r\n        this.blueLineRenderer.set(this.gl, LineArray.fromMesh(mesh), DrawSpeed.StaticDraw);\r\n        this.mesh = mesh;\r\n        console.log(data.eyePointsEdited);\r\n        this.dots = data.eyePointsEdited;\r\n        this.dots.forEach((v, n) => {\r\n            console.log(v);\r\n        });\r\n    }\r\n    testBaricentricElevation(bsd) {\r\n        let topo = TopoMesh.copyFromMesh(bsd.mesh);\r\n        let count = 100;\r\n        let center = new Vector2(0.5, 0.5);\r\n        for (let i = 0; i < count; i++) {\r\n            let theta = (i / count) * 2 * Math.PI;\r\n            let test = Vector2.fromCircle(center, 0.05, theta);\r\n            this.whiteDots.push(test.to3D());\r\n            let face = topo.walkUV(test);\r\n            if (face == -1) {\r\n                console.warn("got a point not on triangle...");\r\n                return new vector_Vector3(0, 0, 0);\r\n            }\r\n            let tr3 = topo.getTriangle3(face);\r\n            let tr2 = topo.getTriangle2(face);\r\n            let triangle2points = tr2.points().toVector3Array().toList();\r\n            // console.log(triangle2points);\r\n            this.whiteDots.push(test.to3D());\r\n            let bari = tr2.toBarycentric(test);\r\n            let test3d = tr3.fromBarycentric(bari);\r\n            this.whiteDots.push(test3d);\r\n        }\r\n    }\r\n    addBellusData(bsd) {\r\n        // start the eyefinder\r\n        let r = this.eyefinder.findPupilsFromBellus(bsd);\r\n        if (r) {\r\n            console.log("eyepoints found");\r\n        }\r\n        else {\r\n            console.log("eyepoints couldnt be found...");\r\n        }\r\n        // this.camera.pos = left.clone();\r\n        // this.camera.offset.x = 100;\r\n        // put the data into the render buffers.\r\n        let mesh = bsd.mesh;\r\n        this.meshRenderer.set(this.gl, mesh);\r\n        this.blueLineRenderer.set(this.gl, LineArray.fromMesh(mesh), DrawSpeed.StaticDraw);\r\n        // this.redLineRenderer.set(this.gl, mesh.uvs.data, mesh.getLineIds(), 2);\r\n        this.mesh = bsd.mesh;\r\n        this.landmarks = bsd.landmarks;\r\n    }\r\n}\r\nvar Format;\r\n(function (Format) {\r\n    Format[Format["None"] = 0] = "None";\r\n    Format[Format["Bellus"] = 1] = "Bellus";\r\n    Format[Format["NextCloudDataset"] = 2] = "NextCloudDataset"; // the 140 or so scans on nextcloud \r\n})(Format || (Format = {}));\r\nfunction getFormat(files) {\r\n    for (let i = 0; i < files.length; i++) {\r\n        let file = files.item(i);\r\n        if (file.name == "facelandmarks.json") {\r\n            return Format.Bellus;\r\n        }\r\n        if (file.name == "scaninfo.txt") {\r\n            return Format.NextCloudDataset;\r\n        }\r\n    }\r\n    return Format.None;\r\n}\r\nfunction processFiles(files) {\r\n    return eye_finder_app_awaiter(this, void 0, void 0, function* () {\r\n        let format = getFormat(files);\r\n        switch (format) {\r\n            case Format.Bellus:\r\n                console.log("found a bellus-style dataset! processing...");\r\n                BellusScanData.fromFileList(files, settings).then((bsd) => this.addBellusData(bsd));\r\n                break;\r\n            case Format.NextCloudDataset:\r\n                console.log("found a scan from the nextcloud format! processing...");\r\n                NextcloudScanData.fromFileList(files, settings).then((data) => this.addNextcloudData(data));\r\n                break;\r\n            case Format.None:\r\n                console.log("couldnt read the files you gave me...");\r\n                break;\r\n        }\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/input-state.ts\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key["A"] = 0] = "A";\r\n    Key[Key["B"] = 1] = "B";\r\n    Key[Key["C"] = 2] = "C";\r\n    Key[Key["D"] = 3] = "D";\r\n    Key[Key["E"] = 4] = "E";\r\n    Key[Key["F"] = 5] = "F";\r\n    Key[Key["G"] = 6] = "G";\r\n    Key[Key["H"] = 7] = "H";\r\n    Key[Key["I"] = 8] = "I";\r\n    Key[Key["J"] = 9] = "J";\r\n    Key[Key["K"] = 10] = "K";\r\n    Key[Key["L"] = 11] = "L";\r\n    Key[Key["M"] = 12] = "M";\r\n    Key[Key["N"] = 13] = "N";\r\n    Key[Key["O"] = 14] = "O";\r\n    Key[Key["P"] = 15] = "P";\r\n    Key[Key["Q"] = 16] = "Q";\r\n    Key[Key["R"] = 17] = "R";\r\n    Key[Key["S"] = 18] = "S";\r\n    Key[Key["T"] = 19] = "T";\r\n    Key[Key["U"] = 20] = "U";\r\n    Key[Key["V"] = 21] = "V";\r\n    Key[Key["W"] = 22] = "W";\r\n    Key[Key["X"] = 23] = "X";\r\n    Key[Key["Y"] = 24] = "Y";\r\n    Key[Key["Z"] = 25] = "Z";\r\n    Key[Key["Up"] = 26] = "Up";\r\n    Key[Key["Down"] = 27] = "Down";\r\n    Key[Key["Left"] = 28] = "Left";\r\n    Key[Key["Right"] = 29] = "Right";\r\n    Key[Key["Space"] = 30] = "Space";\r\n    Key[Key["Control"] = 31] = "Control";\r\n    Key[Key["Alt"] = 32] = "Alt";\r\n    Key[Key["Shift"] = 33] = "Shift";\r\n    Key[Key["Enter"] = 34] = "Enter";\r\n    Key[Key["Esc"] = 35] = "Esc";\r\n    Key[Key["N1"] = 36] = "N1";\r\n    Key[Key["N2"] = 37] = "N2";\r\n    Key[Key["N3"] = 38] = "N3";\r\n    Key[Key["N4"] = 39] = "N4";\r\n    Key[Key["N5"] = 40] = "N5";\r\n    Key[Key["N6"] = 41] = "N6";\r\n    Key[Key["N7"] = 42] = "N7";\r\n    Key[Key["N8"] = 43] = "N8";\r\n    Key[Key["N9"] = 44] = "N9";\r\n    Key[Key["N0"] = 45] = "N0";\r\n    Key[Key["Plus"] = 46] = "Plus";\r\n    Key[Key["Minus"] = 47] = "Minus";\r\n    Key[Key["Backspace"] = 48] = "Backspace";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case (Key.A): return 1;\r\n        case (Key.B): return 2;\r\n        case (Key.C): return 3;\r\n        case (Key.D): return 4;\r\n        case (Key.E): return 5;\r\n        case (Key.F): return 6;\r\n        default: return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = Vector2.zero();\r\n        this.mouseDelta = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // link\r\n        this.canvas = canvas;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("mousedown", this.setMouseDown.bind(this));\r\n        canvas.addEventListener("mouseup", this.setMouseUp.bind(this));\r\n        canvas.addEventListener("contextmenu", (e) => { e.preventDefault(); e.stopPropagation(); });\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("wheel", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener("touchmove", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchstart", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchend", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener("keydown", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener("keypressed", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener("keyup", this.onKeyUp.bind(this));\r\n        // final   \r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = (this.newTime - this.oldTime);\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n        this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n        this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log("we be scrollin\' now...")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new Vector2(e.clientX, e.clientY);\r\n        ;\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/core.ts\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls. \r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\nclass Core {\r\n    constructor(canvas, gl) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new InputState(canvas);\r\n        this.apps = [];\r\n    }\r\n    addApp(app) {\r\n        this.apps.push(app);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        if (this.state.IsKeyPressed("Esc"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height ||\r\n            window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n// Author: Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\nconst REALTIME_DEMO = false;\r\nlet core;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById("canvas");\r\n    let video = document.getElementById("camera");\r\n    let context = document.getElementById("interface");\r\n    let cameraOn = document.getElementById("camera-on");\r\n    let cameraStop = document.getElementById("camera-off");\r\n    let buttonPredict = document.getElementById("predict");\r\n    let gl = initWebglContext(canvas);\r\n    core = new Core(canvas, gl);\r\n    // the eyefinder app itself\r\n    // core.addApp(new StatApp(gl, canvas));\r\n    core.addApp(new EyeFinderApp(gl, canvas, context));\r\n    // fun demo\'s to test various functionalities \r\n    // core.addApp(new GeometryApp(gl, canvas));\r\n    // core.addApp(new MarchingCubeApp(gl, canvas));\r\n    // core.addApp(new RectangleApp(gl)); \r\n    // core.addApp(new DotApp3(gl, canvas)); \r\n    // core.addApp(new ObjLoaderApp(gl, canvas));\r\n    // addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    // loop();\r\n    requestAnimationFrame(loop);\r\n}\r\n// __main__ \r\nwindow.addEventListener("load", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///500\n')})()})();