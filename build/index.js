(()=>{"use strict";var __webpack_modules__={504:Q=>{Q.exports=JSON.parse('{"process":{"n_bellus_points":77,"point_ranges":{"left_eye_set":[30,31,32,33,34,35,36,37,38],"right_eye_set":[40,41,42,43,44,45,46,47,39],"left_ear_set":[0,1,2],"right_ear_set":[12,11,10]},"bounding_box_offset":{"remark":"left_right_up_down. means: offset indefinetly","ly":[-10,10,-15,15],"ry":[-10,10,-15,15],"la":[1200,-10,150,150],"ra":[-10,1200,150,150]},"filtering":{"blur_first":1,"gaus_k_size":9,"median_kernel_size":7,"canny_thresh_lower":50,"canny_thresh_upper":150,"histeq_clip_limit":3,"histeq_cell_size":[8,8]}},"process_ransac":{"seed":3474647,"iterations":1000,"radius":5.55,"max_radius_deviation":0.1,"tolerance":0.2,"min_score":10,"max_deviation_from_guess":6,"remark":"this stuff here is raw data","radius_iris":5.5,"radius_eye":12.25},"process_ears":{},"process_brows":{},"output":{"remark":"use this to determine the keys of the output json","file_name":"results.json","pupil_pt_left":"pupil_pt_left","pupil_pt_right":"pupil_pt_right","pupil_pt_flat_left":"pupil_pt_flat_left","pupil_pt_flat_right":"pupil_pt_flat_right","all_dlib_points":"all_dlib_points","ear_pt_left":"ear_pt_left","ear_pt_right":"ear_pt_right","brow_pts_left":"brow_pts_left","brow_pts_right":"brow_pts_right"},"debug":{"remark":"use output_test_points to export all points generated in inbetween steps","write_debug_points":true,"silent":false,"plot":false}}')}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}(()=>{eval('\n;// CONCATENATED MODULE: ./src/data/int-matrix.ts\n// generic all-pupose matrix of floats\r\nclass IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Int32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for Array"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for Array"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/vector.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass vector_Vector3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new vector_Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new vector_Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new vector_Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    // #endregion\r\n    // #region defaults \r\n    static zero() {\r\n        return new vector_Vector3(0, 0, 0);\r\n    }\r\n    ;\r\n    static unitX() {\r\n        return new vector_Vector3(1, 0, 0);\r\n    }\r\n    ;\r\n    static unitY() {\r\n        return new vector_Vector3(0, 1, 0);\r\n    }\r\n    ;\r\n    static unitZ() {\r\n        return new vector_Vector3(0, 0, 1);\r\n    }\r\n    ;\r\n    // #endregion\r\n    // #region basics\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return this.constructor(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case (0): return this.x;\r\n            case (1): return this.y;\r\n            case (2): return this.z;\r\n            case (3): return 1;\r\n            default: throw "nope";\r\n        }\r\n    }\r\n    mul(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z == v.z;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        this.z /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        this.z = Math.min(this.z, other.z);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        this.z = Math.max(this.z, other.z);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        this.z = Math.max(min.z, Math.min(max.z, this.z));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        this.z = Math.max(minVal, Math.min(maxVal, this.z));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        this.z = Math.floor(this.z);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        this.z = Math.ceil(this.z);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        this.z = Math.round(this.z);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n        return this;\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x)\r\n            + Math.abs(this.y - v.y)\r\n            + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        this.z += (other.z - this.z) * alpha;\r\n        return this;\r\n    }\r\n    // #endregion\r\n    // #region math specific \r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector \r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectOnPlane(normal) {\r\n        // project a vector \r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.sub(_vector);\r\n    }\r\n    mirror(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.sub(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n}\r\n// vector object used within heavy calculations, to make sure we dont create Vectors all over the place.\r\nconst _vector = new vector_Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\nfunction radToDeg(r) {\r\n    return r * 180 / Math.PI;\r\n}\r\nfunction degToRad(d) {\r\n    return d * Math.PI / 180;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/float-matrix.ts\n// generic all-pupose matrix of floats\r\nclass FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new FloatMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for \'how many of x?\' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw "values per entry is larger than this._width. This will spill over.";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw "column is out of bounds for FloatArray"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw "dimention of floatarray is not " + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/data/vector-array.ts\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3, \r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n// \r\n// NOTE:    all these small wrappers might not be good pratice, but I \r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass Vector2Array extends FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromNativeArray(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toNativeArray() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    toVector3Array() {\r\n        let array = new vector_array_Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        return super.clone();\r\n    }\r\n}\r\nclass vector_array_Vector3Array extends FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromNativeArray(vecs) {\r\n        let length = vecs.length;\r\n        let array = new vector_array_Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new vector_Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toNativeArray() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return super.clone();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/mesh.ts\n// Mesh.Ts\r\n// Purpose: obj class for dealing with that specific filetype, and meshes in general\r\n// Author: Jos Feenstra\r\n\r\n\r\n\r\nclass Mesh {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        this.texture = undefined;\r\n        this.verts = new vector_array_Vector3Array(vertCount);\r\n        this.norms = new vector_array_Vector3Array(normCount);\r\n        this.uvs = new Vector2Array(uvCount);\r\n        this.faces = new IntMatrix(faceCount, 3);\r\n        this.faces.fill(-1);\r\n        this.texture = texture;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the \r\n        // Array class. \r\n        let mesh = new Mesh(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        mesh.verts.fillWith(verts);\r\n        mesh.norms.fillWith(norms);\r\n        mesh.uvs.fillWith(uvs);\r\n        mesh.faces.fillWith(faces);\r\n        return mesh;\r\n    }\r\n    exportToObj(path) {\r\n    }\r\n    getLineIds() {\r\n        // 3 edges per face, 2 indices per edge\r\n        let count = this.faces.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < this.faces.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = this.faces.get(i, 0);\r\n            data[iData + 1] = this.faces.get(i, 1);\r\n            data[iData + 2] = this.faces.get(i, 1);\r\n            data[iData + 3] = this.faces.get(i, 2);\r\n            data[iData + 4] = this.faces.get(i, 2);\r\n            data[iData + 5] = this.faces.get(i, 0);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n;\r\n// a mesh with topological information\r\nclass TopoMesh extends Mesh {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new IntMatrix(this.faces.count(), 3);\r\n    }\r\n    static copyFromMesh(mesh) {\r\n        let topoMesh = new TopoMesh(mesh.verts.count(), mesh.norms.count(), mesh.uvs.count(), mesh.faces.count());\r\n        topoMesh.verts = mesh.verts.clone();\r\n        topoMesh.norms = mesh.norms.clone();\r\n        topoMesh.uvs = mesh.uvs.clone();\r\n        topoMesh.faces = mesh.faces.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        return new Uint32Array();\r\n    }\r\n    elevate(p) {\r\n        // \'elevate\' a point in UV space to vertex space using a barycentric remap\r\n        return new vector_Vector3(0, 0, 0);\r\n    }\r\n    flatten(p) {\r\n        // \'flatten\' a point in vertex space to uv space using a barycentric remap\r\n        return new Vector2(0, 0);\r\n    }\r\n}\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how \r\n    // many vertices or faces well get. \r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float \r\n    let faces = []; // 9 long ints, u16\'s should suffice. \r\n    // note : this is very inefficient, but it\'ll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split(\'\\n\');\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === \'\' || line.startsWith(\'#\')) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case \'v\':\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vn\':\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vt\':\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'f\':\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn(\'unhandled keyword:\', keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    console.log("number of vertices: " + verts.length / 3);\r\n    console.log("number of faces: " + faces.length / 3);\r\n    let mesh = Mesh.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face. \r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split(\'/\');\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw "invalid face found when processing";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal        \r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/matrix.ts\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE: \r\n\r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix3 extends FloatMatrix {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([\r\n            2 / width, 0, 0,\r\n            0, -2 / height, 0,\r\n            -1, 1, 1,\r\n        ]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1,\r\n        ]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([\r\n            sx, 0, 0,\r\n            0, sy, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3\'s \r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here, \r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00, -d * t10, d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix4 extends FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    multiply(other) {\r\n        const a = this.data;\r\n        const b = other.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = 2 * near / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 * near / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            tx, ty, tz, 1\r\n        ]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix \r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([\r\n            sx, 0, 0, 0,\r\n            0, sy, 0, 0,\r\n            0, 0, sz, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new vector_Vector3(data[0], data[1], data[2]);\r\n    }\r\n    MultiplyM(other) {\r\n        let matrix = new vector_array_Vector3Array(other.count());\r\n        // for every row\r\n        for (var r = 0; r < other.count(); r++) {\r\n            // for every item in row\r\n            for (var c = 0; c < 3; ++c) {\r\n                let item = 0.0;\r\n                for (var j = 0; j < 4; ++j) {\r\n                    item += other.get(r, c) * this.get(j, c);\r\n                }\r\n                matrix.set(r, c, item);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/domwrappers.ts\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log("setting up drag events...");\r\n    canvas.addEventListener(\'dragenter\', function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("entering entering...");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener(\'dragover\', function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("over drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\'dragleave\', function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log("leaving drag....");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\'drop\', function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then(imageData => resolve(imageData), error => reject(error));\r\n    });\r\n}\r\nfunction AddSlider(context, min = 0, max = 1, step = 0.01, start = 0.5, onchangeEvent) {\r\n    throw "TODO!";\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement(\'img\');\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement(\'canvas\');\r\n    ;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext(\'2d\');\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/bellus-data.ts\n// BellusData.ts \r\n// \r\n// author: Jos Feenstra\r\n// purpose : \r\n// - wrapper around all data gathered from Bellus3D.\r\n// - do all file -> object convertions here.         \r\nvar bellus_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass BellusScanData {\r\n    constructor(landmarkData, texture, mesh, front, settings) {\r\n        this.landmarkData = landmarkData;\r\n        this.texture = texture;\r\n        this.mesh = mesh;\r\n        this.front = front;\r\n        this.settings = settings;\r\n        this.landmarks = this.getLandmarks2f();\r\n        // this.landmarks3 = this.getLandmarks3f(); // NOTE - we will not use the bellus 3d landmarks. \r\n        // they are located within a uncypherable space\r\n    }\r\n    static fromFileList(files, settings) {\r\n        return bellus_data_awaiter(this, void 0, void 0, function* () {\r\n            // assign the correct files.\r\n            let jsonFile;\r\n            let textureFile;\r\n            let objFile;\r\n            let frontFile;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let file = files.item(i);\r\n                let name = file.name;\r\n                console.log(`processing ${name}...`);\r\n                switch (name) {\r\n                    case \'facelandmarks.json\':\r\n                        jsonFile = file;\r\n                        break;\r\n                    case \'head3d.jpg\':\r\n                        textureFile = file;\r\n                        break;\r\n                    case \'head3d.obj\':\r\n                        objFile = file;\r\n                        break;\r\n                    case \'image.jpg\':\r\n                        frontFile = file;\r\n                        break;\r\n                }\r\n            }\r\n            return yield new Promise(function (resolve, reject) {\r\n                return bellus_data_awaiter(this, void 0, void 0, function* () {\r\n                    if (jsonFile == undefined ||\r\n                        textureFile == undefined ||\r\n                        objFile == undefined ||\r\n                        frontFile == undefined) {\r\n                        alert("give me exactly one .json, one .ojb, and one .jpg file please!");\r\n                        reject();\r\n                    }\r\n                    else {\r\n                        console.log("converting files to usable objects...");\r\n                        let json = yield loadJSONFromFile(jsonFile);\r\n                        let texture = yield loadImageFromFile(textureFile);\r\n                        let objtext = yield loadTextFromFile(objFile);\r\n                        let mesh = meshFromObj(objtext);\r\n                        let front = yield loadImageFromFile(frontFile);\r\n                        console.log("done! bellus scan loaded.");\r\n                        resolve(new BellusScanData(json, texture, mesh, front, settings));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    fromTextureToUVSpace(vectors) {\r\n        let [scaleY, scaleX] = this.getLandmarksImageSize();\r\n        console.log("scaling landmarks down by " + scaleX + ", " + scaleY);\r\n        let tf1 = Matrix4.newScaler(1 / scaleX, -1 / scaleY, 0);\r\n        let tf2 = Matrix4.newTranslation(0, 1, 0);\r\n        let tf = tf2.multiply(tf1);\r\n        return vectors.clone().transform(tf);\r\n    }\r\n    getLandmarksImageSize() {\r\n        // image sizes as registered in the \'facelandmarks\' json.\r\n        let data = this.landmarkData.ImageSize;\r\n        return [data[0], data[1]];\r\n    }\r\n    getLandmarks2f() {\r\n        // 2d landmarks as registered in the \'facelandmarks\' json\r\n        let data = this.landmarkData.Point2f;\r\n        let size = data.cols;\r\n        let landmarks = new vector_array_Vector3Array(data.data.length / 2);\r\n        landmarks.fillWith(data.data, 2);\r\n        return landmarks;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/domain.ts\n// domain.ts\r\n// \r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//          \r\n\r\n\r\n\r\nclass Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        if (t0 > t1)\r\n            console.error("created a domain with negative size.");\r\n        if (t0 == t1)\r\n            console.warn("created a domain with size is 0.0. could cause problems");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain \'count\' number of times \r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of \'step\'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n}\r\nclass Domain2 {\r\n    constructor(x = new Domain(), y = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain2(Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new Domain2(new Domain(x0, x1), new Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new Domain2(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw "need 4 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners(matrix = Matrix4.newIdentity()) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass Domain3 {\r\n    constructor(x = new Domain(), y = new Domain(), z = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new Domain3(new Domain(x0, x1), new Domain(y0, y1), new Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain3(Domain.fromRadius(r), Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new Domain3(Domain.fromRadius(rx), Domain.fromRadius(ry), Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new Domain3(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)), Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw "need 6 values";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(new Vector3(x, y, z));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/camera.ts\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding \r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1) {\r\n        this.angleAlpha = 0; // rotation x \r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = Vector2.zero();\r\n        this.speed = 1;\r\n        this.pos = new vector_Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new vector_Vector3(0, 0, -z_offset);\r\n    }\r\n    updateWithControls(state) {\r\n        this.offset.z = this.z_offset - state.scrollValue * 0.5;\r\n        if (state.IsKeyPressed("Shift")) {\r\n            this.speed *= 2;\r\n            console.log("speed is now: " + this.speed);\r\n        }\r\n        if (state.IsKeyPressed("Control")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n            console.log("speed is now: " + this.speed);\r\n        }\r\n        if (state.mouseRightPressed || state.mouseMiddlePressed) {\r\n            this.mousePos = state.mousePos.clone();\r\n        }\r\n        if (state.mouseRightDown || state.mouseMiddleDown) {\r\n            let newPos = state.mousePos.clone();\r\n            let delta = state.mousePos.clone().sub(this.mousePos);\r\n            this.mousePos = newPos;\r\n            // console.log(delta);\r\n            this.angleAlpha -= delta.y * 0.01;\r\n            this.angleBeta -= delta.x * 0.01;\r\n        }\r\n        function relativeUnitZ(angle) {\r\n            let m = Matrix4.newYRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitZ());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = Matrix4.newYRotation(angle);\r\n            return m.multiplyVector(vector_Vector3.unitX());\r\n        }\r\n        if (state.IsKeyDown("w"))\r\n            this.pos.add(relativeUnitZ(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("s"))\r\n            this.pos.add(relativeUnitZ(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("a"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown("d"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown("q"))\r\n            this.pos.y += 0.01 * this.speed;\r\n        if (state.IsKeyDown("e"))\r\n            this.pos.y -= 0.01 * this.speed;\r\n    }\r\n    getRenderToScreenMatrix(canvas) {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        const pi = Math.PI;\r\n        const fov = 30. * pi / 100.;\r\n        const Z_FAR = 10000.;\r\n        const Z_NEAR = 0.1;\r\n        let z_plane = -1. / Math.tan(pi / 8.);\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // translated to fit screen\r\n        let position = Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = Matrix4.newXRotation(angleA);\r\n        let y_rotation = Matrix4.newYRotation(angleB);\r\n        let rotation = x_rotation.multiply(y_rotation);\r\n        let transform = mOffset.multiply(rotation).multiply(position);\r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = Matrix4.newPerspective(fov, aspect, Z_NEAR, Z_FAR);\r\n        // return\r\n        return projection.multiply(transform);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/renderer.ts\n// webgl-helpers.ts\r\n// \r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this \r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth ||\r\n            gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n}\r\nfunction initWebglContext(canvas) {\r\n    let possiblyGl = canvas.getContext("webgl");\r\n    if (possiblyGl == undefined) {\r\n        console.log("webgl unavailable...");\r\n    }\r\n    let gl = possiblyGl;\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clearDepth(1.);\r\n    return gl;\r\n}\r\n// \r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed["StaticDraw"] = 0] = "StaticDraw";\r\n    DrawSpeed[DrawSpeed["DynamicDraw"] = 1] = "DynamicDraw"; // if you plan on using the \'set\' method every frame \r\n})(DrawSpeed || (DrawSpeed = {}));\r\n// the setup of a program containing 2 shader scripts\r\nfunction compileShader(gl, shaderSource, shaderType) {\r\n    var shader = gl.createShader(shaderType);\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        throw "could not compile shader:" + shaderSource + gl.getShaderInfoLog(shader);\r\n    }\r\n    return shader;\r\n}\r\nfunction createProgram(gl, vertexShader, fragmentShader) {\r\n    var program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        throw ("program failed to link:" + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n}\r\n;\r\nfunction createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n    var vertexShader = compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n    var fragmentShader = compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n    return createProgram(gl, vertexShader, fragmentShader);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/dot-renderer3.ts\n// jos feenstra\r\n\r\n\r\nclass DotRenderer3 extends Renderer {\r\n    constructor(gl, size = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n        uniform float u_size;\n\n        attribute vec3 a_vertex;\n\n        void main() {\n            // Set the size of a rendered point.\n            gl_PointSize = u_size;\n\n            // Transform the location of the vertex.\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\n        }\n\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        // vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_size = gl.getUniformLocation(this.program, "u_size");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        this.color = color;\r\n        this.size = size;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_vertex");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    // render 1 image to the screen\r\n    renderQuick(gl, matrix, data, componentsPerIteration = 3) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        gl.vertexAttribPointer(this.a_position, componentsPerIteration, gl.FLOAT, false, 0, 0);\r\n        // fill with data;\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, data.length / componentsPerIteration);\r\n    }\r\n    render(gl, matrix, dots) {\r\n        let array = vector_array_Vector3Array.fromNativeArray(dots);\r\n        return this.renderQuick(gl, matrix, array.data, 3);\r\n    }\r\n    render2(gl, matrix, dots) {\r\n        let array = Vector2Array.fromNativeArray(dots);\r\n        return this.renderQuick(gl, matrix, array.data, 2);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    toFloat32Array(dots) {\r\n        let data = new Float32Array(dots.length * 3);\r\n        for (let i = 0; i < dots.length; i++) {\r\n            data[i * 3] = dots[i].x;\r\n            data[i * 3 + 1] = dots[i].y;\r\n            data[i * 3 + 2] = dots[i].z;\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/simple-line-renderer.ts\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\nclass SimpleLineRenderer extends Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n    }\r\n    set(gl, data, indices, elements, speed = DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = indices.length;\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, elements, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, this.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/simple-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass SimpleMeshRenderer extends Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        // we need 2 buffers \r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(gl, verts, faces, speed = DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = faces.data.length;\r\n        // vertices \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        var size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces.data), this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/app.ts\nclass App {\r\n    constructor() {\r\n        // unique constructor    \r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/img/Image.ts\n// image.ts\r\n// author: Jos Feenstra\r\n// purpose: wrapper around the ImageData class, \r\n// - in order to get more functionality out of it\r\n// \r\n// note: named GeonImage to not collide with Image classes.\r\n// TODO : x and y are not the same as i and j, and used inconsistently.\r\n// fix this. \r\nconst acceptedKernels = (/* unused pure expression or super */ null && ([3, 5, 7, 9]));\r\nclass GeonImage {\r\n    constructor(width, height, pixelSize = 4) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixelSize = pixelSize;\r\n        this.data = new Uint8ClampedArray(this.width * this.height * this.pixelSize);\r\n        this.data.fill(0);\r\n    }\r\n    static fromImageData(id) {\r\n        let image = new GeonImage(id.width, id.height);\r\n        image.setData(id.data);\r\n        return image;\r\n    }\r\n    toImageData() {\r\n        // imagedata requires pixelsize of 4.\r\n        if (this.pixelSize != 4)\r\n            throw "pixelsize must be 4 for toImageData to work";\r\n        return new ImageData(this.data, this.width, this.height);\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this.height * this.width * this.pixelSize))\r\n            throw "data.length does not match width * height ";\r\n        this.data = data;\r\n    }\r\n    clone() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        image.setData(this.data);\r\n        return image;\r\n    }\r\n    fill(pixel) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, pixel);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    fillEvery(filler) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, filler());\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    set(x, y, pixel) {\r\n        // if (x > this.width || x < 0) throw "out of bounds";\r\n        // if (y > this.height || y < 0) throw "out of bounds";\r\n        // for(let i = 0 ; i < this.pixelSize; i++) {\r\n        //     this.data[this.pixelSize * (y * this.width + x) + i] = pixel[i];\r\n        // }\r\n        this.data[4 * (y * this.width + x)] = pixel[0];\r\n        this.data[4 * (y * this.width + x) + 1] = pixel[1];\r\n        this.data[4 * (y * this.width + x) + 2] = pixel[2];\r\n        this.data[4 * (y * this.width + x) + 3] = pixel[3];\r\n    }\r\n    get(x, y) {\r\n        // if (x > this.width || x < 0) throw "out of bounds";\r\n        // if (y > this.height || y < 0) throw "out of bounds";\r\n        // let pixel = []; // \r\n        // for(let i = 0 ; i < this.pixelSize; i++) {\r\n        //     pixel.push(this.pixelSize * (y * this.width + x) + i);\r\n        // }\r\n        // return pixel;\r\n        return [\r\n            this.data[4 * (y * this.width + x)],\r\n            this.data[4 * (y * this.width + x) + 1],\r\n            this.data[4 * (y * this.width + x) + 2],\r\n            this.data[4 * (y * this.width + x) + 3]\r\n        ];\r\n    }\r\n    applyKernel(kernel) {\r\n        // determine kernel size\r\n        let size = kernel.count();\r\n        let radius = (size / 2) - 0.5;\r\n        let image = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                let pixel = this.getWithKernel(i, j, kernel, radius);\r\n                image.set(i - radius, j - radius, pixel);\r\n            }\r\n        }\r\n        return image; // succes \r\n    }\r\n    getMinMax() {\r\n        // get the minimum and maximum pixel value\r\n        // assumes pixelsize = 1\r\n        return [\r\n            Math.min(...this.data),\r\n            Math.max(...this.data)\r\n        ];\r\n    }\r\n    applyThreshold(lower, upper) {\r\n        return this.apply((x, y) => {\r\n            let pixel = this.get(x, y);\r\n            if (pixel[0] < lower) {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            else if (pixel[0] > upper) {\r\n                return [255, 255, 255, 255];\r\n            }\r\n            else {\r\n                return pixel;\r\n            }\r\n        });\r\n    }\r\n    apply(filler) {\r\n        let copy = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                copy.set(x, y, filler(x, y));\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    applyNMS() {\r\n        // determine kernel size\r\n        let size = 3;\r\n        let radius = (size / 2) - 0.5;\r\n        let copy = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                // let pixel = this.getWithKernel(i, j, kernel, radius)\r\n                // copy.set(i-radius, j-radius, pixel);\r\n            }\r\n        }\r\n        // img.eachPixel(3, function(x, y, c, n) {\r\n        //     if (n[1][1] > n[0][1] && n[1][1] > n[2][1]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][2] && n[1][1] > n[2][0]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[1][0] && n[1][1] > n[1][2]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][0] && n[1][1] > n[2][2]) {\r\n        //         return copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         return copy.data[x][y] = 0;\r\n        //     }\r\n        // });\r\n        return copy;\r\n    }\r\n    getWithKernel(i, j, kernel, radius) {\r\n        // kernel space\r\n        let sum = [0, 0, 0, 255];\r\n        let [dimx, dimy] = kernel.getDimensions();\r\n        for (let ki = 0; ki < dimx; ki++) {\r\n            for (let kj = 0; kj < dimy; kj++) {\r\n                let weight = kernel.get(ki, kj);\r\n                let pixel = this.get(i + ki - radius, j + kj - radius);\r\n                for (let i = 0; i < 3; i++) {\r\n                    sum[i] += pixel[i] * weight;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    setAplha(a) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                this.set(x, y, [pixel[0], pixel[1], pixel[2], a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        // scale the image to a new width and height, using nearest neighbour\r\n        return this.resize(Math.round(this.width * scaleX), Math.round(this.height * scaleY));\r\n    }\r\n    resize(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        const x_factor = (1 / image.width) * old.width;\r\n        const y_factor = (1 / image.height) * old.height;\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let pixel = this.get(Math.round(x * x_factor), Math.round(y * y_factor));\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    trimWithDomain(dom) {\r\n        const x1 = Math.round(dom.x.t0);\r\n        const x2 = Math.round(dom.x.t1);\r\n        const y1 = Math.round(dom.y.t0);\r\n        const y2 = Math.round(dom.y.t1);\r\n        return this.trim(x1, y1, x2, y2);\r\n    }\r\n    trim(x1, y1, x2, y2) {\r\n        // return a hardcopy of this particular window\r\n        const imageWidth = x2 - x1;\r\n        const imageHeight = y2 - y1;\r\n        const image = new GeonImage(imageWidth, imageHeight, this.pixelSize);\r\n        for (let y = 0; y < imageHeight; y++) {\r\n            for (let x = 0; x < imageWidth; x++) {\r\n                let pixel = this.get(x + x1, y + y1);\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toGreyscale() {\r\n        if (this.pixelSize != 4)\r\n            throw "please, only use this when pixelsize is 4";\r\n        let image = new GeonImage(this.width, this.height, 4);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                let avg = (pixel[0] + pixel[1] + pixel[2]) / 3;\r\n                image.set(x, y, [avg, avg, avg, 255]);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toRGBA() {\r\n        // if (this.pixelSize != 1) throw "please, only use this when pixelsize is 1"\r\n        return this;\r\n        // let image = new GeonImage(this.width, this.height, 4);\r\n        // for (let y = 0; y < this.height; y++) {\r\n        //     for (let x = 0; x < this.width; x++) {\r\n        //         let pixel = this.get(x,y);\r\n        //         let val = pixel[0];\r\n        //         image.set(x, y, [val, val, val, 255]);\r\n        //     }\r\n        // }\r\n        // return image;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/img/kernels.ts\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated \r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, (kernel.get(i, j) / sum));\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new FloatMatrix(3, 3, [\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 1, 1\r\n]).forEachValue((i) => i * 1 / 9);\r\nKernels.SmoothKernel5 = new FloatMatrix(5, 5, [\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1\r\n]).forEachValue((v) => v * 1 / 25);\r\nKernels.Gauss5 = new FloatMatrix(5, 5, [\r\n    2, 4, 5, 4, 2,\r\n    4, 9, 12, 9, 4,\r\n    5, 12, 15, 12, 5,\r\n    4, 9, 12, 9, 4,\r\n    2, 4, 5, 4, 2,\r\n]).forEachValue((v) => v * 1 / 159);\r\nKernels.TestKernel = new FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    0, 0, 0,\r\n    -1, 0, 1,\r\n]);\r\nKernels.SobelLeft = new FloatMatrix(3, 3, [\r\n    1, 2, 1,\r\n    0, 0, 0,\r\n    -1, -2, -1,\r\n]);\r\nKernels.SobelRight = new FloatMatrix(3, 3, [\r\n    -1, -2, -1,\r\n    0, 0, 0,\r\n    1, 2, 1,\r\n]);\r\nKernels.SobelUp = new FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    2, 0, -2,\r\n    1, 0, -1,\r\n]);\r\nKernels.SobelDown = new FloatMatrix(3, 3, [\r\n    -1, 0, 1,\r\n    -2, 0, 2,\r\n    -1, 0, 1,\r\n]);\r\n\n;// CONCATENATED MODULE: ./src/sfered/eye-finder.ts\n// name:    eye-finder.ts\r\n// author:  Jos Feenstra\r\n// purpose: Keeper of the full pupil-point.\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass EyeFinder {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    findPupilsFromBellus(bsd) {\r\n        // the main script of finding pupil points directly from the bellus scan data. \r\n        console.log("finding eyes..");\r\n        // get the window with which the eyes can be extracted\r\n        let image = GeonImage.fromImageData(bsd.texture);\r\n        let [winLeft, winRight] = this.getEyeWindows(bsd);\r\n        console.log(winLeft, winRight);\r\n        let topo = TopoMesh.copyFromMesh(bsd.mesh);\r\n        // left side\r\n        this.findPupilFromEye(image, topo, winLeft);\r\n        // right side\r\n        this.findPupilFromEye(image, topo, winRight);\r\n    }\r\n    findPupilFromEye(image, mesh, window) {\r\n        var _a;\r\n        // step 1: get points (vectors) which symbolize pixels in contrasting areas of the image (the iris).\r\n        let eyeImg = image.trimWithDomain(window);\r\n        let contrastEyeImg = this.contrastDetection(eyeImg);\r\n        let contrastPoints = this.pixelsToPoints(contrastEyeImg, 50);\r\n        let scaleVec = new Vector2(1 / image.width, 1 / image.height);\r\n        // convert these points to the same space as the uv points of the mesh\r\n        contrastPoints.forEach((p) => {\r\n            // move from eyetrim to original image space\r\n            p.add(new Vector2(window.x.t0, window.y.t0));\r\n            // move from pixel space to normalized uv space\r\n            p.mul(scaleVec);\r\n            // flip and move according to uv parameters\r\n            p.mul(new Vector2(1, -1));\r\n            p.add(new Vector2(0, 1));\r\n        });\r\n        // debug\r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.dots2.push(...contrastPoints.toNativeArray());\r\n        // step 2: elevate from uv space to vertex space of the mesh \r\n        let contrast3d = new vector_array_Vector3Array(contrastPoints.count());\r\n        contrastPoints.forEach((p, i) => {\r\n            contrast3d.setVector(i, mesh.elevate(p));\r\n        });\r\n    }\r\n    contrastDetection(image) {\r\n        var _a;\r\n        let grey = image.toGreyscale();\r\n        let blurred = grey.applyKernel(Kernels.Gauss5);\r\n        let left = blurred.applyKernel(Kernels.SobelLeft);\r\n        let right = blurred.applyKernel(Kernels.SobelRight);\r\n        let sum = this.SobelSum(left, right);\r\n        let [min, max] = sum.getMinMax();\r\n        console.log("minmax: ", min, max);\r\n        let upper = max * 0.7;\r\n        let lower = upper * 0.3;\r\n        let thres = sum.applyThreshold(lower, upper);\r\n        // debug \r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.images.push(blurred.toRGBA(), sum.toRGBA(), thres.toRGBA());\r\n        return thres;\r\n    }\r\n    SobelSum(hor, ver) {\r\n        let width = hor.width; // assume the same as ver\r\n        let height = hor.height; // assume the same as ver\r\n        let ps = hor.pixelSize;\r\n        let sum = new GeonImage(width, height, ps);\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // assume grey value\r\n                let one = hor.get(x, y)[0];\r\n                let two = ver.get(x, y)[0];\r\n                let value = Math.round(Math.pow((Math.pow(one, 2) + Math.pow(two, 2)), 0.5));\r\n                sum.set(x, y, [value, value, value, 255]);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    getEyeWindows(bsd) {\r\n        // get a window around the left- and right-eye feature points, so they can be extracted\r\n        let pr = bsd.settings.process.point_ranges;\r\n        let bb_o = bsd.settings.process.bounding_box_offset;\r\n        let eyeLandmarksLeft = bsd.landmarks.takeRows(pr.left_eye_set);\r\n        let eyeLandmarksRight = bsd.landmarks.takeRows(pr.right_eye_set);\r\n        let rightWindow = Domain2.fromInclude(eyeLandmarksLeft).offset(bb_o.ly);\r\n        let leftWindow = Domain2.fromInclude(eyeLandmarksRight).offset(bb_o.ry);\r\n        return [rightWindow, leftWindow];\r\n    }\r\n    pixelsToPoints(image, threshold) {\r\n        let points = [];\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let value = image.get(x, y)[0];\r\n                if (value > threshold) {\r\n                    points.push(new Vector2(x, y));\r\n                }\r\n            }\r\n        }\r\n        return Vector2Array.fromNativeArray(points);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/image-renderer.ts\n// name:    image-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of images / textures\r\n\r\nclass ImageRenderer extends Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        attribute vec2 a_position;\n        attribute vec2 a_texCoord;\n\n        uniform vec2 u_resolution;\n\n        varying vec2 v_texCoord;\n\n        void main() {\n            // convert the rectangle from pixels to 0.0 to 1.0\n            vec2 zeroToOne = ((a_position / u_resolution) * 2.0) - 1.0;\n\n            gl_Position = vec4(zeroToOne * vec2(1, -1), 0, 1);\n\n            v_texCoord = a_texCoord;\n        }\n        `;\r\n        let fragmentSource = `\n        precision mediump float;\n \n        uniform sampler2D u_image;\n\n        varying vec2 v_texCoord;\n        \n        void main() {\n            // Look up a color from the texture.\n            gl_FragColor = texture2D(u_image, v_texCoord);\n        }\n        `;\r\n        // setup program\r\n        super(gl, vertexSource, fragmentSource);\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.u_resolution = gl.getUniformLocation(this.program, "u_resolution");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // look up where the texture coordinates need to go.\r\n        var a_texCoord = gl.getAttribLocation(this.program, "a_texCoord");\r\n        // provide texture coordinates for the rectangle.\r\n        var a_texCoord_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, a_texCoord_buffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            0.0, 0.0,\r\n            1.0, 0.0,\r\n            0.0, 1.0,\r\n            0.0, 1.0,\r\n            1.0, 0.0,\r\n            1.0, 1.0\r\n        ]), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(a_texCoord);\r\n        gl.vertexAttribPointer(a_texCoord, 2, gl.FLOAT, false, 0, 0);\r\n        // Create a texture.\r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        // Set the parameters so we can render any size image.\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, r, image) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // Upload the image into the texture.\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n        // Turn on the attribute\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don\'t normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        this.setRectangle(gl, r);\r\n        // Set a random color.\r\n        gl.uniform4f(this.u_color, Math.random(), Math.random(), Math.random(), 1);\r\n        // Draw the rectangle.\r\n        var primitiveType = gl.TRIANGLES;\r\n        var offset = 0;\r\n        var count = 6;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    setRectangle(gl, r) {\r\n        let verts = r.getVertices();\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            verts[0].x, verts[0].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[3].x, verts[3].y,\r\n        ]), gl.STATIC_DRAW);\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/rectangle.ts\n\r\n// basic 2d rectangle\r\n// a Matrix3 and Domain2 is used. \r\n// this way, a rectangle can be rotated around an arbirtary point it regards as its center.\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/sfered/eye-finder-app.ts\n// name:    debug-app\r\n// author:  Jos Feenstra\r\n// purpose: environment to test eyefinder functionalities\r\nvar eye_finder_app_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst settings = __webpack_require__(504); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// note : sadly, this doesnt quite work. \r\n// TODO : figure out some serialize sceme, aka: spitting out obj data in json format. \r\n// const DEBUG_LANDMARKS: any = require(\'../../data/scan/facelandmarks.json\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_JPG: any = require(\'../../data/scan/head3d.jpg\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_OBJ: any = require(\'../../data/scan/head3d.obj\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// const DEBUG_FRONT_IMAGE: any = require(\'../../data/scan/image.obj\'); // note DIFFERENCE BETWEEN "" AND \'\'. \'\' WORKS, "" NOT. \r\n// console.log(DEBUG_JPG);\r\nclass EyeFinderApp extends App {\r\n    constructor(gl, canvas, context) {\r\n        super();\r\n        // debug data \r\n        this.dots2 = [];\r\n        this.dots3 = [];\r\n        this.images = [];\r\n        this.eyefinder = new EyeFinder(this);\r\n        // setup render stuff \r\n        this.gl = gl; // this is bad practice, but i need it during procesFiles\r\n        this.dotRenderer = new DotRenderer3(gl, 6, [0, 0, 1, 1], false);\r\n        this.redDotRenderer = new DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.lineRenderer = new SimpleLineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.redLineRenderer = new SimpleLineRenderer(gl, [1, 0, 0, 0.5]);\r\n        this.meshRenderer = new SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.imageRenderer = new ImageRenderer(gl);\r\n        this.camera = new Camera(canvas, 0.1);\r\n        addDropFileEventListeners(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        // nothing\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.updateWithControls(state);\r\n    }\r\n    draw(gl) {\r\n        var _a, _b, _c;\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.getRenderToScreenMatrix(canvas);\r\n        if (((_a = this.bsd) === null || _a === void 0 ? void 0 : _a.mesh) == undefined)\r\n            this.redDotRenderer.render(gl, matrix, [new vector_Vector3(0, 0, 0), new vector_Vector3(1, 1, 1)]);\r\n        else {\r\n            let mesh = (_b = this.bsd) === null || _b === void 0 ? void 0 : _b.mesh;\r\n            let landmarks = (_c = this.bsd) === null || _c === void 0 ? void 0 : _c.landmarks;\r\n            //this.redLineRenderer.render(gl, matrix);\r\n            // this.dotRenderer.renderQuick(gl, matrix, landmarks3.data, 3);\r\n            // this.dotRenderer.renderQuick(gl, matrix, mesh.verts.data, 3);\r\n            // this.meshRenderer.render(gl, matrix);\r\n            // this.redLineRenderer.render(gl, matrix);\r\n            // console.log(this.dots2);\r\n            this.redDotRenderer.render2(gl, matrix, this.dots2); // bounding boxes\r\n            this.dotRenderer.renderQuick(gl, matrix, mesh.uvs.data, 2);\r\n            this.redDotRenderer.renderQuick(gl, matrix, landmarks.data, 3);\r\n            // render images\r\n            let height = 200;\r\n            let width = 300;\r\n            this.images.forEach((image, i) => {\r\n                this.imageRenderer.render(gl, new Rectangle2(Matrix3.newIdentity(), Domain2.fromBounds(10, 10 + width, i * (height + 10), i * (height + 10) + height)), image.toImageData());\r\n            });\r\n        }\r\n    }\r\n    addBellusData(bsd) {\r\n        var _a;\r\n        this.bsd = bsd;\r\n        // start the eyefinder\r\n        this.eyefinder.findPupilsFromBellus(bsd);\r\n        // put the data into the render buffers.\r\n        let mesh = (_a = this.bsd) === null || _a === void 0 ? void 0 : _a.mesh;\r\n        // this.meshRenderer.set(this.gl, mesh.verts, mesh.faces);\r\n        // this.lineRenderer.set(this.gl, mesh.verts.data, mesh.getLineIds(), 3);\r\n        // this.redLineRenderer.set(this.gl, mesh.uvs.data, mesh.getLineIds(), 2);\r\n    }\r\n}\r\nfunction processFiles(files) {\r\n    return eye_finder_app_awaiter(this, void 0, void 0, function* () {\r\n        BellusScanData.fromFileList(files, settings).then((bsd) => this.addBellusData(bsd));\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/input-state.ts\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key["A"] = 0] = "A";\r\n    Key[Key["B"] = 1] = "B";\r\n    Key[Key["C"] = 2] = "C";\r\n    Key[Key["D"] = 3] = "D";\r\n    Key[Key["E"] = 4] = "E";\r\n    Key[Key["F"] = 5] = "F";\r\n    Key[Key["G"] = 6] = "G";\r\n    Key[Key["H"] = 7] = "H";\r\n    Key[Key["I"] = 8] = "I";\r\n    Key[Key["J"] = 9] = "J";\r\n    Key[Key["K"] = 10] = "K";\r\n    Key[Key["L"] = 11] = "L";\r\n    Key[Key["M"] = 12] = "M";\r\n    Key[Key["N"] = 13] = "N";\r\n    Key[Key["O"] = 14] = "O";\r\n    Key[Key["P"] = 15] = "P";\r\n    Key[Key["Q"] = 16] = "Q";\r\n    Key[Key["R"] = 17] = "R";\r\n    Key[Key["S"] = 18] = "S";\r\n    Key[Key["T"] = 19] = "T";\r\n    Key[Key["U"] = 20] = "U";\r\n    Key[Key["V"] = 21] = "V";\r\n    Key[Key["W"] = 22] = "W";\r\n    Key[Key["X"] = 23] = "X";\r\n    Key[Key["Y"] = 24] = "Y";\r\n    Key[Key["Z"] = 25] = "Z";\r\n    Key[Key["Up"] = 26] = "Up";\r\n    Key[Key["Down"] = 27] = "Down";\r\n    Key[Key["Left"] = 28] = "Left";\r\n    Key[Key["Right"] = 29] = "Right";\r\n    Key[Key["Space"] = 30] = "Space";\r\n    Key[Key["Control"] = 31] = "Control";\r\n    Key[Key["Alt"] = 32] = "Alt";\r\n    Key[Key["Shift"] = 33] = "Shift";\r\n    Key[Key["Enter"] = 34] = "Enter";\r\n    Key[Key["Esc"] = 35] = "Esc";\r\n    Key[Key["N1"] = 36] = "N1";\r\n    Key[Key["N2"] = 37] = "N2";\r\n    Key[Key["N3"] = 38] = "N3";\r\n    Key[Key["N4"] = 39] = "N4";\r\n    Key[Key["N5"] = 40] = "N5";\r\n    Key[Key["N6"] = 41] = "N6";\r\n    Key[Key["N7"] = 42] = "N7";\r\n    Key[Key["N8"] = 43] = "N8";\r\n    Key[Key["N9"] = 44] = "N9";\r\n    Key[Key["N0"] = 45] = "N0";\r\n    Key[Key["Plus"] = 46] = "Plus";\r\n    Key[Key["Minus"] = 47] = "Minus";\r\n    Key[Key["Backspace"] = 48] = "Backspace";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case (Key.A): return 1;\r\n        case (Key.B): return 2;\r\n        case (Key.C): return 3;\r\n        case (Key.D): return 4;\r\n        case (Key.E): return 5;\r\n        case (Key.F): return 6;\r\n        default: return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = Vector2.zero();\r\n        this.mouseDelta = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("mousedown", this.setMouseDown.bind(this));\r\n        canvas.addEventListener("mouseup", this.setMouseUp.bind(this));\r\n        canvas.addEventListener("contextmenu", (e) => { e.preventDefault(); e.stopPropagation(); });\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("wheel", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener("touchmove", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchstart", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchend", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener("keydown", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener("keypressed", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener("keyup", this.onKeyUp.bind(this));\r\n        // final   \r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = (this.newTime - this.oldTime);\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n        this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n        this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log("we be scrollin\' now...")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new Vector2(e.clientX, e.clientY);\r\n        ;\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/core.ts\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls. \r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\nclass Core {\r\n    constructor(canvas, gl) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new InputState(canvas);\r\n        this.apps = [];\r\n    }\r\n    addApp(app) {\r\n        this.apps.push(app);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        if (this.state.IsKeyPressed("Esc"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height ||\r\n            window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n// Author: Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\nconst REALTIME_DEMO = false;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById("canvas");\r\n    let video = document.getElementById("camera");\r\n    let context = document.getElementById("interface");\r\n    let cameraOn = document.getElementById("camera-on");\r\n    let cameraStop = document.getElementById("camera-off");\r\n    let buttonPredict = document.getElementById("predict");\r\n    let gl = initWebglContext(canvas);\r\n    const core = new Core(canvas, gl);\r\n    // the eyefinder app itself\r\n    core.addApp(new EyeFinderApp(gl, canvas, context));\r\n    // fun demo\'s to test various functionalities \r\n    // core.addApp(new RectangleApp(gl)); \r\n    // core.addApp(new DotApp3(gl, canvas)); \r\n    // core.addApp(new ObjLoaderApp(gl, canvas));\r\n    // addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    // loop();\r\n    requestAnimationFrame(loop);\r\n}\r\n// __main__ \r\nwindow.addEventListener("load", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///270\n')})()})();