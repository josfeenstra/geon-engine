/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./demo/apps/dot-app3.ts":
/*!*******************************!*\
  !*** ./demo/apps/dot-app3.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotApp3\": () => /* binding */ DotApp3\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// dot-app3.ts\r\n//\r\n// author : Jos Feenstra\r\n// purpose : test with Renderers, Domains & Vectors\r\n\r\nclass DotApp3 extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots = [];\r\n        this.dirs = [];\r\n        let canvas = gl.canvas;\r\n        let n = 1;\r\n        this.bounds = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-n, n, -n, n, -n, n);\r\n        this.whiteDotRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [1, 1, 1, 1], false);\r\n        this.redDotRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [1, 0, 0, 1], false);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n    }\r\n    start() {\r\n        this.spawnSome(100, 0.001);\r\n    }\r\n    spawnSome(count, normrange) {\r\n        const normSpace = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-normrange, normrange, -normrange, normrange, -normrange, normrange);\r\n        for (let i = 0; i < count; i++) {\r\n            this.dots.push(this.bounds.elevate(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.fromRandom()));\r\n            this.dirs.push(normSpace.elevate(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.fromRandom()));\r\n        }\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        if (state.mouseLeftPressed) {\r\n            this.spawnSome(100, 0.001);\r\n        }\r\n        // update the position of all dots\r\n        for (let i = 0; i < this.dots.length; i++) {\r\n            // this gives us a pointer apparantly\r\n            let dot = this.dots[i];\r\n            let dir = this.dirs[i];\r\n            // bounce of the edges\r\n            if (!this.bounds.x.includes(dot.x))\r\n                dir.x = -dir.x;\r\n            if (!this.bounds.y.includes(dot.y))\r\n                dir.y = -dir.y;\r\n            if (!this.bounds.z.includes(dot.z))\r\n                dir.z = -dir.z;\r\n            // update position\r\n            dot.add(dir);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the corners of the box with the red renderer,\r\n        // and the dots themselves with the white renderer\r\n        this.redDotRend.setAndRender(gl, matrix, this.bounds.corners(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newIdentity()));\r\n        this.whiteDotRend.setAndRender(gl, matrix, this.dots);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vYXBwcy9kb3QtYXBwMy50cz8wNzYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsY0FBYztBQUNkLEVBQUU7QUFDRix3QkFBd0I7QUFDeEIsbURBQW1EO0FBRThDO0FBRTFGLE1BQU0sT0FBUSxTQUFRLHlDQUFHO0lBUzVCLFlBQVksRUFBeUI7UUFDakMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBVGQsU0FBSSxHQUFjLEVBQUUsQ0FBQztRQUNyQixTQUFJLEdBQWMsRUFBRSxDQUFDO1FBVWpCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUEyQixDQUFDO1FBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsd0RBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksa0RBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGtEQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUI7UUFDdEMsTUFBTSxTQUFTLEdBQUcsd0RBQWtCLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUxRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLHdEQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsd0RBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWlCO1FBQ3BCLGlDQUFpQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELGtDQUFrQztRQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMscUNBQXFDO1lBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV2QixzQkFBc0I7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFbkQsa0JBQWtCO1lBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRUQsSUFBSSxDQUFDLEVBQXlCO1FBQzFCLHVCQUF1QjtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUVyQyx1REFBdUQ7UUFDdkQsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMseURBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vZGVtby9hcHBzL2RvdC1hcHAzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZG90LWFwcDMudHNcbi8vXG4vLyBhdXRob3IgOiBKb3MgRmVlbnN0cmFcbi8vIHB1cnBvc2UgOiB0ZXN0IHdpdGggUmVuZGVyZXJzLCBEb21haW5zICYgVmVjdG9yc1xuXG5pbXBvcnQgeyBEb21haW4zLCBEb3RSZW5kZXJlcjMsIENhbWVyYSwgVmVjdG9yMywgSW5wdXRTdGF0ZSwgTWF0cml4NCwgQXBwIH0gZnJvbSBcIi4uLy4uL3NyYy9saWJcIjtcblxuZXhwb3J0IGNsYXNzIERvdEFwcDMgZXh0ZW5kcyBBcHAge1xuICAgIGRvdHM6IFZlY3RvcjNbXSA9IFtdO1xuICAgIGRpcnM6IFZlY3RvcjNbXSA9IFtdO1xuXG4gICAgYm91bmRzOiBEb21haW4zO1xuICAgIHdoaXRlRG90UmVuZDogRG90UmVuZGVyZXIzO1xuICAgIHJlZERvdFJlbmQ6IERvdFJlbmRlcmVyMztcbiAgICBjYW1lcmE6IENhbWVyYTtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgc3VwZXIoZ2wpO1xuXG4gICAgICAgIGxldCBjYW52YXMgPSBnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIGxldCBuID0gMTtcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBEb21haW4zLmZyb21Cb3VuZHMoLW4sIG4sIC1uLCBuLCAtbiwgbik7XG4gICAgICAgIHRoaXMud2hpdGVEb3RSZW5kID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgMTAsIFsxLCAxLCAxLCAxXSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlZERvdFJlbmQgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCAxMCwgWzEsIDAsIDAsIDFdLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMpO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnNwYXduU29tZSgxMDAsIDAuMDAxKTtcbiAgICB9XG5cbiAgICBzcGF3blNvbWUoY291bnQ6IG51bWJlciwgbm9ybXJhbmdlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgbm9ybVNwYWNlID0gRG9tYWluMy5mcm9tQm91bmRzKC1ub3JtcmFuZ2UsIG5vcm1yYW5nZSwgLW5vcm1yYW5nZSwgbm9ybXJhbmdlLCAtbm9ybXJhbmdlLCBub3JtcmFuZ2UpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5kb3RzLnB1c2godGhpcy5ib3VuZHMuZWxldmF0ZShWZWN0b3IzLmZyb21SYW5kb20oKSkpO1xuICAgICAgICAgICAgdGhpcy5kaXJzLnB1c2gobm9ybVNwYWNlLmVsZXZhdGUoVmVjdG9yMy5mcm9tUmFuZG9tKCkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZShzdGF0ZTogSW5wdXRTdGF0ZSkge1xuICAgICAgICAvLyBtb3ZlIHRoZSBjYW1lcmEgd2l0aCB0aGUgbW91c2VcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHN0YXRlKTtcblxuICAgICAgICBpZiAoc3RhdGUubW91c2VMZWZ0UHJlc3NlZCkge1xuICAgICAgICAgICAgdGhpcy5zcGF3blNvbWUoMTAwLCAwLjAwMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIGFsbCBkb3RzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGdpdmVzIHVzIGEgcG9pbnRlciBhcHBhcmFudGx5XG4gICAgICAgICAgICBsZXQgZG90ID0gdGhpcy5kb3RzW2ldO1xuICAgICAgICAgICAgbGV0IGRpciA9IHRoaXMuZGlyc1tpXTtcblxuICAgICAgICAgICAgLy8gYm91bmNlIG9mIHRoZSBlZGdlc1xuICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5kcy54LmluY2x1ZGVzKGRvdC54KSkgZGlyLnggPSAtZGlyLng7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYm91bmRzLnkuaW5jbHVkZXMoZG90LnkpKSBkaXIueSA9IC1kaXIueTtcbiAgICAgICAgICAgIGlmICghdGhpcy5ib3VuZHMuei5pbmNsdWRlcyhkb3QueikpIGRpci56ID0gLWRpci56O1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb25cbiAgICAgICAgICAgIGRvdC5hZGQoZGlyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXcoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICAvLyBnZXQgdG8tc2NyZWVuIG1hdHJpeFxuICAgICAgICBjb25zdCBjYW52YXMgPSBnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIGxldCBtYXRyaXggPSB0aGlzLmNhbWVyYS50b3RhbE1hdHJpeDtcblxuICAgICAgICAvLyByZW5kZXIgdGhlIGNvcm5lcnMgb2YgdGhlIGJveCB3aXRoIHRoZSByZWQgcmVuZGVyZXIsXG4gICAgICAgIC8vIGFuZCB0aGUgZG90cyB0aGVtc2VsdmVzIHdpdGggdGhlIHdoaXRlIHJlbmRlcmVyXG4gICAgICAgIHRoaXMucmVkRG90UmVuZC5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgdGhpcy5ib3VuZHMuY29ybmVycyhNYXRyaXg0Lm5ld0lkZW50aXR5KCkpKTtcbiAgICAgICAgdGhpcy53aGl0ZURvdFJlbmQuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIHRoaXMuZG90cyk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./demo/apps/dot-app3.ts\n");

/***/ }),

/***/ "./demo/apps/geometry-app.ts":
/*!***********************************!*\
  !*** ./demo/apps/geometry-app.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeometryApp\": () => /* binding */ GeometryApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    geometry-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: a 3d voxel environment to toy around in. Uses several features of geon\r\n\r\nclass GeometryApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.dots = [];\r\n        this.geo = [];\r\n        this.mapGeo = [];\r\n        // logic data\r\n        this.size = 50;\r\n        this.cellSize = 1;\r\n        this.pov = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"pov\", 80, 10, 100, 1);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(gl.canvas, 10, true);\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.whiteLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [1, 1, 1, 1]);\r\n        this.greyLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.2, 0, 1, 0.5]);\r\n        this.redLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.8, 0, 0, 1]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n        this.transMeshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [1, 1, 1, 0.25], [1, 1, 1, 0.25]);\r\n    }\r\n    // called after init\r\n    start() {\r\n        this.map = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.IntCube(this.size, this.size, this.size);\r\n        this.map.fill(0);\r\n        // add random blocks in the world\r\n        this.map.map((value, index) => {\r\n            if (Math.random() > 0.99) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        });\r\n        // let perlin = new Perlin();\r\n        // this.map.map((value, i) => {\r\n        //     let c = this.map.getCoords(i);\r\n        //     let scale = 0.05;\r\n        //     let noise = perlin.noise(c.x * scale, c.y * scale, c.z * scale);\r\n        //     if (i < 10) {\r\n        //         console.log(c);\r\n        //         console.log(noise);\r\n        //     }\r\n        //     if (noise > 0.60) {\r\n        //         return 1;\r\n        //     } else {\r\n        //         return value;\r\n        //     }\r\n        // })\r\n        // console.log(\"done setting\")\r\n        // after change, buffer\r\n        this.bufferMap();\r\n        // console.log(\"done\")\r\n        this.gridLarge = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane, this.size, this.cellSize);\r\n        this.gridSmall = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane, this.size * 10 - 1, this.cellSize / 10);\r\n        // this.whiteLineRenderer.set(this.gl, this.gridLarge, DrawSpeed.StaticDraw);\r\n        // this.greyLineRenderer.set(this.gl, this.gridSmall, DrawSpeed.StaticDraw);\r\n    }\r\n    ui(ui) {\r\n        ui.addParameter(this.pov);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        this.updateCursor(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the grid\r\n        // this.greyLineRenderer.render(gl, matrix);\r\n        // this.whiteLineRenderer.render(gl, matrix);\r\n        // this.redLineRenderer.setAndRender(gl, matrix, this.cursorVisual!);\r\n        // render the map\r\n        // TODO create MeshArray\r\n        this.meshRenderer.render(gl, this.camera);\r\n        // render other things\r\n        for (let geo of this.geo) {\r\n            this.transMeshRenderer.buffer(gl, geo, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n            this.transMeshRenderer.render(gl, this.camera);\r\n        }\r\n    }\r\n    addPreviewCube(point) {\r\n        let cubeCenter = this.mapToWorld(point);\r\n        let cube = this.createCube(cubeCenter);\r\n        this.geo.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCube(cube).toRenderable());\r\n    }\r\n    flushPreviewCubes() {\r\n        this.geo = [];\r\n    }\r\n    updateCursor(state) {\r\n        // render mouse to world line\r\n        let mouseRay = this.camera.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        // snap to world\r\n        // let cursor = mouseRay.at(mouseRay.xPlane(this.plane));\r\n        // let mapCursor = this.worldToMap(cursor);\r\n        // let coord = this.mapToWorld(mapCursor);\r\n        // place circle at cursor\r\n        // let plane = this.plane.clone();\r\n        // plane.matrix = plane.matrix.multiply(Matrix4.newTranslation(cursor.x, cursor.y, cursor.z));\r\n        // this.cursorVisual = LineArray.fromCircle(new Circle3(plane, 0.1));\r\n        // figure out which cube we are pointing to\r\n        this.flushPreviewCubes();\r\n        let [cubeID, cubeIDprevious] = this.voxelRaycast(mouseRay, 40);\r\n        if (cubeID == -1) {\r\n            // nothing else to do\r\n            return;\r\n        }\r\n        let cubeCursor = this.map.getCoords(cubeIDprevious);\r\n        this.addPreviewCube(cubeCursor);\r\n        // render cube at this position\r\n        // this.geo.push(Mesh.fromCube(cube));\r\n        // click\r\n        if (state.mouseLeftPressed) {\r\n            console.log(\"click\");\r\n            if (state.IsKeyDown(\" \")) {\r\n                if (this.map.data[cubeID] == 0)\r\n                    return;\r\n                this.map.data[cubeID] = 0;\r\n                this.bufferMap();\r\n            }\r\n            else if (this.map.data[cubeIDprevious] != 1) {\r\n                this.map.data[cubeIDprevious] = 1;\r\n                this.bufferMap();\r\n            }\r\n        }\r\n    }\r\n    // return the ID of the\r\n    // A Fast Voxel Traversal Algorithm for Ray Tracing\r\n    // Amanatides, Woo\r\n    // Dept. of Computer Science\r\n    voxelRaycast(ray, range) {\r\n        let startPoint = this.worldToMap(ray.origin);\r\n        let voxelCenter = this.mapToWorld(startPoint);\r\n        // integers\r\n        let x = startPoint.x;\r\n        let y = startPoint.y;\r\n        let z = startPoint.z;\r\n        let xprev = x;\r\n        let yprev = y;\r\n        let zprev = z;\r\n        let stepX = ray.normal.x > 0 ? 1 : -1;\r\n        let stepY = ray.normal.y > 0 ? 1 : -1;\r\n        let stepZ = ray.normal.z > 0 ? 1 : -1;\r\n        // floats\r\n        let voxelsize = this.cellSize;\r\n        let deltax = voxelsize / Math.abs(ray.normal.x);\r\n        let deltay = voxelsize / Math.abs(ray.normal.y);\r\n        let deltaz = voxelsize / Math.abs(ray.normal.z);\r\n        // intit tx, ty, and tz, at their first intersection with corresponding plane\r\n        voxelCenter.add(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3((voxelsize / 2) * stepX, (voxelsize / 2) * stepY, (voxelsize / 2) * stepZ));\r\n        let move = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(voxelCenter.x, voxelCenter.y, voxelCenter.z);\r\n        let xy = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        xy._matrix.multiply(move);\r\n        let yz = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldYZ();\r\n        yz._matrix.multiply(move);\r\n        let xz = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXZ();\r\n        xz._matrix.multiply(move);\r\n        let tx = ray.xPlane(yz);\r\n        let ty = ray.xPlane(xz);\r\n        let tz = ray.xPlane(xy);\r\n        if (tx < 0 || ty < 0 || tz < 0) {\r\n            console.log(\"something critical went wrong!\");\r\n            return [-1, -1];\r\n        }\r\n        // debug ray\r\n        // let lineSets: LineArray[] = [ray.toLine(100), LineArray.fromPlane(xy), LineArray.fromPlane(yz), LineArray.fromPlane(xz)];\r\n        // this.whiteLineRenderer.set(this.gl, LineArray.fromJoin(lineSets), DrawSpeed.StaticDraw);\r\n        // console.log(\"voxel raycast initialized with:\");\r\n        // console.log(\"deltas: \", deltax, deltay, deltaz);\r\n        // console.log(\"t's: \", tx, ty, tz);\r\n        // start iterating\r\n        // console.log(\"cast away!\");\r\n        // this.addPreviewCube(new Vector3(x,y,z));\r\n        // console.log(x,y,z);\r\n        for (let i = 0; i < range; i++) {\r\n            // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n            // if hit, return previous\r\n            let value = this.map.tryGet(x, y, z);\r\n            if (value == 1) {\r\n                // console.log(\"found a cube after \" + i + \"steps...\");\r\n                // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n                return [this.map.getIndex(x, y, z), this.map.getIndex(xprev, yprev, zprev)];\r\n            }\r\n            else {\r\n                xprev = x;\r\n                yprev = y;\r\n                zprev = z;\r\n            }\r\n            // to the next cube!\r\n            if (tx < ty && tx < tz) {\r\n                // x\r\n                tx += deltax;\r\n                x += stepX;\r\n            }\r\n            else if (ty < tz) {\r\n                // y\r\n                ty += deltay;\r\n                y += stepY;\r\n            }\r\n            else {\r\n                // z\r\n                tz += deltaz;\r\n                z += stepZ;\r\n            }\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    // flush this.meshRenderer\r\n    // turn this.map into this.mapGeo\r\n    bufferMap() {\r\n        let mapGeo = [];\r\n        this.map.iter((entry, index) => {\r\n            if (entry == 1) {\r\n                let mapCoord = this.map.getCoords(index);\r\n                let coord = this.mapToWorld(mapCoord);\r\n                let cube = this.createCube(coord);\r\n                mapGeo.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCube(cube));\r\n            }\r\n        });\r\n        let m = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(mapGeo).toRenderable();\r\n        m.calculateFaceNormals();\r\n        this.meshRenderer.set(this.gl, m);\r\n    }\r\n    worldToMap(coord) {\r\n        let halfsize = this.size / 2 + this.cellSize / 2;\r\n        return coord.added(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(halfsize, halfsize, halfsize)).floored();\r\n    }\r\n    mapToWorld(point) {\r\n        let halfsize = this.size / 2;\r\n        return point.added(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-halfsize, -halfsize, -halfsize));\r\n    }\r\n    createCube(center) {\r\n        let hs = this.cellSize / 2;\r\n        let move = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(center.x, center.y, center.z);\r\n        let cube = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Cube(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY().transform(move), _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-hs, hs, -hs, hs, -hs, hs));\r\n        return cube;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/geometry-app.ts\n");

/***/ }),

/***/ "./demo/apps/icosahedron-app.ts":
/*!**************************************!*\
  !*** ./demo/apps/icosahedron-app.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IcosahedronApp\": () => /* binding */ IcosahedronApp,\n/* harmony export */   \"graphToMultiMesh\": () => /* binding */ graphToMultiMesh\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test statistic functionalties\r\n\r\nclass IcosahedronApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.radius = 0.1; // radius!: Parameter;\r\n        this.detail = 6; // detail!: Parameter;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 8, true);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n        this.normalRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.NormalRenderer(gl);\r\n    }\r\n    getIcosahedron() {\r\n        let graph = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newIcosahedron(1).toGraph();\r\n        // let graph = Mesh.newCylinder(Vector3.new(0,0,-1), Vector3.new(0,0,1), 1, 4).toGraph();\r\n        // let graph = Mesh.newSphere(Vector3.new(0,0,0), 1, 5, 10).toGraph().toMesh().toGraph();\r\n        // graph.print();\r\n        return graph;\r\n    }\r\n    getDemoShape() {\r\n        let graph = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Graph.new();\r\n        function addVert(v) {\r\n            graph.addVert(v, v);\r\n        }\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, 0, -1)); // 0\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, -1)); // 1\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, -1)); // 2\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, -1, -1)); // 3\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1)); // 4\r\n        addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, 1, 0)); // 5 (should be inserted between 0 and 1)\r\n        graph.addEdge(4, 0);\r\n        graph.addEdge(4, 1);\r\n        graph.addEdge(4, 2);\r\n        graph.addEdge(4, 3);\r\n        // graph.addEdge(4,5);\r\n        graph.addEdge(0, 1);\r\n        graph.addEdge(1, 2);\r\n        graph.addEdge(2, 3);\r\n        graph.addEdge(3, 0);\r\n        graph.addEdge(1, 3);\r\n        graph.print();\r\n        return graph;\r\n    }\r\n    demo() {\r\n        let graph = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Graph();\r\n        let normal = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1);\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0), normal); // 0\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, 0), normal); // 1\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0), normal); //\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, 0, 0), normal); //\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, -1, 0), normal); //\r\n        graph.addEdge(0, 1);\r\n        graph.addEdge(0, 2);\r\n        graph.addEdge(0, 3);\r\n        graph.addEdge(0, 4);\r\n        graph.addEdge(1, 2);\r\n        return graph;\r\n    }\r\n    ui(ui) {\r\n        this.rotate = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"rotate\", 1, 0, 1, 1);\r\n        this.inner = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"inner\", 1, 0, 1, 1);\r\n        // this.radius = new Parameter(\"radius\", 0.1, 0, 0.5, 0.01)\r\n        // this.detail = new Parameter(\"detail\", 6, 3, 20, 1)\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.inner, reset);\r\n        // ui.addParameter(this.radius, reset);\r\n        // ui.addParameter(this.detail, reset);\r\n        // ui.addButton(() => {this.start()})\r\n    }\r\n    start() {\r\n        this.graph = this.getIcosahedron();\r\n        this.mesh = graphToMultiMesh(this.graph, this.radius, this.detail, this.inner.get() == 1);\r\n        this.meshRend.set(this.gl, this.mesh);\r\n        // this.normalRend.set(this.graph.toRenderable(), DrawSpeed.DynamicDraw);\r\n        // console.log(\"all loops: \", this.graph.allLoops());\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        if (!state.mouseRightDown && this.rotate.get() == 1) {\r\n            let alpha = 0.0002 * state.tick;\r\n            let rot = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(alpha).multiply(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(alpha));\r\n            this.mesh.transform(rot);\r\n            this.meshRend.set(this.gl, this.mesh, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        this.meshRend.render(gl, this.camera);\r\n        // this.normalRend.render(gl, this.camera);\r\n    }\r\n}\r\nfunction graphToMultiMesh(graph, radius, detail, inner, balls = true) {\r\n    let meshes = [];\r\n    if (balls) {\r\n        graph.allVertPositions().forEach((v) => {\r\n            meshes.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newSphere(v, radius * 2, detail, detail * 2));\r\n        });\r\n    }\r\n    let edges = graph.allEdgeVerts();\r\n    for (let i = 0; i < edges.length; i += 2) {\r\n        let from = graph.getVertexPos(edges[i]);\r\n        let to = graph.getVertexPos(edges[i + 1]);\r\n        let mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newCylinder(from, to, radius, detail);\r\n        meshes.push(mesh);\r\n    }\r\n    if (inner) {\r\n        meshes.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromGraph(graph));\r\n    }\r\n    let rmesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(meshes).toRenderable();\r\n    rmesh.calculateFaceNormals();\r\n    return rmesh;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/icosahedron-app.ts\n");

/***/ }),

/***/ "./demo/apps/least-squares-app.ts":
/*!****************************************!*\
  !*** ./demo/apps/least-squares-app.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LeastSquaresApp\": () => /* binding */ LeastSquaresApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n\r\n// good sites explaining the power of least squares\r\n// https://courses.physics.illinois.edu/cs357/sp2020/notes/ref-17-least-squares.html\r\n// http://textbooks.math.gatech.edu/ila/least-squares.html\r\nclass LeastSquaresApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        // ui\r\n        this.params = [];\r\n        this.count = 2;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, -2, true);\r\n        this.drRed = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [1, 0, 0, 1], false);\r\n        this.drGreen = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [0, 1, 0, 1], false);\r\n        this.drBlue = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.3, 0.3, 0.3, 1]);\r\n        this.points = createRandomPoints(16, 1);\r\n        this.resetCamera();\r\n    }\r\n    ui(ui) {\r\n        const factor = 5;\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"x\", 0, -factor, factor, 0.1));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"y\", 0, -factor, factor, 0.1));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"z\", 0, -factor, factor, 0.1));\r\n        const two_pi = 3.1415 * 2;\r\n        const piPart = (two_pi * 2) / 100;\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"a\", 0.0, -two_pi, two_pi, piPart));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"b\", 0.0, -two_pi, two_pi, piPart));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"g\", 0.0, -two_pi, two_pi, piPart));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sx\", 1, -factor, factor, 0.1));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sy\", 1, -factor, factor, 0.1));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sz\", 1, -factor, factor, 0.1));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"noise\", 0, 0, 1, 0.01));\r\n        this.params.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter.newBoolean(\"realtime\", true));\r\n        this.params.push(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"point count\", 16, 1, 100, 1));\r\n        let p = this.params;\r\n        let recalc = () => {\r\n            if (this.params[10].state == 1) {\r\n                this.start();\r\n            }\r\n        };\r\n        ui.addText(\"Using least squares adjustment & singular value decomposition to solve a 3D transformation between points. F12 for more info\");\r\n        ui.addText(\"translate\");\r\n        ui.addParameter(p[0], recalc);\r\n        ui.addParameter(p[1], recalc);\r\n        ui.addParameter(p[2], recalc);\r\n        ui.addText(\"rotate\");\r\n        ui.addParameter(p[3], recalc);\r\n        ui.addParameter(p[4], recalc);\r\n        ui.addParameter(p[5], recalc);\r\n        ui.addText(\"scale\");\r\n        ui.addParameter(p[6], recalc);\r\n        ui.addParameter(p[7], recalc);\r\n        ui.addParameter(p[8], recalc);\r\n        ui.addText(\"\");\r\n        ui.addParameter(p[9], recalc);\r\n        ui.addParameter(p[11], () => {\r\n            this.points = createRandomPoints(this.params[11].get(), 1);\r\n            this.start();\r\n        });\r\n        ui.addBooleanParameter(p[10]);\r\n        ui.addButton(\"recalculate\", () => {\r\n            this.start();\r\n        });\r\n    }\r\n    resetCamera() {\r\n        this.camera.z_offset = -10;\r\n        this.camera.angleAlpha = Math.PI * 0.25;\r\n        this.camera.angleBeta = Math.PI * 0.25;\r\n    }\r\n    startGrid() {\r\n        let grid = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY().moveTo(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -1)), 100, 2);\r\n        this.lineRenderer.set(this.gl, grid, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw);\r\n    }\r\n    start() {\r\n        console.clear();\r\n        // translate\r\n        let mov = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(this.params[0].get(), this.params[1].get(), this.params[2].get());\r\n        // rotate\r\n        let rotx = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(this.params[3].get());\r\n        let roty = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(this.params[4].get());\r\n        let rotz = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newZRotation(this.params[5].get());\r\n        let rot = rotx.multiplied(roty).multiplied(rotz);\r\n        // scale\r\n        let sca = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(this.params[6].get(), this.params[7].get(), this.params[8].get());\r\n        // compound\r\n        let M = sca.multiplied(rot.multiplied(mov));\r\n        // transform the points\r\n        this.Pnormal = this.points.clone().transform(M);\r\n        // apply noise\r\n        let noise = createRandomPoints(this.params[11].get(), this.params[9].get());\r\n        this.Pnormal = this.Pnormal.mapWith(noise, (a, b) => {\r\n            return a + b;\r\n        });\r\n        // approximate using least squares adjustment\r\n        let lsa_matrix = leastSquares(this.points, this.Pnormal);\r\n        this.Plsa = this.points.clone().transform(lsa_matrix);\r\n        // show\r\n        console.log(\"original matrix: (blue)\");\r\n        M.print();\r\n        console.log(\"lsa+svd recovered matrix from nothing but the points: (green)\");\r\n        lsa_matrix.print();\r\n        // TODO something is going wrong with setting, so we are using set&render in the draw step every time...\r\n        this.startGrid();\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        this.lineRenderer.render(gl, matrix);\r\n        this.drRed.setAndRender(gl, matrix, this.points);\r\n        this.drBlue.setAndRender(gl, matrix, this.Pnormal);\r\n        this.drGreen.setAndRender(gl, matrix, this.Plsa);\r\n    }\r\n}\r\nfunction createRandomPoints(count, range) {\r\n    let bounds = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-range, range, -range, range, -range, range);\r\n    let arr = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        arr.setVector(i, bounds.elevate(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.fromRandom()));\r\n    }\r\n    return arr;\r\n}\r\n// solve x for Ax = b, where in this case, A = left, b = right.\r\nfunction leastSquares(left, right) {\r\n    if (left.count() != right.count()) {\r\n        throw \"matrices need to be of equal width & height\";\r\n    }\r\n    // construct linear system of equations\r\n    let n = left.count();\r\n    let left_width = 4;\r\n    let right_width = 3;\r\n    let height = right_width * n;\r\n    let width = 16;\r\n    let M = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(height, width);\r\n    // per row in floatmatrix\r\n    for (let f = 0; f < n; f++) {\r\n        let l_vec = [...left.getRow(f), 1];\r\n        let r_vec = [...right.getRow(f), 1];\r\n        // go over x', y', z', 1 on the right side\r\n        for (let part = 0; part < right_width; part++) {\r\n            //\r\n            let i = f * right_width + part;\r\n            let offset = left_width * part;\r\n            // X  Y  Z  1  0  0  0  0 ...\r\n            for (let j = 0; j < l_vec.length; j++) {\r\n                M.set(i, j + offset, l_vec[j]);\r\n            }\r\n            // ... -v*X  -v*Y  -v*Z   -v*1\r\n            offset = width - left_width;\r\n            for (let j = 0; j < l_vec.length; j++) {\r\n                let v = M.get(i, j + offset);\r\n                M.set(i, j + offset, v + -1 * r_vec[part] * l_vec[j]);\r\n            }\r\n        }\r\n    }\r\n    let [U, S, V] = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Stat.svd(M);\r\n    let col = V.getColumn(V._width - 1);\r\n    let scaler = 1 / col[15];\r\n    for (let i = 0; i < col.length; i++) {\r\n        col[i] = Math.round(col[i] * scaler * 100000) / 100000;\r\n    }\r\n    // create the actual matrix\r\n    let matrix = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.new([...col]);\r\n    return matrix.transpose();\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/least-squares-app.ts\n");

/***/ }),

/***/ "./demo/apps/mesh-inspector-app.ts":
/*!*****************************************!*\
  !*** ./demo/apps/mesh-inspector-app.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshInspectorApp\": () => /* binding */ MeshInspectorApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    shapes-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test creation of basic mesh shapes. Test UI\r\n\r\nclass MeshInspectorApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.geo = [];\r\n        // logic data\r\n        this.size = 10;\r\n        this.cellSize = 0.5;\r\n        this.distance = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"distance\", 3.0, 0, 4.0, 0.01);\r\n        this.radius = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"radius\", 1.0, 0, 4.0, 0.01);\r\n        this.detail = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"detail\", 5, 0, 100, 1);\r\n        this.renderNormals = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"render normals\", 1, 0, 1, 0); // boolean Param\r\n        this.shademethod = _src_lib__WEBPACK_IMPORTED_MODULE_0__.EnumParameter.new(\"render method\", 0, [\"debug\", \"shaded\"]);\r\n        let canvas = gl.canvas;\r\n        // TODO abstract this to scene\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n        this.camera.z_offset = -10;\r\n        this.camera.angleAlpha = 0.4;\r\n        this.camera.angleBeta = 0.5;\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [0, 1, 0, 1]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0.6, 0, 0, 1], [1, 0, 0, 1]);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.3, 0.3, 0.3, 1]);\r\n        this.shadedMeshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n    }\r\n    ui(ui) {\r\n        // TODO : think of a system that ties parameter & slider together fully\r\n        ui.addParameter(this.radius, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addParameter(this.distance, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addParameter(this.detail, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addBooleanParameter(this.renderNormals, (b) => {\r\n            this.start();\r\n        });\r\n        // render methods\r\n        ui.addParameter(this.shademethod, (val) => {\r\n            this.start();\r\n        });\r\n    }\r\n    start() {\r\n        let grid = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane.clone().moveTo(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -this.radius.get())), 100, 2);\r\n        let spherePerRing = this.detail.get() * 2;\r\n        let rad = this.radius.get();\r\n        let dis = this.distance.get();\r\n        let det = this.detail.get();\r\n        let mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin([\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newSphere(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(dis, 0, 0), this.radius.get(), this.detail.get(), spherePerRing),\r\n            // PureMesh.fromCube(new Cube(this.plane, Domain3.fromRadius(this.radius.get()))),\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newCone(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-dis, 0, -this.radius.get()), this.radius.get(), this.radius.get() * 2, spherePerRing),\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newCylinder(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -rad), new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, rad), rad, det),\r\n        ]);\r\n        let dmesh = mesh.toRenderable();\r\n        if (this.renderNormals.get() == 1) {\r\n            // dmesh.calculateFaceNormals();\r\n            dmesh.calculateVertexNormals();\r\n        }\r\n        // console.log(new Parameter(\"shadeMethod\",0,0,2,0.5).getNPermutations())\r\n        // let mesh = Mesh.fromCube(new Cube(this.plane, Domain3.fromRadius(1)));\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        // TODO abstract this to scene\r\n        if (this.shademethod.get() == 0) {\r\n            this.meshRenderer.buffer(this.gl, dmesh);\r\n        }\r\n        else {\r\n            this.shadedMeshRenderer.set(this.gl, dmesh);\r\n        }\r\n        this.lineRenderer.set(this.gl, grid);\r\n        // this.dotRenderer.set(mesh.verts, DrawSpeed.StaticDraw);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // TODO abstract this to 'scene'\r\n        let matrix = this.camera.totalMatrix;\r\n        this.dotRenderer.render(gl, matrix);\r\n        if (this.shademethod.get() == 0) {\r\n            this.meshRenderer.render(gl, this.camera);\r\n        }\r\n        else if (this.shademethod.get() == 1) {\r\n            this.shadedMeshRenderer.render(gl, this.camera);\r\n        }\r\n        this.lineRenderer.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/mesh-inspector-app.ts\n");

/***/ }),

/***/ "./demo/apps/obj-loader-app.ts":
/*!*************************************!*\
  !*** ./demo/apps/obj-loader-app.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ObjLoaderApp\": () => /* binding */ ObjLoaderApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: drag an obj to the canvas, and view it on the web\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass ObjLoaderApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        let canvas = gl.canvas;\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n        (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.addDropFileEventListeners)(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        // nothing\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        if (this.obj == undefined)\r\n            this.dotRenderer.setAndRender(gl, matrix, _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList([new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0), new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1)]));\r\n        else {\r\n            this.dotRenderer.setAndRender(gl, matrix, this.obj.mesh.verts);\r\n            // this.meshRenderer.render(gl, matrix);\r\n            this.lineRenderer.render(gl, matrix);\r\n        }\r\n    }\r\n}\r\nfunction processFiles(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // assume its 1 file, the obj file.\r\n        let file = files[0];\r\n        // see if we can build an correct obj from the files\r\n        let objtext = yield (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.loadTextFromFile)(file);\r\n        this.obj = (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.meshFromObj)(objtext);\r\n        this.renderable = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromMesh(this.obj);\r\n        // scale down if too big.\r\n        // NOTE: this could also be done using matrices. Figure that out!\r\n        console.log(\"scaling...\");\r\n        let mesh = this.obj.mesh;\r\n        let bounds = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromInclude(this.obj.mesh.verts);\r\n        let factor = 1 / bounds.size().largestValue();\r\n        // TODO : one line these types of operations?\r\n        // they will be quite common i think...\r\n        let count = this.obj.mesh.verts.count();\r\n        for (let i = 0; i < count; i++) {\r\n            let vec = this.obj.mesh.verts.getVector(i);\r\n            vec.scale(factor);\r\n            this.obj.mesh.verts.setVector(i, vec);\r\n        }\r\n        // let objBounds = Domain3.fromInclude(this.obj.verts);\r\n        // console.log(objBounds);\r\n        // let factor = 100;\r\n        // let smaller = Domain3.fromRadii(\r\n        //     objBounds.x.size() / factor,\r\n        //     objBounds.y.size() / factor,\r\n        //     objBounds.z.size() / factor,\r\n        // );\r\n        // this.obj.verts = objBounds.remapAll(this.obj.verts, smaller);\r\n        console.log(\"done!\");\r\n        // put the data into the render buffers.\r\n        // this.meshRenderer.set(this.gl, this.obj.verts, this.obj.faces);\r\n        this.lineRenderer.set(this.gl, this.renderable, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw);\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/obj-loader-app.ts\n");

/***/ }),

/***/ "./demo/apps/spherical-one-app.ts":
/*!****************************************!*\
  !*** ./demo/apps/spherical-one-app.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SphericalOneApp\": () => /* binding */ SphericalOneApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n/* harmony import */ var _src_system_stopwatch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/system/stopwatch */ \"./src/system/stopwatch.ts\");\n/* harmony import */ var _functions_spherical_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../functions/spherical-function */ \"./demo/functions/spherical-function.ts\");\n// TODO\r\n// - improve quadification: less triangles!\r\n// - improve squarification: speed & equal sizes\r\n\r\n\r\n\r\nclass SphericalOneApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl, \"setup for trying out different partitions of a sphere. Based on Oskar Stalberg's irregular quad grid\");\r\n        this.radius = 0.1;\r\n        this.smoothlimit = 0;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 1, true);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n        this.debugRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0.5, 0, 0, 1], [1, 0, 0, 1], false);\r\n        this.graphRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.GraphDebugRenderer(gl, [0.5, 0, 0, 1], [255 / 255, 69 / 255, 0, 1]);\r\n    }\r\n    ui(ui) {\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        this.rotate = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"rotate\", 0, 0, 1, 1);\r\n        this.randomEdges = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"randomEdges\", 1, 0, 1, 1);\r\n        this.smooth = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"smooth\", 0, 0, 1, 1);\r\n        this.subCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count\", 2, 0, 4, 1);\r\n        this.quadSubCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count quad\", 1, 0, 2, 1);\r\n        this.liftType = _src_lib__WEBPACK_IMPORTED_MODULE_0__.EnumParameter.new(\"lift type\", 1, [\"none\", \"sphere\", \"buggy\"]);\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.randomEdges, reset);\r\n        ui.addBooleanParameter(this.smooth);\r\n        ui.addParameter(this.subCount, reset);\r\n        ui.addParameter(this.quadSubCount, reset);\r\n        ui.addParameter(this.liftType, reset);\r\n        ui.addButton(\"recalculate\", reset);\r\n    }\r\n    start() {\r\n        let liftType = this.liftType.get();\r\n        // 0 | setup\r\n        const mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newIcosahedron(0.5);\r\n        let graph = mesh.toGraph();\r\n        let center = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);\r\n        this.smoothlimit = 0;\r\n        if (liftType == 2) {\r\n            this.radius = 1;\r\n        }\r\n        else {\r\n            this.radius = graph.getVertexPos(0).disTo(center);\r\n        }\r\n        // DEBUG: PERFORMANCE\r\n        console.log(\"lets start subdivisions!\");\r\n        let stopwatch = _src_system_stopwatch__WEBPACK_IMPORTED_MODULE_1__.Stopwatch.new();\r\n        // 1 | subdivide\r\n        for (let i = 0; i < this.subCount.get(); i++) {\r\n            graph.subdivide();\r\n            // lift to sphere after every subdivision\r\n            if (liftType > 0) {\r\n                let count = graph.getVertexCount();\r\n                for (let i = 0; i < count; i++) {\r\n                    let pos = graph.getVertexPos(i);\r\n                    let normal = pos;\r\n                    let dis = center.disTo(pos);\r\n                    let lift = this.radius - dis;\r\n                    if (liftType > 1) {\r\n                        pos.add(normal.scaled(lift));\r\n                    }\r\n                    else {\r\n                        pos.add(normal.normalized().scaled(lift));\r\n                    }\r\n                }\r\n                console.log(\"lift in \", stopwatch.time(), \"ms\");\r\n            }\r\n        }\r\n        // DEBUG: PERFORMANCE\r\n        console.log(\"subdivision in \", stopwatch.time(), \"ms\");\r\n        // 2 | remove random edges\r\n        if (this.randomEdges.get() == 1) {\r\n            (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_2__.quadification)(graph);\r\n            // graph.print();\r\n            // 2 | remove random edges\r\n            // let edges = graph.all();\r\n            // let picks: number[] = [];\r\n            // let pickCount = 100;\r\n            // for (let i = 0 ; i < pickCount; i++) {\r\n            //     let p = randomInt(edges.length);\r\n            //     picks.push(edges[p]);\r\n            // }\r\n            // // // console.log(picks);\r\n            // for (let i = 0 ; i < edges.length; i++) {\r\n            //     if (Math.random() > 0.0) {\r\n            //         let ei = edges[i];\r\n            //         let loops = graph.getLoopsAdjacentToEdge(ei);\r\n            //         if (loops[0].length == 3 && loops[1].length == 3) {\r\n            //             graph.deleteEdgeFromIndex(edges[i]);\r\n            //         }\r\n            //     }\r\n            // }\r\n        }\r\n        console.log(\"edge removal in \", stopwatch.time(), \"ms\");\r\n        // 3 | subdivide quad\r\n        for (let i = 0; i < this.quadSubCount.get(); i++) {\r\n            graph.subdivideQuad();\r\n        }\r\n        // DEBUG: PERFORMANCE\r\n        console.log(\"quad subdivision in \", stopwatch.time(), \"ms\");\r\n        // lift to sphere after every subdivision\r\n        if (liftType > 0) {\r\n            let count = graph.getVertexCount();\r\n            for (let i = 0; i < count; i++) {\r\n                let pos = graph.getVertexPos(i);\r\n                let normal = graph.getVertexNormal(i);\r\n                let dis = center.disTo(pos);\r\n                let lift = this.radius - dis;\r\n                if (liftType > 1) {\r\n                    pos.add(normal.scaled(lift));\r\n                }\r\n                else {\r\n                    pos.add(normal.normalized().scaled(lift));\r\n                }\r\n            }\r\n            console.log(\"lift in \", stopwatch.time(), \"ms\");\r\n        }\r\n        // 4 | quad relaxation\r\n        this.graph = graph;\r\n        // this.rend = this.graph.toRenderable();\r\n        // this.rend = graphToMultiMesh(this.graph, 0.02, 3, false, true);\r\n        // this.rend.calculateVertexNormals();\r\n        // console.log(\"num triangles = \", this.rend.mesh.links.count());\r\n        // console.log(\"to renderable in \", stopwatch.time(), \"ms\");\r\n        // this.graph.print();\r\n        // let loops = graph.allVertLoopsAsInts();\r\n        // console.log(\"allVertLoops in \", stopwatch.time(), \"ms\");\r\n        //console.log(loops);\r\n        // 5 | convert\r\n        if (liftType == 1) {\r\n            let somesphere = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newSphere(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.zero(), this.radius * 0.99, 6, 10).toRenderable();\r\n            somesphere.calculateVertexNormals();\r\n            this.meshRend.set(this.gl, somesphere, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw);\r\n        }\r\n        else if (liftType == 0) {\r\n            let something = mesh.toRenderable();\r\n            something.transform(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(0.99, 0.99, 0.99));\r\n            something.calculateFaceNormals();\r\n            this.meshRend.set(this.gl, something, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw);\r\n        }\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.average = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_2__.averageEdgeLength)(this.graph);\r\n        // console.log(\"edges: \", this.graph.allEdges());\r\n        // console.log(\"loops: \", this.graph.allVertLoops());\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        if (!state.mouseRightDown && this.rotate.get() == 1) {\r\n            // rotate\r\n            let alpha = 0.0001 * state.tick;\r\n            let rot = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(alpha).multiply(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(alpha));\r\n            this.graph.transform(rot);\r\n        }\r\n        // sucessive over relaxation\r\n        if (this.smooth.get() == 1) {\r\n            if (this.smoothlimit < 1000) {\r\n                // squarification smoother\r\n                this.cca = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_2__.squarification)(this.graph, this.cca);\r\n                // this.cca = this.squarification(this.graph);\r\n                // console.log(this.cca);\r\n                (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_2__.laPlacian)(this.graph);\r\n                // project back to sphere\r\n                this.graph.verts.forEach((v) => {\r\n                    let normal = v.pos;\r\n                    let lift = this.radius - v.pos.length();\r\n                    v.pos.add(normal.normalized().scaled(lift));\r\n                });\r\n                this.smoothlimit += 1;\r\n            }\r\n        }\r\n        else {\r\n            this.smoothlimit = 0;\r\n        }\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        this.meshRend.render(gl, this.camera);\r\n        this.graphRend.render(gl, this.camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/spherical-one-app.ts\n");

/***/ }),

/***/ "./demo/apps/spherical-three-app.ts":
/*!******************************************!*\
  !*** ./demo/apps/spherical-three-app.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SphericalThreeApp\": () => /* binding */ SphericalThreeApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n/* harmony import */ var _functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions/spherical-function */ \"./demo/functions/spherical-function.ts\");\n// TODO\r\n// - improve quadification: less triangles!\r\n// - improve squarification: speed & equal sizes\r\n\r\n\r\n\r\n//\r\n//\r\n//\r\nclass SphericalThreeApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl, \"Multiple Layers of spherical geometry\");\r\n        this.radius = 0.1;\r\n        this.smoothlimit = 0;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 1, true);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n        // this.meshRend = new MeshDebugRenderer(gl, [0, 0, 0, 1], [0.3, 0.3, 0.3, 1], false);\r\n        this.debugRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0.5, 0, 0, 1], [0, 0, 0, 1], false);\r\n        this.graphRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.GraphDebugRenderer(gl, [0.5, 0.5, 0.5, 1], [1, 1, 1, 1]);\r\n    }\r\n    ui(ui) {\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        this.rotate = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"rotate\", 1, 0, 1, 1);\r\n        this.randomEdges = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"randomEdges\", 1, 0, 1, 1);\r\n        this.smooth = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"smooth\", 0, 0, 1, 1);\r\n        this.subCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count\", 2, 0, 4, 1);\r\n        this.quadSubCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count quad\", 1, 0, 2, 1);\r\n        this.liftType = _src_lib__WEBPACK_IMPORTED_MODULE_0__.EnumParameter.new(\"lift type\", 1, [\"none\", \"sphere\", \"buggy\"]);\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.randomEdges, reset);\r\n        ui.addBooleanParameter(this.smooth);\r\n        ui.addParameter(this.subCount, reset);\r\n        ui.addParameter(this.quadSubCount, reset);\r\n        ui.addParameter(this.liftType, reset);\r\n        ui.addButton(\"recalculate\", reset);\r\n    }\r\n    start() {\r\n        let liftType = this.liftType.get();\r\n        // 0 | setup\r\n        const mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newIcosahedron(0.5);\r\n        let graph = mesh.toGraph();\r\n        let center = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);\r\n        this.smoothlimit = 0;\r\n        if (liftType == 2) {\r\n            this.radius = 1;\r\n        }\r\n        else {\r\n            this.radius = graph.getVertexPos(0).disTo(center);\r\n        }\r\n        // 1 | subdivide\r\n        for (let i = 0; i < this.subCount.get(); i++) {\r\n            graph.subdivide();\r\n            // lift to sphere after every subdivision\r\n            if (liftType > 0) {\r\n                let count = graph.getVertexCount();\r\n                for (let i = 0; i < count; i++) {\r\n                    let pos = graph.getVertexPos(i);\r\n                    let normal = pos;\r\n                    let dis = center.disTo(pos);\r\n                    let lift = this.radius - dis;\r\n                    if (liftType > 1) {\r\n                        pos.add(normal.scaled(lift));\r\n                    }\r\n                    else {\r\n                        pos.add(normal.normalized().scaled(lift));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 2 | remove random edges\r\n        if (this.randomEdges.get() == 1) {\r\n            (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.quadification)(graph);\r\n        }\r\n        // 3 | subdivide quad\r\n        for (let i = 0; i < this.quadSubCount.get(); i++) {\r\n            graph.subdivideQuad();\r\n        }\r\n        // lift to sphere after every subdivision\r\n        if (liftType > 0) {\r\n            let count = graph.getVertexCount();\r\n            for (let i = 0; i < count; i++) {\r\n                let pos = graph.getVertexPos(i);\r\n                let normal = graph.getVertexNormal(i);\r\n                let dis = center.disTo(pos);\r\n                let lift = this.radius - dis;\r\n                if (liftType > 1) {\r\n                    pos.add(normal.scaled(lift));\r\n                }\r\n                else {\r\n                    pos.add(normal.normalized().scaled(lift));\r\n                }\r\n            }\r\n        }\r\n        // 4 | quad relaxation\r\n        this.graph = graph;\r\n        // 5 | convert\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.average = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.averageEdgeLength)(this.graph);\r\n        this.bufferWorld();\r\n    }\r\n    bufferWorld() {\r\n        this.world = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.constructRenderableFromSphereGraph)(this.graph, this.radius, 0, 0.1, 0.6);\r\n        this.world.calculateFaceNormals();\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        let pulse = Math.sin(state.newTime);\r\n        // sucessive over relaxation\r\n        if (this.smooth.get() == 1) {\r\n            if (this.smoothlimit < 1000) {\r\n                // squarification smoother\r\n                this.cca = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.squarification)(this.graph, this.cca);\r\n                // this.cca = this.squarification(this.graph);\r\n                // console.log(this.cca);\r\n                (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.laPlacian)(this.graph);\r\n                // project back to sphere\r\n                this.graph.verts.forEach((v) => {\r\n                    let normal = v.pos;\r\n                    let lift = this.radius - v.pos.length();\r\n                    v.pos.add(normal.normalized().scaled(lift));\r\n                });\r\n                this.smoothlimit += 1;\r\n                this.bufferWorld();\r\n            }\r\n        }\r\n        else {\r\n            this.smoothlimit = 0;\r\n        }\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        this.meshRend.set(this.gl, this.world, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.meshRend.render(gl, this.camera);\r\n        // this.graphRend.render(gl, this.camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/spherical-three-app.ts\n");

/***/ }),

/***/ "./demo/apps/spherical-two-app.ts":
/*!****************************************!*\
  !*** ./demo/apps/spherical-two-app.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SphericalTwoApp\": () => /* binding */ SphericalTwoApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n/* harmony import */ var _functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions/spherical-function */ \"./demo/functions/spherical-function.ts\");\n// TODO\r\n// - improve quadification: less triangles!\r\n// - improve squarification: speed & equal sizes\r\n\r\n\r\n\r\nclass SphericalTwoApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl, \"Multiple Layers of spherical geometry\");\r\n        this.radius = 0.1;\r\n        this.smoothlimit = 0;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 1, true);\r\n        // this.meshRend = new ShadedMeshRenderer(gl);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0, 0, 0, 1], [0.3, 0.3, 0.3, 1], false);\r\n        this.debugRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0.5, 0, 0, 1], [0, 0, 0, 1], false);\r\n        this.graphRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.GraphDebugRenderer(gl, [0.5, 0.5, 0.5, 1], [1, 1, 1, 1]);\r\n    }\r\n    ui(ui) {\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        this.rotate = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"rotate\", 1, 0, 1, 1);\r\n        this.randomEdges = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"randomEdges\", 1, 0, 1, 1);\r\n        this.smooth = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"smooth\", 0, 0, 1, 1);\r\n        this.subCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count\", 2, 0, 4, 1);\r\n        this.quadSubCount = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"sub count quad\", 1, 0, 2, 1);\r\n        this.liftType = _src_lib__WEBPACK_IMPORTED_MODULE_0__.EnumParameter.new(\"lift type\", 1, [\"none\", \"sphere\", \"buggy\"]);\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.randomEdges, reset);\r\n        ui.addBooleanParameter(this.smooth);\r\n        ui.addParameter(this.subCount, reset);\r\n        ui.addParameter(this.quadSubCount, reset);\r\n        ui.addParameter(this.liftType, reset);\r\n        ui.addButton(\"recalculate\", reset);\r\n    }\r\n    start() {\r\n        let liftType = this.liftType.get();\r\n        // 0 | setup\r\n        const mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newIcosahedron(0.5);\r\n        let graph = mesh.toGraph();\r\n        let center = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);\r\n        this.smoothlimit = 0;\r\n        if (liftType == 2) {\r\n            this.radius = 1;\r\n        }\r\n        else {\r\n            this.radius = graph.getVertexPos(0).disTo(center);\r\n        }\r\n        // 1 | subdivide\r\n        for (let i = 0; i < this.subCount.get(); i++) {\r\n            graph.subdivide();\r\n            // lift to sphere after every subdivision\r\n            if (liftType > 0) {\r\n                let count = graph.getVertexCount();\r\n                for (let i = 0; i < count; i++) {\r\n                    let pos = graph.getVertexPos(i);\r\n                    let normal = pos;\r\n                    let dis = center.disTo(pos);\r\n                    let lift = this.radius - dis;\r\n                    if (liftType > 1) {\r\n                        pos.add(normal.scaled(lift));\r\n                    }\r\n                    else {\r\n                        pos.add(normal.normalized().scaled(lift));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 2 | remove random edges\r\n        if (this.randomEdges.get() == 1) {\r\n            (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.quadification)(graph);\r\n        }\r\n        // 3 | subdivide quad\r\n        for (let i = 0; i < this.quadSubCount.get(); i++) {\r\n            graph.subdivideQuad();\r\n        }\r\n        // lift to sphere after every subdivision\r\n        if (liftType > 0) {\r\n            let count = graph.getVertexCount();\r\n            for (let i = 0; i < count; i++) {\r\n                let pos = graph.getVertexPos(i);\r\n                let normal = graph.getVertexNormal(i);\r\n                let dis = center.disTo(pos);\r\n                let lift = this.radius - dis;\r\n                if (liftType > 1) {\r\n                    pos.add(normal.scaled(lift));\r\n                }\r\n                else {\r\n                    pos.add(normal.normalized().scaled(lift));\r\n                }\r\n            }\r\n        }\r\n        // 4 | quad relaxation\r\n        this.graph = graph;\r\n        // 5 | convert\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.average = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.averageEdgeLength)(this.graph);\r\n        this.bufferWorld();\r\n    }\r\n    bufferWorld() {\r\n        this.world = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.constructRenderableFromSphereGraph)(this.graph, this.radius, 0, 0.1, 0.6);\r\n        this.world2 = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.constructRenderableFromSphereGraph)(this.graph, this.radius, 0.1, 0.2, 0.4);\r\n        this.world3 = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.constructRenderableFromSphereGraph)(this.graph, this.radius, 0.2, 0.3, 0.2);\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        let pulse = Math.sin(state.newTime);\r\n        // rotate mesh\r\n        if (this.rotate.get() == 1) {\r\n            // rotate\r\n            let alpha = 0.0001 * state.tick;\r\n            let rotx = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(alpha);\r\n            let roty = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(alpha);\r\n            let rot = rotx.multiply(roty);\r\n            this.graph.transform(rot);\r\n            this.world.transform(rot);\r\n            this.world2.transform(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(-alpha));\r\n            this.world3.transform(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newZRotation(-alpha));\r\n        }\r\n        // sucessive over relaxation\r\n        if (this.smooth.get() == 1) {\r\n            if (this.smoothlimit < 1000) {\r\n                // squarification smoother\r\n                this.cca = (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.squarification)(this.graph, this.cca);\r\n                // this.cca = this.squarification(this.graph);\r\n                // console.log(this.cca);\r\n                (0,_functions_spherical_function__WEBPACK_IMPORTED_MODULE_1__.laPlacian)(this.graph);\r\n                // project back to sphere\r\n                this.graph.verts.forEach((v) => {\r\n                    let normal = v.pos;\r\n                    let lift = this.radius - v.pos.length();\r\n                    v.pos.add(normal.normalized().scaled(lift));\r\n                });\r\n                this.smoothlimit += 1;\r\n                this.bufferWorld();\r\n            }\r\n        }\r\n        else {\r\n            this.smoothlimit = 0;\r\n        }\r\n        this.graphRend.set(this.graph, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        for (let world of [this.world, this.world2, this.world3]) {\r\n            this.meshRend.buffer(this.gl, world, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n            this.meshRend.render(gl, this.camera);\r\n        }\r\n        // this.graphRend.render(gl, this.camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/spherical-two-app.ts\n");

/***/ }),

/***/ "./demo/functions/spherical-function.ts":
/*!**********************************************!*\
  !*** ./demo/functions/spherical-function.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"constructWorldFromSphereGraph\": () => /* binding */ constructWorldFromSphereGraph,\n/* harmony export */   \"constructRenderableFromSphereGraph\": () => /* binding */ constructRenderableFromSphereGraph,\n/* harmony export */   \"averageEdgeLength\": () => /* binding */ averageEdgeLength,\n/* harmony export */   \"edgeSmooth\": () => /* binding */ edgeSmooth,\n/* harmony export */   \"laPlacian\": () => /* binding */ laPlacian,\n/* harmony export */   \"squarification\": () => /* binding */ squarification,\n/* harmony export */   \"quadification\": () => /* binding */ quadification,\n/* harmony export */   \"randomInt\": () => /* binding */ randomInt\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n\r\nfunction constructWorldFromSphereGraph(graph, radius, // to project back\r\nliftBot, //\r\nliftTop, //\r\nworldData) {\r\n    // recalculate world mesh\r\n    let scaler1 = 1 + liftBot / radius;\r\n    let scaler2 = 1 + liftTop / radius;\r\n    let meshes = [];\r\n    let loops = graph.allVertLoopsAsInts();\r\n    for (let loop of loops) {\r\n        if (loop.length < 4) {\r\n            continue;\r\n        }\r\n        let vecs = loop.map((j) => graph.getVertexPos(j));\r\n        let m = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newQuad([\r\n            vecs[0].scaled(scaler1),\r\n            vecs[1].scaled(scaler1),\r\n            vecs[3].scaled(scaler1),\r\n            vecs[2].scaled(scaler1),\r\n            vecs[0].scaled(scaler2),\r\n            vecs[1].scaled(scaler2),\r\n            vecs[3].scaled(scaler2),\r\n            vecs[2].scaled(scaler2),\r\n        ]);\r\n        meshes.push(m);\r\n    }\r\n    let rend = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(meshes).toRenderable();\r\n    rend.calculateVertexNormals();\r\n    return rend;\r\n}\r\nfunction constructRenderableFromSphereGraph(graph, radius, // to project back\r\nliftBot, //\r\nliftTop, //\r\nrand) {\r\n    // recalculate world mesh\r\n    let scaler1 = 1 + liftBot / radius;\r\n    let scaler2 = 1 + liftTop / radius;\r\n    let meshes = [];\r\n    let loops = graph.allVertLoopsAsInts();\r\n    for (let loop of loops) {\r\n        if (Math.random() > rand) {\r\n            continue;\r\n        }\r\n        if (loop.length < 4) {\r\n            continue;\r\n        }\r\n        let vecs = loop.map((j) => graph.getVertexPos(j));\r\n        let m = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.newQuad([\r\n            vecs[0].scaled(scaler1),\r\n            vecs[1].scaled(scaler1),\r\n            vecs[3].scaled(scaler1),\r\n            vecs[2].scaled(scaler1),\r\n            vecs[0].scaled(scaler2),\r\n            vecs[1].scaled(scaler2),\r\n            vecs[3].scaled(scaler2),\r\n            vecs[2].scaled(scaler2),\r\n        ]);\r\n        meshes.push(m);\r\n    }\r\n    let rend = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(meshes).toRenderable();\r\n    rend.calculateVertexNormals();\r\n    return rend;\r\n}\r\nfunction averageEdgeLength(graph) {\r\n    let count = 0;\r\n    let sum = 0;\r\n    graph.forEveryEdgeVerts((a, b) => {\r\n        sum += a.disTo(b);\r\n        count += 1;\r\n    });\r\n    let average = sum / count;\r\n    return average;\r\n}\r\nfunction edgeSmooth(graph, average, scale) {\r\n    graph.forEveryEdgeVerts((a, b) => {\r\n        let distance = a.disTo(b);\r\n        let diff = average - distance;\r\n        let vector = b.subbed(a);\r\n        a.add(vector.scaled(-diff * scale));\r\n        b.add(vector.scaled(diff * scale));\r\n    });\r\n}\r\nfunction laPlacian(graph) {\r\n    let count = graph.getVertexCount();\r\n    let news = [];\r\n    // get center of nbs\r\n    for (let vi = 0; vi < count; vi++) {\r\n        let v = graph.getVert(vi);\r\n        if (v.dead)\r\n            continue;\r\n        let sum = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.zero();\r\n        let nbs = graph.getVertNeighbors(vi);\r\n        for (let nb of nbs) {\r\n            sum.add(graph.getVertexPos(nb));\r\n        }\r\n        sum.scale(1 / nbs.length);\r\n        news.push(sum);\r\n    }\r\n    // set\r\n    for (let vi = 0; vi < count; vi++) {\r\n        graph.getVertexPos(vi).copy(news[vi]);\r\n    }\r\n}\r\nfunction squarification(graph, centerCornerAverage) {\r\n    // make the quad graph as 'square' as possible\r\n    // prepare\r\n    let faces = graph.allVertLoopsAsInts();\r\n    let count = faces.length;\r\n    let centers = new Array(count);\r\n    let movers = new Array(graph.verts.length);\r\n    let counters = new Array(graph.verts.length);\r\n    for (let i = 0; i < movers.length; i++) {\r\n        movers[i] = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.new(0, 0, 0);\r\n        counters[i] = 0;\r\n    }\r\n    let cca = 0;\r\n    // iterate per face\r\n    for (let i = 0; i < count; i++) {\r\n        // get face, center and corners\r\n        let center = centers[i];\r\n        let face = faces[i];\r\n        let faceCount = face.length;\r\n        if (face.length == 0) {\r\n            throw \"HELP, WE ARE NOT DEALING WITH QUADS HERE!\";\r\n        }\r\n        center = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.new(0, 0, 0);\r\n        let corners = new Array(faceCount);\r\n        for (let j = 0; j < faceCount; j++) {\r\n            let vi = face[j];\r\n            corners[j] = graph.getVertexPos(vi);\r\n            center.add(corners[j]);\r\n        }\r\n        center.scale(1 / faceCount);\r\n        // now that we have center, calculate cca\r\n        let local_cca = 0;\r\n        for (let j = 0; j < faceCount; j++) {\r\n            local_cca = center.disTo(corners[j]);\r\n        }\r\n        local_cca /= faceCount;\r\n        cca += local_cca;\r\n        // but use the given one if present\r\n        let scaler;\r\n        let cca_diff;\r\n        if (centerCornerAverage) {\r\n            scaler = centerCornerAverage;\r\n            cca_diff = centerCornerAverage - local_cca;\r\n        }\r\n        else {\r\n            scaler = local_cca;\r\n            cca_diff = 0;\r\n        }\r\n        // rotate all corners into the same space, and get the average of that\r\n        // TODO SAVE TIME BY DOING THIS:\r\n        // new Vector2(v.dot(ihat), v.dot(jhat)).angle()\r\n        let plane = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.from3pt(center, corners[0], corners[1]);\r\n        let normedCorners = new Array(face.length);\r\n        let normedCenter = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.new(0, 0, 0);\r\n        let delta = 2 / faceCount;\r\n        for (let j = 0; j < faceCount; j++) {\r\n            normedCorners[j] = plane.rotateVector(corners[j], j * Math.PI * delta);\r\n            normedCenter.add(normedCorners[j]);\r\n        }\r\n        // scale this averaged to the center corner average\r\n        normedCenter.scale(1 / 4);\r\n        let normal = normedCenter.subbed(center).normalize();\r\n        let perfectCorner = center.added(normal.scaled(local_cca));\r\n        // increate gunfactor if square is very small (awww)\r\n        let gunfactor = 1;\r\n        let equalizer = 200;\r\n        gunfactor += Math.max(-1 * cca_diff * equalizer, 0);\r\n        // console.log(gunfactor);\r\n        // rotate this average back, and add it to the movers of every vertex\r\n        for (let j = 0; j < faceCount; j++) {\r\n            let vi = face[j];\r\n            let v = plane.rotateVector(perfectCorner, j * Math.PI * delta);\r\n            movers[vi].add(v.scaled(gunfactor));\r\n            counters[vi] += 1;\r\n        }\r\n    }\r\n    // now, move the graph\r\n    for (let i = 0; i < movers.length; i++) {\r\n        let mover = movers[i];\r\n        let counter = counters[i];\r\n        if (counter < 1) {\r\n            continue;\r\n        }\r\n        let v = graph.getVertexPos(i);\r\n        v.add(mover.scale(1 / counter));\r\n    }\r\n    // return the center corner average, to be used in the next cycle\r\n    cca /= count;\r\n    return cca;\r\n}\r\nfunction quadification(graph) {\r\n    // edge deletion heuristic:\r\n    // remove edges between two triangles to create a quad.\r\n    // keep removing edges until no triangle neighbors another triangle.\r\n    // prepare\r\n    let count = graph.edges.length;\r\n    let edgeIds = new Array(count);\r\n    let visited = new Array(count);\r\n    graph.edges.forEach((e, i) => {\r\n        edgeIds[i] = i;\r\n        visited[i] = false;\r\n    });\r\n    // shuffle\r\n    let shuffler = (a, b) => {\r\n        return 0.5 - Math.random();\r\n    };\r\n    edgeIds.sort(shuffler);\r\n    // per edge\r\n    for (let i = 0; i < count; i++) {\r\n        let ei = edgeIds[i];\r\n        let e = graph.edges[ei];\r\n        if (e.dead || visited[ei]) {\r\n            continue;\r\n        }\r\n        let loops = graph.getLoopsAdjacentToEdge(ei);\r\n        // only delete edges between triangles\r\n        if (loops[0].length > 3 || loops[1].length > 3) {\r\n            continue;\r\n        }\r\n        // the edges of this new quad should not be touched!\r\n        for (let loop of loops) {\r\n            for (let edgeIndex of loop) {\r\n                visited[edgeIndex] = true;\r\n            }\r\n        }\r\n        // now remove this edge itself\r\n        graph.deleteEdgeByIndex(ei);\r\n    }\r\n}\r\nfunction randomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vZnVuY3Rpb25zL3NwaGVyaWNhbC1mdW5jdGlvbi50cz8zODEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE4RjtBQUV2RixTQUFTLDZCQUE2QixDQUN6QyxLQUFZLEVBQ1osTUFBYyxFQUFFLGtCQUFrQjtBQUNsQyxPQUFlLEVBQUUsRUFBRTtBQUNuQixPQUFlLEVBQUUsRUFBRTtBQUNuQixTQUFvQjtJQUVwQix5QkFBeUI7SUFDekIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDbkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFFbkMsSUFBSSxNQUFNLEdBQVcsRUFBRSxDQUFDO0lBQ3hCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3ZDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3BCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakIsU0FBUztTQUNaO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxHQUFHLGtEQUFZLENBQUM7WUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1B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TyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN2QixTQUFTO1NBQ1o7UUFFRCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0Msc0NBQXNDO1FBRXRDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUMsU0FBUztTQUNaO1FBRUQsb0RBQW9EO1FBQ3BELEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3BCLEtBQUssSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO2dCQUN4QixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQzdCO1NBQ0o7UUFFRCw4QkFBOEI7UUFDOUIsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQy9CO0FBQ0wsQ0FBQztBQUVNLFNBQVMsU0FBUyxDQUFDLEdBQVc7SUFDakMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUMzQyxDQUFDIiwiZmlsZSI6Ii4vZGVtby9mdW5jdGlvbnMvc3BoZXJpY2FsLWZ1bmN0aW9uLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRnZUluZGV4LCBHcmFwaCwgSW50TWF0cml4LCBNZXNoLCBQbGFuZSwgUmVuZGVyYWJsZSwgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi9zcmMvbGliXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0V29ybGRGcm9tU3BoZXJlR3JhcGgoXHJcbiAgICBncmFwaDogR3JhcGgsXHJcbiAgICByYWRpdXM6IG51bWJlciwgLy8gdG8gcHJvamVjdCBiYWNrXHJcbiAgICBsaWZ0Qm90OiBudW1iZXIsIC8vXHJcbiAgICBsaWZ0VG9wOiBudW1iZXIsIC8vXHJcbiAgICB3b3JsZERhdGE6IEludE1hdHJpeCxcclxuKTogUmVuZGVyYWJsZSB7XHJcbiAgICAvLyByZWNhbGN1bGF0ZSB3b3JsZCBtZXNoXHJcbiAgICBsZXQgc2NhbGVyMSA9IDEgKyBsaWZ0Qm90IC8gcmFkaXVzO1xyXG4gICAgbGV0IHNjYWxlcjIgPSAxICsgbGlmdFRvcCAvIHJhZGl1cztcclxuXHJcbiAgICBsZXQgbWVzaGVzOiBNZXNoW10gPSBbXTtcclxuICAgIGxldCBsb29wcyA9IGdyYXBoLmFsbFZlcnRMb29wc0FzSW50cygpO1xyXG4gICAgZm9yIChsZXQgbG9vcCBvZiBsb29wcykge1xyXG4gICAgICAgIGlmIChsb29wLmxlbmd0aCA8IDQpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdmVjcyA9IGxvb3AubWFwKChqKSA9PiBncmFwaC5nZXRWZXJ0ZXhQb3MoaikpO1xyXG5cclxuICAgICAgICBsZXQgbSA9IE1lc2gubmV3UXVhZChbXHJcbiAgICAgICAgICAgIHZlY3NbMF0uc2NhbGVkKHNjYWxlcjEpLFxyXG4gICAgICAgICAgICB2ZWNzWzFdLnNjYWxlZChzY2FsZXIxKSxcclxuICAgICAgICAgICAgdmVjc1szXS5zY2FsZWQoc2NhbGVyMSksXHJcbiAgICAgICAgICAgIHZlY3NbMl0uc2NhbGVkKHNjYWxlcjEpLFxyXG4gICAgICAgICAgICB2ZWNzWzBdLnNjYWxlZChzY2FsZXIyKSxcclxuICAgICAgICAgICAgdmVjc1sxXS5zY2FsZWQoc2NhbGVyMiksXHJcbiAgICAgICAgICAgIHZlY3NbM10uc2NhbGVkKHNjYWxlcjIpLFxyXG4gICAgICAgICAgICB2ZWNzWzJdLnNjYWxlZChzY2FsZXIyKSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgbWVzaGVzLnB1c2gobSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlbmQgPSBNZXNoLmZyb21Kb2luKG1lc2hlcykudG9SZW5kZXJhYmxlKCk7XHJcbiAgICByZW5kLmNhbGN1bGF0ZVZlcnRleE5vcm1hbHMoKTtcclxuICAgIHJldHVybiByZW5kO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0UmVuZGVyYWJsZUZyb21TcGhlcmVHcmFwaChcclxuICAgIGdyYXBoOiBHcmFwaCxcclxuICAgIHJhZGl1czogbnVtYmVyLCAvLyB0byBwcm9qZWN0IGJhY2tcclxuICAgIGxpZnRCb3Q6IG51bWJlciwgLy9cclxuICAgIGxpZnRUb3A6IG51bWJlciwgLy9cclxuICAgIHJhbmQ6IG51bWJlcixcclxuKTogUmVuZGVyYWJsZSB7XHJcbiAgICAvLyByZWNhbGN1bGF0ZSB3b3JsZCBtZXNoXHJcbiAgICBsZXQgc2NhbGVyMSA9IDEgKyBsaWZ0Qm90IC8gcmFkaXVzO1xyXG4gICAgbGV0IHNjYWxlcjIgPSAxICsgbGlmdFRvcCAvIHJhZGl1cztcclxuXHJcbiAgICBsZXQgbWVzaGVzOiBNZXNoW10gPSBbXTtcclxuICAgIGxldCBsb29wcyA9IGdyYXBoLmFsbFZlcnRMb29wc0FzSW50cygpO1xyXG4gICAgZm9yIChsZXQgbG9vcCBvZiBsb29wcykge1xyXG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gcmFuZCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsb29wLmxlbmd0aCA8IDQpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdmVjcyA9IGxvb3AubWFwKChqKSA9PiBncmFwaC5nZXRWZXJ0ZXhQb3MoaikpO1xyXG5cclxuICAgICAgICBsZXQgbSA9IE1lc2gubmV3UXVhZChbXHJcbiAgICAgICAgICAgIHZlY3NbMF0uc2NhbGVkKHNjYWxlcjEpLFxyXG4gICAgICAgICAgICB2ZWNzWzFdLnNjYWxlZChzY2FsZXIxKSxcclxuICAgICAgICAgICAgdmVjc1szXS5zY2FsZWQoc2NhbGVyMSksXHJcbiAgICAgICAgICAgIHZlY3NbMl0uc2NhbGVkKHNjYWxlcjEpLFxyXG4gICAgICAgICAgICB2ZWNzWzBdLnNjYWxlZChzY2FsZXIyKSxcclxuICAgICAgICAgICAgdmVjc1sxXS5zY2FsZWQoc2NhbGVyMiksXHJcbiAgICAgICAgICAgIHZlY3NbM10uc2NhbGVkKHNjYWxlcjIpLFxyXG4gICAgICAgICAgICB2ZWNzWzJdLnNjYWxlZChzY2FsZXIyKSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgbWVzaGVzLnB1c2gobSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlbmQgPSBNZXNoLmZyb21Kb2luKG1lc2hlcykudG9SZW5kZXJhYmxlKCk7XHJcbiAgICByZW5kLmNhbGN1bGF0ZVZlcnRleE5vcm1hbHMoKTtcclxuICAgIHJldHVybiByZW5kO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZUVkZ2VMZW5ndGgoZ3JhcGg6IEdyYXBoKTogbnVtYmVyIHtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGdyYXBoLmZvckV2ZXJ5RWRnZVZlcnRzKChhLCBiKSA9PiB7XHJcbiAgICAgICAgc3VtICs9IGEuZGlzVG8oYik7XHJcbiAgICAgICAgY291bnQgKz0gMTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBhdmVyYWdlID0gc3VtIC8gY291bnQ7XHJcbiAgICByZXR1cm4gYXZlcmFnZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVkZ2VTbW9vdGgoZ3JhcGg6IEdyYXBoLCBhdmVyYWdlOiBudW1iZXIsIHNjYWxlOiBudW1iZXIpIHtcclxuICAgIGdyYXBoLmZvckV2ZXJ5RWRnZVZlcnRzKChhLCBiKSA9PiB7XHJcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gYS5kaXNUbyhiKTtcclxuICAgICAgICBsZXQgZGlmZiA9IGF2ZXJhZ2UgLSBkaXN0YW5jZTtcclxuICAgICAgICBsZXQgdmVjdG9yID0gYi5zdWJiZWQoYSk7XHJcbiAgICAgICAgYS5hZGQodmVjdG9yLnNjYWxlZCgtZGlmZiAqIHNjYWxlKSk7XHJcbiAgICAgICAgYi5hZGQodmVjdG9yLnNjYWxlZChkaWZmICogc2NhbGUpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGFQbGFjaWFuKGdyYXBoOiBHcmFwaCkge1xyXG4gICAgbGV0IGNvdW50ID0gZ3JhcGguZ2V0VmVydGV4Q291bnQoKTtcclxuICAgIGxldCBuZXdzOiBWZWN0b3IzW10gPSBbXTtcclxuXHJcbiAgICAvLyBnZXQgY2VudGVyIG9mIG5ic1xyXG4gICAgZm9yIChsZXQgdmkgPSAwOyB2aSA8IGNvdW50OyB2aSsrKSB7XHJcbiAgICAgICAgbGV0IHYgPSBncmFwaC5nZXRWZXJ0KHZpKTtcclxuICAgICAgICBpZiAodi5kZWFkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgbGV0IHN1bSA9IFZlY3RvcjMuemVybygpO1xyXG4gICAgICAgIGxldCBuYnMgPSBncmFwaC5nZXRWZXJ0TmVpZ2hib3JzKHZpKTtcclxuICAgICAgICBmb3IgKGxldCBuYiBvZiBuYnMpIHtcclxuICAgICAgICAgICAgc3VtLmFkZChncmFwaC5nZXRWZXJ0ZXhQb3MobmIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VtLnNjYWxlKDEgLyBuYnMubGVuZ3RoKTtcclxuICAgICAgICBuZXdzLnB1c2goc3VtKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzZXRcclxuICAgIGZvciAobGV0IHZpID0gMDsgdmkgPCBjb3VudDsgdmkrKykge1xyXG4gICAgICAgIGdyYXBoLmdldFZlcnRleFBvcyh2aSkuY29weShuZXdzW3ZpXSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmaWNhdGlvbihncmFwaDogR3JhcGgsIGNlbnRlckNvcm5lckF2ZXJhZ2U/OiBudW1iZXIpIHtcclxuICAgIC8vIG1ha2UgdGhlIHF1YWQgZ3JhcGggYXMgJ3NxdWFyZScgYXMgcG9zc2libGVcclxuXHJcbiAgICAvLyBwcmVwYXJlXHJcbiAgICBsZXQgZmFjZXMgPSBncmFwaC5hbGxWZXJ0TG9vcHNBc0ludHMoKTtcclxuICAgIGxldCBjb3VudCA9IGZhY2VzLmxlbmd0aDtcclxuICAgIGxldCBjZW50ZXJzID0gbmV3IEFycmF5PFZlY3RvcjM+KGNvdW50KTtcclxuICAgIGxldCBtb3ZlcnMgPSBuZXcgQXJyYXk8VmVjdG9yMz4oZ3JhcGgudmVydHMubGVuZ3RoKTtcclxuICAgIGxldCBjb3VudGVycyA9IG5ldyBBcnJheTxudW1iZXI+KGdyYXBoLnZlcnRzLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1vdmVyc1tpXSA9IFZlY3RvcjMubmV3KDAsIDAsIDApO1xyXG4gICAgICAgIGNvdW50ZXJzW2ldID0gMDtcclxuICAgIH1cclxuICAgIGxldCBjY2EgPSAwO1xyXG5cclxuICAgIC8vIGl0ZXJhdGUgcGVyIGZhY2VcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgIC8vIGdldCBmYWNlLCBjZW50ZXIgYW5kIGNvcm5lcnNcclxuICAgICAgICBsZXQgY2VudGVyID0gY2VudGVyc1tpXTtcclxuICAgICAgICBsZXQgZmFjZSA9IGZhY2VzW2ldO1xyXG4gICAgICAgIGxldCBmYWNlQ291bnQgPSBmYWNlLmxlbmd0aDtcclxuICAgICAgICBpZiAoZmFjZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcIkhFTFAsIFdFIEFSRSBOT1QgREVBTElORyBXSVRIIFFVQURTIEhFUkUhXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNlbnRlciA9IFZlY3RvcjMubmV3KDAsIDAsIDApO1xyXG4gICAgICAgIGxldCBjb3JuZXJzID0gbmV3IEFycmF5PFZlY3RvcjM+KGZhY2VDb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmYWNlQ291bnQ7IGorKykge1xyXG4gICAgICAgICAgICBsZXQgdmkgPSBmYWNlW2pdO1xyXG4gICAgICAgICAgICBjb3JuZXJzW2pdID0gZ3JhcGguZ2V0VmVydGV4UG9zKHZpKTtcclxuICAgICAgICAgICAgY2VudGVyLmFkZChjb3JuZXJzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2VudGVyLnNjYWxlKDEgLyBmYWNlQ291bnQpO1xyXG5cclxuICAgICAgICAvLyBub3cgdGhhdCB3ZSBoYXZlIGNlbnRlciwgY2FsY3VsYXRlIGNjYVxyXG4gICAgICAgIGxldCBsb2NhbF9jY2EgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZUNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgbG9jYWxfY2NhID0gY2VudGVyLmRpc1RvKGNvcm5lcnNbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbF9jY2EgLz0gZmFjZUNvdW50O1xyXG4gICAgICAgIGNjYSArPSBsb2NhbF9jY2E7XHJcblxyXG4gICAgICAgIC8vIGJ1dCB1c2UgdGhlIGdpdmVuIG9uZSBpZiBwcmVzZW50XHJcbiAgICAgICAgbGV0IHNjYWxlcjtcclxuICAgICAgICBsZXQgY2NhX2RpZmY7XHJcblxyXG4gICAgICAgIGlmIChjZW50ZXJDb3JuZXJBdmVyYWdlKSB7XHJcbiAgICAgICAgICAgIHNjYWxlciA9IGNlbnRlckNvcm5lckF2ZXJhZ2U7XHJcbiAgICAgICAgICAgIGNjYV9kaWZmID0gY2VudGVyQ29ybmVyQXZlcmFnZSAtIGxvY2FsX2NjYTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzY2FsZXIgPSBsb2NhbF9jY2E7XHJcbiAgICAgICAgICAgIGNjYV9kaWZmID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJvdGF0ZSBhbGwgY29ybmVycyBpbnRvIHRoZSBzYW1lIHNwYWNlLCBhbmQgZ2V0IHRoZSBhdmVyYWdlIG9mIHRoYXRcclxuICAgICAgICAvLyBUT0RPIFNBVkUgVElNRSBCWSBET0lORyBUSElTOlxyXG4gICAgICAgIC8vIG5ldyBWZWN0b3IyKHYuZG90KGloYXQpLCB2LmRvdChqaGF0KSkuYW5nbGUoKVxyXG5cclxuICAgICAgICBsZXQgcGxhbmUgPSBQbGFuZS5mcm9tM3B0KGNlbnRlciwgY29ybmVyc1swXSwgY29ybmVyc1sxXSk7XHJcbiAgICAgICAgbGV0IG5vcm1lZENvcm5lcnMgPSBuZXcgQXJyYXk8VmVjdG9yMz4oZmFjZS5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBub3JtZWRDZW50ZXIgPSBWZWN0b3IzLm5ldygwLCAwLCAwKTtcclxuICAgICAgICBsZXQgZGVsdGEgPSAyIC8gZmFjZUNvdW50O1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZUNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgbm9ybWVkQ29ybmVyc1tqXSA9IHBsYW5lLnJvdGF0ZVZlY3Rvcihjb3JuZXJzW2pdLCBqICogTWF0aC5QSSAqIGRlbHRhKTtcclxuICAgICAgICAgICAgbm9ybWVkQ2VudGVyLmFkZChub3JtZWRDb3JuZXJzW2pdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNjYWxlIHRoaXMgYXZlcmFnZWQgdG8gdGhlIGNlbnRlciBjb3JuZXIgYXZlcmFnZVxyXG4gICAgICAgIG5vcm1lZENlbnRlci5zY2FsZSgxIC8gNCk7XHJcbiAgICAgICAgbGV0IG5vcm1hbCA9IG5vcm1lZENlbnRlci5zdWJiZWQoY2VudGVyKS5ub3JtYWxpemUoKTtcclxuICAgICAgICBsZXQgcGVyZmVjdENvcm5lciA9IGNlbnRlci5hZGRlZChub3JtYWwuc2NhbGVkKGxvY2FsX2NjYSkpO1xyXG5cclxuICAgICAgICAvLyBpbmNyZWF0ZSBndW5mYWN0b3IgaWYgc3F1YXJlIGlzIHZlcnkgc21hbGwgKGF3d3cpXHJcbiAgICAgICAgbGV0IGd1bmZhY3RvciA9IDE7XHJcbiAgICAgICAgbGV0IGVxdWFsaXplciA9IDIwMDtcclxuICAgICAgICBndW5mYWN0b3IgKz0gTWF0aC5tYXgoLTEgKiBjY2FfZGlmZiAqIGVxdWFsaXplciwgMCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGd1bmZhY3Rvcik7XHJcblxyXG4gICAgICAgIC8vIHJvdGF0ZSB0aGlzIGF2ZXJhZ2UgYmFjaywgYW5kIGFkZCBpdCB0byB0aGUgbW92ZXJzIG9mIGV2ZXJ5IHZlcnRleFxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZUNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IHZpID0gZmFjZVtqXTtcclxuICAgICAgICAgICAgbGV0IHYgPSBwbGFuZS5yb3RhdGVWZWN0b3IocGVyZmVjdENvcm5lciwgaiAqIE1hdGguUEkgKiBkZWx0YSk7XHJcbiAgICAgICAgICAgIG1vdmVyc1t2aV0uYWRkKHYuc2NhbGVkKGd1bmZhY3RvcikpO1xyXG4gICAgICAgICAgICBjb3VudGVyc1t2aV0gKz0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbm93LCBtb3ZlIHRoZSBncmFwaFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3ZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgbW92ZXIgPSBtb3ZlcnNbaV07XHJcbiAgICAgICAgbGV0IGNvdW50ZXIgPSBjb3VudGVyc1tpXTtcclxuICAgICAgICBpZiAoY291bnRlciA8IDEpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB2ID0gZ3JhcGguZ2V0VmVydGV4UG9zKGkpO1xyXG4gICAgICAgIHYuYWRkKG1vdmVyLnNjYWxlKDEgLyBjb3VudGVyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIHRoZSBjZW50ZXIgY29ybmVyIGF2ZXJhZ2UsIHRvIGJlIHVzZWQgaW4gdGhlIG5leHQgY3ljbGVcclxuICAgIGNjYSAvPSBjb3VudDtcclxuICAgIHJldHVybiBjY2E7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWFkaWZpY2F0aW9uKGdyYXBoOiBHcmFwaCkge1xyXG4gICAgLy8gZWRnZSBkZWxldGlvbiBoZXVyaXN0aWM6XHJcbiAgICAvLyByZW1vdmUgZWRnZXMgYmV0d2VlbiB0d28gdHJpYW5nbGVzIHRvIGNyZWF0ZSBhIHF1YWQuXHJcbiAgICAvLyBrZWVwIHJlbW92aW5nIGVkZ2VzIHVudGlsIG5vIHRyaWFuZ2xlIG5laWdoYm9ycyBhbm90aGVyIHRyaWFuZ2xlLlxyXG5cclxuICAgIC8vIHByZXBhcmVcclxuICAgIGxldCBjb3VudCA9IGdyYXBoLmVkZ2VzLmxlbmd0aDtcclxuICAgIGxldCBlZGdlSWRzID0gbmV3IEFycmF5PEVkZ2VJbmRleD4oY291bnQpO1xyXG4gICAgbGV0IHZpc2l0ZWQgPSBuZXcgQXJyYXk8Ym9vbGVhbj4oY291bnQpO1xyXG5cclxuICAgIGdyYXBoLmVkZ2VzLmZvckVhY2goKGUsIGkpID0+IHtcclxuICAgICAgICBlZGdlSWRzW2ldID0gaTtcclxuICAgICAgICB2aXNpdGVkW2ldID0gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBzaHVmZmxlXHJcbiAgICBsZXQgc2h1ZmZsZXIgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5yYW5kb20oKTtcclxuICAgIH07XHJcbiAgICBlZGdlSWRzLnNvcnQoc2h1ZmZsZXIpO1xyXG5cclxuICAgIC8vIHBlciBlZGdlXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBsZXQgZWkgPSBlZGdlSWRzW2ldO1xyXG4gICAgICAgIGxldCBlID0gZ3JhcGguZWRnZXNbZWldO1xyXG4gICAgICAgIGlmIChlLmRlYWQgfHwgdmlzaXRlZFtlaV0pIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbG9vcHMgPSBncmFwaC5nZXRMb29wc0FkamFjZW50VG9FZGdlKGVpKTtcclxuXHJcbiAgICAgICAgLy8gb25seSBkZWxldGUgZWRnZXMgYmV0d2VlbiB0cmlhbmdsZXNcclxuXHJcbiAgICAgICAgaWYgKGxvb3BzWzBdLmxlbmd0aCA+IDMgfHwgbG9vcHNbMV0ubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoZSBlZGdlcyBvZiB0aGlzIG5ldyBxdWFkIHNob3VsZCBub3QgYmUgdG91Y2hlZCFcclxuICAgICAgICBmb3IgKGxldCBsb29wIG9mIGxvb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVkZ2VJbmRleCBvZiBsb29wKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpdGVkW2VkZ2VJbmRleF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBub3cgcmVtb3ZlIHRoaXMgZWRnZSBpdHNlbGZcclxuICAgICAgICBncmFwaC5kZWxldGVFZGdlQnlJbmRleChlaSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnQobWF4OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./demo/functions/spherical-function.ts\n");

/***/ }),

/***/ "./demo/index.ts":
/*!***********************!*\
  !*** ./demo/index.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/lib */ \"./src/lib.ts\");\n/* harmony import */ var _apps_dot_app3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apps/dot-app3 */ \"./demo/apps/dot-app3.ts\");\n/* harmony import */ var _apps_spherical_two_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apps/spherical-two-app */ \"./demo/apps/spherical-two-app.ts\");\n/* harmony import */ var _apps_geometry_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./apps/geometry-app */ \"./demo/apps/geometry-app.ts\");\n/* harmony import */ var _apps_icosahedron_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./apps/icosahedron-app */ \"./demo/apps/icosahedron-app.ts\");\n/* harmony import */ var _apps_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./apps/mesh-inspector-app */ \"./demo/apps/mesh-inspector-app.ts\");\n/* harmony import */ var _apps_obj_loader_app__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./apps/obj-loader-app */ \"./demo/apps/obj-loader-app.ts\");\n/* harmony import */ var _apps_spherical_one_app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./apps/spherical-one-app */ \"./demo/apps/spherical-one-app.ts\");\n/* harmony import */ var _apps_spherical_three_app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./apps/spherical-three-app */ \"./demo/apps/spherical-three-app.ts\");\n/* harmony import */ var _apps_least_squares_app__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./apps/least-squares-app */ \"./demo/apps/least-squares-app.ts\");\n// Name:    index.ts\r\n// Author:  Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar core;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById(\"canvas\");\r\n    let video = document.getElementById(\"camera\");\r\n    let ui = document.getElementById(\"interface\");\r\n    let cameraOn = document.getElementById(\"camera-on\");\r\n    let cameraStop = document.getElementById(\"camera-off\");\r\n    let buttonPredict = document.getElementById(\"predict\");\r\n    // init core\r\n    let gl = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Renderer.initWebglContext(canvas);\r\n    core = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Core(canvas, gl, ui);\r\n    // init swap app\r\n    let appCollection = [\r\n        _apps_least_squares_app__WEBPACK_IMPORTED_MODULE_9__.LeastSquaresApp,\r\n        _apps_spherical_three_app__WEBPACK_IMPORTED_MODULE_8__.SphericalThreeApp,\r\n        _apps_spherical_two_app__WEBPACK_IMPORTED_MODULE_2__.SphericalTwoApp,\r\n        _apps_spherical_one_app__WEBPACK_IMPORTED_MODULE_7__.SphericalOneApp,\r\n        _apps_geometry_app__WEBPACK_IMPORTED_MODULE_3__.GeometryApp,\r\n        _apps_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_5__.MeshInspectorApp,\r\n        _apps_icosahedron_app__WEBPACK_IMPORTED_MODULE_4__.IcosahedronApp,\r\n        _apps_dot_app3__WEBPACK_IMPORTED_MODULE_1__.DotApp3,\r\n        _apps_obj_loader_app__WEBPACK_IMPORTED_MODULE_6__.ObjLoaderApp,\r\n    ];\r\n    let swapApp = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.SwapApp(gl, core, appCollection);\r\n    core.addApp(swapApp);\r\n    // swapApp.swap(0);\r\n    swapApp.swapFromUrl(location.hash, 2);\r\n    // a specific app dealing with webcams & other things\r\n    // addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    requestAnimationFrame(loop);\r\n}\r\nwindow.addEventListener(\"load\", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vaW5kZXgudHM/ZTQ0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBRThCO0FBRVg7QUFDaUI7QUFDVDtBQUNNO0FBQ0s7QUFDUjtBQUVNO0FBQ0k7QUFDSjtBQUUzRCxJQUFJLElBQVUsQ0FBQztBQUVmLFNBQVMsSUFBSTtJQUNULDRDQUE0QztJQUM1QyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBdUIsQ0FBQztJQUNyRSxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBc0IsQ0FBQztJQUNuRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBbUIsQ0FBQztJQUNoRSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBdUIsQ0FBQztJQUMxRSxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBdUIsQ0FBQztJQUM3RSxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBdUIsQ0FBQztJQUU3RSxZQUFZO0lBQ1osSUFBSSxFQUFFLEdBQUcsK0RBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsSUFBSSxHQUFHLElBQUksMENBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWhDLGdCQUFnQjtJQUNoQixJQUFJLGFBQWEsR0FBRztRQUNoQixvRUFBZTtRQUNmLHdFQUFpQjtRQUNqQixvRUFBZTtRQUNmLG9FQUFlO1FBQ2YsMkRBQVc7UUFDWCxzRUFBZ0I7UUFDaEIsaUVBQWM7UUFDZCxtREFBTztRQUNQLDhEQUFZO0tBQ2YsQ0FBQztJQUVGLElBQUksT0FBTyxHQUFHLElBQUksNkNBQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckIsbUJBQW1CO0lBQ25CLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV0QyxxREFBcUQ7SUFDckQsOENBQThDO0lBRTlDLGdCQUFnQjtJQUNoQixTQUFTLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCx5REFBeUQ7WUFDekQsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1oscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNELHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQ25CLE1BQU0sRUFDTjtJQUNJLElBQUksRUFBRSxDQUFDO0FBQ1gsQ0FBQyxFQUNELEtBQUssQ0FDUixDQUFDIiwiZmlsZSI6Ii4vZGVtby9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5hbWU6ICAgIGluZGV4LnRzXG4vLyBBdXRob3I6ICBKb3MgRmVlbnN0cmFcbi8vIFB1cnBvc2U6IEVudHJ5IHBvaW50XG5cbmltcG9ydCB7IENvcmUsIFJlbmRlcmVyLCBTd2FwQXBwIH0gZnJvbSBcIi4uL3NyYy9saWJcIjtcblxuaW1wb3J0IHsgRG90QXBwMyB9IGZyb20gXCIuL2FwcHMvZG90LWFwcDNcIjtcbmltcG9ydCB7IFNwaGVyaWNhbFR3b0FwcCB9IGZyb20gXCIuL2FwcHMvc3BoZXJpY2FsLXR3by1hcHBcIjtcbmltcG9ydCB7IEdlb21ldHJ5QXBwIH0gZnJvbSBcIi4vYXBwcy9nZW9tZXRyeS1hcHBcIjtcbmltcG9ydCB7IEljb3NhaGVkcm9uQXBwIH0gZnJvbSBcIi4vYXBwcy9pY29zYWhlZHJvbi1hcHBcIjtcbmltcG9ydCB7IE1lc2hJbnNwZWN0b3JBcHAgfSBmcm9tIFwiLi9hcHBzL21lc2gtaW5zcGVjdG9yLWFwcFwiO1xuaW1wb3J0IHsgT2JqTG9hZGVyQXBwIH0gZnJvbSBcIi4vYXBwcy9vYmotbG9hZGVyLWFwcFwiO1xuaW1wb3J0IHsgU3RhdEFwcCB9IGZyb20gXCIuL2FwcHMvc3RhdC1hcHBcIjtcbmltcG9ydCB7IFNwaGVyaWNhbE9uZUFwcCB9IGZyb20gXCIuL2FwcHMvc3BoZXJpY2FsLW9uZS1hcHBcIjtcbmltcG9ydCB7IFNwaGVyaWNhbFRocmVlQXBwIH0gZnJvbSBcIi4vYXBwcy9zcGhlcmljYWwtdGhyZWUtYXBwXCI7XG5pbXBvcnQgeyBMZWFzdFNxdWFyZXNBcHAgfSBmcm9tIFwiLi9hcHBzL2xlYXN0LXNxdWFyZXMtYXBwXCI7XG5cbnZhciBjb3JlOiBDb3JlO1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICAgIC8vIGdldCByZWZlcmVuY2VzIG9mIGFsbCBpdGVtcyBvbiB0aGUgY2FudmFzXG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpISBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBsZXQgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKSEgYXMgSFRNTFZpZGVvRWxlbWVudDtcbiAgICBsZXQgdWkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludGVyZmFjZVwiKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICBsZXQgY2FtZXJhT24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYS1vblwiKSEgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgbGV0IGNhbWVyYVN0b3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYS1vZmZcIikhIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGxldCBidXR0b25QcmVkaWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmVkaWN0XCIpISBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgIC8vIGluaXQgY29yZVxuICAgIGxldCBnbCA9IFJlbmRlcmVyLmluaXRXZWJnbENvbnRleHQoY2FudmFzKTtcbiAgICBjb3JlID0gbmV3IENvcmUoY2FudmFzLCBnbCwgdWkpO1xuXG4gICAgLy8gaW5pdCBzd2FwIGFwcFxuICAgIGxldCBhcHBDb2xsZWN0aW9uID0gW1xuICAgICAgICBMZWFzdFNxdWFyZXNBcHAsXG4gICAgICAgIFNwaGVyaWNhbFRocmVlQXBwLFxuICAgICAgICBTcGhlcmljYWxUd29BcHAsXG4gICAgICAgIFNwaGVyaWNhbE9uZUFwcCxcbiAgICAgICAgR2VvbWV0cnlBcHAsXG4gICAgICAgIE1lc2hJbnNwZWN0b3JBcHAsXG4gICAgICAgIEljb3NhaGVkcm9uQXBwLFxuICAgICAgICBEb3RBcHAzLFxuICAgICAgICBPYmpMb2FkZXJBcHAsXG4gICAgXTtcblxuICAgIGxldCBzd2FwQXBwID0gbmV3IFN3YXBBcHAoZ2wsIGNvcmUsIGFwcENvbGxlY3Rpb24pO1xuICAgIGNvcmUuYWRkQXBwKHN3YXBBcHApO1xuICAgIC8vIHN3YXBBcHAuc3dhcCgwKTtcbiAgICBzd2FwQXBwLnN3YXBGcm9tVXJsKGxvY2F0aW9uLmhhc2gsIDIpO1xuXG4gICAgLy8gYSBzcGVjaWZpYyBhcHAgZGVhbGluZyB3aXRoIHdlYmNhbXMgJiBvdGhlciB0aGluZ3NcbiAgICAvLyBhZGRXZWJjYW1BcHBXaGVuUmVhZHkoY29yZSwgY2FudmFzLCB2aWRlbyk7XG5cbiAgICAvLyBpbmZpbml0ZSBsb29wXG4gICAgZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgaWYgKGNvcmUuU1RPUCkge1xuICAgICAgICAgICAgLy8gVE9ETyA6IG5vdGlmeSB0aGUgVXNlciB0aGF0IHdlIGhhdmUgc3RvcHBlZCBydW5uaW5nLi4uXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29yZS51cGRhdGUoKTtcbiAgICAgICAgY29yZS5kcmF3KCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xufVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgXCJsb2FkXCIsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBtYWluKCk7XG4gICAgfSxcbiAgICBmYWxzZSxcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./demo/index.ts\n");

/***/ }),

/***/ "./src/algorithms/marching-cubes.ts":
/*!******************************************!*\
  !*** ./src/algorithms/marching-cubes.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/mesh */ \"./src/mesh/mesh.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    marching-cubes.ts\r\n// author:  Jos Feenstra\r\n// purpose: a marching cubes implementation useful for converting scalar discrete fields to contours\r\n\r\n\r\n// based upon:\r\n// http://paulbourke.net/geometry/polygonise/\r\n// Polygonising a scalar field\r\n// Also known as: \"3D Contouring\", \"Marching Cubes\", \"Surface Reconstruction\"\r\n// Written by Paul Bourke\r\n// May 1994\r\n//\r\n//\r\n// The cube model used:\r\n//\r\n//     (4) ------ 4 ------ (5)\r\n//     /|                  /|\r\n//    7 |                 5 |\r\n//   /  |                /  |\r\n// (7) ------ 6 ------ (6)  |\r\n//  |   8               |   9\r\n//  |   |               |   |\r\n//  |   |               |   |\r\n//  |  (0) ------ 0 ------ (1)\r\n//  11 /               10  /\r\n//  | 3                 | 1\r\n//  |/                  |/\r\n// (3) ------ 2 ------ (2)\r\n/*\r\n    Given a grid cell and an isolevel, calculate the triangular\r\n    facets required to represent the isosurface through the cell.\r\n    Return the number of triangular facets, the array \"triangles\"\r\n    will be loaded up with the vertices at most 5 triangular facets.\r\n     0 will be returned if the grid cell is either totally above\r\n    of totally below the isolevel.\r\n */\r\n// typedef struct {\r\n//     XYZ p[3];\r\n//  } TRIANGLE;\r\n//  typedef struct {\r\n//     XYZ p[8];\r\n//     double val[8];\r\n//  } GRIDCELL;\r\nclass Gridcell {\r\n    constructor() {\r\n        this.points = []; // 8\r\n        this.corner = []; // 8\r\n    }\r\n}\r\nclass Triangle {\r\n    constructor() {\r\n        this.xyz = []; // 3\r\n    }\r\n}\r\nconst edgeTable = [\r\n    0x0,\r\n    0x109,\r\n    0x203,\r\n    0x30a,\r\n    0x406,\r\n    0x50f,\r\n    0x605,\r\n    0x70c,\r\n    0x80c,\r\n    0x905,\r\n    0xa0f,\r\n    0xb06,\r\n    0xc0a,\r\n    0xd03,\r\n    0xe09,\r\n    0xf00,\r\n    0x190,\r\n    0x99,\r\n    0x393,\r\n    0x29a,\r\n    0x596,\r\n    0x49f,\r\n    0x795,\r\n    0x69c,\r\n    0x99c,\r\n    0x895,\r\n    0xb9f,\r\n    0xa96,\r\n    0xd9a,\r\n    0xc93,\r\n    0xf99,\r\n    0xe90,\r\n    0x230,\r\n    0x339,\r\n    0x33,\r\n    0x13a,\r\n    0x636,\r\n    0x73f,\r\n    0x435,\r\n    0x53c,\r\n    0xa3c,\r\n    0xb35,\r\n    0x83f,\r\n    0x936,\r\n    0xe3a,\r\n    0xf33,\r\n    0xc39,\r\n    0xd30,\r\n    0x3a0,\r\n    0x2a9,\r\n    0x1a3,\r\n    0xaa,\r\n    0x7a6,\r\n    0x6af,\r\n    0x5a5,\r\n    0x4ac,\r\n    0xbac,\r\n    0xaa5,\r\n    0x9af,\r\n    0x8a6,\r\n    0xfaa,\r\n    0xea3,\r\n    0xda9,\r\n    0xca0,\r\n    0x460,\r\n    0x569,\r\n    0x663,\r\n    0x76a,\r\n    0x66,\r\n    0x16f,\r\n    0x265,\r\n    0x36c,\r\n    0xc6c,\r\n    0xd65,\r\n    0xe6f,\r\n    0xf66,\r\n    0x86a,\r\n    0x963,\r\n    0xa69,\r\n    0xb60,\r\n    0x5f0,\r\n    0x4f9,\r\n    0x7f3,\r\n    0x6fa,\r\n    0x1f6,\r\n    0xff,\r\n    0x3f5,\r\n    0x2fc,\r\n    0xdfc,\r\n    0xcf5,\r\n    0xfff,\r\n    0xef6,\r\n    0x9fa,\r\n    0x8f3,\r\n    0xbf9,\r\n    0xaf0,\r\n    0x650,\r\n    0x759,\r\n    0x453,\r\n    0x55a,\r\n    0x256,\r\n    0x35f,\r\n    0x55,\r\n    0x15c,\r\n    0xe5c,\r\n    0xf55,\r\n    0xc5f,\r\n    0xd56,\r\n    0xa5a,\r\n    0xb53,\r\n    0x859,\r\n    0x950,\r\n    0x7c0,\r\n    0x6c9,\r\n    0x5c3,\r\n    0x4ca,\r\n    0x3c6,\r\n    0x2cf,\r\n    0x1c5,\r\n    0xcc,\r\n    0xfcc,\r\n    0xec5,\r\n    0xdcf,\r\n    0xcc6,\r\n    0xbca,\r\n    0xac3,\r\n    0x9c9,\r\n    0x8c0,\r\n    0x8c0,\r\n    0x9c9,\r\n    0xac3,\r\n    0xbca,\r\n    0xcc6,\r\n    0xdcf,\r\n    0xec5,\r\n    0xfcc,\r\n    0xcc,\r\n    0x1c5,\r\n    0x2cf,\r\n    0x3c6,\r\n    0x4ca,\r\n    0x5c3,\r\n    0x6c9,\r\n    0x7c0,\r\n    0x950,\r\n    0x859,\r\n    0xb53,\r\n    0xa5a,\r\n    0xd56,\r\n    0xc5f,\r\n    0xf55,\r\n    0xe5c,\r\n    0x15c,\r\n    0x55,\r\n    0x35f,\r\n    0x256,\r\n    0x55a,\r\n    0x453,\r\n    0x759,\r\n    0x650,\r\n    0xaf0,\r\n    0xbf9,\r\n    0x8f3,\r\n    0x9fa,\r\n    0xef6,\r\n    0xfff,\r\n    0xcf5,\r\n    0xdfc,\r\n    0x2fc,\r\n    0x3f5,\r\n    0xff,\r\n    0x1f6,\r\n    0x6fa,\r\n    0x7f3,\r\n    0x4f9,\r\n    0x5f0,\r\n    0xb60,\r\n    0xa69,\r\n    0x963,\r\n    0x86a,\r\n    0xf66,\r\n    0xe6f,\r\n    0xd65,\r\n    0xc6c,\r\n    0x36c,\r\n    0x265,\r\n    0x16f,\r\n    0x66,\r\n    0x76a,\r\n    0x663,\r\n    0x569,\r\n    0x460,\r\n    0xca0,\r\n    0xda9,\r\n    0xea3,\r\n    0xfaa,\r\n    0x8a6,\r\n    0x9af,\r\n    0xaa5,\r\n    0xbac,\r\n    0x4ac,\r\n    0x5a5,\r\n    0x6af,\r\n    0x7a6,\r\n    0xaa,\r\n    0x1a3,\r\n    0x2a9,\r\n    0x3a0,\r\n    0xd30,\r\n    0xc39,\r\n    0xf33,\r\n    0xe3a,\r\n    0x936,\r\n    0x83f,\r\n    0xb35,\r\n    0xa3c,\r\n    0x53c,\r\n    0x435,\r\n    0x73f,\r\n    0x636,\r\n    0x13a,\r\n    0x33,\r\n    0x339,\r\n    0x230,\r\n    0xe90,\r\n    0xf99,\r\n    0xc93,\r\n    0xd9a,\r\n    0xa96,\r\n    0xb9f,\r\n    0x895,\r\n    0x99c,\r\n    0x69c,\r\n    0x795,\r\n    0x49f,\r\n    0x596,\r\n    0x29a,\r\n    0x393,\r\n    0x99,\r\n    0x190,\r\n    0xf00,\r\n    0xe09,\r\n    0xd03,\r\n    0xc0a,\r\n    0xb06,\r\n    0xa0f,\r\n    0x905,\r\n    0x80c,\r\n    0x70c,\r\n    0x605,\r\n    0x50f,\r\n    0x406,\r\n    0x30a,\r\n    0x203,\r\n    0x109,\r\n    0x0,\r\n];\r\nconst triTable = [\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],\r\n    [3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],\r\n    [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],\r\n    [9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],\r\n    [10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],\r\n    [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],\r\n    [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],\r\n    [2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],\r\n    [11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],\r\n    [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],\r\n    [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],\r\n    [11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],\r\n    [6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],\r\n    [6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],\r\n    [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],\r\n    [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],\r\n    [3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],\r\n    [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],\r\n    [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],\r\n    [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],\r\n    [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],\r\n    [10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],\r\n    [0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],\r\n    [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],\r\n    [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],\r\n    [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],\r\n    [3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],\r\n    [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],\r\n    [10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],\r\n    [7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],\r\n    [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],\r\n    [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],\r\n    [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],\r\n    [0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],\r\n    [7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],\r\n    [7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],\r\n    [10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],\r\n    [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],\r\n    [7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],\r\n    [6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],\r\n    [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],\r\n    [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],\r\n    [8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],\r\n    [1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],\r\n    [10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],\r\n    [10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],\r\n    [9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],\r\n    [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],\r\n    [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],\r\n    [7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],\r\n    [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],\r\n    [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],\r\n    [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],\r\n    [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],\r\n    [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],\r\n    [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],\r\n    [6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],\r\n    [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],\r\n    [6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],\r\n    [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],\r\n    [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],\r\n    [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],\r\n    [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],\r\n    [9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],\r\n    [1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],\r\n    [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],\r\n    [0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],\r\n    [11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],\r\n    [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],\r\n    [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],\r\n    [2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],\r\n    [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],\r\n    [1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],\r\n    [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],\r\n    [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],\r\n    [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],\r\n    [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],\r\n    [9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],\r\n    [5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],\r\n    [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],\r\n    [9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],\r\n    [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],\r\n    [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],\r\n    [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],\r\n    [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],\r\n    [11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],\r\n    [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],\r\n    [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],\r\n    [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],\r\n    [1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],\r\n    [4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],\r\n    [0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],\r\n    [1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n];\r\nfunction polygonise(corners, values, level) {\r\n    let triangles = null;\r\n    // get the marching cube index based on corners\r\n    let cubeindex = 0;\r\n    if (values[0] < level)\r\n        cubeindex |= 1;\r\n    if (values[1] < level)\r\n        cubeindex |= 2;\r\n    if (values[2] < level)\r\n        cubeindex |= 4;\r\n    if (values[3] < level)\r\n        cubeindex |= 8;\r\n    if (values[4] < level)\r\n        cubeindex |= 16;\r\n    if (values[5] < level)\r\n        cubeindex |= 32;\r\n    if (values[6] < level)\r\n        cubeindex |= 64;\r\n    if (values[7] < level)\r\n        cubeindex |= 128;\r\n    /* Cube is entirely in/out of the surface */\r\n    let vertlist = []; // 12\r\n    if (edgeTable[cubeindex] == 0)\r\n        return _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__.Mesh.zero();\r\n    /* Find the vertices where the surface intersects the cube */\r\n    if (edgeTable[cubeindex] & 1)\r\n        vertlist[0] = lerp(level, corners[0], corners[1], values[0], values[1]);\r\n    if (edgeTable[cubeindex] & 2)\r\n        vertlist[1] = lerp(level, corners[1], corners[2], values[1], values[2]);\r\n    if (edgeTable[cubeindex] & 4)\r\n        vertlist[2] = lerp(level, corners[2], corners[3], values[2], values[3]);\r\n    if (edgeTable[cubeindex] & 8)\r\n        vertlist[3] = lerp(level, corners[3], corners[0], values[3], values[0]);\r\n    if (edgeTable[cubeindex] & 16)\r\n        vertlist[4] = lerp(level, corners[4], corners[5], values[4], values[5]);\r\n    if (edgeTable[cubeindex] & 32)\r\n        vertlist[5] = lerp(level, corners[5], corners[6], values[5], values[6]);\r\n    if (edgeTable[cubeindex] & 64)\r\n        vertlist[6] = lerp(level, corners[6], corners[7], values[6], values[7]);\r\n    if (edgeTable[cubeindex] & 128)\r\n        vertlist[7] = lerp(level, corners[7], corners[4], values[7], values[4]);\r\n    if (edgeTable[cubeindex] & 256)\r\n        vertlist[8] = lerp(level, corners[0], corners[4], values[0], values[4]);\r\n    if (edgeTable[cubeindex] & 512)\r\n        vertlist[9] = lerp(level, corners[1], corners[5], values[1], values[5]);\r\n    if (edgeTable[cubeindex] & 1024)\r\n        vertlist[10] = lerp(level, corners[2], corners[6], values[2], values[6]);\r\n    if (edgeTable[cubeindex] & 2048)\r\n        vertlist[11] = lerp(level, corners[3], corners[7], values[3], values[7]);\r\n    // create triangles\r\n    // ntriang = 0;\r\n    // for (let i = 0; triTable[cubeindex][i]!=-1; i+=3) {\r\n    //     triangles[ntriang].p[0] = vertlist[triTable[cubeindex][i  ]];\r\n    //     triangles[ntriang].p[1] = vertlist[triTable[cubeindex][i+1]];\r\n    //     triangles[ntriang].p[2] = vertlist[triTable[cubeindex][i+2]];\r\n    //     ntriang++;\r\n    // }\r\n    // return(ntriang);\r\n    return _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__.Mesh.zero();\r\n}\r\n/*\r\n    Linearly interpolate the position where an isosurface cuts\r\n    an edge between two vertices, each with their own scalar value\r\n */\r\nfunction lerp(level, p1, p2, valp1, valp2) {\r\n    return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.fromLerpWeights(p1, p2, valp1, valp2, level);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/algorithms/marching-cubes.ts\n");

/***/ }),

/***/ "./src/algorithms/perlin-noise.ts":
/*!****************************************!*\
  !*** ./src/algorithms/perlin-noise.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Perlin\": () => /* binding */ Perlin\n/* harmony export */ });\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n// name:        perlin-noise.ts\r\n// author:      Jos Feenstra\r\n// purpose:     Generate Perin Noise\r\n\r\n// a javascript implementation of:\r\n// Ref : https://adrianb.io/2014/08/09/perlinnoise.html\r\nclass Perlin {\r\n    constructor() {\r\n        this.permutation = [\r\n            151,\r\n            160,\r\n            137,\r\n            91,\r\n            90,\r\n            15,\r\n            131,\r\n            13,\r\n            201,\r\n            95,\r\n            96,\r\n            53,\r\n            194,\r\n            233,\r\n            7,\r\n            225,\r\n            140,\r\n            36,\r\n            103,\r\n            30,\r\n            69,\r\n            142,\r\n            8,\r\n            99,\r\n            37,\r\n            240,\r\n            21,\r\n            10,\r\n            23,\r\n            190,\r\n            6,\r\n            148,\r\n            247,\r\n            120,\r\n            234,\r\n            75,\r\n            0,\r\n            26,\r\n            197,\r\n            62,\r\n            94,\r\n            252,\r\n            219,\r\n            203,\r\n            117,\r\n            35,\r\n            11,\r\n            32,\r\n            57,\r\n            177,\r\n            33,\r\n            88,\r\n            237,\r\n            149,\r\n            56,\r\n            87,\r\n            174,\r\n            20,\r\n            125,\r\n            136,\r\n            171,\r\n            168,\r\n            68,\r\n            175,\r\n            74,\r\n            165,\r\n            71,\r\n            134,\r\n            139,\r\n            48,\r\n            27,\r\n            166,\r\n            77,\r\n            146,\r\n            158,\r\n            231,\r\n            83,\r\n            111,\r\n            229,\r\n            122,\r\n            60,\r\n            211,\r\n            133,\r\n            230,\r\n            220,\r\n            105,\r\n            92,\r\n            41,\r\n            55,\r\n            46,\r\n            245,\r\n            40,\r\n            244,\r\n            102,\r\n            143,\r\n            54,\r\n            65,\r\n            25,\r\n            63,\r\n            161,\r\n            1,\r\n            216,\r\n            80,\r\n            73,\r\n            209,\r\n            76,\r\n            132,\r\n            187,\r\n            208,\r\n            89,\r\n            18,\r\n            169,\r\n            200,\r\n            196,\r\n            135,\r\n            130,\r\n            116,\r\n            188,\r\n            159,\r\n            86,\r\n            164,\r\n            100,\r\n            109,\r\n            198,\r\n            173,\r\n            186,\r\n            3,\r\n            64,\r\n            52,\r\n            217,\r\n            226,\r\n            250,\r\n            124,\r\n            123,\r\n            5,\r\n            202,\r\n            38,\r\n            147,\r\n            118,\r\n            126,\r\n            255,\r\n            82,\r\n            85,\r\n            212,\r\n            207,\r\n            206,\r\n            59,\r\n            227,\r\n            47,\r\n            16,\r\n            58,\r\n            17,\r\n            182,\r\n            189,\r\n            28,\r\n            42,\r\n            223,\r\n            183,\r\n            170,\r\n            213,\r\n            119,\r\n            248,\r\n            152,\r\n            2,\r\n            44,\r\n            154,\r\n            163,\r\n            70,\r\n            221,\r\n            153,\r\n            101,\r\n            155,\r\n            167,\r\n            43,\r\n            172,\r\n            9,\r\n            129,\r\n            22,\r\n            39,\r\n            253,\r\n            19,\r\n            98,\r\n            108,\r\n            110,\r\n            79,\r\n            113,\r\n            224,\r\n            232,\r\n            178,\r\n            185,\r\n            112,\r\n            104,\r\n            218,\r\n            246,\r\n            97,\r\n            228,\r\n            251,\r\n            34,\r\n            242,\r\n            193,\r\n            238,\r\n            210,\r\n            144,\r\n            12,\r\n            191,\r\n            179,\r\n            162,\r\n            241,\r\n            81,\r\n            51,\r\n            145,\r\n            235,\r\n            249,\r\n            14,\r\n            239,\r\n            107,\r\n            49,\r\n            192,\r\n            214,\r\n            31,\r\n            181,\r\n            199,\r\n            106,\r\n            157,\r\n            184,\r\n            84,\r\n            204,\r\n            176,\r\n            115,\r\n            121,\r\n            50,\r\n            45,\r\n            127,\r\n            4,\r\n            150,\r\n            254,\r\n            138,\r\n            236,\r\n            205,\r\n            93,\r\n            222,\r\n            114,\r\n            67,\r\n            29,\r\n            24,\r\n            72,\r\n            243,\r\n            141,\r\n            128,\r\n            195,\r\n            78,\r\n            66,\r\n            215,\r\n            61,\r\n            156,\r\n            180,\r\n        ];\r\n        this.repeat = 0;\r\n        this.repeat = 0;\r\n        this.p = new Array(512);\r\n        for (let x = 0; x < 512; x++) {\r\n            this.p[x] = this.permutation[x % 256];\r\n        }\r\n    }\r\n    grad(hash, x, y, z) {\r\n        switch (hash & 0xf) {\r\n            case 0x0:\r\n                return x + y;\r\n            case 0x1:\r\n                return -x + y;\r\n            case 0x2:\r\n                return x - y;\r\n            case 0x3:\r\n                return -x - y;\r\n            case 0x4:\r\n                return x + z;\r\n            case 0x5:\r\n                return -x + z;\r\n            case 0x6:\r\n                return x - z;\r\n            case 0x7:\r\n                return -x - z;\r\n            case 0x8:\r\n                return y + z;\r\n            case 0x9:\r\n                return -y + z;\r\n            case 0xa:\r\n                return y - z;\r\n            case 0xb:\r\n                return -y - z;\r\n            case 0xc:\r\n                return y + x;\r\n            case 0xd:\r\n                return -y + z;\r\n            case 0xe:\r\n                return y - x;\r\n            case 0xf:\r\n                return -y - z;\r\n            default:\r\n                return 0; // never happens\r\n        }\r\n    }\r\n    inc(num) {\r\n        num++;\r\n        if (this.repeat > 0)\r\n            num %= this.repeat;\r\n        return num;\r\n    }\r\n    noise(x, y, z) {\r\n        // If we have any repeat on, change the coordinates to their \"local\" repetitions\r\n        if (this.repeat > 0) {\r\n            x = x % this.repeat;\r\n            y = y % this.repeat;\r\n            z = z % this.repeat;\r\n        }\r\n        let xi = Math.floor(x) & 255; // Calculate the \"unit cube\" that the point asked will be located in\r\n        let yi = Math.floor(y) & 255; // The left bound is ( |_x_|,|_y_|,|_z_| ) and the right bound is that\r\n        let zi = Math.floor(z) & 255; // plus 1.  Next we calculate the location (from 0.0 to 1.0) in that cube.\r\n        let xf = x - Math.floor(x);\r\n        let yf = y - Math.floor(y);\r\n        let zf = z - Math.floor(z);\r\n        let p = this.p;\r\n        let aaa = p[p[p[xi] + yi] + zi];\r\n        let aba = p[p[p[xi] + this.inc(yi)] + zi];\r\n        let aab = p[p[p[xi] + yi] + this.inc(zi)];\r\n        let abb = p[p[p[xi] + this.inc(yi)] + this.inc(zi)];\r\n        let baa = p[p[p[this.inc(xi)] + yi] + zi];\r\n        let bba = p[p[p[this.inc(xi)] + this.inc(yi)] + zi];\r\n        let bab = p[p[p[this.inc(xi)] + yi] + this.inc(zi)];\r\n        let bbb = p[p[p[this.inc(xi)] + this.inc(yi)] + this.inc(zi)];\r\n        let u = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(xf);\r\n        let v = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(yf);\r\n        let w = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(zf);\r\n        let x1, x2, y1, y2;\r\n        x1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aaa, xf, yf, zf), // The gradient function calculates the dot product between a pseudorandom\r\n        this.grad(baa, xf - 1, yf, zf), // gradient vector and the vector from the input coordinate to the 8\r\n        u); // surrounding points in its unit cube.\r\n        x2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aba, xf, yf - 1, zf), // This is all then lerped together as a sort of weighted average based on the faded (u,v,w)\r\n        this.grad(bba, xf - 1, yf - 1, zf), // values we made earlier.\r\n        u);\r\n        y1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(x1, x2, v);\r\n        x1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aab, xf, yf, zf - 1), this.grad(bab, xf - 1, yf, zf - 1), u);\r\n        x2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(abb, xf, yf - 1, zf - 1), this.grad(bbb, xf - 1, yf - 1, zf - 1), u);\r\n        y2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(x1, x2, v);\r\n        return (_math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(y1, y2, w) + 1) / 2;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/algorithms/perlin-noise.ts\n");

/***/ }),

/***/ "./src/app/app.ts":
/*!************************!*\
  !*** ./src/app/app.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"App\": () => /* binding */ App\n/* harmony export */ });\nclass App {\r\n    constructor(gl, des = \"\") {\r\n        // unique constructor\r\n        this.gl = gl;\r\n        this.name = this.constructor.name;\r\n        this.description = des;\r\n    }\r\n    ui(ui) {\r\n        // setup for UI\r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9hcHAvYXBwLnRzPzVkYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdPLE1BQU0sR0FBRztJQUtaLFlBQVksRUFBeUIsRUFBRSxNQUFjLEVBQUU7UUFDbkQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUMzQixDQUFDO0lBRUQsRUFBRSxDQUFDLEVBQU07UUFDTCxlQUFlO0lBQ25CLENBQUM7SUFFRCxLQUFLO1FBQ0QsNEJBQTRCO0lBQ2hDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBaUI7UUFDcEIsaUJBQWlCO0lBQ3JCLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBeUI7UUFDMUIsZ0JBQWdCO0lBQ3BCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9hcHAvYXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcbmltcG9ydCB7IFVJIH0gZnJvbSBcIi4uL3N5c3RlbS91aVwiO1xuXG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgZGVzOiBzdHJpbmcgPSBcIlwiKSB7XG4gICAgICAgIC8vIHVuaXF1ZSBjb25zdHJ1Y3RvclxuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlcztcbiAgICB9XG5cbiAgICB1aSh1aTogVUkpIHtcbiAgICAgICAgLy8gc2V0dXAgZm9yIFVJXG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIC8vIGFkZGl0aW9uYWwgc2V0dXAgb2Ygc3RhdGVcbiAgICB9XG5cbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcbiAgICAgICAgLy8gdXBkYXRpbmcgc3RhdGVcbiAgICB9XG5cbiAgICBkcmF3KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgLy8gZHJhd2luZyBzdGF0ZVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/app/app.ts\n");

/***/ }),

/***/ "./src/app/swap-app.ts":
/*!*****************************!*\
  !*** ./src/app/swap-app.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SwapApp\": () => /* binding */ SwapApp\n/* harmony export */ });\n/* harmony import */ var _system_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../system/ui */ \"./src/system/ui.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n// name:    swap-app\r\n// author:  Jos Feenstra\r\n// purpose: swap between different apps.\r\n//          - factory for initiazing these apps\r\n//          - making sure core deletes old apps\r\n\r\n\r\nclass SwapApp extends _app__WEBPACK_IMPORTED_MODULE_1__.App {\r\n    constructor(gl, core, possibleApps) {\r\n        super(gl);\r\n        this.currentAppIndex = -1;\r\n        this.isuihidden = false;\r\n        this.core = core;\r\n        this.possibleApps = possibleApps;\r\n    }\r\n    getAppNames() {\r\n        let names = [];\r\n        let count = this.possibleApps.length;\r\n        for (let i = 0; i < count; i++) {\r\n            names.push(this.possibleApps[i].name.replace(\"App\", \"\"));\r\n        }\r\n        return names;\r\n    }\r\n    ui(ui) {\r\n        let names = this.getAppNames();\r\n        this.param = _system_ui__WEBPACK_IMPORTED_MODULE_0__.EnumParameter.new(\"apps\", 0, names);\r\n        ui.addDropdown(this.param, (i) => {\r\n            this.swap(i);\r\n        });\r\n    }\r\n    swapFromUrl(hash, ifnot) {\r\n        // select one of the apps based on an url\r\n        let test = hash.substr(1);\r\n        let names = this.getAppNames();\r\n        for (let i = 0; i < names.length; i++) {\r\n            if (names[i].toLowerCase() === test) {\r\n                this.swap(i);\r\n                return;\r\n            }\r\n        }\r\n        // no match\r\n        console.log(\"no hash match, defaulting...\");\r\n        this.swap(ifnot);\r\n    }\r\n    swap(index) {\r\n        // todo do some range checking\r\n        let AppType = this.possibleApps[index];\r\n        if (this.currentAppIndex > -1) {\r\n            let PreviousType = this.possibleApps[this.currentAppIndex];\r\n            console.log(\"removing\", PreviousType.name);\r\n            this.core.removeApp(PreviousType.name);\r\n        }\r\n        console.log(\"constructing\", AppType.name);\r\n        this.currentAppIndex = index;\r\n        let app = new AppType(this.gl);\r\n        location.hash = \"#\" + AppType.name.replace(\"App\", \"\").toLowerCase();\r\n        this.core.addApp(app);\r\n    }\r\n    update(state) {\r\n        if (state.IsKeyPressed(\"m\")) {\r\n            // simple toggle\r\n            if (this.isuihidden) {\r\n                this.core.ui.show();\r\n                this.isuihidden = false;\r\n            }\r\n            else {\r\n                this.core.ui.hide();\r\n                this.isuihidden = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9hcHAvc3dhcC1hcHAudHM/Y2JiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHdDQUF3QztBQUN4QywrQ0FBK0M7QUFDL0MsK0NBQStDO0FBSUU7QUFDckI7QUFFckIsTUFBTSxPQUFRLFNBQVEscUNBQUc7SUFPNUIsWUFBWSxFQUF5QixFQUFFLElBQVUsRUFBRSxZQUFtQjtRQUNsRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFMZCxvQkFBZSxHQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzdCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFLZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUN6QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELEVBQUUsQ0FBQyxFQUFNO1FBQ0wsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxLQUFLLEdBQUcseURBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRCxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUNuQyx5Q0FBeUM7UUFDekMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUxQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLE9BQU87YUFDVjtTQUNKO1FBRUQsV0FBVztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLENBQUMsS0FBYTtRQUNkLDhCQUE4QjtRQUM5QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMzQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUvQixRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUNwQixJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDekIsZ0JBQWdCO1lBQ2hCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQzthQUMxQjtTQUNKO0lBQ0wsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2FwcC9zd2FwLWFwcC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIHN3YXAtYXBwXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcbi8vIHB1cnBvc2U6IHN3YXAgYmV0d2VlbiBkaWZmZXJlbnQgYXBwcy5cbi8vICAgICAgICAgIC0gZmFjdG9yeSBmb3IgaW5pdGlhemluZyB0aGVzZSBhcHBzXG4vLyAgICAgICAgICAtIG1ha2luZyBzdXJlIGNvcmUgZGVsZXRlcyBvbGQgYXBwc1xuXG5pbXBvcnQgeyBDb3JlIH0gZnJvbSBcIi4uL3N5c3RlbS9jb3JlXCI7XG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4uL3N5c3RlbS9pbnB1dC1zdGF0ZVwiO1xuaW1wb3J0IHsgRW51bVBhcmFtZXRlciwgVUkgfSBmcm9tIFwiLi4vc3lzdGVtL3VpXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcblxuZXhwb3J0IGNsYXNzIFN3YXBBcHAgZXh0ZW5kcyBBcHAge1xuICAgIHBvc3NpYmxlQXBwczogYW55W107XG4gICAgY29yZTogQ29yZTtcbiAgICBjdXJyZW50QXBwSW5kZXg6IG51bWJlciA9IC0xO1xuICAgIGlzdWloaWRkZW4gPSBmYWxzZTtcbiAgICBwYXJhbT86IEVudW1QYXJhbWV0ZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb3JlOiBDb3JlLCBwb3NzaWJsZUFwcHM6IGFueVtdKSB7XG4gICAgICAgIHN1cGVyKGdsKTtcbiAgICAgICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICAgICAgdGhpcy5wb3NzaWJsZUFwcHMgPSBwb3NzaWJsZUFwcHM7XG4gICAgfVxuXG4gICAgZ2V0QXBwTmFtZXMoKSB7XG4gICAgICAgIGxldCBuYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5wb3NzaWJsZUFwcHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIG5hbWVzLnB1c2godGhpcy5wb3NzaWJsZUFwcHNbaV0ubmFtZS5yZXBsYWNlKFwiQXBwXCIsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZXM7XG4gICAgfVxuXG4gICAgdWkodWk6IFVJKSB7XG4gICAgICAgIGxldCBuYW1lcyA9IHRoaXMuZ2V0QXBwTmFtZXMoKTtcblxuICAgICAgICB0aGlzLnBhcmFtID0gRW51bVBhcmFtZXRlci5uZXcoXCJhcHBzXCIsIDAsIG5hbWVzKTtcbiAgICAgICAgdWkuYWRkRHJvcGRvd24odGhpcy5wYXJhbSwgKGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3dhcChpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3dhcEZyb21VcmwoaGFzaDogc3RyaW5nLCBpZm5vdDogbnVtYmVyKSB7XG4gICAgICAgIC8vIHNlbGVjdCBvbmUgb2YgdGhlIGFwcHMgYmFzZWQgb24gYW4gdXJsXG4gICAgICAgIGxldCB0ZXN0ID0gaGFzaC5zdWJzdHIoMSk7XG5cbiAgICAgICAgbGV0IG5hbWVzID0gdGhpcy5nZXRBcHBOYW1lcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobmFtZXNbaV0udG9Mb3dlckNhc2UoKSA9PT0gdGVzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3dhcChpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBubyBtYXRjaFxuICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGhhc2ggbWF0Y2gsIGRlZmF1bHRpbmcuLi5cIik7XG4gICAgICAgIHRoaXMuc3dhcChpZm5vdCk7XG4gICAgfVxuXG4gICAgc3dhcChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIC8vIHRvZG8gZG8gc29tZSByYW5nZSBjaGVja2luZ1xuICAgICAgICBsZXQgQXBwVHlwZSA9IHRoaXMucG9zc2libGVBcHBzW2luZGV4XTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFwcEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGxldCBQcmV2aW91c1R5cGUgPSB0aGlzLnBvc3NpYmxlQXBwc1t0aGlzLmN1cnJlbnRBcHBJbmRleF07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbW92aW5nXCIsIFByZXZpb3VzVHlwZS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY29yZS5yZW1vdmVBcHAoUHJldmlvdXNUeXBlLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29uc3RydWN0aW5nXCIsIEFwcFR5cGUubmFtZSk7XG4gICAgICAgIHRoaXMuY3VycmVudEFwcEluZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgbGV0IGFwcCA9IG5ldyBBcHBUeXBlKHRoaXMuZ2wpO1xuXG4gICAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiNcIiArIEFwcFR5cGUubmFtZS5yZXBsYWNlKFwiQXBwXCIsIFwiXCIpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgdGhpcy5jb3JlLmFkZEFwcChhcHApO1xuICAgIH1cblxuICAgIHVwZGF0ZShzdGF0ZTogSW5wdXRTdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUuSXNLZXlQcmVzc2VkKFwibVwiKSkge1xuICAgICAgICAgICAgLy8gc2ltcGxlIHRvZ2dsZVxuICAgICAgICAgICAgaWYgKHRoaXMuaXN1aWhpZGRlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29yZS51aS5zaG93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc3VpaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29yZS51aS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc3VpaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/app/swap-app.ts\n");

/***/ }),

/***/ "./src/data/float-matrix.ts":
/*!**********************************!*\
  !*** ./src/data/float-matrix.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FloatMatrix\": () => /* binding */ FloatMatrix\n/* harmony export */ });\n// generic all-pupose matrix of floats\r\nclass FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    print() {\r\n        let strings = [];\r\n        const WIDTH = 8;\r\n        for (var i = 0; i < this._height; i++) {\r\n            strings.push(\"|\");\r\n            for (var j = 0; j < this._width; j++) {\r\n                let str = this.get(i, j).toFixed(2);\r\n                str = str.padStart(WIDTH, \" \");\r\n                strings.push(str);\r\n                if (j < this._width - 2) {\r\n                    strings.push(\"  \");\r\n                }\r\n            }\r\n            strings.push(\"  |\\n\");\r\n        }\r\n        console.log(strings.join(\"\"));\r\n    }\r\n    clone() {\r\n        let clone = new FloatMatrix(this._height, this._width);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this._height * this._width)\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    // create a new floatmatrix, processed by iterating\r\n    mapWith(other, callback) {\r\n        let result = this.clone();\r\n        let width = Math.min(this._width, other._height);\r\n        let height = Math.min(this._height, other._height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                result.set(i, j, callback(this.get(i, j), other.get(i, j)));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // generalized multiplication\r\n    multiply(b) {\r\n        let a = this;\r\n        if (b._width !== a._height) {\r\n            throw new Error(\"Columns in A should be the same as the number of rows in B\");\r\n        }\r\n        var product = new FloatMatrix(a._height, b._width);\r\n        for (var i = 0; i < product._height; i++) {\r\n            for (var j = 0; j < b._width; j++) {\r\n                for (var k = 0; k < a._width; k++) {\r\n                    product.set(i, j, product.get(i, j) + a.get(i, k) * b.get(k, j));\r\n                }\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let width = native[0].length;\r\n        let matrix = new FloatMatrix(height, width);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    toNative() {\r\n        let native = [];\r\n        for (var i = 0; i < this._height; i++) {\r\n            native[i] = [];\r\n            for (var j = 0; j < this._width; j++) {\r\n                native[i][j] = this.get(i, j);\r\n            }\r\n        }\r\n        return native;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/float-matrix.ts\n");

/***/ }),

/***/ "./src/data/hash-table.ts":
/*!********************************!*\
  !*** ./src/data/hash-table.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HashTable\": () => /* binding */ HashTable\n/* harmony export */ });\n// note: this wont always work, but it does in most cases\r\n// todo: implement proper hashtable\r\nclass HashTable {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    stringify(key) {\r\n        return key.toString();\r\n    }\r\n    set(key, value) {\r\n        return this.data.set(this.stringify(key), value);\r\n    }\r\n    has(key) {\r\n        return this.data.has(this.stringify(key));\r\n    }\r\n    get(key) {\r\n        return this.data.get(this.stringify(key));\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9kYXRhL2hhc2gtdGFibGUudHM/ZDdhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEseURBQXlEO0FBQ3pELG1DQUFtQztBQUM1QixNQUFNLFNBQVM7SUFHbEI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFhLENBQUM7SUFDckMsQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFRO1FBQ3RCLE9BQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUSxFQUFFLEtBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9kYXRhL2hhc2gtdGFibGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBub3RlOiB0aGlzIHdvbnQgYWx3YXlzIHdvcmssIGJ1dCBpdCBkb2VzIGluIG1vc3QgY2FzZXNcbi8vIHRvZG86IGltcGxlbWVudCBwcm9wZXIgaGFzaHRhYmxlXG5leHBvcnQgY2xhc3MgSGFzaFRhYmxlPFY+IHtcbiAgICBkYXRhOiBNYXA8c3RyaW5nLCBWPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgTWFwPHN0cmluZywgVj4oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0cmluZ2lmeShrZXk6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBzZXQoa2V5OiBhbnksIHZhbHVlOiBWKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc2V0KHRoaXMuc3RyaW5naWZ5KGtleSksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBoYXMoa2V5OiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oYXModGhpcy5zdHJpbmdpZnkoa2V5KSk7XG4gICAgfVxuXG4gICAgZ2V0KGtleTogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZ2V0KHRoaXMuc3RyaW5naWZ5KGtleSkpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/hash-table.ts\n");

/***/ }),

/***/ "./src/data/int-cube.ts":
/*!******************************!*\
  !*** ./src/data/int-cube.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntCube\": () => /* binding */ IntCube\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n// a Cube of voxels\r\nclass IntCube {\r\n    constructor(height, width, depth, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this._depth = depth;\r\n        let size = this._width * this._height * this._depth;\r\n        this.data = new Int32Array(size);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else {\r\n            this.setData(data);\r\n        }\r\n    }\r\n    size() {\r\n        return this._width * this._height * this._depth;\r\n    }\r\n    // shallow copy\r\n    clone() {\r\n        let clone = new IntCube(this._height, this._width, this._depth);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this.size())\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    fill(value) {\r\n        let size = this.size();\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    inRange(i, j, k) {\r\n        return !(i < 0 || j < 0 || k < 0 || i > this._width - 1 || j > this._height - 1 || k > this._depth - 1);\r\n    }\r\n    getIndex(i, j, k) {\r\n        return i * (this._height * this._depth) + j * this._depth + k;\r\n    }\r\n    getCoords(index) {\r\n        // javascript, dont you dare turn  'int / int' into a float...\r\n        let i = Math.floor(index / (this._height * this._depth)) % this._width;\r\n        let j = Math.floor(index / this._depth) % this._height;\r\n        let k = index % this._depth;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(i, j, k);\r\n    }\r\n    get(i, j, k) {\r\n        return this.data[this.getIndex(i, j, k)];\r\n    }\r\n    tryGet(i, j, k) {\r\n        if (this.inRange(i, j, k)) {\r\n            return this.data[this.getIndex(i, j, k)];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    set(i, j, k, value) {\r\n        this.data[this.getIndex(i, j, k)] = value;\r\n    }\r\n    trySet(i, j, k, value) {\r\n        if (this.inRange(i, j, k)) {\r\n            this.data[this.getIndex(i, j, k)] = value;\r\n        }\r\n    }\r\n    iter(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    map(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-cube.ts\n");

/***/ }),

/***/ "./src/data/int-matrix.ts":
/*!********************************!*\
  !*** ./src/data/int-matrix.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntMatrix\": () => /* binding */ IntMatrix\n/* harmony export */ });\n// generic all-pupose matrix of ints\r\nclass IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Uint16Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    static fromList(list, width) {\r\n        let height = list.length / width;\r\n        let array = new IntMatrix(height, width);\r\n        for (let i = 0; i < list.length; i++) {\r\n            array.data[i] = list[i];\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this._height * this._width)\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    inRange(i, j) {\r\n        return !(i < 0 || i > this._height - 1 || j < 0 || j > this._width - 1);\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return 0;\r\n        }\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for Array\"\r\n        let data = new Uint16Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for Array\"\r\n        let data = new Uint16Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return;\r\n        }\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    getData() {\r\n        return this.data;\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    forEachRow(callbackfn) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let row = this.getRow(i);\r\n            callbackfn(row, i);\r\n            this.setRow(i, row);\r\n        }\r\n        return this;\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-matrix.ts\n");

/***/ }),

/***/ "./src/data/linked-list.ts":
/*!*********************************!*\
  !*** ./src/data/linked-list.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinkedList\": () => /* binding */ LinkedList\n/* harmony export */ });\n//\r\n// note: taken from\r\n// https://medium.com/everything-javascript/implementing-a-hash-table-in-javascript-29aca1edfe2b\r\n// NOTE: Not used anymore, but i still find it interesting, so leave it here\r\nclass LinkedList {\r\n    constructor() {\r\n        this.head = null;\r\n    }\r\n    empty() {\r\n        if (this.head)\r\n            return false;\r\n        return true;\r\n    }\r\n    last() {\r\n        var cursor = this.head;\r\n        while (cursor.getNext()) {\r\n            cursor = cursor.getNext();\r\n        }\r\n        return cursor;\r\n    }\r\n    find(key) {\r\n        var cursor = this.head;\r\n        while (cursor) {\r\n            if (cursor.getKey() == key)\r\n                return cursor.value();\r\n            cursor = cursor.getNext();\r\n        }\r\n        return false;\r\n    }\r\n    insert(value, key) {\r\n        var node = new ListNode(value, key);\r\n        if (!this.head)\r\n            this.head = node;\r\n        else\r\n            this.last().next(node);\r\n    }\r\n    print() {\r\n        var cursor = this.head;\r\n        while (cursor) {\r\n            console.log(cursor.value() + \" \");\r\n            cursor = cursor.getNext();\r\n        }\r\n    }\r\n}\r\n//node\r\nclass ListNode {\r\n    constructor(value, key) {\r\n        this.nextNode = null;\r\n        this.key = key;\r\n        this.val = value;\r\n    }\r\n    getNext() {\r\n        return this.nextNode;\r\n    }\r\n    next(node) {\r\n        this.nextNode = node;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    value() {\r\n        return this.val;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9kYXRhL2xpbmtlZC1saXN0LnRzPzY3MjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLEVBQUU7QUFDRixtQkFBbUI7QUFDbkIsZ0dBQWdHO0FBQ2hHLDRFQUE0RTtBQUVyRSxNQUFNLFVBQVU7SUFBdkI7UUFDWSxTQUFJLEdBQVEsSUFBSSxDQUFDO0lBcUM3QixDQUFDO0lBbkNHLEtBQUs7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLE1BQU0sR0FBYSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDN0I7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQVc7UUFDWixJQUFJLE1BQU0sR0FBYSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sTUFBTSxFQUFFO1lBQ1gsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksR0FBRztnQkFBRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzdCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFVLEVBQUUsR0FBVztRQUMxQixJQUFJLElBQUksR0FBYSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O1lBQzVCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLE1BQU0sR0FBYSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sTUFBTSxFQUFFO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDbEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7Q0FDSjtBQUVELE1BQU07QUFDTixNQUFNLFFBQVE7SUFLVixZQUFZLEtBQVUsRUFBRSxHQUFXO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFjO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUs7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2RhdGEvbGlua2VkLWxpc3QudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gbm90ZTogdGFrZW4gZnJvbVxuLy8gaHR0cHM6Ly9tZWRpdW0uY29tL2V2ZXJ5dGhpbmctamF2YXNjcmlwdC9pbXBsZW1lbnRpbmctYS1oYXNoLXRhYmxlLWluLWphdmFzY3JpcHQtMjlhY2ExZWRmZTJiXG4vLyBOT1RFOiBOb3QgdXNlZCBhbnltb3JlLCBidXQgaSBzdGlsbCBmaW5kIGl0IGludGVyZXN0aW5nLCBzbyBsZWF2ZSBpdCBoZXJlXG5cbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0IHtcbiAgICBwcml2YXRlIGhlYWQ6IGFueSA9IG51bGw7XG5cbiAgICBlbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsYXN0KCk6IExpc3ROb2RlIHtcbiAgICAgICAgdmFyIGN1cnNvcjogTGlzdE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHdoaWxlIChjdXJzb3IuZ2V0TmV4dCgpKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSBjdXJzb3IuZ2V0TmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJzb3I7XG4gICAgfVxuXG4gICAgZmluZChrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHZhciBjdXJzb3I6IExpc3ROb2RlID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAoY3Vyc29yKSB7XG4gICAgICAgICAgICBpZiAoY3Vyc29yLmdldEtleSgpID09IGtleSkgcmV0dXJuIGN1cnNvci52YWx1ZSgpO1xuICAgICAgICAgICAgY3Vyc29yID0gY3Vyc29yLmdldE5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaW5zZXJ0KHZhbHVlOiBhbnksIGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHZhciBub2RlOiBMaXN0Tm9kZSA9IG5ldyBMaXN0Tm9kZSh2YWx1ZSwga2V5KTtcbiAgICAgICAgaWYgKCF0aGlzLmhlYWQpIHRoaXMuaGVhZCA9IG5vZGU7XG4gICAgICAgIGVsc2UgdGhpcy5sYXN0KCkubmV4dChub2RlKTtcbiAgICB9XG5cbiAgICBwcmludCgpOiB2b2lkIHtcbiAgICAgICAgdmFyIGN1cnNvcjogTGlzdE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHdoaWxlIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnNvci52YWx1ZSgpICsgXCIgXCIpO1xuICAgICAgICAgICAgY3Vyc29yID0gY3Vyc29yLmdldE5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy9ub2RlXG5jbGFzcyBMaXN0Tm9kZSB7XG4gICAgcHJpdmF0ZSB2YWw6IGFueTtcbiAgICBwcml2YXRlIGtleTogc3RyaW5nO1xuICAgIHByaXZhdGUgbmV4dE5vZGU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubmV4dE5vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy52YWwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXROZXh0KCk6IExpc3ROb2RlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dE5vZGU7XG4gICAgfVxuXG4gICAgbmV4dChub2RlOiBMaXN0Tm9kZSkge1xuICAgICAgICB0aGlzLm5leHROb2RlID0gbm9kZTtcbiAgICB9XG5cbiAgICBnZXRLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5O1xuICAgIH1cblxuICAgIHZhbHVlKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/data/linked-list.ts\n");

/***/ }),

/***/ "./src/data/vector-array.ts":
/*!**********************************!*\
  !*** ./src/data/vector-array.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector2Array\": () => /* binding */ Vector2Array,\n/* harmony export */   \"Vector3Array\": () => /* binding */ Vector3Array,\n/* harmony export */   \"getGeneralFloatMatrix\": () => /* binding */ getGeneralFloatMatrix\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _float_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3,\r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n//\r\n// NOTE:    all these small wrappers might not be good pratice, but I\r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass Vector2Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    to3D() {\r\n        let array = new Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n}\r\nclass Vector3Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let matrix = new Vector3Array(height);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    fillFromList(vecs) {\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            this.data[i * 3] = vecs[i].x;\r\n            this.data[i * 3 + 1] = vecs[i].y;\r\n            this.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            vec = callbackfn(vec, i);\r\n            if (vec instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                this.setVector(i, vec);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    take(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new Vector3Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setVector(i, this.getVector(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    mapWith(other, callback) {\r\n        return super.mapWith(other, callback);\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        // THIS CAN BE SPEED UP: BOTH MATRIX 4 & VECTOR3ARRAY ARE JUST FLOAT-MATRICES\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                clone.set(i, j, this.get(i, j));\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    clone() {\r\n        let clone = new Vector3Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    mean() {\r\n        // the mean vector of a series of vectors\r\n        let sum = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.zero();\r\n        let count = this.count();\r\n        for (let i = 0; i < count; i++) {\r\n            sum.x += this.data[i * 3];\r\n            sum.y += this.data[i * 3 + 1];\r\n            sum.z += this.data[i * 3 + 2];\r\n        }\r\n        return sum.scale(1 / count);\r\n    }\r\n    average() {\r\n        return this.mean();\r\n    }\r\n    closestId(point) {\r\n        let lowScore = Infinity;\r\n        let id = -1;\r\n        this.forEach((v, i) => {\r\n            let disSquared = point.disToSquared(v);\r\n            if (disSquared < lowScore) {\r\n                lowScore = disSquared;\r\n                id = i;\r\n            }\r\n        });\r\n        return id;\r\n    }\r\n    closestIds(point, n) {\r\n        // O(m*n)... TODO implement quicksort\r\n        let ids = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let lowScore = Infinity;\r\n            let id = -1;\r\n            this.forEach((v, i) => {\r\n                if (ids.includes(id))\r\n                    return;\r\n                let disSquared = point.disToSquared(v);\r\n                if (disSquared < lowScore) {\r\n                    lowScore = disSquared;\r\n                    id = i;\r\n                }\r\n            });\r\n            ids.push(id);\r\n        }\r\n        return ids;\r\n    }\r\n}\r\n// TODO : to FloatMatrix\r\nfunction getGeneralFloatMatrix(vectors) {\r\n    if (vectors instanceof Vector2Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors instanceof Vector3Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors[0] instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n        return Vector2Array.fromList(vectors);\r\n    }\r\n    else {\r\n        return Vector3Array.fromList(vectors);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9kYXRhL3ZlY3Rvci1hcnJheS50cz9lYjFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QiwyR0FBMkc7QUFDM0csNEVBQTRFO0FBQzVFLEVBQUU7QUFDRixxRUFBcUU7QUFDckUsbUZBQW1GO0FBR2pDO0FBQ0w7QUFFdEMsTUFBTSxZQUFhLFNBQVEsc0RBQVc7SUFDekMsWUFBWSxLQUFhO1FBQ3JCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBZTtRQUMzQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLElBQUksS0FBSyxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsT0FBTyxDQUFDLFVBQW1EO1FBQ3ZELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixVQUFV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YS92ZWN0b3ItYXJyYXkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBhcnJheS50c1xuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBTbWFsbCB3cmFwcGVyIGFyb3VuZCBGbG9hdDMyQXJyYXkgLyBGbG9hdE1hdHJpeCB0byBhZGQgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIFZlY3RvcjIgJiBWZWN0b3IzLFxuLy8gICAgICAgICAgd2hpbGUgcmVtYWluaW5nIGEgZGF0YXN0cnVjdHVyZSB0aGF0cyBlYXN5IHRvIHBhc3Mgb3ZlciB0byB3ZWJnbFxuLy9cbi8vIE5PVEU6ICAgIGFsbCB0aGVzZSBzbWFsbCB3cmFwcGVycyBtaWdodCBub3QgYmUgZ29vZCBwcmF0aWNlLCBidXQgSVxuLy8gICAgICAgICAgbGlrZSB0byBleHRyYWN0IHNpbXBsZSBsb2dpYyBsaWtlIHRoaXMgdG8gbm90IGNsdXR0ZXIgdGhlIGNvZGUgdG9vIG11Y2hcblxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xuaW1wb3J0IHsgVmVjdG9yMywgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xuaW1wb3J0IHsgRmxvYXRNYXRyaXggfSBmcm9tIFwiLi9mbG9hdC1tYXRyaXhcIjtcblxuZXhwb3J0IGNsYXNzIFZlY3RvcjJBcnJheSBleHRlbmRzIEZsb2F0TWF0cml4IHtcbiAgICBjb25zdHJ1Y3Rvcihjb3VudDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKGNvdW50LCAyKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUxpc3QodmVjczogVmVjdG9yMltdKTogVmVjdG9yMkFycmF5IHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHZlY3MubGVuZ3RoO1xuICAgICAgICBsZXQgYXJyYXkgPSBuZXcgVmVjdG9yMkFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpICogMl0gPSB2ZWNzW2ldLng7XG4gICAgICAgICAgICBhcnJheS5kYXRhW2kgKiAyICsgMV0gPSB2ZWNzW2ldLnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2tmbjogKHZhbHVlOiBWZWN0b3IyLCBpbmRleDogbnVtYmVyKSA9PiB2b2lkKTogVmVjdG9yMkFycmF5IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZlYyA9IHRoaXMuZ2V0VmVjdG9yKGkpO1xuICAgICAgICAgICAgY2FsbGJhY2tmbih2ZWMsIGkpO1xuICAgICAgICAgICAgdGhpcy5zZXRWZWN0b3IoaSwgdmVjKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtYXAoY2FsbGJhY2tmbjogKHZhbHVlOiBWZWN0b3IyLCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBWZWN0b3IyQXJyYXkge1xuICAgICAgICBsZXQgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZlYyA9IHRoaXMuZ2V0VmVjdG9yKGkpO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrZm4odmVjLCBpKSE7XG4gICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgVmVjdG9yMikge1xuICAgICAgICAgICAgICAgIGNsb25lLnNldFZlY3RvcihpLCByZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbG9uZS5zZXRWZWN0b3IoaSwgdmVjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuXG4gICAgc2V0VmVjdG9yKGk6IG51bWJlciwgdmVjOiBWZWN0b3IyKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAwXSA9IHZlYy54O1xuICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuX3dpZHRoICsgMV0gPSB2ZWMueTtcbiAgICB9XG5cbiAgICBnZXRWZWN0b3IoaTogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLmRhdGFbaSAqIHRoaXMuX3dpZHRoICsgMF0sIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAxXSk7XG4gICAgfVxuXG4gICAgdG9MaXN0KCk6IFZlY3RvcjJbXSB7XG4gICAgICAgIGxldCB2ZWNzOiBWZWN0b3IyW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9oZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgdmVjcy5wdXNoKHRoaXMuZ2V0VmVjdG9yKGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmVjcztcbiAgICB9XG5cbiAgICB0bzNEKCk6IFZlY3RvcjNBcnJheSB7XG4gICAgICAgIGxldCBhcnJheSA9IG5ldyBWZWN0b3IzQXJyYXkodGhpcy5jb3VudCgpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuZ2V0Um93KGkpO1xuICAgICAgICAgICAgYXJyYXkuc2V0Um93KGksIFtyb3dbMF0sIHJvd1sxXSwgMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBWZWN0b3IyQXJyYXkge1xuICAgICAgICBsZXQgY2xvbmUgPSBuZXcgVmVjdG9yMkFycmF5KHRoaXMuX2hlaWdodCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbG9uZS5kYXRhW2ldID0gdGhpcy5kYXRhW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3IzQXJyYXkgZXh0ZW5kcyBGbG9hdE1hdHJpeCB7XG4gICAgY29uc3RydWN0b3IoY291bnQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcihjb3VudCwgMyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21MaXN0KHZlY3M6IFZlY3RvcjNbXSk6IFZlY3RvcjNBcnJheSB7XG4gICAgICAgIGxldCBsZW5ndGggPSB2ZWNzLmxlbmd0aDtcbiAgICAgICAgbGV0IGFycmF5ID0gbmV3IFZlY3RvcjNBcnJheShsZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycmF5LmRhdGFbaSAqIDNdID0gdmVjc1tpXS54O1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpICogMyArIDFdID0gdmVjc1tpXS55O1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpICogMyArIDJdID0gdmVjc1tpXS56O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU5hdGl2ZShuYXRpdmU6IG51bWJlcltdW10pOiBWZWN0b3IzQXJyYXkge1xuICAgICAgICAvLyBhc3N1bWUgYWxsIHN1YmFycmF5cyBoYXZlIHRoZSBzYW1lIHNoYXBlISFcbiAgICAgICAgbGV0IGhlaWdodCA9IG5hdGl2ZS5sZW5ndGg7XG4gICAgICAgIGxldCBtYXRyaXggPSBuZXcgVmVjdG9yM0FycmF5KGhlaWdodCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmF0aXZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5hdGl2ZVswXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIG1hdHJpeC5zZXQoaSwgaiwgbmF0aXZlW2ldW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cblxuICAgIGZpbGxGcm9tTGlzdCh2ZWNzOiBWZWN0b3IzW10pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaSAqIDNdID0gdmVjc1tpXS54O1xuICAgICAgICAgICAgdGhpcy5kYXRhW2kgKiAzICsgMV0gPSB2ZWNzW2ldLnk7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaSAqIDMgKyAyXSA9IHZlY3NbaV0uejtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2tmbjogKHZhbHVlOiBWZWN0b3IzLCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBWZWN0b3IzQXJyYXkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmVjID0gdGhpcy5nZXRWZWN0b3IoaSk7XG4gICAgICAgICAgICB2ZWMgPSBjYWxsYmFja2ZuKHZlYywgaSkhO1xuICAgICAgICAgICAgaWYgKHZlYyBpbnN0YW5jZW9mIFZlY3RvcjMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZlY3RvcihpLCB2ZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRha2UoaW5kaWNlczogbnVtYmVyW10pOiBWZWN0b3IzQXJyYXkge1xuICAgICAgICAvLyBjcmVhdGUgYSBuZXcgZmxvYXRhcnJheVxuICAgICAgICBjb25zdCBjb3VudCA9IGluZGljZXMubGVuZ3RoO1xuICAgICAgICBsZXQgYXJyYXkgPSBuZXcgVmVjdG9yM0FycmF5KGNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZ2V0SW5kZXggPSBpbmRpY2VzW2ldO1xuICAgICAgICAgICAgYXJyYXkuc2V0VmVjdG9yKGksIHRoaXMuZ2V0VmVjdG9yKGdldEluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIG1hcChjYWxsYmFja2ZuOiAodmFsdWU6IFZlY3RvcjMsIGluZGV4OiBudW1iZXIpID0+IGFueSk6IFZlY3RvcjNBcnJheSB7XG4gICAgICAgIGxldCBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmVjID0gdGhpcy5nZXRWZWN0b3IoaSk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gY2FsbGJhY2tmbih2ZWMsIGkpITtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBWZWN0b3IzKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUuc2V0VmVjdG9yKGksIHJlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsb25lLnNldFZlY3RvcihpLCB2ZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICBtYXBXaXRoKG90aGVyOiBWZWN0b3IzQXJyYXksIGNhbGxiYWNrOiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IG51bWJlcikge1xuICAgICAgICByZXR1cm4gc3VwZXIubWFwV2l0aChvdGhlciwgY2FsbGJhY2spIGFzIFZlY3RvcjNBcnJheTtcbiAgICB9XG5cbiAgICBzZXRWZWN0b3IoaTogbnVtYmVyLCB2ZWM6IFZlY3RvcjMpIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKiB0aGlzLl93aWR0aCArIDBdID0gdmVjLng7XG4gICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAxXSA9IHZlYy55O1xuICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuX3dpZHRoICsgMl0gPSB2ZWMuejtcbiAgICB9XG5cbiAgICBnZXRWZWN0b3IoaTogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAwXSxcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAxXSxcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5fd2lkdGggKyAyXSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0b0xpc3QoKTogVmVjdG9yM1tdIHtcbiAgICAgICAgbGV0IHZlY3M6IFZlY3RvcjNbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2hlaWdodDsgaSsrKSB7XG4gICAgICAgICAgICB2ZWNzLnB1c2godGhpcy5nZXRWZWN0b3IoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2ZWNzO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybShtOiBNYXRyaXg0KTogVmVjdG9yM0FycmF5IHtcbiAgICAgICAgLy8gVEhJUyBDQU4gQkUgU1BFRUQgVVA6IEJPVEggTUFUUklYIDQgJiBWRUNUT1IzQVJSQVkgQVJFIEpVU1QgRkxPQVQtTUFUUklDRVNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9oZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZlYyA9IHRoaXMuZ2V0VmVjdG9yKGkpO1xuICAgICAgICAgICAgdmVjID0gbS5tdWx0aXBseVZlY3Rvcih2ZWMpO1xuICAgICAgICAgICAgdGhpcy5zZXRWZWN0b3IoaSwgdmVjKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLmRhdGEgPSBtLk11bHRpcGx5TSh0aGlzKS5kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0bzJEKCk6IFZlY3RvcjJBcnJheSB7XG4gICAgICAgIGxldCBjbG9uZSA9IG5ldyBWZWN0b3IyQXJyYXkodGhpcy5faGVpZ2h0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9oZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAyOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjbG9uZS5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBWZWN0b3IzQXJyYXkge1xuICAgICAgICBsZXQgY2xvbmUgPSBuZXcgVmVjdG9yM0FycmF5KHRoaXMuX2hlaWdodCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbG9uZS5kYXRhW2ldID0gdGhpcy5kYXRhW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICBtZWFuKCk6IFZlY3RvcjMge1xuICAgICAgICAvLyB0aGUgbWVhbiB2ZWN0b3Igb2YgYSBzZXJpZXMgb2YgdmVjdG9yc1xuICAgICAgICBsZXQgc3VtID0gVmVjdG9yMy56ZXJvKCk7XG5cbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5jb3VudCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHN1bS54ICs9IHRoaXMuZGF0YVtpICogM107XG4gICAgICAgICAgICBzdW0ueSArPSB0aGlzLmRhdGFbaSAqIDMgKyAxXTtcbiAgICAgICAgICAgIHN1bS56ICs9IHRoaXMuZGF0YVtpICogMyArIDJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1bS5zY2FsZSgxIC8gY291bnQpO1xuICAgIH1cblxuICAgIGF2ZXJhZ2UoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lYW4oKTtcbiAgICB9XG5cbiAgICBjbG9zZXN0SWQocG9pbnQ6IFZlY3RvcjMpOiBudW1iZXIge1xuICAgICAgICBsZXQgbG93U2NvcmUgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IGlkID0gLTE7XG5cbiAgICAgICAgdGhpcy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGlzU3F1YXJlZCA9IHBvaW50LmRpc1RvU3F1YXJlZCh2KTtcbiAgICAgICAgICAgIGlmIChkaXNTcXVhcmVkIDwgbG93U2NvcmUpIHtcbiAgICAgICAgICAgICAgICBsb3dTY29yZSA9IGRpc1NxdWFyZWQ7XG4gICAgICAgICAgICAgICAgaWQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cblxuICAgIGNsb3Nlc3RJZHMocG9pbnQ6IFZlY3RvcjMsIG46IG51bWJlcik6IG51bWJlcltdIHtcbiAgICAgICAgLy8gTyhtKm4pLi4uIFRPRE8gaW1wbGVtZW50IHF1aWNrc29ydFxuXG4gICAgICAgIGxldCBpZHM6IG51bWJlcltdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsb3dTY29yZSA9IEluZmluaXR5O1xuICAgICAgICAgICAgbGV0IGlkID0gLTE7XG4gICAgICAgICAgICB0aGlzLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaWRzLmluY2x1ZGVzKGlkKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGxldCBkaXNTcXVhcmVkID0gcG9pbnQuZGlzVG9TcXVhcmVkKHYpO1xuICAgICAgICAgICAgICAgIGlmIChkaXNTcXVhcmVkIDwgbG93U2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG93U2NvcmUgPSBkaXNTcXVhcmVkO1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZHMucHVzaChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICB9XG59XG5cbi8vIFRPRE8gOiB0byBGbG9hdE1hdHJpeFxuZXhwb3J0IGZ1bmN0aW9uIGdldEdlbmVyYWxGbG9hdE1hdHJpeChcbiAgICB2ZWN0b3JzOiBWZWN0b3IyQXJyYXkgfCBWZWN0b3IzQXJyYXkgfCBWZWN0b3IyW10gfCBWZWN0b3IzW10sXG4pOiBGbG9hdE1hdHJpeCB7XG4gICAgaWYgKHZlY3RvcnMgaW5zdGFuY2VvZiBWZWN0b3IyQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHZlY3RvcnM7XG4gICAgfSBlbHNlIGlmICh2ZWN0b3JzIGluc3RhbmNlb2YgVmVjdG9yM0FycmF5KSB7XG4gICAgICAgIHJldHVybiB2ZWN0b3JzO1xuICAgIH0gZWxzZSBpZiAodmVjdG9yc1swXSBpbnN0YW5jZW9mIFZlY3RvcjIpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjJBcnJheS5mcm9tTGlzdCh2ZWN0b3JzIGFzIFZlY3RvcjJbXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjNBcnJheS5mcm9tTGlzdCh2ZWN0b3JzIGFzIFZlY3RvcjNbXSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/data/vector-array.ts\n");

/***/ }),

/***/ "./src/geo/circle2.ts":
/*!****************************!*\
  !*** ./src/geo/circle2.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle2\": () => /* binding */ Circle2\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\nclass Circle2 {\r\n    constructor(center, radius) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    // thank you mr Mitteldorf for making me remember how basic math works\r\n    // http://mathforum.org/library/drmath/view/53027.html\r\n    // calculate the centers of two circles, defined by two points and a radius\r\n    static centersFromPPR(a, b, radius) {\r\n        // throw new Error(\"Method not implemented.\");\r\n        // get in between length and halfway point\r\n        let normal = b.clone().sub(a);\r\n        let dis = normal.length();\r\n        let middle = a\r\n            .clone()\r\n            .add(b)\r\n            .scale(1 / 2);\r\n        // scalar length on mirror line (pythagoras)\r\n        let value = Math.pow(radius, 2) - Math.pow((dis / 2), 2);\r\n        if (value < -_math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // no sollution\r\n            return [];\r\n        }\r\n        else if (value < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // center roughly in the middle, so just return the middle\r\n            return [middle];\r\n        }\r\n        else {\r\n            // two circles possible:\r\n            let disToCenter = Math.pow(value, 0.5);\r\n            let normY = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(normal.y, -normal.x).normalize();\r\n            // move the middle point up and down\r\n            return [\r\n                middle.clone().add(normY.clone().scale(disToCenter)),\r\n                middle.clone().add(normY.clone().scale(-disToCenter)),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY2lyY2xlMi50cz8wYzFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUNHO0FBRWxDLE1BQU0sT0FBTztJQUloQixZQUFZLE1BQWUsRUFBRSxNQUFjO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxzRUFBc0U7SUFDdEUsc0RBQXNEO0lBQ3RELDJFQUEyRTtJQUMzRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsTUFBYztRQUN4RCw4Q0FBOEM7UUFFOUMsMENBQTBDO1FBQzFDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLElBQUksTUFBTSxHQUFHLENBQUM7YUFDVCxLQUFLLEVBQUU7YUFDUCxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ04sS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVsQiw0Q0FBNEM7UUFDNUMsSUFBSSxLQUFLLEdBQUcsZUFBTSxFQUFJLENBQUMsSUFBRyxVQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBSSxDQUFDLEVBQUM7UUFDekMsSUFBSSxLQUFLLEdBQUcsQ0FBQyx3REFBZSxFQUFFO1lBQzFCLGVBQWU7WUFDZixPQUFPLEVBQUUsQ0FBQztTQUNiO2FBQU0sSUFBSSxLQUFLLEdBQUcsd0RBQWUsRUFBRTtZQUNoQywwREFBMEQ7WUFDMUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25CO2FBQU07WUFDSCx3QkFBd0I7WUFDeEIsSUFBSSxXQUFXLEdBQUcsY0FBSyxFQUFJLEdBQUcsRUFBQztZQUMvQixJQUFJLEtBQUssR0FBRyxJQUFJLGlEQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUV6RCxvQ0FBb0M7WUFDcEMsT0FBTztnQkFDSCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hELENBQUM7U0FDTDtJQUNMLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9nZW8vY2lyY2xlMi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0IH0gZnJvbSBcIi4uL21hdGgvY29uc3RcIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcblxuZXhwb3J0IGNsYXNzIENpcmNsZTIge1xuICAgIGNlbnRlcjogVmVjdG9yMjtcbiAgICByYWRpdXM6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNlbnRlcjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cblxuICAgIC8vIHRoYW5rIHlvdSBtciBNaXR0ZWxkb3JmIGZvciBtYWtpbmcgbWUgcmVtZW1iZXIgaG93IGJhc2ljIG1hdGggd29ya3NcbiAgICAvLyBodHRwOi8vbWF0aGZvcnVtLm9yZy9saWJyYXJ5L2RybWF0aC92aWV3LzUzMDI3Lmh0bWxcbiAgICAvLyBjYWxjdWxhdGUgdGhlIGNlbnRlcnMgb2YgdHdvIGNpcmNsZXMsIGRlZmluZWQgYnkgdHdvIHBvaW50cyBhbmQgYSByYWRpdXNcbiAgICBzdGF0aWMgY2VudGVyc0Zyb21QUFIoYTogVmVjdG9yMiwgYjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIpOiBWZWN0b3IyW10ge1xuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcblxuICAgICAgICAvLyBnZXQgaW4gYmV0d2VlbiBsZW5ndGggYW5kIGhhbGZ3YXkgcG9pbnRcbiAgICAgICAgbGV0IG5vcm1hbCA9IGIuY2xvbmUoKS5zdWIoYSk7XG4gICAgICAgIGxldCBkaXMgPSBub3JtYWwubGVuZ3RoKCk7XG4gICAgICAgIGxldCBtaWRkbGUgPSBhXG4gICAgICAgICAgICAuY2xvbmUoKVxuICAgICAgICAgICAgLmFkZChiKVxuICAgICAgICAgICAgLnNjYWxlKDEgLyAyKTtcblxuICAgICAgICAvLyBzY2FsYXIgbGVuZ3RoIG9uIG1pcnJvciBsaW5lIChweXRoYWdvcmFzKVxuICAgICAgICBsZXQgdmFsdWUgPSByYWRpdXMgKiogMiAtIChkaXMgLyAyKSAqKiAyO1xuICAgICAgICBpZiAodmFsdWUgPCAtQ29uc3QuVE9MRVJBTkNFKSB7XG4gICAgICAgICAgICAvLyBubyBzb2xsdXRpb25cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IENvbnN0LlRPTEVSQU5DRSkge1xuICAgICAgICAgICAgLy8gY2VudGVyIHJvdWdobHkgaW4gdGhlIG1pZGRsZSwgc28ganVzdCByZXR1cm4gdGhlIG1pZGRsZVxuICAgICAgICAgICAgcmV0dXJuIFttaWRkbGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdHdvIGNpcmNsZXMgcG9zc2libGU6XG4gICAgICAgICAgICBsZXQgZGlzVG9DZW50ZXIgPSB2YWx1ZSAqKiAwLjU7XG4gICAgICAgICAgICBsZXQgbm9ybVkgPSBuZXcgVmVjdG9yMihub3JtYWwueSwgLW5vcm1hbC54KS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgLy8gbW92ZSB0aGUgbWlkZGxlIHBvaW50IHVwIGFuZCBkb3duXG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG1pZGRsZS5jbG9uZSgpLmFkZChub3JtWS5jbG9uZSgpLnNjYWxlKGRpc1RvQ2VudGVyKSksXG4gICAgICAgICAgICAgICAgbWlkZGxlLmNsb25lKCkuYWRkKG5vcm1ZLmNsb25lKCkuc2NhbGUoLWRpc1RvQ2VudGVyKSksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/circle2.ts\n");

/***/ }),

/***/ "./src/geo/circle3.ts":
/*!****************************!*\
  !*** ./src/geo/circle3.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle3\": () => /* binding */ Circle3\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// purpose: represents a 3d circle\r\n\r\n\r\nclass Circle3 {\r\n    constructor(plane, radius) {\r\n        this.plane = plane;\r\n        this.radius = radius;\r\n    }\r\n    static fromCircle2(circle2, plane = _plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY()) {\r\n        // elevate center of circle, make it the center of a plane\r\n        let center3d = plane.pushToWorld(circle2.center.to3D());\r\n        plane = plane.clone();\r\n        plane.center = center3d;\r\n        return new Circle3(plane, circle2.radius);\r\n    }\r\n    includes(p) {\r\n        // test if the point falls in range of the circle, by regarding\r\n        // the circle as a torus\r\n        // CHANGE NOTE: i set this to zero, for testing\r\n        // vertical error\r\n        let [projPoint, yError] = this.plane.closestPoint(p);\r\n        yError = yError / 3;\r\n        // horizontal error: get the difference between point\r\n        let xError = this.plane.center.clone().disTo(projPoint) - this.radius;\r\n        // length of total error vector needs to be smaller than the given\r\n        // tolerance\r\n        return Math.pow(yError, 2) + Math.pow(xError, 2) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOL_SQUARED;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY2lyY2xlMy50cz9lZGNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtDQUFrQztBQUVJO0FBSU47QUFFekIsTUFBTSxPQUFPO0lBSWhCLFlBQVksS0FBWSxFQUFFLE1BQWM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBZ0IsRUFBRSxLQUFLLEdBQUcsaURBQWEsRUFBRTtRQUN4RCwwREFBMEQ7UUFDMUQsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztRQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFFBQVEsQ0FBQyxDQUFVO1FBQ2YsK0RBQStEO1FBQy9ELHdCQUF3QjtRQUV4QiwrQ0FBK0M7UUFDL0MsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFcEIscURBQXFEO1FBQ3JELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRXRFLGtFQUFrRTtRQUNsRSxZQUFZO1FBQ1osT0FBTyxlQUFNLEVBQUksQ0FBQyxJQUFHLGVBQU0sRUFBSSxDQUFDLElBQUcsMERBQWlCLENBQUM7SUFDekQsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9jaXJjbGUzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVycG9zZTogcmVwcmVzZW50cyBhIDNkIGNpcmNsZVxuXG5pbXBvcnQgeyBDb25zdCB9IGZyb20gXCIuLi9tYXRoL2NvbnN0XCI7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XG5pbXBvcnQgeyBDaXJjbGUyIH0gZnJvbSBcIi4vY2lyY2xlMlwiO1xuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi9wbGFuZVwiO1xuXG5leHBvcnQgY2xhc3MgQ2lyY2xlMyB7XG4gICAgcGxhbmU6IFBsYW5lO1xuICAgIHJhZGl1czogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocGxhbmU6IFBsYW5lLCByYWRpdXM6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBsYW5lID0gcGxhbmU7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQ2lyY2xlMihjaXJjbGUyOiBDaXJjbGUyLCBwbGFuZSA9IFBsYW5lLldvcmxkWFkoKSkge1xuICAgICAgICAvLyBlbGV2YXRlIGNlbnRlciBvZiBjaXJjbGUsIG1ha2UgaXQgdGhlIGNlbnRlciBvZiBhIHBsYW5lXG4gICAgICAgIGxldCBjZW50ZXIzZCA9IHBsYW5lLnB1c2hUb1dvcmxkKGNpcmNsZTIuY2VudGVyLnRvM0QoKSk7XG4gICAgICAgIHBsYW5lID0gcGxhbmUuY2xvbmUoKTtcbiAgICAgICAgcGxhbmUuY2VudGVyID0gY2VudGVyM2Q7XG4gICAgICAgIHJldHVybiBuZXcgQ2lyY2xlMyhwbGFuZSwgY2lyY2xlMi5yYWRpdXMpO1xuICAgIH1cblxuICAgIGluY2x1ZGVzKHA6IFZlY3RvcjMpOiBib29sZWFuIHtcbiAgICAgICAgLy8gdGVzdCBpZiB0aGUgcG9pbnQgZmFsbHMgaW4gcmFuZ2Ugb2YgdGhlIGNpcmNsZSwgYnkgcmVnYXJkaW5nXG4gICAgICAgIC8vIHRoZSBjaXJjbGUgYXMgYSB0b3J1c1xuXG4gICAgICAgIC8vIENIQU5HRSBOT1RFOiBpIHNldCB0aGlzIHRvIHplcm8sIGZvciB0ZXN0aW5nXG4gICAgICAgIC8vIHZlcnRpY2FsIGVycm9yXG4gICAgICAgIGxldCBbcHJvalBvaW50LCB5RXJyb3JdID0gdGhpcy5wbGFuZS5jbG9zZXN0UG9pbnQocCk7XG4gICAgICAgIHlFcnJvciA9IHlFcnJvciAvIDM7XG5cbiAgICAgICAgLy8gaG9yaXpvbnRhbCBlcnJvcjogZ2V0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gcG9pbnRcbiAgICAgICAgbGV0IHhFcnJvciA9IHRoaXMucGxhbmUuY2VudGVyLmNsb25lKCkuZGlzVG8ocHJvalBvaW50KSAtIHRoaXMucmFkaXVzO1xuXG4gICAgICAgIC8vIGxlbmd0aCBvZiB0b3RhbCBlcnJvciB2ZWN0b3IgbmVlZHMgdG8gYmUgc21hbGxlciB0aGFuIHRoZSBnaXZlblxuICAgICAgICAvLyB0b2xlcmFuY2VcbiAgICAgICAgcmV0dXJuIHlFcnJvciAqKiAyICsgeEVycm9yICoqIDIgPCBDb25zdC5UT0xfU1FVQVJFRDtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/circle3.ts\n");

/***/ }),

/***/ "./src/geo/cube.ts":
/*!*************************!*\
  !*** ./src/geo/cube.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cube\": () => /* binding */ Cube\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// name:    cube.ts\r\n// author:  Jos Feenstra\r\n// purpose: Represents a cube in 3d space, in a certain pose.\r\n\r\n\r\nclass Cube {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    static new(plane, domain) {\r\n        return new Cube(plane, domain);\r\n    }\r\n    static fromRadius(point, radius) {\r\n        return new Cube(_plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY().moveTo(point), _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromRadius(radius));\r\n    }\r\n    getCorners() {\r\n        return this.domain.corners(this.plane.matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY3ViZS50cz8zMTJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1CQUFtQjtBQUNuQix3QkFBd0I7QUFDeEIsNkRBQTZEO0FBR3BCO0FBR1Q7QUFFekIsTUFBTSxJQUFJO0lBQ2IsWUFBbUIsS0FBWSxFQUFTLE1BQWU7UUFBcEMsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUFTLFdBQU0sR0FBTixNQUFNLENBQVM7SUFBRyxDQUFDO0lBRTNELE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBWSxFQUFFLE1BQWU7UUFDcEMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBYyxFQUFFLE1BQWM7UUFDNUMsT0FBTyxJQUFJLElBQUksQ0FBQyxpREFBYSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLDREQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9jdWJlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgY3ViZS50c1xuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBSZXByZXNlbnRzIGEgY3ViZSBpbiAzZCBzcGFjZSwgaW4gYSBjZXJ0YWluIHBvc2UuXG5cbmltcG9ydCB7IFZlY3RvcjNBcnJheSB9IGZyb20gXCIuLi9kYXRhL3ZlY3Rvci1hcnJheVwiO1xuaW1wb3J0IHsgRG9tYWluMyB9IGZyb20gXCIuLi9tYXRoL2RvbWFpblwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xuaW1wb3J0IHsgR2VvIH0gZnJvbSBcIi4vZ2VvXCI7XG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuL3BsYW5lXCI7XG5cbmV4cG9ydCBjbGFzcyBDdWJlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGxhbmU6IFBsYW5lLCBwdWJsaWMgZG9tYWluOiBEb21haW4zKSB7fVxuXG4gICAgc3RhdGljIG5ldyhwbGFuZTogUGxhbmUsIGRvbWFpbjogRG9tYWluMykge1xuICAgICAgICByZXR1cm4gbmV3IEN1YmUocGxhbmUsIGRvbWFpbik7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SYWRpdXMocG9pbnQ6IFZlY3RvcjMsIHJhZGl1czogbnVtYmVyKTogQ3ViZSB7XG4gICAgICAgIHJldHVybiBuZXcgQ3ViZShQbGFuZS5Xb3JsZFhZKCkubW92ZVRvKHBvaW50KSwgRG9tYWluMy5mcm9tUmFkaXVzKHJhZGl1cykpO1xuICAgIH1cblxuICAgIGdldENvcm5lcnMoKTogVmVjdG9yM1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tYWluLmNvcm5lcnModGhpcy5wbGFuZS5tYXRyaXgpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/cube.ts\n");

/***/ }),

/***/ "./src/geo/geo.ts":
/*!************************!*\
  !*** ./src/geo/geo.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Geo\": () => /* binding */ Geo\n/* harmony export */ });\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n// name:    geo.ts\r\n// author:  Jos Feenstra\r\n// purpose: base class of all 3d geometry\r\n// note:    TODO\r\n\r\n// i want traits....\r\nclass Geo {\r\n    constructor() { }\r\n    clone() { }\r\n    transform(m) {\r\n        return this;\r\n    }\r\n    rotateX(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateY(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateZ(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newZRotation(radians);\r\n        // etc...\r\n    }\r\n    rotate(radians, axis) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newAxisRotation(axis, radians);\r\n        // etc...\r\n    }\r\n    move(m) {\r\n        let mover = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(m.x, m.y, m.z);\r\n        // etc...\r\n    }\r\n    scale(s) {\r\n        let scaler = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(s.x, s.y, s.z);\r\n        // etc..\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vZ2VvLnRzPzgzMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCLHlDQUF5QztBQUN6QyxnQkFBZ0I7QUFFeUI7QUFHekMsb0JBQW9CO0FBQ2IsTUFBTSxHQUFHO0lBQ1osZ0JBQWUsQ0FBQztJQUVoQixLQUFLLEtBQUksQ0FBQztJQUVWLFNBQVMsQ0FBQyxDQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBZTtRQUNuQixJQUFJLE9BQU8sR0FBRyw4REFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxTQUFTO0lBQ2IsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFlO1FBQ25CLElBQUksT0FBTyxHQUFHLDhEQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLFNBQVM7SUFDYixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQWU7UUFDbkIsSUFBSSxPQUFPLEdBQUcsOERBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsU0FBUztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBZSxFQUFFLElBQWE7UUFDakMsSUFBSSxPQUFPLEdBQUcsaUVBQXVCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELFNBQVM7SUFDYixDQUFDO0lBRUQsSUFBSSxDQUFDLENBQVU7UUFDWCxJQUFJLEtBQUssR0FBRywyREFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLFNBQVM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLENBQVU7UUFDWixJQUFJLE1BQU0sR0FBRywyREFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLFFBQVE7SUFDWixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL2dlby50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIGdlby50c1xuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBiYXNlIGNsYXNzIG9mIGFsbCAzZCBnZW9tZXRyeVxuLy8gbm90ZTogICAgVE9ET1xuXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XG5cbi8vIGkgd2FudCB0cmFpdHMuLi4uXG5leHBvcnQgY2xhc3MgR2VvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBjbG9uZSgpIHt9XG5cbiAgICB0cmFuc2Zvcm0obTogTWF0cml4NCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKHJhZGlhbnM6IG51bWJlcikge1xuICAgICAgICBsZXQgcm90YXRlciA9IE1hdHJpeDQubmV3WFJvdGF0aW9uKHJhZGlhbnMpO1xuICAgICAgICAvLyBldGMuLi5cbiAgICB9XG5cbiAgICByb3RhdGVZKHJhZGlhbnM6IG51bWJlcikge1xuICAgICAgICBsZXQgcm90YXRlciA9IE1hdHJpeDQubmV3WVJvdGF0aW9uKHJhZGlhbnMpO1xuICAgICAgICAvLyBldGMuLi5cbiAgICB9XG5cbiAgICByb3RhdGVaKHJhZGlhbnM6IG51bWJlcikge1xuICAgICAgICBsZXQgcm90YXRlciA9IE1hdHJpeDQubmV3WlJvdGF0aW9uKHJhZGlhbnMpO1xuICAgICAgICAvLyBldGMuLi5cbiAgICB9XG5cbiAgICByb3RhdGUocmFkaWFuczogbnVtYmVyLCBheGlzOiBWZWN0b3IzKSB7XG4gICAgICAgIGxldCByb3RhdGVyID0gTWF0cml4NC5uZXdBeGlzUm90YXRpb24oYXhpcywgcmFkaWFucyk7XG4gICAgICAgIC8vIGV0Yy4uLlxuICAgIH1cblxuICAgIG1vdmUobTogVmVjdG9yMykge1xuICAgICAgICBsZXQgbW92ZXIgPSBNYXRyaXg0Lm5ld1NjYWxlcihtLngsIG0ueSwgbS56KTtcbiAgICAgICAgLy8gZXRjLi4uXG4gICAgfVxuXG4gICAgc2NhbGUoczogVmVjdG9yMykge1xuICAgICAgICBsZXQgc2NhbGVyID0gTWF0cml4NC5uZXdTY2FsZXIocy54LCBzLnksIHMueik7XG4gICAgICAgIC8vIGV0Yy4uXG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/geo.ts\n");

/***/ }),

/***/ "./src/geo/intersect.ts":
/*!******************************!*\
  !*** ./src/geo/intersect.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n\r\n/**\r\n * @returns -1 if no intersection, 0 of parallel or touching, 1 if intersection;\r\n */\r\nfunction lineXplane(l1, l2, p1, p2, p3) {\r\n    let test1 = signed_volume(p1, p2, p3, l1);\r\n    let test2 = signed_volume(p1, p2, p3, l2);\r\n    if (Math.abs(test1) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE || Math.abs(test2) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n        return 0; // triangle touches plane with an edge\r\n    }\r\n    else if ((test1 < 0 && test2 > 0) || (test1 > 0 && test2 < 0)) {\r\n        return 1; // if 1 test pos and other negative -> line intersects plane!\r\n    }\r\n    else {\r\n        return -1; // no intersection\r\n    }\r\n}\r\n/**\r\n * Calculate if line and triangle intersect\r\n *\r\n * NOTE we could expand on the 'return 0' and explore if its touching a\r\n    vertex, line, or surface of triange\r\n * @returns 0  if line touches triangle\r\n            -1 if line misses  triangle\r\n             1  if line crosses triangle\r\n */\r\nfunction lineXtriangle(l1, l2, p1, p2, p3) {\r\n    // line points must be on opposite sides of the triangle\r\n    // return immidiately if -1: it means no intersection always\r\n    let test0 = lineXplane(l1, l2, p1, p2, p3);\r\n    if (test0 == -1)\r\n        return -1;\r\n    // plane tests\r\n    let test1 = lineXplane(p1, p2, l1, l2, p3);\r\n    if (test1 == -1)\r\n        return -1;\r\n    let test2 = lineXplane(p2, p3, l1, l2, p1);\r\n    if (test2 == -1)\r\n        return -1;\r\n    let test3 = lineXplane(p3, p1, l1, l2, p2);\r\n    if (test3 == -1)\r\n        return -1;\r\n    // debug\r\n    // print(\"points: \", l1, l2, p1, p2, p3)\r\n    // print('tests:', test0, test1, test2, test3)\r\n    // figure out if the line touches the triangle, or if it intersects\r\n    if (test0 == 1 && test1 == 1 && test2 == 1 && test3 == 1) {\r\n        return 1;\r\n    }\r\n    else {\r\n        // TODO based upon the different tests, we could determine what is hit\r\n        return 0;\r\n    }\r\n}\r\nfunction signed_volume(a, b, c, d) {\r\n    // with vertices a,b,c,d: get signed volume\r\n    // remember: vectors always remain state. We dont want to alter the abcd vectors.\r\n    a = a.clone();\r\n    b = b.clone();\r\n    c = c.clone();\r\n    return ((1 / 6) *\r\n        a\r\n            .clone()\r\n            .sub(d)\r\n            .dot(c.sub(d).cross(b.sub(d))));\r\n}\r\nfunction IsRoughly(test1, arg1) {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vaW50ZXJzZWN0LnRzPzE3N2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDc0M7QUFHdEM7O0dBRUc7QUFDSCxTQUFTLFVBQVUsQ0FBQyxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVztJQUMvRSxJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsSUFBSSxLQUFLLEdBQUcsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyx3REFBZSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsd0RBQWUsRUFBRTtRQUN4RSxPQUFPLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztLQUNuRDtTQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQzdELE9BQU8sQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0tBQzFFO1NBQU07UUFDSCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCO0tBQ2hDO0FBQ0wsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBUyxhQUFhLENBQUMsRUFBVyxFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVc7SUFDbEYsd0RBQXdEO0lBQ3hELDREQUE0RDtJQUM1RCxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFM0IsY0FBYztJQUNkLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRTNCLFFBQVE7SUFDUix3Q0FBd0M7SUFDeEMsOENBQThDO0lBRTlDLG1FQUFtRTtJQUNuRSxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDdEQsT0FBTyxDQUFDLENBQUM7S0FDWjtTQUFNO1FBQ0gsc0VBQXNFO1FBQ3RFLE9BQU8sQ0FBQyxDQUFDO0tBQ1o7QUFDTCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVTtJQUNqRSwyQ0FBMkM7SUFDM0MsaUZBQWlGO0lBQ2pGLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLE9BQU8sQ0FDSCxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDUCxDQUFDO2FBQ0ksS0FBSyxFQUFFO2FBQ1AsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNOLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckMsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFhLEVBQUUsSUFBWTtJQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDakQsQ0FBQyIsImZpbGUiOiIuL3NyYy9nZW8vaW50ZXJzZWN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XG5pbXBvcnQgeyBDb25zdCB9IGZyb20gXCIuLi9tYXRoL2NvbnN0XCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XG5cbi8qKlxuICogQHJldHVybnMgLTEgaWYgbm8gaW50ZXJzZWN0aW9uLCAwIG9mIHBhcmFsbGVsIG9yIHRvdWNoaW5nLCAxIGlmIGludGVyc2VjdGlvbjtcbiAqL1xuZnVuY3Rpb24gbGluZVhwbGFuZShsMTogVmVjdG9yMywgbDI6IFZlY3RvcjMsIHAxOiBWZWN0b3IzLCBwMjogVmVjdG9yMywgcDM6IFZlY3RvcjMpOiBudW1iZXIge1xuICAgIGxldCB0ZXN0MSA9IHNpZ25lZF92b2x1bWUocDEsIHAyLCBwMywgbDEpO1xuICAgIGxldCB0ZXN0MiA9IHNpZ25lZF92b2x1bWUocDEsIHAyLCBwMywgbDIpO1xuICAgIGlmIChNYXRoLmFicyh0ZXN0MSkgPCBDb25zdC5UT0xFUkFOQ0UgfHwgTWF0aC5hYnModGVzdDIpIDwgQ29uc3QuVE9MRVJBTkNFKSB7XG4gICAgICAgIHJldHVybiAwOyAvLyB0cmlhbmdsZSB0b3VjaGVzIHBsYW5lIHdpdGggYW4gZWRnZVxuICAgIH0gZWxzZSBpZiAoKHRlc3QxIDwgMCAmJiB0ZXN0MiA+IDApIHx8ICh0ZXN0MSA+IDAgJiYgdGVzdDIgPCAwKSkge1xuICAgICAgICByZXR1cm4gMTsgLy8gaWYgMSB0ZXN0IHBvcyBhbmQgb3RoZXIgbmVnYXRpdmUgLT4gbGluZSBpbnRlcnNlY3RzIHBsYW5lIVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTsgLy8gbm8gaW50ZXJzZWN0aW9uXG4gICAgfVxufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBpZiBsaW5lIGFuZCB0cmlhbmdsZSBpbnRlcnNlY3RcbiAqIFxuICogTk9URSB3ZSBjb3VsZCBleHBhbmQgb24gdGhlICdyZXR1cm4gMCcgYW5kIGV4cGxvcmUgaWYgaXRzIHRvdWNoaW5nIGFcbiAgICB2ZXJ0ZXgsIGxpbmUsIG9yIHN1cmZhY2Ugb2YgdHJpYW5nZVxuICogQHJldHVybnMgMCAgaWYgbGluZSB0b3VjaGVzIHRyaWFuZ2xlXG4gICAgICAgICAgICAtMSBpZiBsaW5lIG1pc3NlcyAgdHJpYW5nbGVcbiAgICAgICAgICAgICAxICBpZiBsaW5lIGNyb3NzZXMgdHJpYW5nbGVcbiAqL1xuZnVuY3Rpb24gbGluZVh0cmlhbmdsZShsMTogVmVjdG9yMywgbDI6IFZlY3RvcjMsIHAxOiBWZWN0b3IzLCBwMjogVmVjdG9yMywgcDM6IFZlY3RvcjMpIHtcbiAgICAvLyBsaW5lIHBvaW50cyBtdXN0IGJlIG9uIG9wcG9zaXRlIHNpZGVzIG9mIHRoZSB0cmlhbmdsZVxuICAgIC8vIHJldHVybiBpbW1pZGlhdGVseSBpZiAtMTogaXQgbWVhbnMgbm8gaW50ZXJzZWN0aW9uIGFsd2F5c1xuICAgIGxldCB0ZXN0MCA9IGxpbmVYcGxhbmUobDEsIGwyLCBwMSwgcDIsIHAzKTtcbiAgICBpZiAodGVzdDAgPT0gLTEpIHJldHVybiAtMTtcblxuICAgIC8vIHBsYW5lIHRlc3RzXG4gICAgbGV0IHRlc3QxID0gbGluZVhwbGFuZShwMSwgcDIsIGwxLCBsMiwgcDMpO1xuICAgIGlmICh0ZXN0MSA9PSAtMSkgcmV0dXJuIC0xO1xuICAgIGxldCB0ZXN0MiA9IGxpbmVYcGxhbmUocDIsIHAzLCBsMSwgbDIsIHAxKTtcbiAgICBpZiAodGVzdDIgPT0gLTEpIHJldHVybiAtMTtcbiAgICBsZXQgdGVzdDMgPSBsaW5lWHBsYW5lKHAzLCBwMSwgbDEsIGwyLCBwMik7XG4gICAgaWYgKHRlc3QzID09IC0xKSByZXR1cm4gLTE7XG5cbiAgICAvLyBkZWJ1Z1xuICAgIC8vIHByaW50KFwicG9pbnRzOiBcIiwgbDEsIGwyLCBwMSwgcDIsIHAzKVxuICAgIC8vIHByaW50KCd0ZXN0czonLCB0ZXN0MCwgdGVzdDEsIHRlc3QyLCB0ZXN0MylcblxuICAgIC8vIGZpZ3VyZSBvdXQgaWYgdGhlIGxpbmUgdG91Y2hlcyB0aGUgdHJpYW5nbGUsIG9yIGlmIGl0IGludGVyc2VjdHNcbiAgICBpZiAodGVzdDAgPT0gMSAmJiB0ZXN0MSA9PSAxICYmIHRlc3QyID09IDEgJiYgdGVzdDMgPT0gMSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPIGJhc2VkIHVwb24gdGhlIGRpZmZlcmVudCB0ZXN0cywgd2UgY291bGQgZGV0ZXJtaW5lIHdoYXQgaXMgaGl0XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2lnbmVkX3ZvbHVtZShhOiBWZWN0b3IzLCBiOiBWZWN0b3IzLCBjOiBWZWN0b3IzLCBkOiBWZWN0b3IzKSB7XG4gICAgLy8gd2l0aCB2ZXJ0aWNlcyBhLGIsYyxkOiBnZXQgc2lnbmVkIHZvbHVtZVxuICAgIC8vIHJlbWVtYmVyOiB2ZWN0b3JzIGFsd2F5cyByZW1haW4gc3RhdGUuIFdlIGRvbnQgd2FudCB0byBhbHRlciB0aGUgYWJjZCB2ZWN0b3JzLlxuICAgIGEgPSBhLmNsb25lKCk7XG4gICAgYiA9IGIuY2xvbmUoKTtcbiAgICBjID0gYy5jbG9uZSgpO1xuICAgIHJldHVybiAoXG4gICAgICAgICgxIC8gNikgKlxuICAgICAgICBhXG4gICAgICAgICAgICAuY2xvbmUoKVxuICAgICAgICAgICAgLnN1YihkKVxuICAgICAgICAgICAgLmRvdChjLnN1YihkKS5jcm9zcyhiLnN1YihkKSkpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gSXNSb3VnaGx5KHRlc3QxOiBudW1iZXIsIGFyZzE6IG51bWJlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZC5cIik7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/intersect.ts\n");

/***/ }),

/***/ "./src/geo/line.ts":
/*!*************************!*\
  !*** ./src/geo/line.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineCurve2\": () => /* binding */ LineCurve2\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\n// heavy weight Line class\r\nclass LineCurve2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.vector = to.subbed(this.from);\r\n        this.normal = this.vector.normalized();\r\n        this.bounds = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, this.vector.length());\r\n        this.length = this.vector.length();\r\n    }\r\n    at(t, bounded = true) {\r\n        if (bounded)\r\n            t = this.bounds.comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t / this.length);\r\n    }\r\n    atNormal(t, bounded = true) {\r\n        if (bounded)\r\n            t = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, 1).comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t);\r\n    }\r\n    closestPoint(point, bounded = true) {\r\n        const d = this.vector.length();\r\n        if (d === 0)\r\n            return;\r\n        let lineToPoint = point.subbed(this.from);\r\n        let dot = lineToPoint.dot(this.vector);\r\n        return this.at(dot, bounded);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vbGluZS50cz9hYTg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNSO0FBRXpDLDBCQUEwQjtBQUNuQixNQUFNLFVBQVU7SUFRbkIsWUFBWSxJQUFhLEVBQUUsRUFBVztRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnREFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBUyxFQUFFLE9BQU8sR0FBRyxJQUFJO1FBQ3hCLElBQUksT0FBTztZQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxPQUFPLDBEQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBUyxFQUFFLE9BQU8sR0FBRyxJQUFJO1FBQzlCLElBQUksT0FBTztZQUFFLENBQUMsR0FBRyxJQUFJLGdEQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxPQUFPLDBEQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWMsRUFBRSxPQUFPLEdBQUcsSUFBSTtRQUN2QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPO1FBRXBCLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9saW5lLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tYWluLCBEb21haW4yIH0gZnJvbSBcIi4uL21hdGgvZG9tYWluXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XG5cbi8vIGhlYXZ5IHdlaWdodCBMaW5lIGNsYXNzXG5leHBvcnQgY2xhc3MgTGluZUN1cnZlMiB7XG4gICAgcmVhZG9ubHkgZnJvbTogVmVjdG9yMjtcbiAgICByZWFkb25seSB0bzogVmVjdG9yMjtcbiAgICByZWFkb25seSB2ZWN0b3I6IFZlY3RvcjI7XG4gICAgcmVhZG9ubHkgbm9ybWFsOiBWZWN0b3IyO1xuICAgIHJlYWRvbmx5IGJvdW5kczogRG9tYWluO1xuICAgIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZnJvbTogVmVjdG9yMiwgdG86IFZlY3RvcjIpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnZlY3RvciA9IHRvLnN1YmJlZCh0aGlzLmZyb20pO1xuICAgICAgICB0aGlzLm5vcm1hbCA9IHRoaXMudmVjdG9yLm5vcm1hbGl6ZWQoKTtcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBuZXcgRG9tYWluKDAsIHRoaXMudmVjdG9yLmxlbmd0aCgpKTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLnZlY3Rvci5sZW5ndGgoKTtcbiAgICB9XG5cbiAgICBhdCh0OiBudW1iZXIsIGJvdW5kZWQgPSB0cnVlKTogVmVjdG9yMiB7XG4gICAgICAgIGlmIChib3VuZGVkKSB0ID0gdGhpcy5ib3VuZHMuY29tZm9ybSh0KTtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjIuZnJvbUxlcnAodGhpcy5mcm9tLCB0aGlzLnRvLCB0IC8gdGhpcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGF0Tm9ybWFsKHQ6IG51bWJlciwgYm91bmRlZCA9IHRydWUpOiBWZWN0b3IyIHtcbiAgICAgICAgaWYgKGJvdW5kZWQpIHQgPSBuZXcgRG9tYWluKDAsIDEpLmNvbWZvcm0odCk7XG4gICAgICAgIHJldHVybiBWZWN0b3IyLmZyb21MZXJwKHRoaXMuZnJvbSwgdGhpcy50bywgdCk7XG4gICAgfVxuXG4gICAgY2xvc2VzdFBvaW50KHBvaW50OiBWZWN0b3IyLCBib3VuZGVkID0gdHJ1ZSk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBkID0gdGhpcy52ZWN0b3IubGVuZ3RoKCk7XG4gICAgICAgIGlmIChkID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGxpbmVUb1BvaW50ID0gcG9pbnQuc3ViYmVkKHRoaXMuZnJvbSk7XG4gICAgICAgIGxldCBkb3QgPSBsaW5lVG9Qb2ludC5kb3QodGhpcy52ZWN0b3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5hdChkb3QsIGJvdW5kZWQpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/line.ts\n");

/***/ }),

/***/ "./src/geo/plane.ts":
/*!**************************!*\
  !*** ./src/geo/plane.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plane\": () => /* binding */ Plane\n/* harmony export */ });\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/statistics */ \"./src/math/statistics.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n// name:    plane.ts\r\n// author:  Jos Feenstra\r\n// purpose: definition of a 3d plane.\r\n// todo:    turn Center, Ihat, Jhat, Khat construction to an actual matrix\r\n\r\n\r\n\r\n\r\nclass Plane {\r\n    // _inverse!: Matrix4; // NOTE: currently im not caching this. Might be needed.\r\n    // NOTE : d is not really needed anymore...\r\n    constructor(m) {\r\n        this._matrix = m;\r\n    }\r\n    static fromPN(center, normal) {\r\n        let cross = normal.cross(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX());\r\n        if (cross.length() < _math_const__WEBPACK_IMPORTED_MODULE_3__.Const.TOLERANCE) {\r\n            cross = normal.cross(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY());\r\n        }\r\n        let ihat = cross.normalize();\r\n        let jhat = normal.cross(ihat).normalize();\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, normal);\r\n        return new Plane(mat);\r\n    }\r\n    static fromPVV(a, v1, v2) {\r\n        // TODO check if we still need this -1 thing\r\n        let khat = v1.clone().cross(v2).normalize(); //.scale(-1);\r\n        let center = a.clone();\r\n        let ihat = v1.normalize();\r\n        let jhat = v1.clone().cross(khat);\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, khat);\r\n        return new Plane(mat);\r\n    }\r\n    static from3pt(a, b, c) {\r\n        let v1 = b.clone().sub(a);\r\n        let v2 = c.clone().sub(a);\r\n        return this.fromPVV(a, v1, v2);\r\n    }\r\n    static WorldXY() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY());\r\n    }\r\n    static WorldYZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static WorldXZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static fromLeastSquares(pts) {\r\n        let mean = pts.mean();\r\n        let cov = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.cov(pts);\r\n        let [eigValues, eigVectors] = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.eig(cov);\r\n        console.log(eigValues);\r\n        let biggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(0));\r\n        let secondBiggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(1));\r\n        return Plane.fromPVV(mean, biggestEigenVector, secondBiggestEigenVector);\r\n    }\r\n    static fromXYLeastSquares(pts) {\r\n        // quite specific, but this was needed.\r\n        let mean = pts.mean();\r\n        return Plane.WorldXY().transform(_math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(mean.x, mean.y, mean.z));\r\n    }\r\n    static planeMatrixFromVecs(c, i, j, k) {\r\n        return new _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4([i.x, i.y, i.z, 0, j.x, j.y, j.z, 0, k.x, k.y, k.z, 0, c.x, c.y, c.z, 1]);\r\n    }\r\n    get ihat() {\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(0));\r\n    }\r\n    get jhat() {\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(1));\r\n    }\r\n    get khat() {\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(2));\r\n    }\r\n    get center() {\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(3));\r\n    }\r\n    get matrix() {\r\n        return this._matrix.clone();\r\n    }\r\n    get normal() {\r\n        return this.khat;\r\n    }\r\n    get d() {\r\n        return this.closestPoint(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero())[1];\r\n    }\r\n    set ihat(v) {\r\n        this._matrix.setRow(0, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set jhat(v) {\r\n        this._matrix.setRow(1, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set khat(v) {\r\n        this._matrix.setRow(2, [v.x, v.y, v.z, 0]);\r\n    }\r\n    set center(v) {\r\n        this._matrix.setRow(3, [v.x, v.y, v.z, 1]);\r\n    }\r\n    set matrix(m) {\r\n        this._matrix = m;\r\n    }\r\n    get inverse() {\r\n        // TODO CACHE INVERSE MATRIX\r\n        return this._matrix.inverse();\r\n    }\r\n    setPosition(vec) {\r\n        this.center = vec;\r\n    }\r\n    setNormal(vec) {\r\n        this.khat = vec;\r\n    }\r\n    clone() {\r\n        return new Plane(this._matrix.clone());\r\n    }\r\n    transform(m) {\r\n        this._matrix = this._matrix.multiply(m);\r\n        return this;\r\n    }\r\n    moveTo(origin) {\r\n        this.center = origin;\r\n        return this;\r\n    }\r\n    // NOTE: pulling is inefficient since i do not cache the inverse.\r\n    pullToPlane(p) {\r\n        return this.inverse.multiplyVector(p);\r\n    }\r\n    pushToWorld(p) {\r\n        return this.matrix.multiplyVector(p);\r\n    }\r\n    closestPoint(p) {\r\n        let pulled = this.pullToPlane(p);\r\n        let distance = pulled.z;\r\n        pulled.z = 0;\r\n        let vec = this.pushToWorld(pulled);\r\n        return [vec, distance];\r\n    }\r\n    rotateVector(v, radians) {\r\n        let pulled = this.pullToPlane(v);\r\n        let rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newAxisRotation(this.normal, radians);\r\n        pulled = rotation.multiplyVector(pulled);\r\n        return this.pushToWorld(pulled);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geo/plane.ts\n");

/***/ }),

/***/ "./src/geo/polyline.ts":
/*!*****************************!*\
  !*** ./src/geo/polyline.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Polyline\": () => /* binding */ Polyline\n/* harmony export */ });\nclass Polyline {\r\n    constructor(verts) {\r\n        this.verts = [];\r\n        this.verts = verts;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vcG9seWxpbmUudHM/ZjBkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRU8sTUFBTSxRQUFRO0lBR2pCLFlBQVksS0FBZ0I7UUFGNUIsVUFBSyxHQUFjLEVBQUUsQ0FBQztRQUdsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL3BvbHlsaW5lLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xuXG5leHBvcnQgY2xhc3MgUG9seWxpbmUge1xuICAgIHZlcnRzOiBWZWN0b3IzW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHZlcnRzOiBWZWN0b3IzW10pIHtcbiAgICAgICAgdGhpcy52ZXJ0cyA9IHZlcnRzO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/polyline.ts\n");

/***/ }),

/***/ "./src/geo/rectangle.ts":
/*!******************************!*\
  !*** ./src/geo/rectangle.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Rectangle2\": () => /* binding */ Rectangle2,\n/* harmony export */   \"Rectangle3\": () => /* binding */ Rectangle3\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n    to3D() {\r\n        let mat4 = this.pose.toMat4();\r\n        return new Rectangle3(new _plane__WEBPACK_IMPORTED_MODULE_1__.Plane(mat4), this.domain);\r\n    }\r\n}\r\nclass Rectangle3 {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    getCorners() {\r\n        let corners = this.domain.corners();\r\n        let corners3 = corners.map((c) => this.plane.pushToWorld(c.to3D()));\r\n        return corners3;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vcmVjdGFuZ2xlLnRzPzE0YjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUV5QztBQVdUO0FBRXpCLE1BQU0sVUFBVTtJQUluQixZQUFZLElBQWEsRUFBRSxNQUFlO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLGlEQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLEtBQUssR0FBRztZQUNSLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ2xELENBQUM7UUFFRixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksVUFBVSxDQUFDLElBQUkseUNBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNKO0FBRU0sTUFBTSxVQUFVO0lBSW5CLFlBQVksS0FBWSxFQUFFLE1BQWU7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEUsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9yZWN0YW5nbGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21haW4yIH0gZnJvbSBcIi4uL21hdGgvZG9tYWluXCI7XG5pbXBvcnQgeyBNYXRyaXgzLCBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XG5cbi8vIGJhc2ljIDJkIHJlY3RhbmdsZVxuLy8gYSBNYXRyaXgzIGFuZCBEb21haW4yIGlzIHVzZWQuXG4vLyB0aGlzIHdheSwgYSByZWN0YW5nbGUgY2FuIGJlIHJvdGF0ZWQgYXJvdW5kIGFuIGFyYmlydGFyeSBwb2ludCBpdCByZWdhcmRzIGFzIGl0cyBjZW50ZXIuXG4vLyBuYW1lOiAgICBjdWJlLnRzXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcbi8vIHB1cnBvc2U6IFJlcHJlc2VudHMgYSBjdWJlIGluIDNkIHNwYWNlLCBpbiBhIGNlcnRhaW4gcG9zZS5cblxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xuaW1wb3J0IHsgR2VvIH0gZnJvbSBcIi4vZ2VvXCI7XG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuL3BsYW5lXCI7XG5cbmV4cG9ydCBjbGFzcyBSZWN0YW5nbGUyIHtcbiAgICBwb3NlOiBNYXRyaXgzO1xuICAgIGRvbWFpbjogRG9tYWluMjtcblxuICAgIGNvbnN0cnVjdG9yKHBvc2U6IE1hdHJpeDMsIGRvbWFpbjogRG9tYWluMikge1xuICAgICAgICB0aGlzLnBvc2UgPSBwb3NlO1xuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcbiAgICB9XG5cbiAgICBjZW50ZXIoKTogVmVjdG9yMiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2UudHJhbnNmb3JtVmVjdG9yKG5ldyBWZWN0b3IyKDAsIDApKTtcbiAgICB9XG5cbiAgICBnZXRWZXJ0aWNlcygpOiBWZWN0b3IyW10ge1xuICAgICAgICBsZXQgdmVydHMgPSBbXG4gICAgICAgICAgICBuZXcgVmVjdG9yMih0aGlzLmRvbWFpbi54LnQwLCB0aGlzLmRvbWFpbi55LnQwKSxcbiAgICAgICAgICAgIG5ldyBWZWN0b3IyKHRoaXMuZG9tYWluLngudDEsIHRoaXMuZG9tYWluLnkudDApLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjIodGhpcy5kb21haW4ueC50MCwgdGhpcy5kb21haW4ueS50MSksXG4gICAgICAgICAgICBuZXcgVmVjdG9yMih0aGlzLmRvbWFpbi54LnQxLCB0aGlzLmRvbWFpbi55LnQxKSxcbiAgICAgICAgXTtcblxuICAgICAgICB2ZXJ0cy5mb3JFYWNoKCh2KSA9PiB0aGlzLnBvc2UudHJhbnNmb3JtVmVjdG9yKHYpKTtcbiAgICAgICAgcmV0dXJuIHZlcnRzO1xuICAgIH1cblxuICAgIHRvM0QoKTogUmVjdGFuZ2xlMyB7XG4gICAgICAgIGxldCBtYXQ0ID0gdGhpcy5wb3NlLnRvTWF0NCgpO1xuICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZTMobmV3IFBsYW5lKG1hdDQpLCB0aGlzLmRvbWFpbik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVjdGFuZ2xlMyB7XG4gICAgcGxhbmU6IFBsYW5lO1xuICAgIGRvbWFpbjogRG9tYWluMjtcblxuICAgIGNvbnN0cnVjdG9yKHBsYW5lOiBQbGFuZSwgZG9tYWluOiBEb21haW4yKSB7XG4gICAgICAgIHRoaXMucGxhbmUgPSBwbGFuZTtcbiAgICAgICAgdGhpcy5kb21haW4gPSBkb21haW47XG4gICAgfVxuXG4gICAgZ2V0Q29ybmVycygpOiBWZWN0b3IzW10ge1xuICAgICAgICBsZXQgY29ybmVycyA9IHRoaXMuZG9tYWluLmNvcm5lcnMoKTtcbiAgICAgICAgbGV0IGNvcm5lcnMzID0gY29ybmVycy5tYXAoKGMpID0+IHRoaXMucGxhbmUucHVzaFRvV29ybGQoYy50bzNEKCkpKTtcbiAgICAgICAgcmV0dXJuIGNvcm5lcnMzO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/rectangle.ts\n");

/***/ }),

/***/ "./src/geo/triangle.ts":
/*!*****************************!*\
  !*** ./src/geo/triangle.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Triangle2\": () => /* binding */ Triangle2,\n/* harmony export */   \"Triangle3\": () => /* binding */ Triangle3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line */ \"./src/geo/line.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\n\r\n\r\nclass Triangle2 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector2Array.fromList([this.a, this.b, this.c]);\r\n    }\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.scaled(bari.x);\r\n        let b = this.b.scaled(bari.y);\r\n        let c = this.c.scaled(bari.z);\r\n        return a.add(b).add(c);\r\n    }\r\n    closestPoint(point) {\r\n        // figure out roughly where the point is.\r\n        // note:\r\n        let ab = point.sign(this.a, this.b);\r\n        let bc = point.sign(this.b, this.c);\r\n        let ca = point.sign(this.c, this.a);\r\n        // if its fully within, return it!\r\n        if ((ab < 0 && bc < 0 && ca < 0) || (ab > 0 && bc > 0 && ca > 0)) {\r\n            console.log(\"fully inside!\");\r\n            return point;\r\n        }\r\n        else {\r\n            let abs = Math.abs(ab);\r\n            let bcs = Math.abs(bc);\r\n            let cas = Math.abs(ca);\r\n            if (abs < bcs && abs < cas) {\r\n                // ab\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.a, this.b).closestPoint(point);\r\n            }\r\n            else if (bcs < cas) {\r\n                // bc\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.b, this.c).closestPoint(point);\r\n            }\r\n            else {\r\n                // ca\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.c, this.a).closestPoint(point);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Triangle3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    getPlane() {\r\n        return _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.from3pt(this.a, this.b, this.c);\r\n    }\r\n    to2D(plane = _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.WorldXY()) {\r\n        return new Triangle2(plane.pullToPlane(this.a).to2D(), plane.pullToPlane(this.b).to2D(), plane.pullToPlane(this.c).to2D());\r\n    }\r\n    closestPoint(point) {\r\n        let plane = this.getPlane();\r\n        let [cp, _] = plane.closestPoint(point);\r\n        let planeCP = plane.pullToPlane(cp);\r\n        let planeTriangle = this.to2D(plane);\r\n        return point;\r\n    }\r\n    // Transcribed from Christer Ericson's Real-Time Collision Detection:\r\n    // http://realtimecollisiondetection.net/\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.clone().scale(bari.x);\r\n        let b = this.b.clone().scale(bari.y);\r\n        let c = this.c.clone().scale(bari.z);\r\n        return a.added(b).add(c);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geo/triangle.ts\n");

/***/ }),

/***/ "./src/img/Image.ts":
/*!**************************!*\
  !*** ./src/img/Image.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeonImage\": () => /* binding */ GeonImage\n/* harmony export */ });\n// image.ts\r\n// author: Jos Feenstra\r\n// purpose: wrapper around the ImageData class,\r\n// - in order to get more functionality out of it\r\n//\r\n// note: named GeonImage to not collide with Image classes.\r\n// TODO : x and y are not the same as i and j, and used inconsistently. fix this.\r\n// TODO : now that GEON is a package, we can use G.Image. the Geon suffix is not needed anymore is not needed anymore!\r\nconst acceptedKernels = [3, 5, 7, 9];\r\nclass GeonImage {\r\n    constructor(width, height, pixelSize = 4) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixelSize = pixelSize;\r\n        this.data = new Uint8ClampedArray(this.width * this.height * this.pixelSize);\r\n        this.data.fill(0);\r\n    }\r\n    static fromImageData(id) {\r\n        let image = new GeonImage(id.width, id.height);\r\n        image.setData(id.data);\r\n        return image;\r\n    }\r\n    toImageData() {\r\n        // imagedata requires pixelsize of 4.\r\n        if (this.pixelSize != 4)\r\n            throw \"pixelsize must be 4 for toImageData to work\";\r\n        return new ImageData(this.data, this.width, this.height);\r\n    }\r\n    setData(data) {\r\n        if (data.length != this.height * this.width * this.pixelSize)\r\n            throw \"data.length does not match width * height \";\r\n        this.data = data;\r\n    }\r\n    clone() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        image.setData(this.data);\r\n        return image;\r\n    }\r\n    fill(pixel) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, pixel);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    fillEvery(filler) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, filler());\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    includes(x, y) {\r\n        return x < this.width && x >= 0 && y < this.height && y >= 0;\r\n    }\r\n    set(i, j, pixel) {\r\n        this.data[4 * (j * this.width + i)] = pixel[0];\r\n        this.data[4 * (j * this.width + i) + 1] = pixel[1];\r\n        this.data[4 * (j * this.width + i) + 2] = pixel[2];\r\n        this.data[4 * (j * this.width + i) + 3] = pixel[3];\r\n    }\r\n    get(i, j) {\r\n        return [\r\n            this.data[4 * (j * this.width + i)],\r\n            this.data[4 * (j * this.width + i) + 1],\r\n            this.data[4 * (j * this.width + i) + 2],\r\n            this.data[4 * (j * this.width + i) + 3],\r\n        ];\r\n    }\r\n    flipHor() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                let jMirror = this.width - 1 - j;\r\n                image.set(j, i, this.get(jMirror, i));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    flipVer() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            let iMirror = this.height - 1 - i;\r\n            for (let j = 0; j < this.width; j++) {\r\n                image.set(j, i, this.get(j, iMirror));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    applyKernel(kernel) {\r\n        // determine kernel size\r\n        let size = kernel.count();\r\n        let radius = size / 2 - 0.5;\r\n        let image = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                let pixel = this.getWithKernel(i, j, kernel, radius);\r\n                image.set(i - radius, j - radius, pixel);\r\n            }\r\n        }\r\n        return image; // succes\r\n    }\r\n    getMinMax() {\r\n        // get the minimum and maximum pixel value\r\n        // assumes pixelsize = 1\r\n        let min = Infinity;\r\n        let max = 0;\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (this.data[i] < min) {\r\n                min = this.data[i];\r\n            }\r\n            else if (this.data[i] > max) {\r\n                max = this.data[i];\r\n            }\r\n        }\r\n        return [min, max];\r\n    }\r\n    applyThreshold(lower, upper) {\r\n        return this.apply((x, y) => {\r\n            let pixel = this.get(x, y);\r\n            if (pixel[0] < lower) {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            else if (pixel[0] > upper) {\r\n                return [255, 255, 255, 255];\r\n            }\r\n            else {\r\n                return pixel;\r\n            }\r\n        });\r\n    }\r\n    apply(filler) {\r\n        let copy = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                copy.set(x, y, filler(x, y));\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    applyNMS() {\r\n        // determine kernel size\r\n        let size = 3;\r\n        let radius = size / 2 - 0.5;\r\n        let copy = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                // let pixel = this.getWithKernel(i, j, kernel, radius)\r\n                // copy.set(i-radius, j-radius, pixel);\r\n            }\r\n        }\r\n        // img.eachPixel(3, function(x, y, c, n) {\r\n        //     if (n[1][1] > n[0][1] && n[1][1] > n[2][1]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][2] && n[1][1] > n[2][0]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[1][0] && n[1][1] > n[1][2]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][0] && n[1][1] > n[2][2]) {\r\n        //         return copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         return copy.data[x][y] = 0;\r\n        //     }\r\n        // });\r\n        return copy;\r\n    }\r\n    getWithKernel(i, j, kernel, radius) {\r\n        // kernel space\r\n        let sum = [0, 0, 0, 255];\r\n        let [dimx, dimy] = kernel.getDimensions();\r\n        for (let ki = 0; ki < dimx; ki++) {\r\n            for (let kj = 0; kj < dimy; kj++) {\r\n                let weight = kernel.get(ki, kj);\r\n                let pixel = this.get(i + ki - radius, j + kj - radius);\r\n                for (let i = 0; i < 3; i++) {\r\n                    sum[i] += pixel[i] * weight;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    setAplha(a) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                this.set(x, y, [pixel[0], pixel[1], pixel[2], a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        // scale the image to a new width and height, using nearest neighbour\r\n        return this.resize(Math.round(this.width * scaleX), Math.round(this.height * scaleY));\r\n    }\r\n    resize(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        const x_factor = (1 / image.width) * old.width;\r\n        const y_factor = (1 / image.height) * old.height;\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let pixel = old.get(Math.round(x * x_factor), Math.round(y * y_factor));\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    // add borders till this size is achieved\r\n    buffer(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // console.log(x, y);\r\n                let pixel = old.includes(x, y) ? old.get(x, y) : [0, 0, 0, 255];\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        // for (let y = 0; y < height; y++) {\r\n        //     for (let x = 0; x < width; x++) {\r\n        //         image.set(x, y, [x,0,0,255]);\r\n        //     }\r\n        // }\r\n        // build some simple image instead to test\r\n        // for (let i = 0; i < image.data.length / 4; i++) {\r\n        //     image.data[i*4 + 0] = i % 255;\r\n        //     image.data[i*4 + 1] = 0;\r\n        //     image.data[i*4 + 2] = 0;\r\n        //     image.data[i*4 + 3] = 255;\r\n        // }\r\n        return image;\r\n    }\r\n    trimWithDomain(dom) {\r\n        const x1 = Math.round(dom.x.t0);\r\n        const x2 = Math.round(dom.x.t1);\r\n        const y1 = Math.round(dom.y.t0);\r\n        const y2 = Math.round(dom.y.t1);\r\n        return this.trim(x1, y1, x2, y2);\r\n    }\r\n    trim(x1, y1, x2, y2) {\r\n        // return a hardcopy of this particular window\r\n        const imageWidth = x2 - x1;\r\n        const imageHeight = y2 - y1;\r\n        const image = new GeonImage(imageWidth, imageHeight, this.pixelSize);\r\n        for (let y = 0; y < imageHeight; y++) {\r\n            for (let x = 0; x < imageWidth; x++) {\r\n                let pixel = this.get(x + x1, y + y1);\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toGreyscale() {\r\n        if (this.pixelSize != 4)\r\n            throw \"please, only use this when pixelsize is 4\";\r\n        let image = new GeonImage(this.width, this.height, 4);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                let avg = (pixel[0] + pixel[1] + pixel[2]) / 3;\r\n                image.set(x, y, [avg, avg, avg, 255]);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toRGBA() {\r\n        // if (this.pixelSize != 1) throw \"please, only use this when pixelsize is 1\"\r\n        return this;\r\n        // let image = new GeonImage(this.width, this.height, 4);\r\n        // for (let y = 0; y < this.height; y++) {\r\n        //     for (let x = 0; x < this.width; x++) {\r\n        //         let pixel = this.get(x,y);\r\n        //         let val = pixel[0];\r\n        //         image.set(x, y, [val, val, val, 255]);\r\n        //     }\r\n        // }\r\n        // return image;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/Image.ts\n");

/***/ }),

/***/ "./src/img/kernels.ts":
/*!****************************!*\
  !*** ./src/img/kernels.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Kernels\": () => /* binding */ Kernels\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated\r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, kernel.get(i, j) / sum);\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [1, 1, 1, 1, 1, 1, 1, 1, 1]).forEachValue((i) => (i * 1) / 9);\r\nKernels.SmoothKernel5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n]).forEachValue((v) => (v * 1) / 25);\r\nKernels.Gauss5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    2,\r\n    4,\r\n    5,\r\n    4,\r\n    2,\r\n    4,\r\n    9,\r\n    12,\r\n    9,\r\n    4,\r\n    5,\r\n    12,\r\n    15,\r\n    12,\r\n    5,\r\n    4,\r\n    9,\r\n    12,\r\n    9,\r\n    4,\r\n    2,\r\n    4,\r\n    5,\r\n    4,\r\n    2,\r\n]).forEachValue((v) => (v * 1) / 159);\r\nKernels.TestKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [1, 0, -1, 0, 0, 0, -1, 0, 1]);\r\nKernels.SobelLeft = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [1, 2, 1, 0, 0, 0, -1, -2, -1]);\r\nKernels.SobelRight = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [-1, -2, -1, 0, 0, 0, 1, 2, 1]);\r\nKernels.SobelUp = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [1, 0, -1, 2, 0, -2, 1, 0, -1]);\r\nKernels.SobelDown = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [-1, 0, 1, -2, 0, 2, -1, 0, 1]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/kernels.ts\n");

/***/ }),

/***/ "./src/lib.ts":
/*!********************!*\
  !*** ./src/lib.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Perlin\": () => /* reexport safe */ _algorithms_perlin_noise__WEBPACK_IMPORTED_MODULE_1__.Perlin,\n/* harmony export */   \"App\": () => /* reexport safe */ _app_app__WEBPACK_IMPORTED_MODULE_2__.App,\n/* harmony export */   \"SwapApp\": () => /* reexport safe */ _app_swap_app__WEBPACK_IMPORTED_MODULE_3__.SwapApp,\n/* harmony export */   \"FloatMatrix\": () => /* reexport safe */ _data_float_matrix__WEBPACK_IMPORTED_MODULE_4__.FloatMatrix,\n/* harmony export */   \"HashTable\": () => /* reexport safe */ _data_hash_table__WEBPACK_IMPORTED_MODULE_5__.HashTable,\n/* harmony export */   \"IntCube\": () => /* reexport safe */ _data_int_cube__WEBPACK_IMPORTED_MODULE_6__.IntCube,\n/* harmony export */   \"IntMatrix\": () => /* reexport safe */ _data_int_matrix__WEBPACK_IMPORTED_MODULE_7__.IntMatrix,\n/* harmony export */   \"LinkedList\": () => /* reexport safe */ _data_linked_list__WEBPACK_IMPORTED_MODULE_8__.LinkedList,\n/* harmony export */   \"Vector2Array\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_9__.Vector2Array,\n/* harmony export */   \"Vector3Array\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_9__.Vector3Array,\n/* harmony export */   \"getGeneralFloatMatrix\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_9__.getGeneralFloatMatrix,\n/* harmony export */   \"Circle2\": () => /* reexport safe */ _geo_circle2__WEBPACK_IMPORTED_MODULE_10__.Circle2,\n/* harmony export */   \"Circle3\": () => /* reexport safe */ _geo_circle3__WEBPACK_IMPORTED_MODULE_11__.Circle3,\n/* harmony export */   \"Cube\": () => /* reexport safe */ _geo_cube__WEBPACK_IMPORTED_MODULE_12__.Cube,\n/* harmony export */   \"Geo\": () => /* reexport safe */ _geo_geo__WEBPACK_IMPORTED_MODULE_13__.Geo,\n/* harmony export */   \"LineCurve2\": () => /* reexport safe */ _geo_line__WEBPACK_IMPORTED_MODULE_15__.LineCurve2,\n/* harmony export */   \"Plane\": () => /* reexport safe */ _geo_plane__WEBPACK_IMPORTED_MODULE_16__.Plane,\n/* harmony export */   \"Polyline\": () => /* reexport safe */ _geo_polyline__WEBPACK_IMPORTED_MODULE_17__.Polyline,\n/* harmony export */   \"Rectangle2\": () => /* reexport safe */ _geo_rectangle__WEBPACK_IMPORTED_MODULE_18__.Rectangle2,\n/* harmony export */   \"Rectangle3\": () => /* reexport safe */ _geo_rectangle__WEBPACK_IMPORTED_MODULE_18__.Rectangle3,\n/* harmony export */   \"Triangle2\": () => /* reexport safe */ _geo_triangle__WEBPACK_IMPORTED_MODULE_19__.Triangle2,\n/* harmony export */   \"Triangle3\": () => /* reexport safe */ _geo_triangle__WEBPACK_IMPORTED_MODULE_19__.Triangle3,\n/* harmony export */   \"GeonImage\": () => /* reexport safe */ _img_Image__WEBPACK_IMPORTED_MODULE_20__.GeonImage,\n/* harmony export */   \"Kernels\": () => /* reexport safe */ _img_kernels__WEBPACK_IMPORTED_MODULE_21__.Kernels,\n/* harmony export */   \"Const\": () => /* reexport safe */ _math_const__WEBPACK_IMPORTED_MODULE_22__.Const,\n/* harmony export */   \"Domain\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_23__.Domain,\n/* harmony export */   \"Domain2\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_23__.Domain2,\n/* harmony export */   \"Domain3\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_23__.Domain3,\n/* harmony export */   \"GeonMath\": () => /* reexport safe */ _math_math__WEBPACK_IMPORTED_MODULE_24__.GeonMath,\n/* harmony export */   \"Matrix3\": () => /* reexport safe */ _math_matrix__WEBPACK_IMPORTED_MODULE_25__.Matrix3,\n/* harmony export */   \"Matrix4\": () => /* reexport safe */ _math_matrix__WEBPACK_IMPORTED_MODULE_25__.Matrix4,\n/* harmony export */   \"Quaternion\": () => /* reexport safe */ _math_quaternion__WEBPACK_IMPORTED_MODULE_26__.Quaternion,\n/* harmony export */   \"Ray\": () => /* reexport safe */ _math_ray__WEBPACK_IMPORTED_MODULE_27__.Ray,\n/* harmony export */   \"Stat\": () => /* reexport safe */ _math_statistics__WEBPACK_IMPORTED_MODULE_28__.Stat,\n/* harmony export */   \"Util\": () => /* reexport safe */ _math_util__WEBPACK_IMPORTED_MODULE_29__.Util,\n/* harmony export */   \"Vector2\": () => /* reexport safe */ _math_vector__WEBPACK_IMPORTED_MODULE_30__.Vector2,\n/* harmony export */   \"Vector3\": () => /* reexport safe */ _math_vector__WEBPACK_IMPORTED_MODULE_30__.Vector3,\n/* harmony export */   \"Graph\": () => /* reexport safe */ _mesh_graph__WEBPACK_IMPORTED_MODULE_31__.Graph,\n/* harmony export */   \"LineArray\": () => /* reexport safe */ _mesh_line_array__WEBPACK_IMPORTED_MODULE_32__.LineArray,\n/* harmony export */   \"getDefaultIndices\": () => /* reexport safe */ _mesh_line_array__WEBPACK_IMPORTED_MODULE_32__.getDefaultIndices,\n/* harmony export */   \"Mesh\": () => /* reexport safe */ _mesh_mesh__WEBPACK_IMPORTED_MODULE_33__.Mesh,\n/* harmony export */   \"MeshType\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_34__.MeshType,\n/* harmony export */   \"NormalKind\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_34__.NormalKind,\n/* harmony export */   \"Renderable\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_34__.Renderable,\n/* harmony export */   \"meshFromObj\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_34__.meshFromObj,\n/* harmony export */   \"TopoMesh\": () => /* reexport safe */ _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_35__.TopoMesh,\n/* harmony export */   \"BillBoardRenderer\": () => /* reexport safe */ _renderers_billboard_renderer__WEBPACK_IMPORTED_MODULE_36__.BillBoardRenderer,\n/* harmony export */   \"TextRenderer\": () => /* reexport safe */ _renderers_billboard_renderer__WEBPACK_IMPORTED_MODULE_36__.TextRenderer,\n/* harmony export */   \"Camera\": () => /* reexport safe */ _render_camera__WEBPACK_IMPORTED_MODULE_37__.Camera,\n/* harmony export */   \"DotRenderer2\": () => /* reexport safe */ _renderers_dot_renderer2__WEBPACK_IMPORTED_MODULE_38__.DotRenderer2,\n/* harmony export */   \"DotRenderer3\": () => /* reexport safe */ _renderers_dot_renderer3__WEBPACK_IMPORTED_MODULE_39__.DotRenderer3,\n/* harmony export */   \"LineRenderer\": () => /* reexport safe */ _renderers_line_renderer__WEBPACK_IMPORTED_MODULE_40__.LineRenderer,\n/* harmony export */   \"MeshDebugRenderer\": () => /* reexport safe */ _renderers_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_41__.MeshDebugRenderer,\n/* harmony export */   \"NormalRenderer\": () => /* reexport safe */ _renderers_mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_42__.NormalRenderer,\n/* harmony export */   \"RectangleRenderer\": () => /* reexport safe */ _renderers_rectangle_renderer__WEBPACK_IMPORTED_MODULE_43__.RectangleRenderer,\n/* harmony export */   \"DrawSpeed\": () => /* reexport safe */ _render_renderer__WEBPACK_IMPORTED_MODULE_44__.DrawSpeed,\n/* harmony export */   \"Renderer\": () => /* reexport safe */ _render_renderer__WEBPACK_IMPORTED_MODULE_44__.Renderer,\n/* harmony export */   \"ShadedMeshRenderer\": () => /* reexport safe */ _renderers_shaded_mesh_renderer__WEBPACK_IMPORTED_MODULE_45__.ShadedMeshRenderer,\n/* harmony export */   \"SimpleMeshRenderer\": () => /* reexport safe */ _renderers_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_46__.SimpleMeshRenderer,\n/* harmony export */   \"TextureMeshRenderer\": () => /* reexport safe */ _renderers_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_47__.TextureMeshRenderer,\n/* harmony export */   \"GraphDebugRenderer\": () => /* reexport safe */ _renderers_graph_debug_renderer__WEBPACK_IMPORTED_MODULE_48__.GraphDebugRenderer,\n/* harmony export */   \"addDropFileEventListeners\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__.addDropFileEventListeners,\n/* harmony export */   \"loadImageFromBlob\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__.loadImageFromBlob,\n/* harmony export */   \"loadImageFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__.loadImageFromFile,\n/* harmony export */   \"loadJSONFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__.loadJSONFromFile,\n/* harmony export */   \"loadTextFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__.loadTextFromFile,\n/* harmony export */   \"FpsCounter\": () => /* reexport safe */ _system_fpsCounter__WEBPACK_IMPORTED_MODULE_50__.FpsCounter,\n/* harmony export */   \"InputState\": () => /* reexport safe */ _system_input_state__WEBPACK_IMPORTED_MODULE_51__.InputState,\n/* harmony export */   \"EnumParameter\": () => /* reexport safe */ _system_ui__WEBPACK_IMPORTED_MODULE_52__.EnumParameter,\n/* harmony export */   \"Parameter\": () => /* reexport safe */ _system_ui__WEBPACK_IMPORTED_MODULE_52__.Parameter,\n/* harmony export */   \"UI\": () => /* reexport safe */ _system_ui__WEBPACK_IMPORTED_MODULE_52__.UI,\n/* harmony export */   \"Core\": () => /* reexport safe */ _system_core__WEBPACK_IMPORTED_MODULE_53__.Core\n/* harmony export */ });\n/* harmony import */ var _algorithms_marching_cubes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/marching-cubes */ \"./src/algorithms/marching-cubes.ts\");\n/* harmony import */ var _algorithms_perlin_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/perlin-noise */ \"./src/algorithms/perlin-noise.ts\");\n/* harmony import */ var _app_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app */ \"./src/app/app.ts\");\n/* harmony import */ var _app_swap_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/swap-app */ \"./src/app/swap-app.ts\");\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _data_int_cube__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/int-cube */ \"./src/data/int-cube.ts\");\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_linked_list__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./data/linked-list */ \"./src/data/linked-list.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _geo_circle2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./geo/circle2 */ \"./src/geo/circle2.ts\");\n/* harmony import */ var _geo_circle3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./geo/circle3 */ \"./src/geo/circle3.ts\");\n/* harmony import */ var _geo_cube__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./geo/cube */ \"./src/geo/cube.ts\");\n/* harmony import */ var _geo_geo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./geo/geo */ \"./src/geo/geo.ts\");\n/* harmony import */ var _geo_intersect__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./geo/intersect */ \"./src/geo/intersect.ts\");\n/* harmony import */ var _geo_line__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./geo/line */ \"./src/geo/line.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _geo_polyline__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./geo/polyline */ \"./src/geo/polyline.ts\");\n/* harmony import */ var _geo_rectangle__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./geo/rectangle */ \"./src/geo/rectangle.ts\");\n/* harmony import */ var _geo_triangle__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./geo/triangle */ \"./src/geo/triangle.ts\");\n/* harmony import */ var _img_Image__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./img/Image */ \"./src/img/Image.ts\");\n/* harmony import */ var _img_kernels__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./img/kernels */ \"./src/img/kernels.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./math/math */ \"./src/math/math.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_quaternion__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./math/quaternion */ \"./src/math/quaternion.ts\");\n/* harmony import */ var _math_ray__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./math/ray */ \"./src/math/ray.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./math/statistics */ \"./src/math/statistics.ts\");\n/* harmony import */ var _math_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./math/util */ \"./src/math/util.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_graph__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./mesh/graph */ \"./src/mesh/graph.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _mesh_mesh__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./mesh/mesh */ \"./src/mesh/mesh.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./mesh/topo-mesh */ \"./src/mesh/topo-mesh.ts\");\n/* harmony import */ var _renderers_billboard_renderer__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./renderers/billboard-renderer */ \"./src/renderers/billboard-renderer.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _renderers_dot_renderer2__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./renderers/dot-renderer2 */ \"./src/renderers/dot-renderer2.ts\");\n/* harmony import */ var _renderers_dot_renderer3__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./renderers/dot-renderer3 */ \"./src/renderers/dot-renderer3.ts\");\n/* harmony import */ var _renderers_line_renderer__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./renderers/line-renderer */ \"./src/renderers/line-renderer.ts\");\n/* harmony import */ var _renderers_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./renderers/mesh-debug-renderer */ \"./src/renderers/mesh-debug-renderer.ts\");\n/* harmony import */ var _renderers_mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./renderers/mesh-normals-renderer */ \"./src/renderers/mesh-normals-renderer.ts\");\n/* harmony import */ var _renderers_rectangle_renderer__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./renderers/rectangle-renderer */ \"./src/renderers/rectangle-renderer.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _renderers_shaded_mesh_renderer__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./renderers/shaded-mesh-renderer */ \"./src/renderers/shaded-mesh-renderer.ts\");\n/* harmony import */ var _renderers_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./renderers/simple-mesh-renderer */ \"./src/renderers/simple-mesh-renderer.ts\");\n/* harmony import */ var _renderers_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./renderers/texture-mesh-renderer */ \"./src/renderers/texture-mesh-renderer.ts\");\n/* harmony import */ var _renderers_graph_debug_renderer__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./renderers/graph-debug-renderer */ \"./src/renderers/graph-debug-renderer.ts\");\n/* harmony import */ var _system_domwrappers__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./system/domwrappers */ \"./src/system/domwrappers.ts\");\n/* harmony import */ var _system_fpsCounter__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./system/fpsCounter */ \"./src/system/fpsCounter.ts\");\n/* harmony import */ var _system_input_state__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./system/input-state */ \"./src/system/input-state.ts\");\n/* harmony import */ var _system_ui__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./system/ui */ \"./src/system/ui.ts\");\n/* harmony import */ var _system_core__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./system/core */ \"./src/system/core.ts\");\n// purpose: make sure the entire library is callable from one point.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export * from \"./render/scene\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9saWIudHM/ODRmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvRUFBb0U7QUFFeEI7QUFDRjtBQUVoQjtBQUNLO0FBRUs7QUFDRjtBQUNGO0FBQ0U7QUFDQztBQUNDO0FBRU47QUFDQTtBQUNIO0FBQ0Q7QUFDTTtBQUNMO0FBQ0M7QUFDRztBQUNDO0FBQ0Q7QUFFSDtBQUNFO0FBRUQ7QUFDQztBQUNGO0FBQ0U7QUFDSTtBQUNQO0FBQ087QUFDTjtBQUNFO0FBRUQ7QUFDSztBQUNOO0FBQ087QUFDRjtBQUVjO0FBQ2Y7QUFDVTtBQUNBO0FBQ0E7QUFDTTtBQUNFO0FBQ0g7QUFDYjtBQUNsQyxrQ0FBa0M7QUFDZTtBQUNBO0FBQ0M7QUFDRDtBQUVaO0FBQ0Q7QUFDQztBQUNUO0FBQ0UiLCJmaWxlIjoiLi9zcmMvbGliLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVycG9zZTogbWFrZSBzdXJlIHRoZSBlbnRpcmUgbGlicmFyeSBpcyBjYWxsYWJsZSBmcm9tIG9uZSBwb2ludC5cblxuZXhwb3J0ICogZnJvbSBcIi4vYWxnb3JpdGhtcy9tYXJjaGluZy1jdWJlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWxnb3JpdGhtcy9wZXJsaW4tbm9pc2VcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vYXBwL2FwcFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYXBwL3N3YXAtYXBwXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvZmxvYXQtbWF0cml4XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kYXRhL2hhc2gtdGFibGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvaW50LWN1YmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvaW50LW1hdHJpeFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGF0YS9saW5rZWQtbGlzdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL2NpcmNsZTJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlby9jaXJjbGUzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vY3ViZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL2dlb1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL2ludGVyc2VjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL2xpbmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlby9wbGFuZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL3BvbHlsaW5lXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vcmVjdGFuZ2xlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vdHJpYW5nbGVcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vaW1nL0ltYWdlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbWcva2VybmVsc1wiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL2NvbnN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL2RvbWFpblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9tYXRoXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL21hdHJpeFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9xdWF0ZXJuaW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL3JheVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9zdGF0aXN0aWNzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL3V0aWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21hdGgvdmVjdG9yXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL21lc2gvZ3JhcGhcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lc2gvbGluZS1hcnJheVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVzaC9tZXNoXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZXNoL3JlbmRlci1tZXNoXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZXNoL3RvcG8tbWVzaFwiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXJlcnMvYmlsbGJvYXJkLXJlbmRlcmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvY2FtZXJhXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXJlcnMvZG90LXJlbmRlcmVyMlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyZXJzL2RvdC1yZW5kZXJlcjNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlcmVycy9saW5lLXJlbmRlcmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXJlcnMvbWVzaC1kZWJ1Zy1yZW5kZXJlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyZXJzL21lc2gtbm9ybWFscy1yZW5kZXJlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyZXJzL3JlY3RhbmdsZS1yZW5kZXJlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyL3JlbmRlcmVyXCI7XG4vLyBleHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvc2NlbmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlcmVycy9zaGFkZWQtbWVzaC1yZW5kZXJlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyZXJzL3NpbXBsZS1tZXNoLXJlbmRlcmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXJlcnMvdGV4dHVyZS1tZXNoLXJlbmRlcmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXJlcnMvZ3JhcGgtZGVidWctcmVuZGVyZXJcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vc3lzdGVtL2RvbXdyYXBwZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0vZnBzQ291bnRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3lzdGVtL2lucHV0LXN0YXRlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0vdWlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N5c3RlbS9jb3JlXCI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib.ts\n");

/***/ }),

/***/ "./src/math/const.ts":
/*!***************************!*\
  !*** ./src/math/const.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Const\": () => /* binding */ Const\n/* harmony export */ });\n// name:    const.ts\r\n// author:  Jos Feenstra\r\n// purpose: Certain math constances\r\n// todo:    These are somewhat like the settings of the entire application. This could be expanded upon (json's, in-app functionalitiy)\r\nclass Const {\r\n    static IsRouglyZero(value) {\r\n        return Math.abs(value) < this.TOLERANCE;\r\n    }\r\n}\r\nConst.TOLERANCE = 0.0001; // tolerance used for determining if 1 value is the same as some other value, relatively speaking\r\nConst.TOL_SQUARED = Math.pow(Const.TOLERANCE, 2);\r\nConst.MAX_U16 = 65536;\r\n// ----- Line Render Settings -----\r\nConst.PLANE_RENDER_LINECOUNT = 9;\r\nConst.PLANE_RENDER_LINEDISTANCE = 0.3;\r\nConst.CIRCLE_SEGMENTS = 100;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL2NvbnN0LnRzP2Y2NDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsbUNBQW1DO0FBQ25DLHVJQUF1STtBQUVoSSxNQUFNLEtBQUs7SUFZZCxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQWE7UUFDN0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQzs7QUFiTSxlQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsaUdBQWlHO0FBQ3JILGlCQUFXLEdBQUcsY0FBSyxDQUFDLFNBQVMsRUFBSSxDQUFDLEVBQUM7QUFFbkMsYUFBTyxHQUFHLEtBQUssQ0FBQztBQUV2QixtQ0FBbUM7QUFDNUIsNEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLCtCQUF5QixHQUFHLEdBQUcsQ0FBQztBQUVoQyxxQkFBZSxHQUFHLEdBQUcsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYXRoL2NvbnN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgY29uc3QudHNcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZTogQ2VydGFpbiBtYXRoIGNvbnN0YW5jZXNcbi8vIHRvZG86ICAgIFRoZXNlIGFyZSBzb21ld2hhdCBsaWtlIHRoZSBzZXR0aW5ncyBvZiB0aGUgZW50aXJlIGFwcGxpY2F0aW9uLiBUaGlzIGNvdWxkIGJlIGV4cGFuZGVkIHVwb24gKGpzb24ncywgaW4tYXBwIGZ1bmN0aW9uYWxpdGl5KVxuXG5leHBvcnQgY2xhc3MgQ29uc3Qge1xuICAgIHN0YXRpYyBUT0xFUkFOQ0UgPSAwLjAwMDE7IC8vIHRvbGVyYW5jZSB1c2VkIGZvciBkZXRlcm1pbmluZyBpZiAxIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHNvbWUgb3RoZXIgdmFsdWUsIHJlbGF0aXZlbHkgc3BlYWtpbmdcbiAgICBzdGF0aWMgVE9MX1NRVUFSRUQgPSBDb25zdC5UT0xFUkFOQ0UgKiogMjtcblxuICAgIHN0YXRpYyBNQVhfVTE2ID0gNjU1MzY7XG5cbiAgICAvLyAtLS0tLSBMaW5lIFJlbmRlciBTZXR0aW5ncyAtLS0tLVxuICAgIHN0YXRpYyBQTEFORV9SRU5ERVJfTElORUNPVU5UID0gOTtcbiAgICBzdGF0aWMgUExBTkVfUkVOREVSX0xJTkVESVNUQU5DRSA9IDAuMztcblxuICAgIHN0YXRpYyBDSVJDTEVfU0VHTUVOVFMgPSAxMDA7XG5cbiAgICBzdGF0aWMgSXNSb3VnbHlaZXJvKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHZhbHVlKSA8IHRoaXMuVE9MRVJBTkNFO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/const.ts\n");

/***/ }),

/***/ "./src/math/domain.ts":
/*!****************************!*\
  !*** ./src/math/domain.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Domain\": () => /* binding */ Domain,\n/* harmony export */   \"Domain2\": () => /* binding */ Domain2,\n/* harmony export */   \"Domain3\": () => /* binding */ Domain3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// domain.ts\r\n//\r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//\r\n\r\n\r\nclass Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        // if (t0 > t1) console.error(\"created a domain with negative size.\");\r\n        // if (t0 == t1) console.warn(\"created a domain with size is 0.0. could cause problems\");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain 'count' number of times\r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of 'step'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    // comform a number to the bound\r\n    comform(value) {\r\n        if (value < this.t0) {\r\n            return this.t0;\r\n        }\r\n        else if (value > this.t1) {\r\n            return this.t1;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nclass Domain2 {\r\n    constructor(x = new Domain(), y = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain2(Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new Domain2(new Domain(x0, x1), new Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new Domain2(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw \"need 4 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners() {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass Domain3 {\r\n    constructor(x = new Domain(), y = new Domain(), z = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new Domain3(new Domain(x0, x1), new Domain(y0, y1), new Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain3(Domain.fromRadius(r), Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new Domain3(Domain.fromRadius(rx), Domain.fromRadius(ry), Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new Domain3(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)), Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw \"need 6 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(matrix.multiplyVector(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(x, y, z)));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/domain.ts\n");

/***/ }),

/***/ "./src/math/math.ts":
/*!**************************!*\
  !*** ./src/math/math.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeonMath\": () => /* binding */ GeonMath\n/* harmony export */ });\n// purpose: simple operations with only numbers\r\nclass GeonMath {\r\n    // make sure 'value' is more than 'lower', and less than 'upper'\r\n    static clamp(value, lower, upper) {\r\n        return Math.min(Math.max(value, lower), upper);\r\n    }\r\n    static fade(t) {\r\n        // Fade function as defined by Ken Perlin.  This eases coordinate values\r\n        // so that they will ease towards integral values.  This ends up smoothing\r\n        // the final output.\r\n        return t * t * t * (t * (t * 6 - 15) + 10); // 6t^5 - 15t^4 + 10t^3\r\n    }\r\n    static lerp(a, b, x) {\r\n        return a + x * (b - a);\r\n    }\r\n    static radToDeg(r) {\r\n        return (r * 180) / Math.PI;\r\n    }\r\n    static degToRad(d) {\r\n        return (d * Math.PI) / 180;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL21hdGgudHM/MDdkYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0NBQStDO0FBSXhDLE1BQU0sUUFBUTtJQUNqQixnRUFBZ0U7SUFDaEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEtBQWE7UUFDcEQsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQVM7UUFDakIsd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSxvQkFBb0I7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7SUFDdkUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFTO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFTO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMvQixDQUFDO0NBV0oiLCJmaWxlIjoiLi9zcmMvbWF0aC9tYXRoLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVycG9zZTogc2ltcGxlIG9wZXJhdGlvbnMgd2l0aCBvbmx5IG51bWJlcnNcblxuaW1wb3J0IHsgQ29uc3QgfSBmcm9tIFwiLi9jb25zdFwiO1xuXG5leHBvcnQgY2xhc3MgR2Vvbk1hdGgge1xuICAgIC8vIG1ha2Ugc3VyZSAndmFsdWUnIGlzIG1vcmUgdGhhbiAnbG93ZXInLCBhbmQgbGVzcyB0aGFuICd1cHBlcidcbiAgICBzdGF0aWMgY2xhbXAodmFsdWU6IG51bWJlciwgbG93ZXI6IG51bWJlciwgdXBwZXI6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIGxvd2VyKSwgdXBwZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmYWRlKHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIC8vIEZhZGUgZnVuY3Rpb24gYXMgZGVmaW5lZCBieSBLZW4gUGVybGluLiAgVGhpcyBlYXNlcyBjb29yZGluYXRlIHZhbHVlc1xuICAgICAgICAvLyBzbyB0aGF0IHRoZXkgd2lsbCBlYXNlIHRvd2FyZHMgaW50ZWdyYWwgdmFsdWVzLiAgVGhpcyBlbmRzIHVwIHNtb290aGluZ1xuICAgICAgICAvLyB0aGUgZmluYWwgb3V0cHV0LlxuICAgICAgICByZXR1cm4gdCAqIHQgKiB0ICogKHQgKiAodCAqIDYgLSAxNSkgKyAxMCk7IC8vIDZ0XjUgLSAxNXReNCArIDEwdF4zXG4gICAgfVxuXG4gICAgc3RhdGljIGxlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBhICsgeCAqIChiIC0gYSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJhZFRvRGVnKHI6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gKHIgKiAxODApIC8gTWF0aC5QSTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVnVG9SYWQoZDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoZCAqIE1hdGguUEkpIC8gMTgwO1xuICAgIH1cblxuICAgIC8vIC8qKlxuICAgIC8vICAqIHJldHVybiB0cnVlIGlmIGEgaXMgcm91Z2x5IHRoZSBzYW1lIHZhbHVlIGFzIGIuXG4gICAgLy8gICogdXNlcyB0aGUgcHJlZGVmaW5lZCB0b2xlcmFuY2VcbiAgICAvLyAgKi9cbiAgICAvLyBzdGF0aWMgaXNSb3VnaGx5KGE6IG51bWJlciwgYjogbnVtYmVyKSA6IGJvb2xlYW4ge1xuICAgIC8vIFx0aWYgKCgoYSAtIGIpIDwgQ29uc3QuVE9MRVJBTkNFIHx8IChhIC0gYikgPCBDb25zdC5UT0xFUkFOQ0UpKVxuICAgIC8vIFx0XHRyZXR1cm4gdHJ1ZTtcbiAgICAvLyBcdHJldHVybiBmYWxzZTtcbiAgICAvLyB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/math/math.ts\n");

/***/ }),

/***/ "./src/math/matrix.ts":
/*!****************************!*\
  !*** ./src/math/matrix.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix3\": () => /* binding */ Matrix3,\n/* harmony export */   \"Matrix4\": () => /* binding */ Matrix4\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE:\r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares.\r\nclass Matrix3 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([1, 0, 0, 0, 1, 0, 0, 0, 1]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([2 / width, 0, 0, 0, -2 / height, 0, -1, 1, 1]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([1, 0, 0, 0, 1, 0, dx, dy, 1]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([c, -s, 0, s, c, 0, 0, 0, 1]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([sx, 0, 0, 0, sy, 0, 0, 0, 1]);\r\n    }\r\n    toMat4() {\r\n        let d = this.data;\r\n        return new Matrix4([\r\n            d[0],\r\n            d[1],\r\n            0,\r\n            d[2],\r\n            d[3],\r\n            d[4],\r\n            0,\r\n            d[5],\r\n            0,\r\n            0,\r\n            1,\r\n            0,\r\n            d[6],\r\n            d[7],\r\n            0,\r\n            d[8],\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3's\r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here,\r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00,\r\n            -d * t10,\r\n            d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares.\r\nclass Matrix4 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static new(data) {\r\n        return new Matrix4(data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    clone() {\r\n        return Matrix4.newCopy(this);\r\n    }\r\n    multiplied(other) {\r\n        // NOTE: i swapped a and b, this makes more sense to me, but i could be wrong about it...\r\n        const a = other.data;\r\n        const b = this.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    multiply(other) {\r\n        this.data = this.multiplied(other).data;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = (2 * near) / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = (2 * near) / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = (-2 * near * far) / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix\r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] =\r\n            d *\r\n                (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] =\r\n            d *\r\n                (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] =\r\n            d *\r\n                (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] =\r\n            d *\r\n                (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] =\r\n            d *\r\n                (tmp_12 * m13 +\r\n                    tmp_15 * m23 +\r\n                    tmp_16 * m33 -\r\n                    (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] =\r\n            d *\r\n                (tmp_13 * m03 +\r\n                    tmp_18 * m23 +\r\n                    tmp_21 * m33 -\r\n                    (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] =\r\n            d *\r\n                (tmp_14 * m03 +\r\n                    tmp_19 * m13 +\r\n                    tmp_22 * m33 -\r\n                    (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] =\r\n            d *\r\n                (tmp_17 * m03 +\r\n                    tmp_20 * m13 +\r\n                    tmp_23 * m23 -\r\n                    (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] =\r\n            d *\r\n                (tmp_14 * m22 +\r\n                    tmp_17 * m32 +\r\n                    tmp_13 * m12 -\r\n                    (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] =\r\n            d *\r\n                (tmp_20 * m32 +\r\n                    tmp_12 * m02 +\r\n                    tmp_19 * m22 -\r\n                    (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] =\r\n            d *\r\n                (tmp_18 * m12 +\r\n                    tmp_23 * m32 +\r\n                    tmp_15 * m02 -\r\n                    (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] =\r\n            d *\r\n                (tmp_22 * m22 +\r\n                    tmp_16 * m02 +\r\n                    tmp_21 * m12 -\r\n                    (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(data[0], data[1], data[2]);\r\n    }\r\n    multiplyVectors(other) {\r\n        // dumb way\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = other.getVector(i);\r\n            vec = this.multiplyVector(vec);\r\n            other.setVector(i, vec);\r\n        }\r\n        return other;\r\n        // smart way\r\n        // let matrix = new Vector3Array(other.count());\r\n        // // for every row\r\n        // for (var r = 0; r < other.count(); r++) {\r\n        //     // for every item in row\r\n        //     for (var c = 0; c < 3; ++c) {\r\n        //         let item = 0.0;\r\n        //         for (var j = 0; j < 4; ++j) {\r\n        //             item += other.get(r, c) * this.get(j, c);\r\n        //         }\r\n        //         matrix.set(r, c, item);\r\n        //     }\r\n        // }\r\n        // other.data = matrix.data;\r\n        return other;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/matrix.ts\n");

/***/ }),

/***/ "./src/math/quaternion.ts":
/*!********************************!*\
  !*** ./src/math/quaternion.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Quaternion\": () => /* binding */ Quaternion\n/* harmony export */ });\n// author: Jos Feenstra\r\n// purpose: Quaternion to be used for rotation\r\nclass Quaternion {\r\n    constructor(x, y, z, w) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3F1YXRlcm5pb24udHM/ZGU1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUJBQXVCO0FBQ3ZCLDhDQUE4QztBQUV2QyxNQUFNLFVBQVU7SUFNbkIsWUFBWSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ2xELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL21hdGgvcXVhdGVybmlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBRdWF0ZXJuaW9uIHRvIGJlIHVzZWQgZm9yIHJvdGF0aW9uXG5cbmV4cG9ydCBjbGFzcyBRdWF0ZXJuaW9uIHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuICAgIHo6IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCB3OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy56ID0gejtcbiAgICAgICAgdGhpcy53ID0gdztcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/math/quaternion.ts\n");

/***/ }),

/***/ "./src/math/ray.ts":
/*!*************************!*\
  !*** ./src/math/ray.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ray\": () => /* binding */ Ray\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n// author:  Jos Feenstra\r\n// purpose: infinite Ray used for projection and similar actions\r\n// notes:   found some nice examples at https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld004.htm\r\n\r\nclass Ray {\r\n    // i do this to force intent : from points, or from normal. Both vector3, so otherwise confusing\r\n    constructor(origin, normal) {\r\n        this.origin = origin;\r\n        this.normal = normal.normalize();\r\n    }\r\n    static fromNormal(origin, normal) {\r\n        return new Ray(origin, normal);\r\n    }\r\n    static fromPoints(origin, through) {\r\n        return new Ray(origin, through.subbed(origin).normalize());\r\n    }\r\n    at(t) {\r\n        return this.origin.added(this.normal.scaled(t));\r\n    }\r\n    xPlane(plane) {\r\n        // ray : pt = rOrigin + t * rNormal\r\n        // plane : a, b, c, d -> pNormal(a, b, c) , d\r\n        // plane : P . N + d = 0;\r\n        // substitute for p:\r\n        // t = -(rOrigin . N + d) / (V . N)\r\n        let ray = this; // to be clear\r\n        return -(ray.origin.dot(plane.normal) + plane.d) / ray.normal.dot(plane.normal);\r\n    }\r\n    toLine(length) {\r\n        let toPoint = this.at(length);\r\n        return _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromLines([this.origin, toPoint]);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3JheS50cz8xYTgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0JBQXdCO0FBQ3hCLGdFQUFnRTtBQUNoRSw2SEFBNkg7QUFFOUU7QUFJeEMsTUFBTSxHQUFHO0lBSVosZ0dBQWdHO0lBQ2hHLFlBQW9CLE1BQWUsRUFBRSxNQUFlO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWUsRUFBRSxNQUFlO1FBQzlDLE9BQU8sSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWUsRUFBRSxPQUFnQjtRQUMvQyxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELEVBQUUsQ0FBQyxDQUFTO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBWTtRQUNmLG1DQUFtQztRQUNuQyw2Q0FBNkM7UUFDN0MseUJBQXlCO1FBQ3pCLG9CQUFvQjtRQUNwQixtQ0FBbUM7UUFFbkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsY0FBYztRQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWM7UUFDakIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLGlFQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9tYXRoL3JheS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZTogaW5maW5pdGUgUmF5IHVzZWQgZm9yIHByb2plY3Rpb24gYW5kIHNpbWlsYXIgYWN0aW9uc1xuLy8gbm90ZXM6ICAgZm91bmQgc29tZSBuaWNlIGV4YW1wbGVzIGF0IGh0dHBzOi8vd3d3LmNzLnByaW5jZXRvbi5lZHUvY291cnNlcy9hcmNoaXZlL2ZhbGwwMC9jczQyNi9sZWN0dXJlcy9yYXljYXN0L3NsZDAwNC5odG1cblxuaW1wb3J0IHsgTGluZUFycmF5IH0gZnJvbSBcIi4uL21lc2gvbGluZS1hcnJheVwiO1xuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vZ2VvL3BsYW5lXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4vdmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBSYXkge1xuICAgIG9yaWdpbjogVmVjdG9yMztcbiAgICBub3JtYWw6IFZlY3RvcjM7XG5cbiAgICAvLyBpIGRvIHRoaXMgdG8gZm9yY2UgaW50ZW50IDogZnJvbSBwb2ludHMsIG9yIGZyb20gbm9ybWFsLiBCb3RoIHZlY3RvcjMsIHNvIG90aGVyd2lzZSBjb25mdXNpbmdcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKG9yaWdpbjogVmVjdG9yMywgbm9ybWFsOiBWZWN0b3IzKSB7XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgICAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU5vcm1hbChvcmlnaW46IFZlY3RvcjMsIG5vcm1hbDogVmVjdG9yMyk6IFJheSB7XG4gICAgICAgIHJldHVybiBuZXcgUmF5KG9yaWdpbiwgbm9ybWFsKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVBvaW50cyhvcmlnaW46IFZlY3RvcjMsIHRocm91Z2g6IFZlY3RvcjMpOiBSYXkge1xuICAgICAgICByZXR1cm4gbmV3IFJheShvcmlnaW4sIHRocm91Z2guc3ViYmVkKG9yaWdpbikubm9ybWFsaXplKCkpO1xuICAgIH1cblxuICAgIGF0KHQ6IG51bWJlcik6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uYWRkZWQodGhpcy5ub3JtYWwuc2NhbGVkKHQpKTtcbiAgICB9XG5cbiAgICB4UGxhbmUocGxhbmU6IFBsYW5lKTogbnVtYmVyIHtcbiAgICAgICAgLy8gcmF5IDogcHQgPSByT3JpZ2luICsgdCAqIHJOb3JtYWxcbiAgICAgICAgLy8gcGxhbmUgOiBhLCBiLCBjLCBkIC0+IHBOb3JtYWwoYSwgYiwgYykgLCBkXG4gICAgICAgIC8vIHBsYW5lIDogUCAuIE4gKyBkID0gMDtcbiAgICAgICAgLy8gc3Vic3RpdHV0ZSBmb3IgcDpcbiAgICAgICAgLy8gdCA9IC0ock9yaWdpbiAuIE4gKyBkKSAvIChWIC4gTilcblxuICAgICAgICBsZXQgcmF5ID0gdGhpczsgLy8gdG8gYmUgY2xlYXJcbiAgICAgICAgcmV0dXJuIC0ocmF5Lm9yaWdpbi5kb3QocGxhbmUubm9ybWFsKSArIHBsYW5lLmQpIC8gcmF5Lm5vcm1hbC5kb3QocGxhbmUubm9ybWFsKTtcbiAgICB9XG5cbiAgICB0b0xpbmUobGVuZ3RoOiBudW1iZXIpOiBMaW5lQXJyYXkge1xuICAgICAgICBsZXQgdG9Qb2ludCA9IHRoaXMuYXQobGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIExpbmVBcnJheS5mcm9tTGluZXMoW3RoaXMub3JpZ2luLCB0b1BvaW50XSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/math/ray.ts\n");

/***/ }),

/***/ "./src/math/statistics.ts":
/*!********************************!*\
  !*** ./src/math/statistics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stat\": () => /* binding */ Stat\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    statistics.ts\r\n// author:  Jos Feenstra\r\n// purpose: functionality and documentation of variance,\r\n//          covariance, eigen vectors, least squares, and other\r\n//          statistical operations.\r\n// source:  been a while since I did this,\r\n//          https://datascienceplus.com/understanding-the-covariance-matrix/\r\n//          https://wiki.pathmind.com/eigenvector\r\n//          used to make sure the basics are correct :).\r\n// notes:   Whats the difference between a Principal Component and an Eigen vector?\r\n//          \"Because eigenvectors trace the principal lines of force, and the axes of greatest variance and covariance illustrate where the data is most susceptible to change.\"\r\n\r\nclass Stat {\r\n    // calculate sum\r\n    static sum(x) {\r\n        let sum = 0;\r\n        for (let i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n        return sum;\r\n    }\r\n    // calculate average\r\n    static mean(x) {\r\n        return this.sum(x) / x.length;\r\n    }\r\n    // calculate variance\r\n    static variance(x) {\r\n        //σ^2x = (1/n−1) * n∑i=1 (x[i] – xAvr)^2\r\n        let n = x.length;\r\n        let avr = this.mean(x);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += Math.pow((x[i] - avr), 2);\r\n        }\r\n        return sum / (n - 1);\r\n    }\r\n    // calculate the standard deviation\r\n    static deviation(x) {\r\n        return Math.pow(this.variance(x), 0.5);\r\n    }\r\n    // calculate covariance\r\n    static covariance(x, y) {\r\n        if (x.length != y.length)\r\n            throw \"this is not how covariance works...\";\r\n        let n = x.length;\r\n        let xAvr = this.mean(x);\r\n        let yAvr = this.mean(y);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += (x[i] - xAvr) * (y[i] - yAvr);\r\n        }\r\n        return sum / (n - 1); // losing one degree of freedom\r\n    }\r\n    // calculate variance / covariance matrix\r\n    static cov(matrix) {\r\n        let size = matrix._width;\r\n        let cov = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        let columns = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            columns[i] = matrix.getColumn(i);\r\n        }\r\n        // matrix is symmertical, so only run through one half\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = i; j < size; j++) {\r\n                let value = this.covariance(columns[i], columns[j]);\r\n                cov.set(i, j, value);\r\n                cov.set(j, i, value);\r\n            }\r\n        }\r\n        return cov;\r\n    }\r\n    static eig(A) {\r\n        let results = this.svd(A);\r\n        return [results[1], results[2]];\r\n    }\r\n    /**\r\n     * Single Value Decomposition.\r\n     * Can be used for Eigen Value Decomposition\r\n     * from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970).\r\n     * Taken from numeric.js. not yet cleaned & optimized.\r\n     * https://en.wikipedia.org/wiki/Singular_value_decomposition\r\n     * @param  {FloatMatrix} A matrix to decompose, such as a covariance matrix\r\n     * @returns [U, ∑, V]\r\n     * U -> during EVD, these are the eigen vectors of A transposed, if im not mistaken\r\n     * ∑ -> during EVD, this are the eigen values\r\n     * V -> during EVD, the columns are eigen vectors\r\n     */\r\n    static svd(A) {\r\n        var prec = Math.pow(2, -52); // assumes double prec\r\n        var tolerance = 1e-64 / prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n        var u = A.clone().toNative();\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n        if (m < n)\r\n            throw \"Need more rows than columns\";\r\n        var e = new Array(n);\r\n        var q = new Array(n);\r\n        for (i = 0; i < n; i++)\r\n            e[i] = q[i] = 0.0;\r\n        var v = rep([n, n], 0);\r\n        function pythag(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a * Math.sqrt(1.0 + (b * b) / a / a);\r\n            else if (b == 0.0)\r\n                return a;\r\n            return b * Math.sqrt(1.0 + (a * a) / b / b);\r\n        }\r\n        //rep function, [JF] : dont know what this does exactly...\r\n        function rep(s, v, k = 0) {\r\n            let n = s[k];\r\n            let ret = Array(n);\r\n            let i;\r\n            if (k === s.length - 1) {\r\n                for (i = n - 2; i >= 0; i -= 2) {\r\n                    ret[i + 1] = v;\r\n                    ret[i] = v;\r\n                }\r\n                if (i === -1) {\r\n                    ret[0] = v;\r\n                }\r\n                return ret;\r\n            }\r\n            for (i = n - 1; i >= 0; i--) {\r\n                ret[i] = rep(s, v, k + 1);\r\n            }\r\n            return ret;\r\n        }\r\n        //Householder's reduction to bidiagonal form\r\n        var f = 0.0;\r\n        var g = 0.0;\r\n        var h = 0.0;\r\n        var x = 0.0;\r\n        var y = 0.0;\r\n        var z = 0.0;\r\n        var s = 0.0;\r\n        for (i = 0; i < n; i++) {\r\n            e[i] = g;\r\n            s = 0.0;\r\n            l = i + 1;\r\n            for (j = i; j < m; j++)\r\n                s += u[j][i] * u[j][i];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i] = f - g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = i; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n            }\r\n            q[i] = g;\r\n            s = 0.0;\r\n            for (j = l; j < n; j++)\r\n                s = s + u[i][j] * u[i][j];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i + 1];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i + 1] = f - g;\r\n                for (j = l; j < n; j++)\r\n                    e[j] = u[i][j] / h;\r\n                for (j = l; j < m; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[j][k] * u[i][k];\r\n                    for (k = l; k < n; k++)\r\n                        u[j][k] += s * e[k];\r\n                }\r\n            }\r\n            y = Math.abs(q[i]) + Math.abs(e[i]);\r\n            if (y > x)\r\n                x = y;\r\n        }\r\n        // accumulation of right hand gtransformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            if (g != 0.0) {\r\n                h = g * u[i][i + 1];\r\n                for (j = l; j < n; j++)\r\n                    v[j][i] = u[i][j] / h;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[i][k] * v[k][j];\r\n                    for (k = l; k < n; k++)\r\n                        v[k][j] += s * v[k][i];\r\n                }\r\n            }\r\n            for (j = l; j < n; j++) {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g = e[i];\r\n            l = i;\r\n        }\r\n        // accumulation of left hand transformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            l = i + 1;\r\n            g = q[i];\r\n            for (j = l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g != 0.0) {\r\n                h = u[i][i] * g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = u[j][i] / g;\r\n            }\r\n            else\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n        // diagonalization of the bidiagonal form\r\n        prec = prec * x;\r\n        for (k = n - 1; k != -1; k += -1) {\r\n            for (var iteration = 0; iteration < itmax; iteration++) {\r\n                // test f splitting\r\n                var test_convergence = false;\r\n                for (l = k; l != -1; l += -1) {\r\n                    if (Math.abs(e[l]) <= prec) {\r\n                        test_convergence = true;\r\n                        break;\r\n                    }\r\n                    if (Math.abs(q[l - 1]) <= prec)\r\n                        break;\r\n                }\r\n                if (!test_convergence) {\r\n                    // cancellation of e[l] if l>0\r\n                    c = 0.0;\r\n                    s = 1.0;\r\n                    var l1 = l - 1;\r\n                    for (i = l; i < k + 1; i++) {\r\n                        f = s * e[i];\r\n                        e[i] = c * e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g = q[i];\r\n                        h = pythag(f, g);\r\n                        q[i] = h;\r\n                        c = g / h;\r\n                        s = -f / h;\r\n                        for (j = 0; j < m; j++) {\r\n                            y = u[j][l1];\r\n                            z = u[j][i];\r\n                            u[j][l1] = y * c + z * s;\r\n                            u[j][i] = -y * s + z * c;\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z = q[k];\r\n                if (l == k) {\r\n                    //convergence\r\n                    if (z < 0.0) {\r\n                        //q[k] is made non-negative\r\n                        q[k] = -z;\r\n                        for (j = 0; j < n; j++)\r\n                            v[j][k] = -v[j][k];\r\n                    }\r\n                    break; //break out of iteration loop and move on to next k value\r\n                }\r\n                if (iteration >= itmax - 1)\r\n                    throw \"Error: no convergence.\";\r\n                // shift from bottom 2x2 minor\r\n                x = q[l];\r\n                y = q[k - 1];\r\n                g = e[k - 1];\r\n                h = e[k];\r\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\r\n                g = pythag(f, 1.0);\r\n                if (f < 0.0)\r\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\r\n                else\r\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\r\n                // next QR transformation\r\n                c = 1.0;\r\n                s = 1.0;\r\n                for (i = l + 1; i < k + 1; i++) {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s * g;\r\n                    g = c * g;\r\n                    z = pythag(f, h);\r\n                    e[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = x * c + g * s;\r\n                    g = -x * s + g * c;\r\n                    h = y * s;\r\n                    y = y * c;\r\n                    for (j = 0; j < n; j++) {\r\n                        x = v[j][i - 1];\r\n                        z = v[j][i];\r\n                        v[j][i - 1] = x * c + z * s;\r\n                        v[j][i] = -x * s + z * c;\r\n                    }\r\n                    z = pythag(f, h);\r\n                    q[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = c * g + s * y;\r\n                    x = -s * g + c * y;\r\n                    for (j = 0; j < m; j++) {\r\n                        y = u[j][i - 1];\r\n                        z = u[j][i];\r\n                        u[j][i - 1] = y * c + z * s;\r\n                        u[j][i] = -y * s + z * c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n        for (i = 0; i < q.length; i++)\r\n            if (q[i] < prec)\r\n                q[i] = 0;\r\n        //sort eigenvalues\r\n        var temp;\r\n        for (i = 0; i < n; i++) {\r\n            for (j = i - 1; j >= 0; j--) {\r\n                if (q[j] < q[i]) {\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k = 0; k < u.length; k++) {\r\n                        temp = u[k][i];\r\n                        u[k][i] = u[k][j];\r\n                        u[k][j] = temp;\r\n                    }\r\n                    for (k = 0; k < v.length; k++) {\r\n                        temp = v[k][i];\r\n                        v[k][i] = v[k][j];\r\n                        v[k][j] = temp;\r\n                    }\r\n                    i = j;\r\n                }\r\n            }\r\n        }\r\n        return [_data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(u), new Float32Array(q), _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(v)];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/statistics.ts\n");

/***/ }),

/***/ "./src/math/util.ts":
/*!**************************!*\
  !*** ./src/math/util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Util\": () => /* binding */ Util\n/* harmony export */ });\nclass Util {\r\n    static range(n) {\r\n        let array = [];\r\n        for (let i = 0; i < n; i++) {\r\n            array.push(i);\r\n        }\r\n        return array;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3V0aWwudHM/ODBlNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTSxJQUFJO0lBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFTO1FBQ2xCLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvbWF0aC91dGlsLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFV0aWwge1xuICAgIHN0YXRpYyByYW5nZShuOiBudW1iZXIpOiBudW1iZXJbXSB7XG4gICAgICAgIGxldCBhcnJheTogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/util.ts\n");

/***/ }),

/***/ "./src/math/vector.ts":
/*!****************************!*\
  !*** ./src/math/vector.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector3\": () => /* binding */ Vector3,\n/* harmony export */   \"Vector2\": () => /* binding */ Vector2\n/* harmony export */ });\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const */ \"./src/math/const.ts\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/math/math.ts\");\n/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/math/util.ts\");\n// author: \tJos Feenstra\r\n// inspiration from Three.js\r\n// note: \trecycle the class as much as possble, building a new class is expensive,\r\n// \t\t\tespecially in javascript\r\n// todo: \tBIJ NADER INZIEN: dont go the copy route. rewrite this in a more functional way creating new classes is expensive, but we really need immutable vectors.\r\n// \t\t\tthese types of consistent vectors are only useful in niche cases, and complitate a lot of common cases.\r\n\r\n\r\n\r\n\r\nclass Vector3 {\r\n    // #region constructors\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static new(x, y, z) {\r\n        return new Vector3(x, y, z);\r\n    }\r\n    static calculateWheelOrder(vectors, ihat, jhat) {\r\n        // console.log(\"wheel order\");\r\n        // console.log(\"hats\", ihat, jhat)\r\n        let angles = [];\r\n        vectors.forEach((v) => {\r\n            angles.push(new Vector2(v.dot(ihat), v.dot(jhat)).angle());\r\n        });\r\n        // console.log(\"angles\", angles);\r\n        let ids = _util__WEBPACK_IMPORTED_MODULE_3__.Util.range(vectors.length);\r\n        ids.sort((a, b) => {\r\n            return angles[a] - angles[b];\r\n        });\r\n        return ids;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    static fromLerpWeights(p1, p2, tP1, tP2, t) {\r\n        if (Math.abs(t - tP1) < 0.00001)\r\n            return p1;\r\n        if (Math.abs(t - tP2) < 0.00001)\r\n            return p2;\r\n        if (Math.abs(tP1 - tP2) < 0.00001)\r\n            return p1;\r\n        let mu = (t - tP1) / (tP2 - tP1);\r\n        return new Vector3(p1.x + mu * (p2.x - p1.x), p1.y + mu * (p2.y - p1.y), p1.z + mu * (p2.z - p1.z));\r\n    }\r\n    // #endregion\r\n    // #region defaults\r\n    static zero() {\r\n        return new Vector3(0, 0, 0);\r\n    }\r\n    static unitX() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n    static unitY() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n    static unitZ() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n    // #endregion\r\n    // #region basics\r\n    toArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return v.x === this.x && v.y === this.y && v.z === this.z;\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    added(v) {\r\n        return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n    }\r\n    sub(v) {\r\n        (this.x -= v.x), (this.y -= v.y), (this.z -= v.z);\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case 0:\r\n                return this.x;\r\n            case 1:\r\n                return this.y;\r\n            case 2:\r\n                return this.z;\r\n            case 3:\r\n                return 1;\r\n            default:\r\n                throw \"nope\";\r\n        }\r\n    }\r\n    scaled(v) {\r\n        return new Vector3(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z;\r\n        return this;\r\n    }\r\n    multiplied(v) {\r\n        return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\r\n    }\r\n    divVector(v) {\r\n        return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\r\n    }\r\n    divided(value) {\r\n        return new Vector3(this.x / value, this.y / value, this.z / value);\r\n    }\r\n    div(value) {\r\n        (this.x /= value), (this.y /= value), (this.z /= value);\r\n        return this;\r\n    }\r\n    minimumed(other) {\r\n        return new Vector3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));\r\n    }\r\n    maximumed(other) {\r\n        return new Vector3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));\r\n    }\r\n    clamped(min, max) {\r\n        return new Vector3(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\r\n    }\r\n    clampScalared(min, max) {\r\n        return new Vector3(_math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.x, min, max), _math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.y, min, max), _math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.z, min, max));\r\n    }\r\n    clampLengthed(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floored() {\r\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n    ceiled() {\r\n        return new Vector3(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\r\n    }\r\n    rounded() {\r\n        return new Vector3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    roundedToZero() {\r\n        return new Vector3(this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z));\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    negated() {\r\n        return new Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n    angle(other, normal) {\r\n        let thisProjected = this.subbed(normal.scaled(this.dot(normal)));\r\n        let otherProjected = other.subbed(normal.scaled(other.dot(normal)));\r\n        console.log(thisProjected);\r\n        console.log(otherProjected);\r\n        return 0;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        return new Vector3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.divided(this.length() || 1);\r\n    }\r\n    isNormal() {\r\n        return Math.abs(this.length() - 1) < _const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector3((other.x - this.x) * alpha, (other.y - this.y) * alpha, (other.z - this.z) * alpha);\r\n    }\r\n    // #endregion\r\n    // #region math specific\r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector\r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectedOnPlane(normal) {\r\n        // project a vector\r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.minimumed(_vector);\r\n    }\r\n    mirrored(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.minimumed(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n    rotated(axis, angle) {\r\n        let mat = _matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newAxisRotation(axis, angle);\r\n        return mat.multiplyVector(this);\r\n    }\r\n}\r\nconst _vector = new Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    // static from2Pt(from: Vector2, to: Vector2) : Vector2 {\r\n    // \treturn new Vector2(\r\n    // \t\tfrom.x - to.x,\r\n    // \t\tfrom.y - to.y\r\n    // \t)\r\n    // }\r\n    static fromCircle(center, radius, theta) {\r\n        return new Vector2(center.x + radius * Math.sin(theta), center.y + radius * Math.cos(theta));\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() {\r\n        return new Vector2(0, 0);\r\n    }\r\n    static NaN() {\r\n        return new Vector2(NaN, NaN);\r\n    }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter?\r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) + bsum * (c.y - a.y) + csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) + bsum * (a.x - c.x) + csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half\r\n        return (a.x - c.x) * (b.y - c.y) - (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    to3D() {\r\n        return new Vector3(this.x, this.y, 0);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return Math.abs(this.x - v.x) < tol && Math.abs(this.y - v.y) < tol;\r\n    }\r\n    equals(v) {\r\n        return v.x === this.x && v.y === this.y;\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    added(v) {\r\n        return new Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    scaled(v) {\r\n        return new Vector2(this.x * v, this.y * v);\r\n    }\r\n    divVector(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    dived(v) {\r\n        return new Vector2(this.x / v, this.y / v);\r\n    }\r\n    minimum(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    maximum(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    lengthSquared() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        let dx = this.x - v.x;\r\n        let dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector2(this.x + (other.x - this.x) * alpha, this.y + (other.y - this.y) * alpha);\r\n    }\r\n    // calculate the 'triangle sign' of three points. Can be used to determine clockwise & counter clockwise\r\n    sign(b, c) {\r\n        return (this.x - c.x) * (b.y - c.y) - (b.x - c.x) * (this.y - c.y);\r\n    }\r\n    // use dot product to project this vector on the other vector\r\n    projectOnVector(other) {\r\n        const denominator = other.lengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/vector.ts\n");

/***/ }),

/***/ "./src/mesh/graph.ts":
/*!***************************!*\
  !*** ./src/mesh/graph.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Graph\": () => /* binding */ Graph\n/* harmony export */ });\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mesh */ \"./src/mesh/mesh.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n// name: graph.ts\r\n// author:  Jos Feenstra\r\n// purpose: HalfEdge Mesh in 3D.\r\n// This does mean that the order around a vertex is not staight forward, and must be handled using normals.\r\n// TODO\r\n// - graph clean\r\n// - graph delete vert\r\n// - to line renderable\r\n// - keep track of faces, for quick meshification\r\n//   - THIS WILL SPEED UP 'GET ALL FACES THREMENDOUSLY, WHICH WILL SPEED UP SUBDIVISONS'\r\n// - remove ambiguity of halfedges & edges\r\n//   - fix the fact that we 'dont' realllly use halfedges, we consistently use pairs of two.\r\n//   - aka, twins are implicit: 0 -> 1 & 1 -> 0 OR 21 -> 20 & 20 -> 21\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FACES MUST BE CONVEX, OR BUGS MIGHT OCCUR!!!!\r\n// interface Face {\r\n//    edge: EdgeIndex,\r\n// }\r\n// NOTE: create an interface which hides the Edge, Vert & Face interfaces.\r\n// NOTE: half edge is implied\r\nclass Graph {\r\n    constructor() {\r\n        this.verts = [];\r\n        this.edges = [];\r\n    }\r\n    static new() {\r\n        return new Graph();\r\n    }\r\n    static fromMesh(mesh) {\r\n        let graph = Graph.new();\r\n        let normals = mesh.calculateVertexNormals();\r\n        mesh.verts.forEach((v, i) => {\r\n            graph.addVert(v, normals[i]);\r\n        });\r\n        let type = mesh.getType();\r\n        if (type == _render_mesh__WEBPACK_IMPORTED_MODULE_5__.MeshType.Invalid || type == _render_mesh__WEBPACK_IMPORTED_MODULE_5__.MeshType.Points) {\r\n            return graph;\r\n        }\r\n        let map = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        let width = mesh.links._width;\r\n        mesh.links.forEachRow((row, i) => {\r\n            // go through pairs\r\n            // NOTE: this can be done way easier by creating 1 half edge per pair\r\n            for (let i = 0; i < width; i++) {\r\n                let iNext = (i + 1) % width;\r\n                let a = row[i];\r\n                let b = row[iNext];\r\n                // console.log(a, b);\r\n                if (a == -1 || b == -1)\r\n                    continue;\r\n                graph.addEdgeIfNew(a, b);\r\n                // let normal = normals[a].add(normals[b]).normalize();\r\n                // if (map.has([a, b])) {\r\n                //     console.log(\"GOT IT ALREADY\")\r\n                //     continue;\r\n                // }\r\n                // graph.addEdgeWithCustomNormal(a, b, normal);\r\n                // map.set([b, a], true);\r\n                // graph.addEdge(a, b);\r\n            }\r\n        });\r\n        return graph;\r\n    }\r\n    // geometry trait\r\n    clone() {\r\n        throw new Error(\"not yet implemented...\");\r\n    }\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            v.pos = matrix.multiplyVector(v.pos);\r\n        }\r\n    }\r\n    // UTILITY\r\n    print() {\r\n        console.log(\"graph\");\r\n        console.log(\"--------\");\r\n        console.log(`${this.verts.length} verts: `);\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            console.log(`v(${i}) | edge: ${v.edge}, data: ${v.pos.toString()} normal: ${v.normal.toString()}`);\r\n        }\r\n        console.log(\"--------\");\r\n        console.log(`${this.edges.length} edges:  `);\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n            console.log(`e(${i}) | vert: ${e.vert}, twin: ${e.twin}, next: ${e.next}, dead ${e.dead}`);\r\n        }\r\n        console.log(\"--------\");\r\n    }\r\n    // CONVERTERS\r\n    toMesh() {\r\n        return _mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh.fromGraph(this);\r\n    }\r\n    toLines() {\r\n        return _mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh.newLines(this.allVertPositions(), this.allUniqueEdgeVerts());\r\n    }\r\n    toRenderable() {\r\n        return _render_mesh__WEBPACK_IMPORTED_MODULE_5__.Renderable.fromGraph(this);\r\n    }\r\n    // public getters\r\n    allNorms() {\r\n        let data = [];\r\n        this.verts.forEach((v) => {\r\n            data.push(v.normal);\r\n        });\r\n        return data;\r\n    }\r\n    allVertPositions() {\r\n        let data = [];\r\n        this.verts.forEach((v) => {\r\n            data.push(v.pos);\r\n        });\r\n        return data;\r\n    }\r\n    allUniqueEdges() {\r\n        let edges = [];\r\n        let count = this.edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let i1 = i * 2;\r\n            let i2 = i * 2 + 1;\r\n            let a = this.getEdge(i1);\r\n            let b = this.getEdge(i2);\r\n            if (a.dead || b.dead) {\r\n                continue;\r\n            }\r\n            edges.push(i1);\r\n        }\r\n        return edges;\r\n    }\r\n    allUniqueEdgeVerts() {\r\n        let edges = [];\r\n        let count = this.edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let i1 = i * 2;\r\n            let i2 = i * 2 + 1;\r\n            let a = this.getEdge(i1);\r\n            let b = this.getEdge(i2);\r\n            if (a.dead || b.dead) {\r\n                continue;\r\n            }\r\n            edges.push(a.vert, b.vert);\r\n        }\r\n        return edges;\r\n    }\r\n    allEdgeVerts() {\r\n        let data = [];\r\n        // let edges = new Map<number, number>()\r\n        this.edges.forEach((e, i) => {\r\n            if (e.dead)\r\n                return;\r\n            let a = e.vert;\r\n            let b = this.getEdge(e.twin).vert;\r\n            if (a < b) {\r\n                data.push(a);\r\n                data.push(b);\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n    allVertLoops() {\r\n        throw \"TODO\";\r\n    }\r\n    allVertLoopsAsInts() {\r\n        // TODO speed this up\r\n        let loops = [];\r\n        let unvisited = new Set();\r\n        this.edges.forEach((e, i) => {\r\n            if (e.dead) {\r\n                return;\r\n            }\r\n            unvisited.add(i);\r\n        });\r\n        let i = 0;\r\n        const limit = this.edges.length; // we will never visit an edge twice if all is according to plan\r\n        while (unvisited.size > 0) {\r\n            let loop = [];\r\n            let ei = unvisited.entries().next().value[0];\r\n            let start = ei;\r\n            do {\r\n                if (i > limit) {\r\n                    // this.print();\r\n                    throw \"topology is corrupt!\";\r\n                }\r\n                i += 1;\r\n                let e = this.getEdge(ei);\r\n                unvisited.delete(ei);\r\n                loop.push(e.vert);\r\n                ei = e.next;\r\n            } while (ei != start);\r\n            loops.push(loop);\r\n        }\r\n        return loops;\r\n    }\r\n    getLoop(ei) {\r\n        let loop = [];\r\n        let i = 0;\r\n        const limit = this.edges.length;\r\n        let start = ei;\r\n        do {\r\n            if (i > limit) {\r\n                // this.print();\r\n                throw \"topology is corrupt!\";\r\n            }\r\n            i += 1;\r\n            let e = this.getEdge(ei);\r\n            loop.push(ei);\r\n            ei = e.next;\r\n        } while (ei != start);\r\n        return loop;\r\n    }\r\n    getVertexPos(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw \"out of range\";\r\n        }\r\n        return this.verts[vi].pos;\r\n    }\r\n    getVertexNormal(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw \"out of range\";\r\n        }\r\n        return this.verts[vi].normal;\r\n    }\r\n    getVertexCount() {\r\n        return this.verts.length;\r\n    }\r\n    getHalfEdgeCount() {\r\n        return this.edges.length;\r\n    }\r\n    changeVertex(vi, pos, norm) {\r\n        let v = this.verts[vi];\r\n        v.pos = pos;\r\n        v.normal = norm;\r\n    }\r\n    getVert(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw \"out of range\";\r\n        }\r\n        return this.verts[vi];\r\n    }\r\n    getEdge(ei) {\r\n        if (ei < 0 || ei >= this.edges.length) {\r\n            console.error(\"out of range\");\r\n        }\r\n        return this.edges[ei];\r\n    }\r\n    getEdgeIndexBetween(ai, bi) {\r\n        let res = this.getEdgeBetween(ai, bi);\r\n        if (res)\r\n            return this.getEdgeIndex(res);\r\n        return undefined;\r\n    }\r\n    getEdgeBetween(ai, bi) {\r\n        let edges = this.getVertEdgeFan(ai);\r\n        for (let i = 0; i < edges.length; i++) {\r\n            if (this.getEdge(edges[i].twin).vert == bi) {\r\n                return edges[i];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    getVertEdgeFan(vi) {\r\n        // get all edges connected to this vertex.\r\n        // NOTE: all are outgoing (e.vert == vi)\r\n        // console.log(\"getting fan\");\r\n        let fan = [];\r\n        let v = this.verts[vi];\r\n        let ei = v.edge;\r\n        let start = ei;\r\n        if (ei == -1) {\r\n            return fan;\r\n        }\r\n        let count = 0;\r\n        while (true) {\r\n            if (count > this.verts.length) {\r\n                this.print();\r\n                console.log(\"fan: \", fan);\r\n                throw \"nope\";\r\n            }\r\n            count += 1;\r\n            // console.log(\"step\", count, \"ei\", ei);\r\n            let e = this.getEdge(ei);\r\n            let e_twin = this.getEdgeTwin(ei);\r\n            fan.push(e);\r\n            ei = e_twin.next;\r\n            if (ei == start) {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(\"returning fan: \", fan);\r\n        return fan;\r\n    }\r\n    getLoopsAdjacentToEdge(ei) {\r\n        let loops = [];\r\n        loops.push(this.getLoop(ei));\r\n        loops.push(this.getLoop(this.getEdge(ei).twin));\r\n        return loops;\r\n    }\r\n    getVertNeighbors(vi) {\r\n        let ids = [];\r\n        this.getVertEdgeFan(vi).forEach((e) => {\r\n            ids.push(this.getEdge(e.twin).vert);\r\n        });\r\n        return ids;\r\n    }\r\n    getEdgeIndex(e) {\r\n        return this.getEdge(e.twin).twin;\r\n    }\r\n    getEdgeTwin(ei) {\r\n        return this.edges[this.edges[ei].twin];\r\n    }\r\n    hasEdge(a, b) {\r\n        let nbs = this.getVertNeighbors(a);\r\n        return nbs.includes(b);\r\n    }\r\n    addVert(vector, normal) {\r\n        this.verts.push({ pos: vector, edge: -1, normal: normal, dead: false });\r\n        return this.verts.length - 1;\r\n    }\r\n    removeVert(a) {\r\n        throw \"TODO FIGURE OUT NULL & REMOVAL\";\r\n    }\r\n    addEdgeIfNew(a, b) {\r\n        if (!this.hasEdge(a, b)) {\r\n            // console.log(\"not there!\");\r\n            this.addEdge(a, b);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    addEdge(vi_1, vi_2) {\r\n        //             ei1\r\n        // / vi1 \\  ---------> / vi2 \\\r\n        // \\     / <---------  \\     /\r\n        //             ei2\r\n        let ei_1 = this.edges.length;\r\n        let ei_2 = ei_1 + 1;\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_2,\r\n            vert: vi_1,\r\n            dead: false,\r\n        });\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_1,\r\n            vert: vi_2,\r\n            dead: false,\r\n        });\r\n        // make sure the 'next' things are fixed, and more\r\n        this.addEdgeToDisk(vi_1, ei_1);\r\n        this.addEdgeToDisk(vi_2, ei_2);\r\n    }\r\n    deleteEdgeByIndex(id) {\r\n        // flag it as 'to be removed'\r\n        this.deleteEdge(this.getEdge(id));\r\n    }\r\n    deleteEdge(edge) {\r\n        // flag it as 'to be removed'\r\n        let twin = this.getEdge(edge.twin);\r\n        edge.dead = true;\r\n        twin.dead = true;\r\n        // remove all pointers\r\n        this.deleteEdgeFromDisk(edge);\r\n        this.deleteEdgeFromDisk(twin);\r\n    }\r\n    // SETTERS\r\n    getDiskPositions(ei) {\r\n        // returns edgeIndex before, edgeIndex after\r\n        let e = this.getEdge(ei);\r\n        let v = this.getVert(e.vert);\r\n        let twin = this.getEdgeTwin(ei);\r\n        let v_twin = this.verts[twin.vert];\r\n        let myVector = v.pos.subbed(v_twin.pos);\r\n        // get all vectors\r\n        let vectors = [];\r\n        vectors.push(myVector);\r\n        // get more vectors by getting all edges currently connected to vertex v\r\n        // if this Edge is already within the fan, filter it out, so this assessment can be correctly made\r\n        let edgesPotentiallyWithExistingEdge = this.getVertEdgeFan(e.vert);\r\n        let edges = [];\r\n        for (let i = 0; i < edgesPotentiallyWithExistingEdge.length; i++) {\r\n            let edge = edgesPotentiallyWithExistingEdge[i];\r\n            if (this.getEdgeIndex(edge) == ei) {\r\n                // console.log(\"edge is in the fan!\");\r\n            }\r\n            else {\r\n                edges.push(edge);\r\n            }\r\n        }\r\n        if (edges.length == 0) {\r\n            return [ei, ei];\r\n        }\r\n        if (edges.length == 1) {\r\n            let e = edges[0];\r\n            return [this.getEdgeIndex(e), this.getEdgeIndex(e)];\r\n        }\r\n        // console.log(\"edges\", edges);\r\n        for (let i = 0; i < edges.length; i++) {\r\n            let edge = edges[i];\r\n            let twin = this.getEdge(edge.twin);\r\n            let neighbor = this.verts[twin.vert];\r\n            let neighborVector = v.pos.subbed(neighbor.pos);\r\n            vectors.push(neighborVector);\r\n        }\r\n        // console.log(\"all vectors: \", vectors);\r\n        // order them by 'wheel'\r\n        let plane = _geo_plane__WEBPACK_IMPORTED_MODULE_1__.Plane.fromPN(v.pos, v.normal);\r\n        let ihat = plane.ihat;\r\n        let jhat = plane.jhat;\r\n        let order = _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3.calculateWheelOrder(vectors, ihat, jhat);\r\n        // console.log(\"order\", order);\r\n        // find index 0 in the ordering. that is the position of this new edge. get the edges before and after this edge\r\n        let i_before = -1;\r\n        let i_after = -1;\r\n        for (let a = 0; a < order.length; a++) {\r\n            let b = (a + 1) % order.length;\r\n            let c = (a + 2) % order.length;\r\n            if (order[b] == 0) {\r\n                i_before = order[a];\r\n                i_after = order[c];\r\n                break;\r\n            }\r\n        }\r\n        // pick. NOTE: IF CCW / CC OF GRAPH NEEDS TO BE CHANGED, CHANGE THIS ORDER, BUT USE WITH CAUTION\r\n        // minus one, since we have 1 vector more than the edge list\r\n        let e_before = edges[i_after - 1];\r\n        let e_after = edges[i_before - 1];\r\n        return [this.getEdgeIndex(e_before), this.getEdgeIndex(e_after)];\r\n    }\r\n    addEdgeToDisk(vi, ei) {\r\n        let v = this.getVert(vi);\r\n        let twin = this.getEdgeTwin(ei);\r\n        if (v.edge == -1) {\r\n            // set two pointers:\r\n            v.edge = ei; // I am the vertex's first edge\r\n            twin.next = ei; // that means my twin points back to me\r\n        }\r\n        else {\r\n            let [ei_before, ei_after] = this.getDiskPositions(ei);\r\n            let [e_before, e_after] = [this.getEdge(ei_before), this.getEdge(ei_after)];\r\n            // set two pointers:\r\n            this.getEdge(e_before.twin).next = ei;\r\n            twin.next = this.getEdgeIndex(e_after);\r\n        }\r\n    }\r\n    deleteEdgeFromDisk(edge) {\r\n        let ei = this.getEdgeIndex(edge);\r\n        // console.log(\"deleting...\", ei);\r\n        let vert = this.getVert(edge.vert);\r\n        // console.log(\"deleting from disk...\");\r\n        let [ei_before, ei_after] = this.getDiskPositions(ei);\r\n        if (ei_before == ei) {\r\n            vert.edge = -1;\r\n            return;\r\n        }\r\n        // let flower = this.getVertEdgeFan(edge.vert);\r\n        // flower.forEach((e) => {console.log(this.getEdgeIndex(e))});\r\n        let [e_before, e_after] = [this.getEdge(ei_before), this.getEdge(ei_after)];\r\n        // set one pointer\r\n        // console.log(\"this is edge\", ei);\r\n        // // console.log(\"before is\", ei_before);\r\n        // console.log(\"after is\", ei_after);\r\n        // console.log(\"before.twin.next is\", this.getEdge(e_before.twin).next);\r\n        // console.log(\"after.twin.next is\", this.getEdge(e_after.twin).next);\r\n        this.getEdge(e_before.twin).next = ei_after;\r\n        if (vert.edge == ei) {\r\n            vert.edge = ei_after;\r\n        }\r\n    }\r\n    // MISC\r\n    splitEdge(ai, bi, alpha) {\r\n        // get the edge\r\n        let edge = this.getEdgeBetween(ai, bi);\r\n        if (!edge)\r\n            throw new Error(`No Edge found between ${ai} and ${bi}`);\r\n        let twin = this.getEdge(edge.twin);\r\n        let a = this.getVert(ai);\r\n        let b = this.getVert(bi);\r\n        let v = _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3.fromLerp(a.pos, b.pos, alpha);\r\n        let n = _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3.fromLerp(a.normal, b.normal, alpha);\r\n        let ci = this.addVert(v, n);\r\n        let c = this.getVert(ci);\r\n        // change the edges\r\n        // if (ai == 0) {\r\n        // }\r\n        this.deleteEdge(edge);\r\n        this.addEdge(ai, ci);\r\n        this.addEdge(ci, bi);\r\n        return ci;\r\n    }\r\n    subdivide() {\r\n        // 1. get all edges\r\n        let edges = this.allEdgeVerts();\r\n        let faces = this.allVertLoopsAsInts();\r\n        // this maps old edges to new vertices\r\n        let deadEdgeMap = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable(); // this\r\n        // 2. split all edges, map\r\n        let count = edges.length / 2;\r\n        let middlePoints = new Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            let vai = edges[i * 2];\r\n            let vbi = edges[i * 2 + 1];\r\n            // let edgeI = this.getEdgeIndexBetween(vai, vbi)!;\r\n            // let edgeII = this.getEdgeIndexBetween(vbi, vai)!;\r\n            let vci = this.splitEdge(vai, vbi, 0.5);\r\n            middlePoints[i] = vci;\r\n            deadEdgeMap.set([vai, vbi], vci);\r\n            deadEdgeMap.set([vbi, vai], vci);\r\n        }\r\n        // 3. per old face: connect the dots\r\n        for (let i = 0; i < faces.length; i++) {\r\n            let face = faces[i];\r\n            // get all middle points\r\n            let middlePoints = new Array(face.length);\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                let via = face[j];\r\n                let vib = face[jNext];\r\n                // console.log(via, vib);\r\n                middlePoints[j] = deadEdgeMap.get([via, vib]);\r\n            }\r\n            // console.log(middlePoints);\r\n            // connect the dots\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                this.addEdge(middlePoints[j], middlePoints[jNext]);\r\n            }\r\n        }\r\n    }\r\n    subdivideQuad() {\r\n        // 1. get all edges\r\n        let edges = this.allEdgeVerts();\r\n        let faces = this.allVertLoopsAsInts();\r\n        // this maps old edges to new vertices\r\n        let deadEdgeMap = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable(); // this\r\n        // 2. split all edges, map\r\n        let count = edges.length / 2;\r\n        for (let i = 0; i < count; i++) {\r\n            let vai = edges[i * 2];\r\n            let vbi = edges[i * 2 + 1];\r\n            // let edgeI = this.getEdgeIndexBetween(vai, vbi)!;\r\n            // let edgeII = this.getEdgeIndexBetween(vbi, vai)!;\r\n            let vci = this.splitEdge(vai, vbi, 0.5);\r\n            deadEdgeMap.set([vai, vbi], vci);\r\n            deadEdgeMap.set([vbi, vai], vci);\r\n        }\r\n        // 3. per old face: connect the dots\r\n        for (let i = 0; i < faces.length; i++) {\r\n            let face = faces[i];\r\n            // get center point\r\n            let pos = _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3.zero();\r\n            for (let j = 0; j < face.length; j++) {\r\n                pos.add(this.getVertexPos(face[j]));\r\n            }\r\n            pos.scale(1 / face.length);\r\n            let norm = calcPlanarFaceNormal(face.map((v) => this.getVertexPos(v)));\r\n            let si = this.addVert(pos, norm);\r\n            // per middle point, connect the dots\r\n            for (let j = 0; j < face.length; j++) {\r\n                let jNext = (j + 1) % face.length;\r\n                let via = face[j];\r\n                let vib = face[jNext];\r\n                // console.log(via, vib);\r\n                let c = deadEdgeMap.get([via, vib]);\r\n                this.addEdge(si, c);\r\n            }\r\n        }\r\n    }\r\n    forEveryEdgeVerts(callback) {\r\n        let edges = this.allUniqueEdgeVerts();\r\n        let edgeCount = edges.length / 2;\r\n        for (let i = 0; i < edgeCount; i++) {\r\n            let a = this.getVert(edges[i * 2]);\r\n            let b = this.getVert(edges[i * 2 + 1]);\r\n            callback(a.pos, b.pos);\r\n        }\r\n    }\r\n}\r\nfunction calcPlanarFaceNormal(face) {\r\n    // ASSUMES : FACE = PLANAR & FACE = NOT SLIVER POLYGON (AREA > 0)\r\n    let count = face.length;\r\n    if (count < 3) {\r\n        throw \"cannot get face planar with 2 or less edges\";\r\n    }\r\n    // get the normal of a planar face\r\n    let normal = _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3.zero();\r\n    // two edges could be parallel, but there will be two edges in the face that are different.\r\n    let ihat = face[1].subbed(face[0]);\r\n    let jhat = face[2].subbed(face[1]);\r\n    for (let i = 1; i < count; i++) {\r\n        if (Math.abs(ihat.dot(jhat)) > _math_const__WEBPACK_IMPORTED_MODULE_2__.Const.TOLERANCE) {\r\n            return ihat.cross(jhat);\r\n        }\r\n        else {\r\n            // try again with next pair of\r\n            let i2 = (i + 1) % count;\r\n            let i3 = (i + 2) % count;\r\n            jhat = face[i3].subbed(face[i2]);\r\n        }\r\n    }\r\n    throw \"get planar face failed...\";\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/graph.ts\n");

/***/ }),

/***/ "./src/mesh/line-array.ts":
/*!********************************!*\
  !*** ./src/mesh/line-array.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineArray\": () => /* binding */ LineArray,\n/* harmony export */   \"getDefaultIndices\": () => /* binding */ getDefaultIndices\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    line-render-data.ts\r\n// author:  Jos Feenstra\r\n// purpose: represents an object which can be fed directly to a linerenderer.\r\n//          use it to not continuously have to calculate these aspects if the underlying object is unchanged.\r\n\r\n\r\n\r\n// represents a collection of multiple lines. These could form 1 polyline, but this is not a requirement\r\nclass LineArray {\r\n    constructor(verts, ids) {\r\n        this.verts = verts;\r\n        if (ids == undefined) {\r\n            this.links = getDefaultIndices(verts.count());\r\n        }\r\n        else {\r\n            this.links = ids;\r\n        }\r\n    }\r\n    // this assumes even vectices are 'from' points, and odd vertices are 'to' points\r\n    static fromLines(verts) {\r\n        let data = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(verts);\r\n        return new LineArray(data);\r\n    }\r\n    // get all lines from a mesh\r\n    static fromMesh(rend, uv = false) {\r\n        // 3 edges per face, 2 indices per edge\r\n        let mesh = rend.mesh;\r\n        let count = mesh.links.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < mesh.links.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = mesh.links.get(i, 0);\r\n            data[iData + 1] = mesh.links.get(i, 1);\r\n            data[iData + 2] = mesh.links.get(i, 1);\r\n            data[iData + 3] = mesh.links.get(i, 2);\r\n            data[iData + 4] = mesh.links.get(i, 2);\r\n            data[iData + 5] = mesh.links.get(i, 0);\r\n        }\r\n        if (uv) {\r\n            return new LineArray(rend.uvs, data);\r\n        }\r\n        else {\r\n            return new LineArray(mesh.verts, data);\r\n        }\r\n    }\r\n    // create lines as a grid centered at a plane\r\n    static fromGrid(plane, count, dis) {\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons\r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines from a plane\r\n    static fromPlane(plane) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINECOUNT;\r\n        let dis = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINEDISTANCE;\r\n        let disSmall = dis / 10;\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons\r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4 + 5 * 2);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // icon I  to show ihat\r\n        let iconLine1 = lines.count() - 10;\r\n        lines.setVector(iconLine1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, -disSmall, 0));\r\n        lines.setVector(iconLine1 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, disSmall, 0));\r\n        let iconLine2 = lines.count() - 8;\r\n        lines.setVector(iconLine2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, disSmall, 0));\r\n        lines.setVector(iconLine2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, -disSmall, 0));\r\n        // icon II to show jhat\r\n        let iconLine3 = lines.count() - 6;\r\n        lines.setVector(iconLine3, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, halfTotalSize + disSmall * 2.5, 0));\r\n        lines.setVector(iconLine3 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall * 4, 0));\r\n        let iconLine4 = lines.count() - 4;\r\n        lines.setVector(iconLine4, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall, 0));\r\n        lines.setVector(iconLine4 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-disSmall, halfTotalSize + disSmall * 4, 0));\r\n        // icon III to show khat / normal direction\r\n        let iconLine5 = lines.count() - 2;\r\n        lines.setVector(iconLine5, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        lines.setVector(iconLine5 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, dis));\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines representing a circle in 2d. use an optional matrix to\r\n    static fromCircle(c) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.CIRCLE_SEGMENTS;\r\n        // let count = 12;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            // radial fraction of a circle\r\n            let t = (i / count) * (Math.PI * 2);\r\n            verts.setVector(i, c.plane.pushToWorld(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(t) * c.radius, Math.sin(t) * c.radius, 0)));\r\n        }\r\n        return new LineArray(verts, getPairIndices(count));\r\n    }\r\n    // turn a spline into a polyline, and render it\r\n    static fromSpline() {\r\n        throw \"todo!\";\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(cube.getCorners());\r\n        return new LineArray(verts);\r\n    }\r\n    static fromJoin(lines) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let idsCount = 0;\r\n        let vertCount = 0;\r\n        for (let line of lines) {\r\n            idsCount += line.links.length;\r\n            vertCount += line.verts.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(vertCount);\r\n        let ids = new Uint16Array(idsCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let lineset of lines) {\r\n            for (let i = 0; i < lineset.verts.count(); i++) {\r\n                verts.setRow(accVerts + i, lineset.verts.getRow(i));\r\n            }\r\n            for (let i = 0; i < lineset.links.length; i++) {\r\n                ids[accFaces + i] = lineset.links[i] + accVerts;\r\n            }\r\n            accVerts += lineset.verts.count();\r\n            accFaces += lineset.links.length;\r\n        }\r\n        return new LineArray(verts, ids);\r\n    }\r\n}\r\n// just get an int sequence from 0 to length.\r\nfunction getDefaultIndices(count) {\r\n    let data = new Uint16Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i] = i;\r\n    }\r\n    return data;\r\n}\r\nfunction getPairIndices(count) {\r\n    // given count of 3 => return 0,1 | 1,2 | 2,0\r\n    let length = count * 2;\r\n    let data = new Uint16Array(length);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i * 2] = i;\r\n        data[i * 2 + 1] = (i + 1) % count;\r\n    }\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/line-array.ts\n");

/***/ }),

/***/ "./src/mesh/mesh.ts":
/*!**************************!*\
  !*** ./src/mesh/mesh.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mesh\": () => /* binding */ Mesh\n/* harmony export */ });\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graph */ \"./src/mesh/graph.ts\");\n// mesh.ts\r\n// Author: Jos Feenstra\r\n// Purpose:\r\n// a very pure idea of a mesh : Vertices + links between vertices.\r\n// Could be anything with these properties: lines, triangle-mesh, quads\r\n// idea: should normals be part of the Mesh?\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Mesh {\r\n    // CONSTRUCTORS\r\n    constructor(verts, links) {\r\n        this.verts = verts;\r\n        this.links = links;\r\n    }\r\n    static new(verts, links) {\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromLists(verts, faces) {\r\n        return new Mesh(_data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(verts), _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix.fromList(faces, 3));\r\n    }\r\n    static newEmpty(vertCount, linkCount, perLinkCount) {\r\n        return new Mesh(new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount), new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(linkCount, perLinkCount));\r\n    }\r\n    static newLines(positions, edges) {\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(positions);\r\n        let links = _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix.fromList(edges, 2);\r\n        return new Mesh(verts, links);\r\n    }\r\n    static zero() {\r\n        return new Mesh(new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(0), new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(0, 0));\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.links.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromRect(rect) {\r\n        let verts = rect.getCorners();\r\n        // we cant handle quads yet\r\n        let faces = [];\r\n        faces.push(...quadToTri(cubeFaces[0]));\r\n        let rend = new _render_mesh__WEBPACK_IMPORTED_MODULE_3__.Renderable(4, 0, 0, 2);\r\n        rend.mesh.verts.fillFromList(verts);\r\n        rend.mesh.links.setData(faces);\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        rend.setUvs(new Float32Array([0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]));\r\n        return rend;\r\n    }\r\n    static newQuad(corners) {\r\n        let faces = [];\r\n        for (let face of cubeFaces) {\r\n            faces.push(...quadToTri(face));\r\n        }\r\n        return this.fromLists(corners, faces);\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = cube.getCorners();\r\n        return Mesh.newQuad(verts);\r\n    }\r\n    static newIcosahedron(scale = 1) {\r\n        let graph = new _graph__WEBPACK_IMPORTED_MODULE_5__.Graph();\r\n        let a = scale;\r\n        let phi = (1 + Math.pow(5, 0.5)) / 2;\r\n        let b = a * phi;\r\n        let addVert = (v) => {\r\n            graph.addVert(v, v);\r\n        };\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-a, -b, 0));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(a, -b, 0));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-a, b, 0));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(a, b, 0));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, -a, -b));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, a, -b));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, -a, b));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, a, b));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-b, 0, -a));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-b, 0, a));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(b, 0, -a));\r\n        addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(b, 0, a));\r\n        // build edges\r\n        let addEdge = (a, b) => {\r\n            graph.addEdge(a, b);\r\n        };\r\n        for (let i = 0; i < 12; i += 4) {\r\n            addEdge(i + 0, i + 1);\r\n            addEdge(i + 2, i + 3);\r\n            let inext = (i + 4) % 12;\r\n            addEdge(i + 0, inext + 2);\r\n            addEdge(i + 0, inext + 0);\r\n            addEdge(i + 1, inext + 2);\r\n            addEdge(i + 1, inext + 0);\r\n            addEdge(i + 2, inext + 3);\r\n            addEdge(i + 2, inext + 1);\r\n            addEdge(i + 3, inext + 3);\r\n            addEdge(i + 3, inext + 1);\r\n        }\r\n        return this.fromGraph(graph);\r\n    }\r\n    static newSphere(center, radius, numRings, numPerRing) {\r\n        // verts\r\n        let vertCount = numRings * numPerRing + 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.scale(radius).add(center));\r\n        };\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 1));\r\n        for (let ring = 0; ring < numRings; ring++) {\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let alpha = (Math.PI * (ring + 1)) / (numRings + 1);\r\n                let beta = (2 * Math.PI * perRing) / numPerRing;\r\n                let x = Math.sin(alpha) * Math.cos(beta);\r\n                let y = Math.sin(alpha) * Math.sin(beta);\r\n                let z = Math.cos(alpha);\r\n                let index = 1 + ring * numPerRing + perRing;\r\n                setVert(index, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, y, z));\r\n            }\r\n        }\r\n        setVert(vertCount - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, -1));\r\n        // faces\r\n        let faceCount = numPerRing * numRings * 2;\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // faces top\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setFace(i, [0, i + 1, ((i + 1) % numPerRing) + 1]);\r\n        }\r\n        // faces middle\r\n        // we are at this cursor\r\n        // console.log(\"faces\", faceCount);\r\n        for (let ring = 0; ring < numRings - 1; ring++) {\r\n            let vertCursor = numPerRing * ring + 1;\r\n            let vertCursorBelow = vertCursor + numPerRing;\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let a = vertCursor + perRing;\r\n                let b = vertCursor + ((perRing + 1) % numPerRing);\r\n                let c = vertCursorBelow + perRing;\r\n                let d = vertCursorBelow + ((perRing + 1) % numPerRing);\r\n                let iFace = numPerRing + numPerRing * ring * 2 + perRing * 2;\r\n                // console.log(iFace);\r\n                setFace(iFace, [a, c, b]);\r\n                setFace(iFace + 1, [c, d, b]);\r\n            }\r\n        }\r\n        // faces bottom\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let iNext = (i + 1) % numPerRing;\r\n            let last = vertCount - 1;\r\n            let iFace = faceCount - numPerRing + i;\r\n            let zero = vertCount - numPerRing - 1;\r\n            let vertI = zero + i;\r\n            let vertINext = zero + iNext;\r\n            // console.log(iFace);\r\n            // console.log(\"face\", last, vertINext, vertI);\r\n            setFace(iFace, [last, vertINext, vertI]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static newCylinder(from, to, radius, numPerRing) {\r\n        let normal = to.subbed(from);\r\n        let numVerts = numPerRing * 2 + 2;\r\n        let numFaces = (numVerts - 2) * 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(numVerts);\r\n        // some dumb stuff\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector);\r\n        };\r\n        // planes to represent top & bottom\r\n        let planeFrom = _geo_plane__WEBPACK_IMPORTED_MODULE_4__.Plane.fromPN(from, normal);\r\n        // console.log(planeFrom);\r\n        let planeTo = _geo_plane__WEBPACK_IMPORTED_MODULE_4__.Plane.fromPN(to, normal);\r\n        // console.log(planeFrom);\r\n        // verts 'from ring\r\n        setVert(0, from);\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius);\r\n            v = planeFrom.matrix.multiplyVector(v);\r\n            setVert(i + 1, v);\r\n        }\r\n        // verts 'to' ring\r\n        let numVertsHalf = numVerts / 2;\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius);\r\n            v = planeTo.matrix.multiplyVector(v);\r\n            setVert(numVertsHalf + i, v);\r\n        }\r\n        setVert(numVerts - 1, to);\r\n        // start making links\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set faces\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = 1 + i;\r\n            let c = 1 + ((i + 1) % numPerRing);\r\n            let d = numVerts - 1;\r\n            let e = numVertsHalf + i;\r\n            let f = numVertsHalf + ((i + 1) % numPerRing);\r\n            setFace(i * 4, [a, c, b]);\r\n            setFace(i * 4 + 1, [b, c, e]);\r\n            setFace(i * 4 + 2, [c, f, e]);\r\n            setFace(i * 4 + 3, [d, e, f]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static newCone(center, radius, height, numPerRing) {\r\n        let numVerts = numPerRing + 2;\r\n        let numFaces = numPerRing * 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(numVerts);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.add(center));\r\n        };\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set verts\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setVert(i + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos((Math.PI * 2 * i) / numPerRing), Math.sin((Math.PI * 2 * i) / numPerRing), 0).scale(radius));\r\n        }\r\n        setVert(numVerts - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, height));\r\n        // set faces\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = numVerts - 1;\r\n            let c = 1 + i;\r\n            let d = 1 + ((i + 1) % numPerRing);\r\n            setFace(i * 2, [a, d, c]);\r\n            setFace(i * 2 + 1, [c, d, b]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromGraph(graph) {\r\n        // NOTE : doesnt really work if the loops are not of size 3.\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(graph.allVertPositions());\r\n        let loops = graph.allVertLoopsAsInts();\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(loops.length, 3);\r\n        loops.forEach((loop, i) => {\r\n            if (loop.length == 3) {\r\n                links.setRow(i, loop);\r\n            }\r\n            else {\r\n                console.log(\"cant convert loop\");\r\n            }\r\n        });\r\n        return Mesh.new(verts, links);\r\n    }\r\n    // CONVERTERS\r\n    toRenderable() {\r\n        return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.Renderable.fromMesh(this);\r\n    }\r\n    toGraph() {\r\n        return _graph__WEBPACK_IMPORTED_MODULE_5__.Graph.fromMesh(this);\r\n    }\r\n    // GETTERS\r\n    getType() {\r\n        if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Points) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Points;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Lines) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Lines;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Triangles) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Triangles;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Quads) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Quads;\r\n        }\r\n        else {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Invalid;\r\n        }\r\n    }\r\n    getLinkVerts(f) {\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.links._width);\r\n        this.links.getRow(f).forEach((v, i) => {\r\n            verts.setVector(i, this.verts.getVector(v));\r\n        });\r\n        return verts;\r\n    }\r\n    // MISC\r\n    calculateFaceNormals() {\r\n        let norms = [];\r\n        if (this.getType() != _render_mesh__WEBPACK_IMPORTED_MODULE_3__.MeshType.Triangles) {\r\n            console.error(\"can only calculate normals from triangular meshes\");\r\n            return norms;\r\n        }\r\n        let faceCount = this.links.count();\r\n        for (let i = 0; i < faceCount; i++) {\r\n            let verts = this.getLinkVerts(i).toList();\r\n            let normal = verts[1].subbed(verts[0]).cross(verts[2].subbed(verts[0])).normalize();\r\n            norms.push(normal);\r\n        }\r\n        return norms;\r\n    }\r\n    calculateVertexNormals() {\r\n        let faceCount = this.links.count();\r\n        let faceNormals = this.calculateFaceNormals();\r\n        // stack all face normals per vertex\r\n        let array = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.verts.count());\r\n        for (let i = 0; i < faceCount; i++) {\r\n            let normal = faceNormals[i];\r\n            this.links.getRow(i).forEach((vertexIndex) => {\r\n                let v = array.getVector(vertexIndex);\r\n                array.setVector(vertexIndex, v.add(normal));\r\n            });\r\n        }\r\n        // normalize all\r\n        let normals = array.toList();\r\n        for (let i = 0; i < normals.length; i++) {\r\n            normals[i].normalize();\r\n        }\r\n        return normals;\r\n    }\r\n}\r\n// ================ Help ==================\r\n// 0 ------- 1\r\n// | \\     / |\r\n// |  4---5  |\r\n// |  |   |  |\r\n// |  6---7  |\r\n// | /     \\ |\r\n// 2 ------- 3\r\nconst cubeFaces = [\r\n    [0, 1, 3, 2],\r\n    [4, 0, 2, 6],\r\n    [1, 0, 4, 5],\r\n    [1, 5, 7, 3],\r\n    [2, 3, 7, 6],\r\n    [5, 4, 6, 7],\r\n];\r\nfunction quadToTri(abcd) {\r\n    return [abcd[0], abcd[2], abcd[1], abcd[0], abcd[3], abcd[2]];\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/mesh.ts\n");

/***/ }),

/***/ "./src/mesh/render-mesh.ts":
/*!*********************************!*\
  !*** ./src/mesh/render-mesh.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshType\": () => /* binding */ MeshType,\n/* harmony export */   \"NormalKind\": () => /* binding */ NormalKind,\n/* harmony export */   \"Renderable\": () => /* binding */ Renderable,\n/* harmony export */   \"meshFromObj\": () => /* binding */ meshFromObj\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mesh */ \"./src/mesh/mesh.ts\");\n// Name: render-mesh.ts\r\n// Author: Jos Feenstra\r\n// Purpose:\r\n// a mesh representation with the sole purpose of to be renderer.\r\n// - fixed length attributes\r\n// - can represent:\r\n//   - pointcloud (links = null)\r\n//   - graph (links.width = 2)\r\n//   - triangles (links.width = 3)\r\n//   - quads (links.width = 4. will need to be converted to triangles)\r\n\r\n\r\nvar MeshType;\r\n(function (MeshType) {\r\n    MeshType[MeshType[\"Invalid\"] = 0] = \"Invalid\";\r\n    MeshType[MeshType[\"Points\"] = 1] = \"Points\";\r\n    MeshType[MeshType[\"Lines\"] = 2] = \"Lines\";\r\n    MeshType[MeshType[\"Triangles\"] = 3] = \"Triangles\";\r\n    MeshType[MeshType[\"Quads\"] = 4] = \"Quads\";\r\n})(MeshType || (MeshType = {}));\r\nvar NormalKind;\r\n(function (NormalKind) {\r\n    NormalKind[NormalKind[\"None\"] = 0] = \"None\";\r\n    NormalKind[NormalKind[\"Vertex\"] = 1] = \"Vertex\";\r\n    NormalKind[NormalKind[\"Face\"] = 2] = \"Face\";\r\n    NormalKind[NormalKind[\"MultiVertex\"] = 3] = \"MultiVertex\";\r\n})(NormalKind || (NormalKind = {}));\r\nclass Renderable {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        this._normKind = NormalKind.None;\r\n        // render speed\r\n        // shader\r\n        this.color = [1, 1, 1, 1];\r\n        let perFaceCount = 3;\r\n        this.mesh = _mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh.newEmpty(vertCount, faceCount, perFaceCount);\r\n        this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(normCount);\r\n        this.uvs = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector2Array(uvCount);\r\n        this.ambi = new Float32Array(vertCount);\r\n        this.texture = texture;\r\n    }\r\n    static new(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        return new Renderable(vertCount, normCount, uvCount, faceCount, texture);\r\n    }\r\n    static fromMesh(mesh) {\r\n        let r = new Renderable(mesh.verts.count(), 0, 0, mesh.links.count());\r\n        r.mesh.verts.data = mesh.verts.data;\r\n        r.mesh.links.data = mesh.links.data;\r\n        return r;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the\r\n        // Array class.\r\n        let r = new Renderable(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        r.mesh.verts.fillWith(verts);\r\n        r.mesh.links.fillWith(faces);\r\n        r.norms.fillWith(norms);\r\n        r.uvs.fillWith(uvs);\r\n        return r;\r\n    }\r\n    static fromGraph(graph) {\r\n        let mesh = graph.toMesh();\r\n        let r = Renderable.fromMesh(mesh);\r\n        r.norms = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(graph.allNorms());\r\n        r._normKind = NormalKind.Vertex; // fix this!!\r\n        return r;\r\n    }\r\n    // geometry trait\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.mesh.verts.count(); i++) {\r\n            let v = this.mesh.verts.getVector(i);\r\n            let n = this.norms.getVector(i);\r\n            this.mesh.verts.setVector(i, matrix.multiplyVector(v));\r\n            this.norms.setVector(i, matrix.multiplyVector(n)); // TODO, EXTRACT ONLY ROTATION PART FROM THE MATRIX\r\n        }\r\n    }\r\n    // getters & selectors\r\n    // VERY POORLY OPTIMIZED\r\n    getAdjacentFaces(v) {\r\n        let faces = [];\r\n        let count = this.mesh.links.count();\r\n        for (let i = 0; i < count; i++) {\r\n            if (this.mesh.links.getRow(i).includes(v)) {\r\n                faces.push(i);\r\n            }\r\n        }\r\n        return faces;\r\n    }\r\n    getFaceVertices(f) {\r\n        return this.mesh.getLinkVerts(f);\r\n    }\r\n    getType() {\r\n        return this.mesh.getType();\r\n    }\r\n    getNormalType() {\r\n        return this._normKind;\r\n    }\r\n    // setters\r\n    setTexture(texture) {\r\n        this.texture = texture;\r\n        // recalculate things if needed\r\n    }\r\n    setUvs(uvs) {\r\n        if (uvs instanceof Float32Array) {\r\n            this.uvs.data = uvs;\r\n        }\r\n        else {\r\n            this.uvs = uvs;\r\n        }\r\n        // recalculate if needed\r\n    }\r\n    // convert\r\n    exportToObj(path) {\r\n        throw \"todo\";\r\n    }\r\n    // ------ normals ------\r\n    // set 1 normal per face\r\n    calculateFaceNormals() {\r\n        if (this.getType() != MeshType.Triangles) {\r\n            console.error(\"can only calculate normals from triangular meshes\");\r\n            this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(0);\r\n            return;\r\n        }\r\n        let norms = this.mesh.calculateFaceNormals();\r\n        this.norms = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(norms);\r\n        this._normKind = NormalKind.Face;\r\n    }\r\n    calculateVertexNormals() {\r\n        let norms = this.mesh.calculateVertexNormals();\r\n        this.norms = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(norms);\r\n        this._normKind = NormalKind.Vertex;\r\n    }\r\n    calculateMultiVertexNormals() {\r\n        // set type\r\n        this._normKind = NormalKind.MultiVertex;\r\n        // calculate\r\n        this.calculateFaceNormals();\r\n        let vertNormals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.mesh.verts.count());\r\n        this.mesh.verts.forEach((v, i) => {\r\n            let adjFaces = this.getAdjacentFaces(i);\r\n            vertNormals.setVector(i, this.norms.take(adjFaces).average());\r\n        });\r\n        this.norms = vertNormals;\r\n    }\r\n}\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how\r\n    // many vertices or faces well get.\r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float\r\n    let faces = []; // 9 long ints, u16's should suffice.\r\n    // note : this is very inefficient, but it'll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === \"\" || line.startsWith(\"#\")) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case \"v\":\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \"vn\":\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \"vt\":\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \"f\":\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn(\"unhandled keyword:\", keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    // console.log(\"number of vertices: \" + verts.length / 3);\r\n    // console.log(\"number of faces: \" + faces.length / 3);\r\n    // console.log(\"number of uvs: \" + uvs.length / 2);\r\n    // console.log(\"number of norms: \" + norms.length / 3);\r\n    let mesh = Renderable.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face.\r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split(\"/\");\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw \"invalid face found when processing\";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/render-mesh.ts\n");

/***/ }),

/***/ "./src/mesh/topo-mesh.ts":
/*!*******************************!*\
  !*** ./src/mesh/topo-mesh.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TopoMesh\": () => /* binding */ TopoMesh\n/* harmony export */ });\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _geo_triangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geo/triangle */ \"./src/geo/triangle.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n// a mesh with topological information\r\nclass TopoMesh extends _render_mesh__WEBPACK_IMPORTED_MODULE_4__.Renderable {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__.IntMatrix(this.mesh.links.count(), 3);\r\n    }\r\n    static copyFromRenderable(rend) {\r\n        let topoMesh = new TopoMesh(rend.mesh.verts.count(), rend.norms.count(), rend.uvs.count(), rend.mesh.links.count());\r\n        topoMesh.mesh.verts = rend.mesh.verts.clone();\r\n        topoMesh.norms = rend.norms.clone();\r\n        topoMesh.uvs = rend.uvs.clone();\r\n        topoMesh.mesh.links = rend.mesh.links.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        // this method fills this.neighborMap after data is loaded\r\n        //\r\n        let edges = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        let pairs = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        // 1 | per triangle\r\n        this.mesh.links.forEachRow((f, faceIndex) => {\r\n            let faceEdges = [\r\n                [f[0], f[1]],\r\n                [f[1], f[2]],\r\n                [f[2], f[0]],\r\n            ];\r\n            faceEdges.forEach((e) => {\r\n                // if (4, 1), orientation is True | if (1, 4), orientation is False\r\n                let orientation = e[0] > e[1];\r\n                // use this min max construction to only store one edge per triangle pair\r\n                // let edge: [number, number] = e.sort();\r\n                let edge = new Int32Array([Math.min(...e), Math.max(...e)]);\r\n                // console.log(edge);\r\n                if (!edges.has(edge)) {\r\n                    // orientation, first tr ID, second tr ID\r\n                    edges.set(edge, [orientation, faceIndex, -1]);\r\n                }\r\n                else {\r\n                    // an edge match is made!\r\n                    // console.log(\"matched!\");\r\n                    let other = edges.get(edge);\r\n                    let nbOrientation = other[0];\r\n                    let nbIndex = other[1];\r\n                    other[2] = faceIndex;\r\n                    edges.set(edge, other); // edge is put away again, if an edge map is ever needed.\r\n                    // assign neighbours\r\n                    this.setNb(faceIndex, edge, nbIndex);\r\n                    this.setNb(nbIndex, edge, faceIndex);\r\n                    // use this info to fill self.pairs\r\n                    // if orientation != other orientation, edge is 'good' -> False\r\n                    // else -> True, one of the neighbour triangles needs to be flipped\r\n                    let pair = [nbIndex, faceIndex];\r\n                    pair.sort();\r\n                    // pair = (Math.min(...pair), Math.max(...pair))\r\n                    if (orientation != nbOrientation)\r\n                        pairs.set(pair, false);\r\n                    else\r\n                        pairs.set(pair, true);\r\n                }\r\n            });\r\n        });\r\n        // Done. Give feedback\r\n        let count = 0;\r\n        // for pair in pairs.items():\r\n        //     if not pair: count +=1;\r\n        console.log(\"number of 'wrong' face neighbours: \", count);\r\n        return;\r\n    }\r\n    /**\r\n     * Get the triangle based on a UV point somewhere on the mesh.\r\n     * Returns -1 if the point is not on the mesh TODO OR IF THE PATH HAS HOLES IN IT TODO FIX THIS!\r\n     * @param  {Vector2} point\r\n     * @returns triangleIndex, or -1 if failure\r\n     */\r\n    walkUV(point) {\r\n        // start where we last stopped\r\n        let faceIndex = this.lastTouched;\r\n        // make sure we never take more steps than triangles in the triangulation.\r\n        // this would mean something went wrong\r\n        let count = this.mesh.links.count();\r\n        for (let _ = 0; _ < count; _++) {\r\n            // i dont know how, but if we accidentally landed outside of the mesh\r\n            if (faceIndex == -1) {\r\n                return -1;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                let j = (i + 1) % 3;\r\n                let face = this.mesh.links.getRow(faceIndex);\r\n                let edge = [face[i], face[j]];\r\n                let b = this.uvs.getVector(edge[0]);\r\n                let c = this.uvs.getVector(edge[1]);\r\n                let sign = point.sign(b, c);\r\n                if (sign < 0) {\r\n                    faceIndex = this.getNb(faceIndex, edge);\r\n                    // if its ouside, return -1\r\n                    if (faceIndex == -1)\r\n                        return -1;\r\n                    // else: go there immidiately\r\n                    this.lastTouched = faceIndex;\r\n                    break;\r\n                }\r\n                // if this ran 3 times, the point must be within the triangle\r\n                if (i == 2)\r\n                    return faceIndex;\r\n            }\r\n        }\r\n        // something went wrong\r\n        return -1;\r\n    }\r\n    // find the faces closest to the point\r\n    // -1 if the mesh does not contain triangles\r\n    closestFaces(point) {\r\n        let closestVertexId = this.mesh.verts.closestId(point);\r\n        // get all face ids containing closestVertex, along with their centers\r\n        let closestFaces = [];\r\n        //let centers: Vector3[] = []\r\n        this.mesh.links.forEachRow((tr, i) => {\r\n            if (tr.includes(closestVertexId)) {\r\n                closestFaces.push(i);\r\n                //let center = Vector3Array.fromList(this.getFacePoints(i, false)).average();\r\n                //centers.push(center);\r\n            }\r\n        });\r\n        // select the triangle with the closest baricenter\r\n        return closestFaces;\r\n    }\r\n    elevate(p) {\r\n        // 'elevate' a point in UV space to vertex space using a barycentric remap\r\n        // figure out where this point is located on the mesh\r\n        let face = this.walkUV(p);\r\n        if (face == -1) {\r\n            console.warn(\"got a point not on triangle...\");\r\n            return new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0);\r\n        }\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr2.toBarycentric(p);\r\n        return tr3.fromBarycentric(bari);\r\n    }\r\n    closestFace(p) {\r\n        // NOTE this doesnt really work all that well...\r\n        let faceIds = this.closestFaces(p);\r\n        let closestPoints = new _data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector3Array(faceIds.length);\r\n        faceIds.forEach((id, i) => {\r\n            let tr = this.getTriangle3(id);\r\n            let cp = tr.closestPoint(p);\r\n            closestPoints.setVector(i, cp);\r\n        });\r\n        // find the closest closest point\r\n        let id = closestPoints.closestId(p);\r\n        return faceIds[id];\r\n    }\r\n    // 'flatten' a point in vertex space to uv space using a barycentric remap\r\n    // NOTE : this is not exactly a 'project to closest triangle', something like that wouldnt always work\r\n    flatten(p, face) {\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr3.toBarycentric(p);\r\n        return tr2.fromBarycentric(bari);\r\n    }\r\n    // combo\r\n    flattenClosestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        return this.flatten(p, face);\r\n    }\r\n    closestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        let triangle = this.getTriangle3(face);\r\n        let bari = triangle.toBarycentric(p);\r\n        return triangle.fromBarycentric(bari);\r\n    }\r\n    getTriangle2(id) {\r\n        let p = this.getFacePoints(id, true);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle2(p[0], p[1], p[2]);\r\n    }\r\n    getTriangle3(id) {\r\n        let p = this.getFacePoints(id, false);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle3(p[0], p[1], p[2]);\r\n    }\r\n    setNb(faceIndex, commonEdge, nbIndex) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.mesh.links.get(faceIndex, j))) {\r\n                this.neighborMap.set(faceIndex, j, nbIndex);\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.mesh.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"these are not actually neighbors!\";\r\n    }\r\n    getNb(faceIndex, commonEdge) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.mesh.links.get(faceIndex, j))) {\r\n                return this.neighborMap.get(faceIndex, j);\r\n            }\r\n        }\r\n        console.log(this.mesh.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"common edge does not match triangle index!\";\r\n    }\r\n    getFacePoints(tr, uv) {\r\n        let pointIds = this.mesh.links.getRow(tr);\r\n        if (uv) {\r\n            return [this.uvs.getVector(pointIds[0]), this.uvs.getVector(pointIds[1]), this.uvs.getVector(pointIds[2])];\r\n        }\r\n        else {\r\n            return [\r\n                this.mesh.verts.getVector(pointIds[0]),\r\n                this.mesh.verts.getVector(pointIds[1]),\r\n                this.mesh.verts.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/topo-mesh.ts\n");

/***/ }),

/***/ "./src/render/camera.ts":
/*!******************************!*\
  !*** ./src/render/camera.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Camera\": () => /* binding */ Camera\n/* harmony export */ });\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_ray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/ray */ \"./src/math/ray.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding\r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1, canMove = false) {\r\n        this.angleAlpha = 0; // rotation x\r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2.zero();\r\n        // camera matrix properties\r\n        this.fov = (20 * Math.PI) / 100;\r\n        this.zFar = 10000;\r\n        this.zNear = 0.1;\r\n        // other consts\r\n        this.speed = 1;\r\n        this.worldPlane = _geo_plane__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.canMove = canMove;\r\n        this.pos = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -z_offset);\r\n        this.updateMatrices(canvas);\r\n    }\r\n    new(canvas, zOffset = 1, canMove = false) {\r\n        return new Camera(canvas, zOffset, canMove);\r\n    }\r\n    update(state) {\r\n        this.updateControls(state);\r\n        this.updateMatrices(state.canvas);\r\n        this.updateClick(state);\r\n        if (state.IsKeyPressed(\"p\")) {\r\n            console.log(this.pos);\r\n            console.log(this.offset);\r\n            console.log(\"speed is now: \" + this.speed);\r\n        }\r\n    }\r\n    updateMatrices(canvas) {\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(canvas);\r\n        this.totalMatrix = this.worldMatrix.multiplied(this.projectMatrix);\r\n    }\r\n    lookat(position, target) {\r\n        // set matrices to the thing\r\n        let matrix = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newLookAt(position, target, this.worldPlane.khat);\r\n    }\r\n    updateClick(state) {\r\n        // todo\r\n    }\r\n    updateControls(state) {\r\n        let deltaScroll = state.scrollValue * 1.2;\r\n        this.offset.z = Math.min(-0.001, this.z_offset - deltaScroll);\r\n        if (state.IsKeyPressed(\"Shift\")) {\r\n            this.speed *= 2;\r\n        }\r\n        if (state.IsKeyPressed(\"Control\")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n        }\r\n        // deal with mouse\r\n        let prevPos = this.mousePos.clone();\r\n        this.mousePos = state.mousePos.clone();\r\n        let delta = prevPos.clone().sub(this.mousePos);\r\n        this.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        if (state.mouseRightDown) {\r\n            this.angleAlpha = _math_math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.angleAlpha + delta.y * 0.01, 0, Math.PI);\r\n            this.angleBeta += delta.x * -0.01;\r\n        }\r\n        function relativeUnitY(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitY());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitX());\r\n        }\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n        if (state.IsKeyDown(\"s\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"w\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"a\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"d\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"q\"))\r\n            this.pos.z += 0.01 * this.speed;\r\n        if (state.IsKeyDown(\"e\"))\r\n            this.pos.z -= 0.01 * this.speed;\r\n    }\r\n    getCameraPoint() {\r\n        return this.worldMatrix.inverse().multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n    }\r\n    getMouseWorldRay(canvasWidth, canvasHeight, useMouse = true) {\r\n        // get a ray from origin through mousepos\r\n        // mouse unit screen position:\r\n        //       -------------- -0.5\r\n        //       |            |\r\n        //       |      .(0,0)|\r\n        //       |            |\r\n        //       -------------- 0.5\r\n        //     -0.72        0.72\r\n        //    (0.72 = 0.5 * aspect)\r\n        //\r\n        let size = 0.5; // size indicator of the fustrum\r\n        let mp = this.mousePos;\r\n        let aspect = canvasWidth / canvasHeight;\r\n        let mouseUnitX = (-size + mp.x / canvasWidth) * aspect;\r\n        let mouseUnitY = -size + mp.y / canvasHeight;\r\n        let f = size / Math.tan(this.fov / 2); // focal length\r\n        let invWorld = this.worldMatrix.inverse();\r\n        let origin = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n        // TODO instead of doing this, just extract the x, y, and z columns of invWorld\r\n        let iDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 0, 0));\r\n        let jDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 1, 0));\r\n        let kDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -1));\r\n        let ihat = iDestiny.sub(origin).normalize();\r\n        let jhat = jDestiny.sub(origin).normalize();\r\n        let khat = kDestiny.sub(origin).normalize();\r\n        // pardon this insanely ugly statement\r\n        let screenPoint = useMouse\r\n            ? origin\r\n                .added(khat.scaled(f))\r\n                .add(ihat.scaled(mouseUnitX))\r\n                .add(jhat.scaled(-mouseUnitY))\r\n            : origin.added(khat.scaled(f));\r\n        return _math_ray__WEBPACK_IMPORTED_MODULE_3__.Ray.fromPoints(origin, screenPoint);\r\n    }\r\n    getWorldMatrix() {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        // translate so z means 'up'\r\n        let yzFlip = new _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n        // translated to fit screen\r\n        let position = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newXRotation(angleA);\r\n        let z_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angleB);\r\n        let rotation = z_rotation.multiply(x_rotation);\r\n        // let transform = mOffset.multiply(rotation).multiply(position);\r\n        let transform = position.multiply(rotation).multiply(mOffset);\r\n        return transform;\r\n    }\r\n    getProjectionMatrix(canvas) {\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // let z_plane = -1. / Math.tan(pi / 8.);\r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newPerspective(this.fov, aspect, this.zNear, this.zFar);\r\n        return projection;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/camera.ts\n");

/***/ }),

/***/ "./src/render/renderer.ts":
/*!********************************!*\
  !*** ./src/render/renderer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DrawSpeed\": () => /* binding */ DrawSpeed,\n/* harmony export */   \"Renderer\": () => /* binding */ Renderer\n/* harmony export */ });\n// webgl-helpers.ts\r\n//\r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this\r\n// import { Scene } from \"./scene\";\r\nvar nextTextureId = 0;\r\nvar rendercallsperframe = 0;\r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed[\"StaticDraw\"] = 0] = \"StaticDraw\";\r\n    DrawSpeed[DrawSpeed[\"DynamicDraw\"] = 1] = \"DynamicDraw\";\r\n})(DrawSpeed || (DrawSpeed = {}));\r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = Renderer.createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    buffer(...vars) { }\r\n    render(...vars) { }\r\n    static getNextTextureID() {\r\n        let id = nextTextureId;\r\n        nextTextureId += 1;\r\n        return id;\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth || gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n    static initWebglContext(canvas) {\r\n        let possiblyGl = canvas.getContext(\"webgl\");\r\n        if (possiblyGl == undefined) {\r\n            console.log(\"webgl unavailable...\");\r\n        }\r\n        let gl = possiblyGl;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clearDepth(1);\r\n        return gl;\r\n    }\r\n    static compileShader(gl, shaderSource, shaderType) {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!success) {\r\n            throw \"could not compile shader:\" + shaderSource + gl.getShaderInfoLog(shader);\r\n        }\r\n        return shader;\r\n    }\r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!success) {\r\n            throw \"program failed to link:\" + gl.getProgramInfoLog(program);\r\n        }\r\n        return program;\r\n    }\r\n    static createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n        let vertexShader = Renderer.compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n        let fragmentShader = Renderer.compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n        return Renderer.createProgram(gl, vertexShader, fragmentShader);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/renderer.ts\n");

/***/ }),

/***/ "./src/renderers/billboard-renderer.ts":
/*!*********************************************!*\
  !*** ./src/renderers/billboard-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BillBoardRenderer\": () => /* binding */ BillBoardRenderer,\n/* harmony export */   \"TextRenderer\": () => /* binding */ TextRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// name:    billboard-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: Renderer images as billboards.\r\n\r\n// mooi font om te gebruiken\r\n// https://datagoblin.itch.io/monogram\r\nclass BillBoardRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    // TODO\r\n    // accepts a texture & dots\r\n    constructor(gl) {\r\n        let vs = \"\";\r\n        let fs = \"\";\r\n        super(gl, vs, fs);\r\n    }\r\n    set(texture, dots, textureDots, speed) {\r\n        // TODO\r\n    }\r\n    render() {\r\n        // TODO\r\n    }\r\n    setAndRender(texture, dots, textureDots, speed) {\r\n        this.set(texture, dots, textureDots, speed);\r\n        this.render();\r\n    }\r\n}\r\nclass TextRenderer {\r\n    // todo horizontal justification\r\n    // todo vertical justification\r\n    constructor(gl) {\r\n        this.br = new BillBoardRenderer(gl);\r\n    }\r\n    set(strings, locations) {\r\n        if (strings.length != locations.count()) {\r\n            console.warn(\"couldnt set TextRenderer: strings not equal to locations...\");\r\n        }\r\n        let length = strings.length;\r\n        // TODO: set a whole bunch of stuff\r\n    }\r\n    render() { }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXJlcnMvYmlsbGJvYXJkLXJlbmRlcmVyLnRzP2U4YjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQWlDO0FBQ2pDLHdCQUF3QjtBQUN4QiwwQ0FBMEM7QUFJZTtBQUV6RCw0QkFBNEI7QUFDNUIsc0NBQXNDO0FBRS9CLE1BQU0saUJBQWtCLFNBQVEsc0RBQVE7SUFDM0MsT0FBTztJQUVQLDJCQUEyQjtJQUUzQixZQUFZLEVBQXlCO1FBQ2pDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNaLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVaLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBa0IsRUFBRSxJQUFrQixFQUFFLFdBQXlCLEVBQUUsS0FBZ0I7UUFDbkYsT0FBTztJQUNYLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTztJQUNYLENBQUM7SUFFRCxZQUFZLENBQ1IsT0FBa0IsRUFDbEIsSUFBa0IsRUFDbEIsV0FBeUIsRUFDekIsS0FBZ0I7UUFFaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBRU0sTUFBTSxZQUFZO0lBUXJCLGdDQUFnQztJQUNoQyw4QkFBOEI7SUFFOUIsWUFBWSxFQUF5QjtRQUNqQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUFpQixFQUFFLFNBQXVCO1FBQzFDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUU1QixtQ0FBbUM7SUFDdkMsQ0FBQztJQUVELE1BQU0sS0FBSSxDQUFDO0NBQ2QiLCJmaWxlIjoiLi9zcmMvcmVuZGVyZXJzL2JpbGxib2FyZC1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIGJpbGxib2FyZC1yZW5kZXJlci50c1xuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBSZW5kZXJlciBpbWFnZXMgYXMgYmlsbGJvYXJkcy5cblxuaW1wb3J0IHsgVmVjdG9yMkFycmF5LCBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcbmltcG9ydCB7IEdlb25JbWFnZSB9IGZyb20gXCIuLi9pbWcvSW1hZ2VcIjtcbmltcG9ydCB7IERyYXdTcGVlZCwgUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3JlbmRlcmVyXCI7XG5cbi8vIG1vb2kgZm9udCBvbSB0ZSBnZWJydWlrZW5cbi8vIGh0dHBzOi8vZGF0YWdvYmxpbi5pdGNoLmlvL21vbm9ncmFtXG5cbmV4cG9ydCBjbGFzcyBCaWxsQm9hcmRSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgICAvLyBUT0RPXG5cbiAgICAvLyBhY2NlcHRzIGEgdGV4dHVyZSAmIGRvdHNcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgbGV0IHZzID0gXCJcIjtcbiAgICAgICAgbGV0IGZzID0gXCJcIjtcblxuICAgICAgICBzdXBlcihnbCwgdnMsIGZzKTtcbiAgICB9XG5cbiAgICBzZXQodGV4dHVyZTogR2VvbkltYWdlLCBkb3RzOiBWZWN0b3IzQXJyYXksIHRleHR1cmVEb3RzOiBWZWN0b3IyQXJyYXksIHNwZWVkOiBEcmF3U3BlZWQpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgIH1cblxuICAgIHNldEFuZFJlbmRlcihcbiAgICAgICAgdGV4dHVyZTogR2VvbkltYWdlLFxuICAgICAgICBkb3RzOiBWZWN0b3IzQXJyYXksXG4gICAgICAgIHRleHR1cmVEb3RzOiBWZWN0b3IyQXJyYXksXG4gICAgICAgIHNwZWVkOiBEcmF3U3BlZWQsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc2V0KHRleHR1cmUsIGRvdHMsIHRleHR1cmVEb3RzLCBzcGVlZCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dFJlbmRlcmVyIHtcbiAgICAvLyBUT0RPXG5cbiAgICAvLyB1c2UgdGhlIGJpbGxib2FyZCByZW5kZXJlciB0byByZW5kZXIgc2VyaWVzIG9mIGFzY2lpIGNoYXJhY3RlcnMsXG4gICAgLy8gYnkgdXNpbmcgc3RhbmRhcmQgcG9zaXRpb25zIG9mIGNlcnRhaW4gZm9udCBpbWFnZXMuXG5cbiAgICBicjogQmlsbEJvYXJkUmVuZGVyZXI7XG5cbiAgICAvLyB0b2RvIGhvcml6b250YWwganVzdGlmaWNhdGlvblxuICAgIC8vIHRvZG8gdmVydGljYWwganVzdGlmaWNhdGlvblxuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICB0aGlzLmJyID0gbmV3IEJpbGxCb2FyZFJlbmRlcmVyKGdsKTtcbiAgICB9XG5cbiAgICBzZXQoc3RyaW5nczogc3RyaW5nW10sIGxvY2F0aW9uczogVmVjdG9yM0FycmF5KSB7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPSBsb2NhdGlvbnMuY291bnQoKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiY291bGRudCBzZXQgVGV4dFJlbmRlcmVyOiBzdHJpbmdzIG5vdCBlcXVhbCB0byBsb2NhdGlvbnMuLi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmluZ3MubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRPRE86IHNldCBhIHdob2xlIGJ1bmNoIG9mIHN0dWZmXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge31cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/renderers/billboard-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/dot-renderer2.ts":
/*!****************************************!*\
  !*** ./src/renderers/dot-renderer2.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotRenderer2\": () => /* binding */ DotRenderer2\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\nclass DotRenderer2 extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, size = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        attribute vec2 a_position;\n        \n        uniform vec2 u_resolution;\n        uniform float u_size;\n\n        void main() {\n            vec2 clipped = ((a_position / u_resolution) * 2.0) - 1.0;\n      \n            gl_PointSize = u_size;\n            gl_Position = vec4(clipped, 0, 1);\n            // gl_Position = vec4(0,0,0,1);\n        }\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_Color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = vec4(1,1,1,1);\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_Color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = vec4(1,1,1,1);\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_resolution = gl.getUniformLocation(this.program, \"u_resolution\");\r\n        this.u_size = gl.getUniformLocation(this.program, \"u_size\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        this.color = color;\r\n        this.size = size;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, dots) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // fill with data;\r\n        let data = this.toFloat32Array(dots);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\r\n        // Draw the point.\r\n        var primitiveType = gl.POINTS;\r\n        var offset = 0;\r\n        var count = dots.length;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    toFloat32Array(dots) {\r\n        let data = new Float32Array(dots.length * 2);\r\n        for (let i = 0; i < dots.length; i++) {\r\n            data[i * 2] = dots[i].x;\r\n            data[i * 2 + 1] = dots[i].y;\r\n        }\r\n        return data;\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXJlcnMvZG90LXJlbmRlcmVyMi50cz9lZTY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZUFBZTtBQUcrQjtBQUV2QyxNQUFNLFlBQWEsU0FBUSxzREFBUTtJQVl0QyxZQUNJLEVBQXlCLEVBQ3pCLE9BQWUsQ0FBQyxFQUNoQixRQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUM5QixTQUFrQixJQUFJO1FBRXRCLHVFQUF1RTtRQUN2RSxzRUFBc0U7UUFDdEUsdURBQXVEO1FBQ3ZELDJCQUEyQjtRQUMzQixJQUFJLFlBQVksR0FBVzs7Ozs7Ozs7Ozs7OztTQWExQixDQUFDO1FBQ0YsSUFBSSxvQkFBb0IsR0FBVzs7Ozs7Ozs7OztTQVVsQyxDQUFDO1FBRUYsSUFBSSxtQkFBbUIsR0FBVzs7Ozs7Ozs7Ozs7OztTQWFqQyxDQUFDO1FBRUYsZ0JBQWdCO1FBQ2hCLElBQUksTUFBTSxFQUFFO1lBQ1IsS0FBSyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ0gsS0FBSyxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFFLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUUsQ0FBQztRQUM3RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBRS9ELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FB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QyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlcmVycy9kb3QtcmVuZGVyZXIyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gam9zIGZlZW5zdHJhXG5cbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSBcIi4uL3JlbmRlci9yZW5kZXJlclwiO1xuXG5leHBvcnQgY2xhc3MgRG90UmVuZGVyZXIyIGV4dGVuZHMgUmVuZGVyZXIge1xuICAgIC8vIGF0dHJpYnV0ZSAmIHVuaWZvcm0gbG9jYXRpb25zXG4gICAgYV9wb3NpdGlvbjogbnVtYmVyO1xuICAgIGFfcG9zaXRpb25fYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICAgIHVfcmVzb2x1dGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgdV9jb2xvcjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgdV9zaXplOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcblxuICAgIGNvbG9yOiBudW1iZXJbXTtcbiAgICBzaXplOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICAgICAgc2l6ZTogbnVtYmVyID0gNSxcbiAgICAgICAgY29sb3I6IG51bWJlcltdID0gWzEsIDEsIDEsIDFdLFxuICAgICAgICBzcXVhcmU6IGJvb2xlYW4gPSB0cnVlLFxuICAgICkge1xuICAgICAgICAvLyBub3RlOiBJIGxpa2UgdmVydGV4ICYgZnJhZ21lbnRzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBzY3JpcHQgaXRzZWxmLlxuICAgICAgICAvLyB3aGVuIHlvdSBjaGFuZ2UgdmVydGV4IG9yIGZyYWdtZW50LCB0aGlzIGNsYXNzIGhhcyB0byBkZWFsIHdpdGggaXQuXG4gICAgICAgIC8vIHB1dHRpbmcgdGhlbSBzb21ld2hlcmUgZWxzZSBkb2VzbnQgbWFrZSBzZW5zZSB0byBtZSxcbiAgICAgICAgLy8gdGhleSBhcmUgY291cGxlZCAxIHRvIDEuXG4gICAgICAgIGxldCB2ZXJ0ZXhTb3VyY2U6IHN0cmluZyA9IGBcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgYV9wb3NpdGlvbjtcbiAgICAgICAgXG4gICAgICAgIHVuaWZvcm0gdmVjMiB1X3Jlc29sdXRpb247XG4gICAgICAgIHVuaWZvcm0gZmxvYXQgdV9zaXplO1xuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIHZlYzIgY2xpcHBlZCA9ICgoYV9wb3NpdGlvbiAvIHVfcmVzb2x1dGlvbikgKiAyLjApIC0gMS4wO1xuICAgICAgXG4gICAgICAgICAgICBnbF9Qb2ludFNpemUgPSB1X3NpemU7XG4gICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcHBlZCwgMCwgMSk7XG4gICAgICAgICAgICAvLyBnbF9Qb3NpdGlvbiA9IHZlYzQoMCwwLDAsMSk7XG4gICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgICAgbGV0IGZyYWdtZW50U291cmNlU3F1YXJlOiBzdHJpbmcgPSBgXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfQ29sb3I7XG4gICAgICAgIHZlYzIgY2VudGVyID0gdmVjMigwLjUsIDAuNSk7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLDEsMSwxKTtcbiAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIGxldCBmcmFnbWVudFNvdXJjZVJvdW5kOiBzdHJpbmcgPSBgXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfQ29sb3I7XG4gICAgICAgIHZlYzIgY2VudGVyID0gdmVjMigwLjUsIDAuNSk7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgaWYgKGRpc3RhbmNlKGNlbnRlciwgZ2xfUG9pbnRDb29yZCkgPiAwLjUpIHtcbiAgICAgICAgICAgICAgIGRpc2NhcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEsMSwxLDEpO1xuICAgICAgICB9XG4gICAgICAgIGA7XG5cbiAgICAgICAgLy8gc2V0dXAgcHJvZ3JhbVxuICAgICAgICBpZiAoc3F1YXJlKSB7XG4gICAgICAgICAgICBzdXBlcihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZVNxdWFyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZVJvdW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudV9yZXNvbHV0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X3Jlc29sdXRpb25cIikhO1xuICAgICAgICB0aGlzLnVfc2l6ZSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9zaXplXCIpITtcbiAgICAgICAgdGhpcy51X2NvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X2NvbG9yXCIpITtcblxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG5cbiAgICAgICAgLy8gQmluZCBpdCB0byBBUlJBWV9CVUZGRVIgKHRoaW5rIG9mIGl0IGFzIEFSUkFZX0JVRkZFUiA9IHBvc2l0aW9uQnVmZmVyKVxuICAgICAgICAvLyBsb29rIHVwIHdoZXJlIHRoZSB2ZXJ0ZXggZGF0YSBuZWVkcyB0byBnby5cbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgICAgIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKSE7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvLyByZW5kZXIgMSBpbWFnZSB0byB0aGUgc2NyZWVuXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGRvdHM6IFZlY3RvcjJbXSkge1xuICAgICAgICAvLyBUZWxsIGl0IHRvIHVzZSBvdXIgcHJvZ3JhbSAocGFpciBvZiBzaGFkZXJzKVxuICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG5cbiAgICAgICAgLy8gc2V0IHVuaWZvcm1zXG4gICAgICAgIGdsLnVuaWZvcm0yZih0aGlzLnVfcmVzb2x1dGlvbiwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMudV9zaXplLCB0aGlzLnNpemUpO1xuICAgICAgICBnbC51bmlmb3JtNGYodGhpcy51X2NvbG9yLCB0aGlzLmNvbG9yWzBdLCB0aGlzLmNvbG9yWzFdLCB0aGlzLmNvbG9yWzJdLCB0aGlzLmNvbG9yWzNdKTtcblxuICAgICAgICAvLyAvLyBCaW5kIHRoZSBwb3NpdGlvbiBidWZmZXIuXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9wb3NpdGlvbik7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTtcblxuICAgICAgICAvLyAvLyBUZWxsIHRoZSBhdHRyaWJ1dGUgaG93IHRvIGdldCBkYXRhIG91dCBvZiBwb3NpdGlvbkJ1ZmZlciAoQVJSQVlfQlVGRkVSKVxuICAgICAgICB2YXIgc2l6ZSA9IDI7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXG4gICAgICAgIHZhciB0eXBlID0gZ2wuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xuICAgICAgICB2YXIgbm9ybWFsaXplID0gZmFsc2U7IC8vIGRvbid0IG5vcm1hbGl6ZSB0aGUgZGF0YVxuICAgICAgICB2YXIgc3RyaWRlID0gMDsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxuICAgICAgICB2YXIgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uLCBzaXplLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcblxuICAgICAgICAvLyBmaWxsIHdpdGggZGF0YTtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLnRvRmxvYXQzMkFycmF5KGRvdHMpO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXKTtcblxuICAgICAgICAvLyBEcmF3IHRoZSBwb2ludC5cbiAgICAgICAgdmFyIHByaW1pdGl2ZVR5cGUgPSBnbC5QT0lOVFM7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgY291bnQgPSBkb3RzLmxlbmd0aDtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIGNvdW50KTtcbiAgICB9XG5cbiAgICAvLyBGaWxsIHRoZSBidWZmZXIgd2l0aCB0aGUgdmFsdWVzIHRoYXQgZGVmaW5lIGEgcmVjdGFuZ2xlLlxuICAgIHRvRmxvYXQzMkFycmF5KGRvdHM6IFZlY3RvcjJbXSk6IEZsb2F0MzJBcnJheSB7XG4gICAgICAgIGxldCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShkb3RzLmxlbmd0aCAqIDIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbaSAqIDJdID0gZG90c1tpXS54O1xuICAgICAgICAgICAgZGF0YVtpICogMiArIDFdID0gZG90c1tpXS55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHJhbmRvbUludChyYW5nZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmdlKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/renderers/dot-renderer2.ts\n");

/***/ }),

/***/ "./src/renderers/dot-renderer3.ts":
/*!****************************************!*\
  !*** ./src/renderers/dot-renderer3.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotRenderer3\": () => /* binding */ DotRenderer3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\n\r\nclass DotRenderer3 extends _render_renderer__WEBPACK_IMPORTED_MODULE_1__.Renderer {\r\n    constructor(gl, radius = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n        uniform float u_size;\n\n        attribute vec3 a_vertex;\n\n        void main() {\n            // Set the size of a rendered point.\n            gl_PointSize = u_size;\n\n            // Transform the location of the vertex.\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\n        }\n\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        // vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_size = gl.getUniformLocation(this.program, \"u_size\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        this.color = color;\r\n        this.size = radius;\r\n        this.count = 0;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set(vectors, speed) {\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        // convert all possible entries to a general entry\r\n        let array = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(vectors);\r\n        // from some other thing\r\n        this.count = array.count();\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, array._width, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, array.data, super.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, this.count);\r\n    }\r\n    setAndRender(gl, matrix, vectors) {\r\n        this.set(vectors, _render_renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/dot-renderer3.ts\n");

/***/ }),

/***/ "./src/renderers/graph-debug-renderer.ts":
/*!***********************************************!*\
  !*** ./src/renderers/graph-debug-renderer.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GraphDebugRenderer\": () => /* binding */ GraphDebugRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _line_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./line-renderer */ \"./src/renderers/line-renderer.ts\");\n/* harmony import */ var _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./simple-mesh-renderer */ \"./src/renderers/simple-mesh-renderer.ts\");\n/* harmony import */ var _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mesh-normals-renderer */ \"./src/renderers/mesh-normals-renderer.ts\");\n/* harmony import */ var _dot_renderer3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dot-renderer3 */ \"./src/renderers/dot-renderer3.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\nclass GraphDebugRenderer {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1], renderNormal = true) {\r\n        this.faceRend = new _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_2__.SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new _line_renderer__WEBPACK_IMPORTED_MODULE_1__.LineRenderer(gl, edgeColor);\r\n        this.pointRend = new _dot_renderer3__WEBPACK_IMPORTED_MODULE_4__.DotRenderer3(gl, 7, edgeColor, false);\r\n        if (renderNormal)\r\n            this.normRend = new _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_3__.NormalRenderer(gl);\r\n    }\r\n    set(graph, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        //this.faceRend.setMesh(gl, mesh);\r\n        this.pointRend.set(graph.allVertPositions(), speed);\r\n        this.lineRend.set(this.lineRend.gl, graph.toLines(), speed);\r\n        // this.normRend?.setWithLists(graph.allVertPositions(), graph.allNorms(), speed);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, camera) {\r\n        this.pointRend.render(gl, camera.totalMatrix);\r\n        // this.faceRend.render(gl, camera.totalMatrix);\r\n        this.lineRend.render(gl, camera.totalMatrix);\r\n        // this.normRend?.render(gl, camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXJlcnMvZ3JhcGgtZGVidWctcmVuZGVyZXIudHM/MDBmNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw0QkFBNEI7QUFDNUIsd0JBQXdCO0FBQ3hCLDRDQUE0QztBQU9hO0FBQ1Y7QUFDYTtBQUNIO0FBRVY7QUFHeEMsTUFBTSxrQkFBa0I7SUFNM0IsWUFDSSxFQUF5QixFQUN6QixTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFDM0IsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3hCLFlBQVksR0FBRyxJQUFJO1FBRW5CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxxRUFBa0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHdEQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3REFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNELElBQUksWUFBWTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrRUFBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxHQUFHLENBQUMsS0FBWSxFQUFFLFFBQW1CLGtFQUFvQjtRQUNyRCxrQ0FBa0M7UUFFbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVELGtGQUFrRjtJQUN0RixDQUFDO0lBRUQsK0JBQStCO0lBQy9CLE1BQU0sQ0FBQyxFQUF5QixFQUFFLE1BQWM7UUFDNUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxxQ0FBcUM7SUFDekMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlcmVycy9ncmFwaC1kZWJ1Zy1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIG1lc2gtcmVuZGVyZXIudHNcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZTogV2ViR0wgYmFzZWQgcmVuZGVyaW5nIG9mIGEgbWVzaC5cblxuaW1wb3J0IHsgSW50TWF0cml4IH0gZnJvbSBcIi4uL2RhdGEvaW50LW1hdHJpeFwiO1xuaW1wb3J0IHsgTGluZUFycmF5IH0gZnJvbSBcIi4uL21lc2gvbGluZS1hcnJheVwiO1xuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XG5pbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSBcIi4uL21lc2gvcmVuZGVyLW1lc2hcIjtcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcbmltcG9ydCB7IERyYXdTcGVlZCwgUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3JlbmRlcmVyXCI7XG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tIFwiLi9saW5lLXJlbmRlcmVyXCI7XG5pbXBvcnQgeyBTaW1wbGVNZXNoUmVuZGVyZXIgfSBmcm9tIFwiLi9zaW1wbGUtbWVzaC1yZW5kZXJlclwiO1xuaW1wb3J0IHsgTm9ybWFsUmVuZGVyZXIgfSBmcm9tIFwiLi9tZXNoLW5vcm1hbHMtcmVuZGVyZXJcIjtcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuLi9yZW5kZXIvY2FtZXJhXCI7XG5pbXBvcnQgeyBEb3RSZW5kZXJlcjMgfSBmcm9tIFwiLi9kb3QtcmVuZGVyZXIzXCI7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gXCIuLi9tZXNoL2dyYXBoXCI7XG5cbmV4cG9ydCBjbGFzcyBHcmFwaERlYnVnUmVuZGVyZXIge1xuICAgIGZhY2VSZW5kOiBTaW1wbGVNZXNoUmVuZGVyZXI7XG4gICAgbGluZVJlbmQ6IExpbmVSZW5kZXJlcjtcbiAgICBwb2ludFJlbmQ6IERvdFJlbmRlcmVyMztcbiAgICBub3JtUmVuZD86IE5vcm1hbFJlbmRlcmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIGZhY2VDb2xvciA9IFsxLCAwLCAwLCAwLjI1XSxcbiAgICAgICAgZWRnZUNvbG9yID0gWzEsIDAsIDAsIDFdLFxuICAgICAgICByZW5kZXJOb3JtYWwgPSB0cnVlLFxuICAgICkge1xuICAgICAgICB0aGlzLmZhY2VSZW5kID0gbmV3IFNpbXBsZU1lc2hSZW5kZXJlcihnbCwgZmFjZUNvbG9yKTtcbiAgICAgICAgdGhpcy5saW5lUmVuZCA9IG5ldyBMaW5lUmVuZGVyZXIoZ2wsIGVkZ2VDb2xvcik7XG4gICAgICAgIHRoaXMucG9pbnRSZW5kID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgNywgZWRnZUNvbG9yLCBmYWxzZSk7XG4gICAgICAgIGlmIChyZW5kZXJOb3JtYWwpIHRoaXMubm9ybVJlbmQgPSBuZXcgTm9ybWFsUmVuZGVyZXIoZ2wpO1xuICAgIH1cblxuICAgIHNldChncmFwaDogR3JhcGgsIHNwZWVkOiBEcmF3U3BlZWQgPSBEcmF3U3BlZWQuU3RhdGljRHJhdykge1xuICAgICAgICAvL3RoaXMuZmFjZVJlbmQuc2V0TWVzaChnbCwgbWVzaCk7XG5cbiAgICAgICAgdGhpcy5wb2ludFJlbmQuc2V0KGdyYXBoLmFsbFZlcnRQb3NpdGlvbnMoKSwgc3BlZWQpO1xuICAgICAgICB0aGlzLmxpbmVSZW5kLnNldCh0aGlzLmxpbmVSZW5kLmdsLCBncmFwaC50b0xpbmVzKCksIHNwZWVkKTtcbiAgICAgICAgLy8gdGhpcy5ub3JtUmVuZD8uc2V0V2l0aExpc3RzKGdyYXBoLmFsbFZlcnRQb3NpdGlvbnMoKSwgZ3JhcGguYWxsTm9ybXMoKSwgc3BlZWQpO1xuICAgIH1cblxuICAgIC8vIHJlbmRlciAxIGltYWdlIHRvIHRoZSBzY3JlZW5cbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgY2FtZXJhOiBDYW1lcmEpIHtcbiAgICAgICAgdGhpcy5wb2ludFJlbmQucmVuZGVyKGdsLCBjYW1lcmEudG90YWxNYXRyaXgpO1xuICAgICAgICAvLyB0aGlzLmZhY2VSZW5kLnJlbmRlcihnbCwgY2FtZXJhLnRvdGFsTWF0cml4KTtcbiAgICAgICAgdGhpcy5saW5lUmVuZC5yZW5kZXIoZ2wsIGNhbWVyYS50b3RhbE1hdHJpeCk7XG4gICAgICAgIC8vIHRoaXMubm9ybVJlbmQ/LnJlbmRlcihnbCwgY2FtZXJhKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/renderers/graph-debug-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/line-renderer.ts":
/*!****************************************!*\
  !*** ./src/renderers/line-renderer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineRenderer\": () => /* binding */ LineRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _mesh_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/mesh */ \"./src/mesh/mesh.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\nclass LineRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        // we need 2 buffers\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n    }\r\n    set(gl, data, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        let links;\r\n        let verts;\r\n        if (data instanceof _mesh_mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\r\n            verts = data.verts;\r\n            links = data.links.getData();\r\n        }\r\n        else {\r\n            verts = data.verts;\r\n            links = data.links;\r\n        }\r\n        // console.log(links);\r\n        gl.useProgram(this.program);\r\n        this.count = links.length;\r\n        this.vertCount = verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, drawspeed);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, links.buffer, drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        //\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        //\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(gl, matrix, data) {\r\n        this.set(gl, data, _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/line-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/mesh-debug-renderer.ts":
/*!**********************************************!*\
  !*** ./src/renderers/mesh-debug-renderer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshDebugRenderer\": () => /* binding */ MeshDebugRenderer\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _line_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-renderer */ \"./src/renderers/line-renderer.ts\");\n/* harmony import */ var _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simple-mesh-renderer */ \"./src/renderers/simple-mesh-renderer.ts\");\n/* harmony import */ var _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mesh-normals-renderer */ \"./src/renderers/mesh-normals-renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\nclass MeshDebugRenderer {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1], renderNormal = true) {\r\n        this.faceRend = new _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__.SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new _line_renderer__WEBPACK_IMPORTED_MODULE_2__.LineRenderer(gl, edgeColor);\r\n        if (renderNormal)\r\n            this.normRend = new _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__.NormalRenderer(gl);\r\n    }\r\n    buffer(gl, mesh, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.StaticDraw) {\r\n        var _a;\r\n        this.faceRend.setMesh(gl, mesh);\r\n        this.lineRend.set(gl, _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromMesh(mesh), speed);\r\n        (_a = this.normRend) === null || _a === void 0 ? void 0 : _a.set(mesh, speed);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, camera) {\r\n        var _a;\r\n        this.faceRend.render(gl, camera.totalMatrix);\r\n        this.lineRend.render(gl, camera.totalMatrix);\r\n        (_a = this.normRend) === null || _a === void 0 ? void 0 : _a.render(gl, camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXJlcnMvbWVzaC1kZWJ1Zy1yZW5kZXJlci50cz82YmZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsNENBQTRDO0FBR0c7QUFJVTtBQUNWO0FBQ2E7QUFDSDtBQUdsRCxNQUFNLGlCQUFpQjtJQUsxQixZQUNJLEVBQXlCLEVBQ3pCLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUMzQixTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDeEIsWUFBWSxHQUFHLElBQUk7UUFFbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHFFQUFrQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksd0RBQVksQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEQsSUFBSSxZQUFZO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGtFQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUF5QixFQUFFLElBQWdCLEVBQUUsUUFBbUIsa0VBQW9COztRQUN2RixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGdFQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELFVBQUksQ0FBQyxRQUFRLDBDQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0lBQ3BDLENBQUM7SUFFRCwrQkFBK0I7SUFDL0IsTUFBTSxDQUFDLEVBQXlCLEVBQUUsTUFBYzs7UUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLFVBQUksQ0FBQyxRQUFRLDBDQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFO0lBQ3RDLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9yZW5kZXJlcnMvbWVzaC1kZWJ1Zy1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIG1lc2gtcmVuZGVyZXIudHNcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZTogV2ViR0wgYmFzZWQgcmVuZGVyaW5nIG9mIGEgbWVzaC5cblxuaW1wb3J0IHsgSW50TWF0cml4IH0gZnJvbSBcIi4uL2RhdGEvaW50LW1hdHJpeFwiO1xuaW1wb3J0IHsgTGluZUFycmF5IH0gZnJvbSBcIi4uL21lc2gvbGluZS1hcnJheVwiO1xuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XG5pbXBvcnQgeyBSZW5kZXJhYmxlIH0gZnJvbSBcIi4uL21lc2gvcmVuZGVyLW1lc2hcIjtcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcbmltcG9ydCB7IERyYXdTcGVlZCwgUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3JlbmRlcmVyXCI7XG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tIFwiLi9saW5lLXJlbmRlcmVyXCI7XG5pbXBvcnQgeyBTaW1wbGVNZXNoUmVuZGVyZXIgfSBmcm9tIFwiLi9zaW1wbGUtbWVzaC1yZW5kZXJlclwiO1xuaW1wb3J0IHsgTm9ybWFsUmVuZGVyZXIgfSBmcm9tIFwiLi9tZXNoLW5vcm1hbHMtcmVuZGVyZXJcIjtcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuLi9yZW5kZXIvY2FtZXJhXCI7XG5cbmV4cG9ydCBjbGFzcyBNZXNoRGVidWdSZW5kZXJlciB7XG4gICAgZmFjZVJlbmQ6IFNpbXBsZU1lc2hSZW5kZXJlcjtcbiAgICBsaW5lUmVuZDogTGluZVJlbmRlcmVyO1xuICAgIG5vcm1SZW5kPzogTm9ybWFsUmVuZGVyZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICAgICAgZmFjZUNvbG9yID0gWzEsIDAsIDAsIDAuMjVdLFxuICAgICAgICBlZGdlQ29sb3IgPSBbMSwgMCwgMCwgMV0sXG4gICAgICAgIHJlbmRlck5vcm1hbCA9IHRydWUsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZmFjZVJlbmQgPSBuZXcgU2ltcGxlTWVzaFJlbmRlcmVyKGdsLCBmYWNlQ29sb3IpO1xuICAgICAgICB0aGlzLmxpbmVSZW5kID0gbmV3IExpbmVSZW5kZXJlcihnbCwgZWRnZUNvbG9yKTtcbiAgICAgICAgaWYgKHJlbmRlck5vcm1hbCkgdGhpcy5ub3JtUmVuZCA9IG5ldyBOb3JtYWxSZW5kZXJlcihnbCk7XG4gICAgfVxuXG4gICAgYnVmZmVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1lc2g6IFJlbmRlcmFibGUsIHNwZWVkOiBEcmF3U3BlZWQgPSBEcmF3U3BlZWQuU3RhdGljRHJhdykge1xuICAgICAgICB0aGlzLmZhY2VSZW5kLnNldE1lc2goZ2wsIG1lc2gpO1xuICAgICAgICB0aGlzLmxpbmVSZW5kLnNldChnbCwgTGluZUFycmF5LmZyb21NZXNoKG1lc2gpLCBzcGVlZCk7XG4gICAgICAgIHRoaXMubm9ybVJlbmQ/LnNldChtZXNoLCBzcGVlZCk7XG4gICAgfVxuXG4gICAgLy8gcmVuZGVyIDEgaW1hZ2UgdG8gdGhlIHNjcmVlblxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjYW1lcmE6IENhbWVyYSkge1xuICAgICAgICB0aGlzLmZhY2VSZW5kLnJlbmRlcihnbCwgY2FtZXJhLnRvdGFsTWF0cml4KTtcbiAgICAgICAgdGhpcy5saW5lUmVuZC5yZW5kZXIoZ2wsIGNhbWVyYS50b3RhbE1hdHJpeCk7XG4gICAgICAgIHRoaXMubm9ybVJlbmQ/LnJlbmRlcihnbCwgY2FtZXJhKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/renderers/mesh-debug-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/mesh-normals-renderer.ts":
/*!************************************************!*\
  !*** ./src/renderers/mesh-normals-renderer.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NormalRenderer\": () => /* binding */ NormalRenderer\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\n\r\n\r\n\r\nclass NormalRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_4__.Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_vertex;\n        attribute vec4 a_vertex_color;\n\n        uniform mat4 u_transform;\n\n        varying vec4 v_color;\n\n        void main() {\n            gl_Position = u_transform * a_vertex;\n            v_color = a_vertex_color;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        varying vec4 v_color;\n\n        void main () {\n            gl_FragColor = v_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        // we need 2 buffers\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_color = gl.getAttribLocation(this.program, \"a_vertex_color\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_color_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n        this.scale = 0.4;\r\n    }\r\n    setWithLists(pos, norms, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_4__.DrawSpeed.StaticDraw) { }\r\n    // take a general render mesh, and extract normals\r\n    set(rend, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_4__.DrawSpeed.StaticDraw) {\r\n        // save how many verts need to be drawn\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        this.vertCount = 3;\r\n        let lineverts;\r\n        let normals;\r\n        // different buffer fills based upon normal kind\r\n        let normalKind = rend.getNormalType();\r\n        if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Face) {\r\n            let faceCount = rend.mesh.links.count();\r\n            this.count = faceCount * 2;\r\n            lineverts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            normals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            for (let f = 0; f < faceCount; f++) {\r\n                let center = rend.getFaceVertices(f).average();\r\n                let normal = rend.norms.getVector(f);\r\n                let i1 = f * 2;\r\n                let i2 = f * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1).div(2));\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n        }\r\n        else if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Vertex) {\r\n            let vertCount = rend.mesh.verts.count();\r\n            this.count = vertCount * 2;\r\n            lineverts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            normals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            for (let i = 0; i < vertCount; i++) {\r\n                let center = rend.mesh.verts.getVector(i);\r\n                let normal = rend.norms.getVector(i);\r\n                let i1 = i * 2;\r\n                let i2 = i * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1)).div(2);\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n            // console.log(normals);\r\n        }\r\n        else {\r\n            console.warn(\"no normals for type\", normalKind);\r\n            this.count = 0;\r\n            return;\r\n        }\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, lineverts.data, drawspeed);\r\n        // normals\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, normals.data, drawspeed);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (0,_mesh_line_array__WEBPACK_IMPORTED_MODULE_3__.getDefaultIndices)(this.count), drawspeed);\r\n    }\r\n    render(gl, camera) {\r\n        let matrix = camera.totalMatrix;\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        // index buffer\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/mesh-normals-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/rectangle-renderer.ts":
/*!*********************************************!*\
  !*** ./src/renderers/rectangle-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RectangleRenderer\": () => /* binding */ RectangleRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\nclass RectangleRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it.\r\n        // putting them somewhere else doesnt make sense to me,\r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        attribute vec2 a_position;\n\n        uniform vec2 u_resolution;\n\n        void main() {\n            // convert the rectangle from pixels to 0.0 to 1.0\n            vec2 zeroToOne = ((a_position / u_resolution) * 2.0) - 1.0;\n\n            // convert from 0->1 to 0->2\n            // vec2 zeroToTwo = zeroToOne * 2.0;\n\n            // convert from 0->2 to -1->+1 (clipspace)\n            // vec2 clipSpace = zeroToTwo - 1.0;\n\n            gl_Position = vec4(zeroToOne * vec2(1, -1), 0, 1);\n        }\n        `;\r\n        let fragmentSource = `\n        precision mediump float;\n\n        uniform vec4 u_color;\n        \n        void main() {\n           gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vertexSource, fragmentSource);\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.u_resolution = gl.getUniformLocation(this.program, \"u_resolution\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        // Create a buffer to put three 2d clip space points in\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    render(gl, rs) {\r\n        // Clear the canvas\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // Turn on the attribute\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // draw 50 random rectangles in random colors\r\n        for (let r of rs) {\r\n            // Setup a random rectangle\r\n            // This will write to positionBuffer because\r\n            // its the last thing we bound on the ARRAY_BUFFER\r\n            // bind point\r\n            this.setRectangle(gl, r);\r\n            // Set a random color.\r\n            gl.uniform4f(this.u_color, Math.random(), Math.random(), Math.random(), 1);\r\n            // Draw the rectangle.\r\n            var primitiveType = gl.TRIANGLES;\r\n            var offset = 0;\r\n            var count = 6;\r\n            gl.drawArrays(primitiveType, offset, count);\r\n        }\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    setRectangle(gl, r) {\r\n        let verts = r.getVertices();\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            verts[0].x,\r\n            verts[0].y,\r\n            verts[1].x,\r\n            verts[1].y,\r\n            verts[2].x,\r\n            verts[2].y,\r\n            verts[2].x,\r\n            verts[2].y,\r\n            verts[1].x,\r\n            verts[1].y,\r\n            verts[3].x,\r\n            verts[3].y,\r\n        ]), gl.STATIC_DRAW);\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/rectangle-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/shaded-mesh-renderer.ts":
/*!***********************************************!*\
  !*** ./src/renderers/shaded-mesh-renderer.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShadedMeshRenderer\": () => /* binding */ ShadedMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: A shader wrapper for rendering shaded, textured, meshes\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ShadedMeshRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_4__.Renderer {\r\n    constructor(gl) {\r\n        const vs = `\n\n        attribute vec4 a_vertex_position;\n        attribute vec3 a_vertex_normal;\n        attribute float a_vertex_ambi;\n    \n        uniform mat4 u_normal_matrix;\n        uniform mat4 u_model_view_matrix;\n        uniform mat4 u_projection_matrix;\n\n        // should be uniforms constances\n        uniform vec3 u_ambient_light;\n        uniform vec3 u_dir_light_color;\n        uniform vec3 u_dir_light_vector;  \n\n        // varying vec2 v_texture_coord;\n        varying vec3 v_lighting;\n    \n        void main(void) {\n\n            gl_Position = u_projection_matrix * u_model_view_matrix * a_vertex_position;\n            // v_texture_coord = a_texture_coord;\n        \n            // Apply lighting effect\n            // highpr is removed\n            vec4 transformedNormal = u_normal_matrix * vec4(a_vertex_normal, 1.0);\n            float directional = max(dot(transformedNormal.xyz, u_dir_light_vector), 0.0);\n            v_lighting = (u_ambient_light + (u_dir_light_color * directional));\n        }\n        `;\r\n        const fs = `\n        precision mediump float;\n\n        // Calculates the diffuse factor produced by the light illumination  \n        // if done like this, color could look nicer\n        // float diffuseFactor(vec3 normal, vec3 light_direction) {\n        //     float df = dot(normalize(normal), normalize(light_direction));\n        //     if (gl_FrontFacing) {\n        //         df = -df;\n        //     }\n        //     return max(0.0, df);\n        // }\n\n        varying vec3 v_lighting;\n\n        void main() {\n\n            // Fragment shader output\n            gl_FragColor = vec4(v_lighting, 1.0);\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms\r\n        this.u_normal_matrix = gl.getUniformLocation(this.program, \"u_normal_matrix\");\r\n        this.u_model_view_matrix = gl.getUniformLocation(this.program, \"u_model_view_matrix\");\r\n        this.u_projection_matrix = gl.getUniformLocation(this.program, \"u_projection_matrix\");\r\n        // light uniforms\r\n        this.u_ambient_light = gl.getUniformLocation(this.program, \"u_ambient_light\");\r\n        this.u_dir_light_color = gl.getUniformLocation(this.program, \"u_dir_light_color\");\r\n        this.u_dir_light_vector = gl.getUniformLocation(this.program, \"u_dir_light_vector\");\r\n        // init attributes: verts | normals | ambi\r\n        this.a_vertex_position = gl.getAttribLocation(this.program, \"a_vertex_position\");\r\n        this.a_vertex_postition_buffer = gl.createBuffer();\r\n        this.a_vertex_normal = gl.getAttribLocation(this.program, \"a_vertex_normal\");\r\n        this.a_vertex_normal_buffer = gl.createBuffer();\r\n        this.a_vertex_ambi = gl.getAttribLocation(this.program, \"a_vertex_ambi\");\r\n        this.a_vertex_ambi_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(gl, rend, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_4__.DrawSpeed.StaticDraw) {\r\n        // NOTE: processing time is longer: we use DrawArray instead of DrawElements, to deal with normals & uv data\r\n        let normalType = rend.getNormalType();\r\n        if (normalType == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_2__.NormalKind.Face) {\r\n            // save how many verts need to be drawn\r\n            gl.useProgram(this.program);\r\n            this.count = rend.mesh.links.data.length;\r\n            let ds = this.convertDrawSpeed(speed);\r\n            // convert to non-indexed verts & norms\r\n            let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.count);\r\n            let norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.count);\r\n            let ambi = new Float32Array(this.count);\r\n            let faceCount = rend.mesh.links.count();\r\n            for (let i = 0; i < rend.mesh.links.count(); i++) {\r\n                let norm = rend.norms.getVector(i);\r\n                rend.mesh.links.getRow(i).forEach((v, j) => {\r\n                    let id = i * 3 + j;\r\n                    verts.setVector(id, rend.mesh.verts.getVector(v));\r\n                    norms.setVector(id, norm);\r\n                    ambi[id] = 1;\r\n                });\r\n            }\r\n            // buffer 1\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, verts.data.buffer, ds);\r\n            // buffer 2\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, norms.data.buffer, ds);\r\n            // buffer 3\r\n            // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n            // gl.vertexAttribPointer(this.a_vertex_ambi, 1, gl.FLOAT, false, 0, 0);\r\n            // gl.bufferData(gl.ARRAY_BUFFER, ambi, ds);\r\n            // index\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (0,_mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.getDefaultIndices)(this.count).buffer, this.convertDrawSpeed(speed));\r\n        }\r\n        else if (normalType == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_2__.NormalKind.Vertex) {\r\n            // save how many verts need to be drawn\r\n            gl.useProgram(this.program);\r\n            let ds = this.convertDrawSpeed(speed);\r\n            // convert to non-indexed verts & norms\r\n            let ambi = rend.ambi;\r\n            let faceCount = rend.mesh.links.count();\r\n            this.count = rend.mesh.links.data.length;\r\n            // console.log(rend.mesh.links);\r\n            // buffer 1\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, rend.mesh.verts.data, ds);\r\n            // buffer 2\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n            gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n            gl.bufferData(gl.ARRAY_BUFFER, rend.norms.data, ds);\r\n            // buffer 3\r\n            // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n            // gl.vertexAttribPointer(this.a_vertex_ambi, 1, gl.FLOAT, false, 0, 0);\r\n            // gl.bufferData(gl.ARRAY_BUFFER, ambi, ds);\r\n            // index\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, rend.mesh.links.data, ds);\r\n        }\r\n        else if (normalType == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_2__.NormalKind.MultiVertex) {\r\n            console.log(\"cannot render multi vertex normals\");\r\n        }\r\n        else {\r\n            console.log(\"cannot render with this normal data\");\r\n        }\r\n        if (this.count > _lib__WEBPACK_IMPORTED_MODULE_6__.Const.MAX_U16) {\r\n            this.count = _lib__WEBPACK_IMPORTED_MODULE_6__.Const.MAX_U16;\r\n        }\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, camera) {\r\n        // console.log(\"rendering..\");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_normal_matrix, false, _math_matrix__WEBPACK_IMPORTED_MODULE_3__.Matrix4.newIdentity().data);\r\n        gl.uniformMatrix4fv(this.u_model_view_matrix, false, camera.worldMatrix.data);\r\n        gl.uniformMatrix4fv(this.u_projection_matrix, false, camera.projectMatrix.data);\r\n        let vec = camera.getMouseWorldRay(gl.canvas.width, gl.canvas.height, false).normal;\r\n        gl.uniform3fv(this.u_ambient_light, new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(0.2, 0.2, 0.2).toArray());\r\n        gl.uniform3fv(this.u_dir_light_color, new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(1, 1, 1.0).toArray());\r\n        gl.uniform3fv(this.u_dir_light_vector, vec.scale(-1).toArray());\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_vertex_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_vertex_normal);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        // gl.enableVertexAttribArray(this.a_vertex_ambi);\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n        // gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/shaded-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/simple-mesh-renderer.ts":
/*!***********************************************!*\
  !*** ./src/renderers/simple-mesh-renderer.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimpleMeshRenderer\": () => /* binding */ SimpleMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass SimpleMeshRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // we need 2 buffers\r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    setMesh(gl, rend, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        return this.set(gl, rend.mesh.verts, rend.mesh.links, speed);\r\n    }\r\n    set(gl, verts, faces, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = faces.data.length;\r\n        // vertices\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        this.size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces.data, this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/simple-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/renderers/texture-mesh-renderer.ts":
/*!************************************************!*\
  !*** ./src/renderers/texture-mesh-renderer.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextureMeshRenderer\": () => /* binding */ TextureMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass TextureMeshRenderer extends _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl) {\r\n        const vs = `\n        // precision mediump int;\n        // precision mediump float;\n\n        attribute vec4 a_position;\n        attribute vec2 a_texcoord;\n\n        uniform mat4 u_transform;\n\n        varying vec2 v_texcoord;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n            v_texcoord = a_texcoord;\n        }\n        `;\r\n        const fs = `\n        precision mediump float;\n\n        varying vec2 v_texcoord;\n\n        uniform sampler2D u_texture;\n\n        void main() {\n            gl_FragColor = texture2D(u_texture, v_texcoord);\n        }\n        `;\r\n        // setup program\r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_texture = gl.getUniformLocation(this.program, \"u_texture\");\r\n        // init three buffers: verts | uvs | links\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_texcoord = gl.getAttribLocation(this.program, \"a_texcoord\");\r\n        this.a_texcoord_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // init texture\r\n        this.texture_id = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer.getNextTextureID();\r\n        this.texture = gl.createTexture();\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh, _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, r, speed = _render_renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        if (!r.texture) {\r\n            console.warn(\"Mesh does not contain a texture!\");\r\n            return;\r\n        }\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = r.mesh.links.data.length;\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, r.mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // buffer 2\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, r.uvs.data, this.convertDrawSpeed(speed));\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(r.mesh.links.data), this.convertDrawSpeed(speed));\r\n        // texture\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, r.texture);\r\n        // alternative texture -> Fill the texture with a 1x1 blue pixel.\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 128, 128, 255]));\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture.data);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // console.log(\"rendering..\");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // set texture\r\n        gl.uniform1i(this.u_texture, this.texture_id);\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_texcoord);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderers/texture-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/system/core.ts":
/*!****************************!*\
  !*** ./src/system/core.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Core\": () => /* binding */ Core\n/* harmony export */ });\n/* harmony import */ var _input_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input-state */ \"./src/system/input-state.ts\");\n/* harmony import */ var _fpsCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fpsCounter */ \"./src/system/fpsCounter.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ \"./src/system/ui.ts\");\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls.\r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\n\r\n\r\nclass Core {\r\n    constructor(canvas, gl, uiFrame) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new _input_state__WEBPACK_IMPORTED_MODULE_0__.InputState(canvas);\r\n        this.fpsCounter = new _fpsCounter__WEBPACK_IMPORTED_MODULE_1__.FpsCounter();\r\n        this.ui = new _ui__WEBPACK_IMPORTED_MODULE_2__.UI(uiFrame);\r\n        this.apps = new Map();\r\n    }\r\n    // todo: cycle through apps\r\n    addApp(app) {\r\n        this.apps.set(app.name, app);\r\n        this.activateApp(app);\r\n    }\r\n    removeApp(appName) {\r\n        this.ui.removeContext(appName);\r\n        this.apps.delete(appName);\r\n    }\r\n    activateApp(app) {\r\n        this.ui.addContext(app.name);\r\n        this.ui.addText(app.description);\r\n        app.ui(this.ui);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        this.fpsCounter.update(this.state);\r\n        if (this.state.IsKeyPressed(\"Esc\"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // put fps in the titel\r\n        document.title = \"fps: \" + this.fpsCounter.getFps();\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height || window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vY29yZS50cz8wOTAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1QkFBdUI7QUFDdkIsaUdBQWlHO0FBQ2pHLHlEQUF5RDtBQUVkO0FBRUQ7QUFDaEI7QUFFbkIsTUFBTSxJQUFJO0lBV2IsWUFBWSxNQUF5QixFQUFFLEVBQXlCLEVBQUUsT0FBdUI7UUFGekYsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUdULElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG9EQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLG1EQUFVLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksbUNBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELDJCQUEyQjtJQUMzQixNQUFNLENBQUMsR0FBUTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQWU7UUFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFRO1FBQ2hCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSTtRQUNBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUVuQix1QkFBdUI7UUFDdkIsUUFBUSxDQUFDLEtBQUssR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVwRCxrQkFBa0I7UUFDbEIsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQzFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUNuQyw0Q0FBNEM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVwRCxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFDakMsMENBQTBDO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFbEQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVEO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV4QyxrQkFBa0I7UUFDbEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvc3lzdGVtL2NvcmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBdXRob3I6IEpvcyBGZWVuc3RyYVxuLy8gUHVycG9zZTogVGhlIENvcmUgYXBwLiBUaGlzIGNhbiBob2xkIG11bHRpcGxlIG90aGVyIGFwcHMgd2l0aCB0aGVpciBvd24gVXBkYXRlIGFuZCBEcmF3IGNhbGxzLlxuLy8gVXNlIHRoaXMgdG8gc3dpdGNoIGJldHdlZW4gQXBwcywgb3IgcnVuIG11bHRpcGxlIEFwcHMuXG5cbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi9pbnB1dC1zdGF0ZVwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcC9hcHBcIjtcbmltcG9ydCB7IEZwc0NvdW50ZXIgfSBmcm9tIFwiLi9mcHNDb3VudGVyXCI7XG5pbXBvcnQgeyBVSSB9IGZyb20gXCIuL3VpXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlIHtcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgc3RhdGU6IElucHV0U3RhdGU7XG4gICAgdWk6IFVJO1xuICAgIGZwc0NvdW50ZXI6IEZwc0NvdW50ZXI7XG5cbiAgICBwcml2YXRlIGFwcHM6IE1hcDxzdHJpbmcsIEFwcD47XG5cbiAgICBTVE9QID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB1aUZyYW1lOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IElucHV0U3RhdGUoY2FudmFzKTtcbiAgICAgICAgdGhpcy5mcHNDb3VudGVyID0gbmV3IEZwc0NvdW50ZXIoKTtcbiAgICAgICAgdGhpcy51aSA9IG5ldyBVSSh1aUZyYW1lKTtcbiAgICAgICAgdGhpcy5hcHBzID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIC8vIHRvZG86IGN5Y2xlIHRocm91Z2ggYXBwc1xuICAgIGFkZEFwcChhcHA6IEFwcCkge1xuICAgICAgICB0aGlzLmFwcHMuc2V0KGFwcC5uYW1lLCBhcHApO1xuICAgICAgICB0aGlzLmFjdGl2YXRlQXBwKGFwcCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQXBwKGFwcE5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnVpLnJlbW92ZUNvbnRleHQoYXBwTmFtZSk7XG4gICAgICAgIHRoaXMuYXBwcy5kZWxldGUoYXBwTmFtZSk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGVBcHAoYXBwOiBBcHApIHtcbiAgICAgICAgdGhpcy51aS5hZGRDb250ZXh0KGFwcC5uYW1lKTtcbiAgICAgICAgdGhpcy51aS5hZGRUZXh0KGFwcC5kZXNjcmlwdGlvbik7XG4gICAgICAgIGFwcC51aSh0aGlzLnVpKTtcbiAgICAgICAgYXBwLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLnN0YXRlLnByZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLmZwc0NvdW50ZXIudXBkYXRlKHRoaXMuc3RhdGUpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5Jc0tleVByZXNzZWQoXCJFc2NcIikpIHRoaXMuU1RPUCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXBwcy5mb3JFYWNoKChhcHApID0+IHtcbiAgICAgICAgICAgIGFwcC51cGRhdGUodGhpcy5zdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXRlLnBvc3RVcGRhdGUoKTtcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIC8vIHB1dCBmcHMgaW4gdGhlIHRpdGVsXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJmcHM6IFwiICsgdGhpcy5mcHNDb3VudGVyLmdldEZwcygpO1xuXG4gICAgICAgIC8vIHByZS1nbCBidXNpbmVzc1xuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0ICE9IGNhbnZhcy5oZWlnaHQgfHwgd2luZG93LmlubmVyV2lkdGggIT0gY2FudmFzLndpZHRoKSB7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgLy8gY2FudmFzLmNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAvLyBjYW52YXMuY2xpZW50V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVuZGVyZXIucmVzaXplQ2FudmFzKHRoaXMuZ2wpO1xuICAgICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUKTtcblxuICAgICAgICAvLyByZW5kZXIgYWxsIGFwcHNcbiAgICAgICAgLy8gVE9ETyA6IHJldmVyc2Ugb3JkZXJcbiAgICAgICAgdGhpcy5hcHBzLmZvckVhY2goKGFwcCkgPT4ge1xuICAgICAgICAgICAgYXBwLmRyYXcodGhpcy5nbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/system/core.ts\n");

/***/ }),

/***/ "./src/system/domwrappers.ts":
/*!***********************************!*\
  !*** ./src/system/domwrappers.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addDropFileEventListeners\": () => /* binding */ addDropFileEventListeners,\n/* harmony export */   \"loadTextFromFile\": () => /* binding */ loadTextFromFile,\n/* harmony export */   \"loadJSONFromFile\": () => /* binding */ loadJSONFromFile,\n/* harmony export */   \"loadImageFromFile\": () => /* binding */ loadImageFromFile,\n/* harmony export */   \"loadImageFromBlob\": () => /* binding */ loadImageFromBlob\n/* harmony export */ });\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log(\"setting up drag events...\");\r\n    canvas.addEventListener(\"dragenter\", function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"entering entering...\");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener(\"dragover\", function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"over drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\"dragleave\", function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"leaving drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener(\"drop\", function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then((imageData) => resolve(imageData), (error) => reject(error));\r\n    });\r\n}\r\nfunction loadImageFromBlob(blob) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(blob);\r\n        reader.onload = () => loadImageHelper1(reader).then((imageData) => resolve(imageData), (error) => reject(error));\r\n    });\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement(\"img\");\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement(\"canvas\");\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/domwrappers.ts\n");

/***/ }),

/***/ "./src/system/fpsCounter.ts":
/*!**********************************!*\
  !*** ./src/system/fpsCounter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FpsCounter\": () => /* binding */ FpsCounter\n/* harmony export */ });\nclass FpsCounter {\r\n    constructor() {\r\n        this.fps = 0;\r\n        this.updateEveryXTicks = 100;\r\n        this.elapsed = 0;\r\n        this.frames = 0;\r\n    }\r\n    update(state) {\r\n        this.frames += 1;\r\n        this.elapsed += state.tick;\r\n        if (this.elapsed > this.updateEveryXTicks) {\r\n            this.setFps();\r\n            this.elapsed = 0;\r\n            this.frames = 0;\r\n        }\r\n    }\r\n    setFps() {\r\n        this.fps = Math.round((this.frames / this.elapsed) * 1000);\r\n    }\r\n    getFps() {\r\n        return this.fps;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vZnBzQ291bnRlci50cz82NzhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLFVBQVU7SUFNbkI7UUFMQSxRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1Isc0JBQWlCLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixXQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRUksQ0FBQztJQUVoQixNQUFNLENBQUMsS0FBaUI7UUFDcEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDbkI7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9zeXN0ZW0vZnBzQ291bnRlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi9pbnB1dC1zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgRnBzQ291bnRlciB7XG4gICAgZnBzID0gMDtcbiAgICB1cGRhdGVFdmVyeVhUaWNrcyA9IDEwMDtcbiAgICBlbGFwc2VkID0gMDtcbiAgICBmcmFtZXMgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XG4gICAgICAgIHRoaXMuZnJhbWVzICs9IDE7XG4gICAgICAgIHRoaXMuZWxhcHNlZCArPSBzdGF0ZS50aWNrO1xuICAgICAgICBpZiAodGhpcy5lbGFwc2VkID4gdGhpcy51cGRhdGVFdmVyeVhUaWNrcykge1xuICAgICAgICAgICAgdGhpcy5zZXRGcHMoKTtcbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZCA9IDA7XG4gICAgICAgICAgICB0aGlzLmZyYW1lcyA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRGcHMoKSB7XG4gICAgICAgIHRoaXMuZnBzID0gTWF0aC5yb3VuZCgodGhpcy5mcmFtZXMgLyB0aGlzLmVsYXBzZWQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZ2V0RnBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcHM7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/system/fpsCounter.ts\n");

/***/ }),

/***/ "./src/system/input-state.ts":
/*!***********************************!*\
  !*** ./src/system/input-state.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InputState\": () => /* binding */ InputState\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key[\"A\"] = 0] = \"A\";\r\n    Key[Key[\"B\"] = 1] = \"B\";\r\n    Key[Key[\"C\"] = 2] = \"C\";\r\n    Key[Key[\"D\"] = 3] = \"D\";\r\n    Key[Key[\"E\"] = 4] = \"E\";\r\n    Key[Key[\"F\"] = 5] = \"F\";\r\n    Key[Key[\"G\"] = 6] = \"G\";\r\n    Key[Key[\"H\"] = 7] = \"H\";\r\n    Key[Key[\"I\"] = 8] = \"I\";\r\n    Key[Key[\"J\"] = 9] = \"J\";\r\n    Key[Key[\"K\"] = 10] = \"K\";\r\n    Key[Key[\"L\"] = 11] = \"L\";\r\n    Key[Key[\"M\"] = 12] = \"M\";\r\n    Key[Key[\"N\"] = 13] = \"N\";\r\n    Key[Key[\"O\"] = 14] = \"O\";\r\n    Key[Key[\"P\"] = 15] = \"P\";\r\n    Key[Key[\"Q\"] = 16] = \"Q\";\r\n    Key[Key[\"R\"] = 17] = \"R\";\r\n    Key[Key[\"S\"] = 18] = \"S\";\r\n    Key[Key[\"T\"] = 19] = \"T\";\r\n    Key[Key[\"U\"] = 20] = \"U\";\r\n    Key[Key[\"V\"] = 21] = \"V\";\r\n    Key[Key[\"W\"] = 22] = \"W\";\r\n    Key[Key[\"X\"] = 23] = \"X\";\r\n    Key[Key[\"Y\"] = 24] = \"Y\";\r\n    Key[Key[\"Z\"] = 25] = \"Z\";\r\n    Key[Key[\"Up\"] = 26] = \"Up\";\r\n    Key[Key[\"Down\"] = 27] = \"Down\";\r\n    Key[Key[\"Left\"] = 28] = \"Left\";\r\n    Key[Key[\"Right\"] = 29] = \"Right\";\r\n    Key[Key[\"Space\"] = 30] = \"Space\";\r\n    Key[Key[\"Control\"] = 31] = \"Control\";\r\n    Key[Key[\"Alt\"] = 32] = \"Alt\";\r\n    Key[Key[\"Shift\"] = 33] = \"Shift\";\r\n    Key[Key[\"Enter\"] = 34] = \"Enter\";\r\n    Key[Key[\"Esc\"] = 35] = \"Esc\";\r\n    Key[Key[\"N1\"] = 36] = \"N1\";\r\n    Key[Key[\"N2\"] = 37] = \"N2\";\r\n    Key[Key[\"N3\"] = 38] = \"N3\";\r\n    Key[Key[\"N4\"] = 39] = \"N4\";\r\n    Key[Key[\"N5\"] = 40] = \"N5\";\r\n    Key[Key[\"N6\"] = 41] = \"N6\";\r\n    Key[Key[\"N7\"] = 42] = \"N7\";\r\n    Key[Key[\"N8\"] = 43] = \"N8\";\r\n    Key[Key[\"N9\"] = 44] = \"N9\";\r\n    Key[Key[\"N0\"] = 45] = \"N0\";\r\n    Key[Key[\"Plus\"] = 46] = \"Plus\";\r\n    Key[Key[\"Minus\"] = 47] = \"Minus\";\r\n    Key[Key[\"Backspace\"] = 48] = \"Backspace\";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case Key.A:\r\n            return 1;\r\n        case Key.B:\r\n            return 2;\r\n        case Key.C:\r\n            return 3;\r\n        case Key.D:\r\n            return 4;\r\n        case Key.E:\r\n            return 5;\r\n        case Key.F:\r\n            return 6;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseDelta = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // link\r\n        this.canvas = canvas;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"mousedown\", this.setMouseDown.bind(this));\r\n        canvas.addEventListener(\"mouseup\", this.setMouseUp.bind(this));\r\n        canvas.addEventListener(\"contextmenu\", (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        });\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"wheel\", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener(\"touchmove\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchstart\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchend\", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener(\"keydown\", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener(\"keypressed\", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener(\"keyup\", this.onKeyUp.bind(this));\r\n        // final\r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = this.newTime - this.oldTime;\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = this.mouseLeftPrev != this.mouseLeftDown && this.mouseLeftDown;\r\n        this.mouseRightPressed = this.mouseRightPrev != this.mouseRightDown && this.mouseRightDown;\r\n        this.mouseMiddlePressed =\r\n            this.mouseMiddlePrev != this.mouseMiddleDown && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log(\"we be scrollin' now...\")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.clientX, e.clientY);\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.canvas.focus();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vaW5wdXQtc3RhdGUudHM/MjIyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIscUNBQXFDO0FBRUk7QUFFekMsSUFBSyxHQWtESjtBQWxERCxXQUFLLEdBQUc7SUFDSix1QkFBQztJQUNELHVCQUFDO0lBQ0QsdUJBQUM7SUFDRCx1QkFBQztJQUNELHVCQUFDO0lBQ0QsdUJBQUM7SUFDRCx1QkFBQztJQUNELHVCQUFDO0lBQ0QsdUJBQUM7SUFDRCx1QkFBQztJQUNELHdCQUFDO0lBQ0Qsd0JBQUM7SUFDRCx3QkFBQztJQUNELHdCQUFDO0lBQ0Qsd0JBQUM7SUFDRCx3QkFBQztJQUNELHdCQUFDO0lBQ0Qsd0JBQUM7SUFDRCx3QkFBQztJQUNELHdCQUFDO0lBQ0Qsd0JBQUM7SUFDRCx3QkFBQztJQUNELHdCQUFDO0lBQ0Qsd0JBQUM7SUFDRCx3QkFBQztJQUNELHdCQUFDO0lBQ0QsMEJBQUU7SUFDRiw4QkFBSTtJQUNKLDhCQUFJO0lBQ0osZ0NBQUs7SUFDTCxnQ0FBSztJQUNMLG9DQUFPO0lBQ1AsNEJBQUc7SUFDSCxnQ0FBSztJQUNMLGdDQUFLO0lBQ0wsNEJBQUc7SUFDSCwwQkFBRTtJQUNGLDBCQUFFO0lBQ0YsMEJBQUU7SUFDRiwwQkFBRTtJQUNGLDBCQUFFO0lBQ0YsMEJBQUU7SUFDRiwwQkFBRTtJQUNGLDBCQUFFO0lBQ0YsMEJBQUU7SUFDRiwwQkFBRTtJQUNGLDhCQUFJO0lBQ0osZ0NBQUs7SUFDTCx3Q0FBUztBQUNiLENBQUMsRUFsREksR0FBRyxLQUFILEdBQUcsUUFrRFA7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFRO0lBQ3ZCLFFBQVEsR0FBRyxFQUFFO1FBQ1QsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNOLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNOLE9BQU8sQ0FBQyxDQUFDO1FB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Y0FBYyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNyQixJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDL0I7UUFDRCxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDOUI7UUFDRCxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvc3lzdGVtL2lucHV0LXN0YXRlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2FudmFzSW5wdXRIYW5kbGVyLnRzXG4vLyBhdXRob3IgOiBKb3MgRmVlbnN0cmFcbi8vIHB1cnBvc2UgOiBoYW5kbGUgYWxsIGlucHV0IGV2ZW50cy5cblxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xuXG5lbnVtIEtleSB7XG4gICAgQSxcbiAgICBCLFxuICAgIEMsXG4gICAgRCxcbiAgICBFLFxuICAgIEYsXG4gICAgRyxcbiAgICBILFxuICAgIEksXG4gICAgSixcbiAgICBLLFxuICAgIEwsXG4gICAgTSxcbiAgICBOLFxuICAgIE8sXG4gICAgUCxcbiAgICBRLFxuICAgIFIsXG4gICAgUyxcbiAgICBULFxuICAgIFUsXG4gICAgVixcbiAgICBXLFxuICAgIFgsXG4gICAgWSxcbiAgICBaLFxuICAgIFVwLFxuICAgIERvd24sXG4gICAgTGVmdCxcbiAgICBSaWdodCxcbiAgICBTcGFjZSxcbiAgICBDb250cm9sLFxuICAgIEFsdCxcbiAgICBTaGlmdCxcbiAgICBFbnRlcixcbiAgICBFc2MsXG4gICAgTjEsXG4gICAgTjIsXG4gICAgTjMsXG4gICAgTjQsXG4gICAgTjUsXG4gICAgTjYsXG4gICAgTjcsXG4gICAgTjgsXG4gICAgTjksXG4gICAgTjAsXG4gICAgUGx1cyxcbiAgICBNaW51cyxcbiAgICBCYWNrc3BhY2UsXG59XG5cbmZ1bmN0aW9uIHRvTWFwcGluZyhrZXk6IEtleSk6IG51bWJlciB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBLZXkuQTpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlIEtleS5COlxuICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGNhc2UgS2V5LkM6XG4gICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgY2FzZSBLZXkuRDpcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICBjYXNlIEtleS5FOlxuICAgICAgICAgICAgcmV0dXJuIDU7XG4gICAgICAgIGNhc2UgS2V5LkY6XG4gICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJS2V5cyB7XG4gICAgW2tleTogc3RyaW5nXTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIElucHV0U3RhdGUge1xuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgICB0aWNrOiBudW1iZXI7XG4gICAgb2xkVGltZTogbnVtYmVyO1xuICAgIG5ld1RpbWU6IG51bWJlcjtcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBtaW5pbXVtVGljazogbnVtYmVyO1xuXG4gICAgbW91c2VQb3M6IFZlY3RvcjIgPSBWZWN0b3IyLnplcm8oKTtcbiAgICBtb3VzZURlbHRhOiBWZWN0b3IyID0gVmVjdG9yMi56ZXJvKCk7XG4gICAgbW91c2VMZWZ0RG93biA9IGZhbHNlO1xuICAgIG1vdXNlTGVmdFByZXNzZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG1vdXNlTGVmdFByZXYgPSBmYWxzZTtcblxuICAgIG1vdXNlUmlnaHREb3duID0gZmFsc2U7XG4gICAgbW91c2VSaWdodFByZXNzZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG1vdXNlUmlnaHRQcmV2ID0gZmFsc2U7XG5cbiAgICBtb3VzZU1pZGRsZURvd24gPSBmYWxzZTtcbiAgICBtb3VzZU1pZGRsZVByZXNzZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG1vdXNlTWlkZGxlUHJldiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBrZXlzRG93bjogSUtleXMgPSB7fTtcbiAgICBwcml2YXRlIGtleXNQcmVzc2VkOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgc2Nyb2xsVmFsdWUgPSAwO1xuXG4gICAgLy8gZGVsZWdhdGUgZnVuY3Rpb25zXG4gICAgb25Nb3VzZVdoZWVsU2Nyb2xsPzogRnVuY3Rpb247XG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICAvLyBsaW5rXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuXG4gICAgICAgIC8vIHRpbWVcbiAgICAgICAgdGhpcy50aWNrID0gMDtcbiAgICAgICAgdGhpcy5vbGRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5uZXdUaW1lID0gdGhpcy5vbGRUaW1lO1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMubWluaW11bVRpY2sgPSAxMDAwIC8gMTQ0O1xuXG4gICAgICAgIC8vIG1vdXNlXG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuc2V0TW91c2VQb3MuYmluZCh0aGlzKSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuc2V0TW91c2VEb3duLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5zZXRNb3VzZVVwLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5zZXRNb3VzZVBvcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLnNldE1vdXNlU2Nyb2xsLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLnNldFRvdWNoLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5zZXRUb3VjaC5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLnNldFRvdWNoVXAuYmluZCh0aGlzKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjIzOyBpKyspIHRoaXMua2V5c0Rvd25baV0gPSBmYWxzZTtcblxuICAgICAgICAvLyBrZXlib2FyZFxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24uYmluZCh0aGlzKSk7XG4gICAgICAgIC8vIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NlZFwiLCB0aGlzLm9uS2V5UHJlc3NlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gZmluYWxcbiAgICAgICAgY2FudmFzLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHByZVVwZGF0ZSgpIHtcbiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIGNhbGxlZCBldmVyeSB0aWNrIHdpdGhpbiB3aGF0ZXZlciBjb250ZXh0IHRoaXMgaXMgdXNlZFxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aW1lXG4gICAgICAgIHRoaXMubmV3VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMudGljayA9IHRoaXMubmV3VGltZSAtIHRoaXMub2xkVGltZTtcbiAgICAgICAgdGhpcy5vbGRUaW1lID0gdGhpcy5uZXdUaW1lO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBtb3VzZVxuICAgICAgICB0aGlzLm1vdXNlTGVmdFByZXNzZWQgPSB0aGlzLm1vdXNlTGVmdFByZXYgIT0gdGhpcy5tb3VzZUxlZnREb3duICYmIHRoaXMubW91c2VMZWZ0RG93bjtcbiAgICAgICAgdGhpcy5tb3VzZVJpZ2h0UHJlc3NlZCA9IHRoaXMubW91c2VSaWdodFByZXYgIT0gdGhpcy5tb3VzZVJpZ2h0RG93biAmJiB0aGlzLm1vdXNlUmlnaHREb3duO1xuICAgICAgICB0aGlzLm1vdXNlTWlkZGxlUHJlc3NlZCA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlUHJldiAhPSB0aGlzLm1vdXNlTWlkZGxlRG93biAmJiB0aGlzLm1vdXNlTWlkZGxlRG93bjtcblxuICAgICAgICB0aGlzLm1vdXNlTGVmdFByZXYgPSB0aGlzLm1vdXNlTGVmdERvd247XG4gICAgICAgIHRoaXMubW91c2VSaWdodFByZXYgPSB0aGlzLm1vdXNlUmlnaHREb3duO1xuICAgICAgICB0aGlzLm1vdXNlTWlkZGxlUHJldiA9IHRoaXMubW91c2VNaWRkbGVEb3duO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0VXBkYXRlKCkge1xuICAgICAgICAvLyB0aGlzIGFsc28gbXVzdCBiZSBjYWxsZWQgZm9yIGtleUlzUHJlc3NlZCB0byB3b3JrXG5cbiAgICAgICAgLy8gcmVmcmVzaCBrZXlwcmVzc2VzXG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWQgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgSXNLZXlEb3duKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXNEb3duW2tleV07XG4gICAgfVxuXG4gICAgcHVibGljIElzS2V5UHJlc3NlZChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzUHJlc3NlZC5pbmNsdWRlcyhrZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5rZXlzRG93bltlLmtleV0gPT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmxvZyhlLmtleSk7XG4gICAgICAgIHRoaXMua2V5c0Rvd25bZS5rZXkudG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xuICAgICAgICB0aGlzLmtleXNQcmVzc2VkLnB1c2goZS5rZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbktleVVwKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgdGhpcy5rZXlzRG93bltlLmtleS50b0xvd2VyQ2FzZSgpXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbktleVByZXNzZWQoZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICAvLyBOT1RFOiBpIG1hZGUgYSBkaWZmZXJlbnQgc3lzdGVtIHRvIGhhbmRsZSB0aGlzLCBzZWUgb25LZXlEb3duXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRUb3VjaChlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB0aGlzLm1vdXNlUG9zID0gbmV3IFZlY3RvcjIoZS50b3VjaGVzWzBdLmNsaWVudFgsIGUudG91Y2hlc1swXS5jbGllbnRZKTtcbiAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFRvdWNoVXAoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMubW91c2VMZWZ0RG93biA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TW91c2VTY3JvbGwoZTogV2hlZWxFdmVudCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIndlIGJlIHNjcm9sbGluJyBub3cuLi5cIilcblxuICAgICAgICAvLyBub3JtYWxpemUgYWxsIHNjcm9sbGluZyBiZWhhdmlvdXJcbiAgICAgICAgbGV0IHZhbHVlID0gMC4xO1xuICAgICAgICBpZiAoZS5kZWx0YVkgPCAwKSB2YWx1ZSA9IC0wLjE7XG5cbiAgICAgICAgLy8gd2UgZG9udCB3YW50IG5lZ2F0aXZlIHNjcm9sbCB2YWx1ZXMuLi5cbiAgICAgICAgdGhpcy5zY3JvbGxWYWx1ZSA9IE1hdGgubWF4KDAsIHRoaXMuc2Nyb2xsVmFsdWUgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRNb3VzZVBvcyhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBiaXQgbWVzc3ksIEJVVCwgbXVsdGlwbHkgYnkgY2FtZXJhIHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5tb3VzZVBvcyA9IG5ldyBWZWN0b3IyKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vdXNlVXAoZTogTW91c2VFdmVudCkge1xuICAgICAgICBsZXQgY29kZSA9IGUuYnV0dG9ucztcbiAgICAgICAgaWYgKGNvZGUgPCA0KSB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlRG93biA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlIDwgMikge1xuICAgICAgICAgICAgdGhpcy5tb3VzZVJpZ2h0RG93biA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vdXNlRG93bihlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jYW52YXMuZm9jdXMoKTtcbiAgICAgICAgbGV0IGNvZGUgPSBlLmJ1dHRvbnM7XG4gICAgICAgIGlmIChjb2RlID49IDQpIHtcbiAgICAgICAgICAgIGNvZGUgLT0gNDtcbiAgICAgICAgICAgIHRoaXMubW91c2VNaWRkbGVEb3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+PSAyKSB7XG4gICAgICAgICAgICBjb2RlIC09IDI7XG4gICAgICAgICAgICB0aGlzLm1vdXNlUmlnaHREb3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+PSAxKSB7XG4gICAgICAgICAgICBjb2RlIC09IDE7XG4gICAgICAgICAgICB0aGlzLm1vdXNlTGVmdERvd24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/system/input-state.ts\n");

/***/ }),

/***/ "./src/system/stopwatch.ts":
/*!*********************************!*\
  !*** ./src/system/stopwatch.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stopwatch\": () => /* binding */ Stopwatch\n/* harmony export */ });\nclass Stopwatch {\r\n    constructor(oldTime, newTime) {\r\n        this.oldTime = oldTime;\r\n        this.newTime = newTime;\r\n    }\r\n    static new() {\r\n        let s = new Stopwatch(0, 0);\r\n        s.time();\r\n        return s;\r\n    }\r\n    time() {\r\n        this.newTime = this.getTime();\r\n        let timePast = this.newTime - this.oldTime;\r\n        this.oldTime = this.newTime;\r\n        return timePast;\r\n    }\r\n    getTime() {\r\n        return new Date().getTime();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vc3RvcHdhdGNoLnRzPzA3MmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU0sU0FBUztJQUNsQixZQUE0QixPQUFlLEVBQVUsT0FBZTtRQUF4QyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7SUFFeEUsTUFBTSxDQUFDLEdBQUc7UUFDTixJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVPLE9BQU87UUFDWCxPQUFPLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3N5c3RlbS9zdG9wd2F0Y2gudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU3RvcHdhdGNoIHtcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHByaXZhdGUgb2xkVGltZTogbnVtYmVyLCBwcml2YXRlIG5ld1RpbWU6IG51bWJlcikge31cblxuICAgIHN0YXRpYyBuZXcoKSB7XG4gICAgICAgIGxldCBzID0gbmV3IFN0b3B3YXRjaCgwLCAwKTtcbiAgICAgICAgcy50aW1lKCk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHRpbWUoKSB7XG4gICAgICAgIHRoaXMubmV3VGltZSA9IHRoaXMuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgdGltZVBhc3QgPSB0aGlzLm5ld1RpbWUgLSB0aGlzLm9sZFRpbWU7XG4gICAgICAgIHRoaXMub2xkVGltZSA9IHRoaXMubmV3VGltZTtcbiAgICAgICAgcmV0dXJuIHRpbWVQYXN0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/system/stopwatch.ts\n");

/***/ }),

/***/ "./src/system/ui.ts":
/*!**************************!*\
  !*** ./src/system/ui.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UI\": () => /* binding */ UI,\n/* harmony export */   \"Parameter\": () => /* binding */ Parameter,\n/* harmony export */   \"EnumParameter\": () => /* binding */ EnumParameter\n/* harmony export */ });\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n// name:    ui.js\r\n// author:  Jos Feenstra\r\n// purpose: lets create the UI using html & dom api, because why the hell not\r\n\r\nclass UI {\r\n    constructor(frame) {\r\n        this.globalContext = frame;\r\n        this.currentContext = frame;\r\n    }\r\n    // the context system makes sure that ui additions appear under the currently active,\r\n    // selected app, and that these ui elements are removed when switching to another app.\r\n    hide() {\r\n        this.globalContext.hidden = true;\r\n    }\r\n    show() {\r\n        this.globalContext.hidden = false;\r\n    }\r\n    addContext(appName) {\r\n        this.currentContext = this.globalContext;\r\n        let appDiv = this.addDiv(appName + \" app-interface\");\r\n        this.currentContext = appDiv;\r\n    }\r\n    setContext(appName) {\r\n        this.globalContext.getElementsByClassName(appName);\r\n    }\r\n    removeContext(appName) {\r\n        this.setContext(appName);\r\n        let count = this.currentContext.childElementCount;\r\n        for (let i = count - 1; i >= 0; i -= 1) {\r\n            this.currentContext.removeChild(this.currentContext.children.item(i));\r\n        }\r\n        let temp = this.currentContext;\r\n        this.currentContext = this.globalContext;\r\n        this.currentContext.removeChild(temp);\r\n    }\r\n    addElement(element, className = \"\") {\r\n        let el = document.createElement(element);\r\n        el.className = className;\r\n        this.currentContext.appendChild(el);\r\n        return el;\r\n    }\r\n    addDiv(classname, items = []) {\r\n        let div = this.addElement(\"div\", classname);\r\n        items.forEach((item) => {\r\n            div.appendChild(item);\r\n        });\r\n        return div;\r\n    }\r\n    addBooleanParameter(param, onInput = () => { }) {\r\n        // create hacky button\r\n        // <label class=\"check-container\">\r\n        //   <input type=\"checkbox\" checked=\"checked\">\r\n        //   <span class=\"checkmark\"></span>\r\n        // </label>\r\n        let checkbox = this.addElement(\"input\", \"checkbox\");\r\n        checkbox.type = \"checkbox\";\r\n        checkbox.addEventListener(\"change\", () => {\r\n            let state = checkbox.checked;\r\n            param.set(state ? 1 : 0);\r\n            onInput(checkbox.valueAsNumber);\r\n            text1.innerText = param.name;\r\n        });\r\n        checkbox.checked = param.get() == 1;\r\n        // this needs to be done to make css happy\r\n        let checkcontainer = this.addElement(\"label\", \"check-container\");\r\n        let checkmark = this.addElement(\"span\", \"checkmark\");\r\n        checkcontainer.appendChild(checkbox);\r\n        checkcontainer.appendChild(checkmark);\r\n        // text\r\n        let text1 = this.addElement(\"p\", \"control-text\");\r\n        text1.innerText = param.name;\r\n        // TODO update beyond our control\r\n        param.onset = () => {\r\n            // console.log(\"TODO\");\r\n        };\r\n        this.addDiv(\"control\", [text1, checkcontainer]);\r\n        return checkbox;\r\n    }\r\n    addParameter(param, onInput = () => { }) {\r\n        let p;\r\n        if (param instanceof EnumParameter) {\r\n            p = param.p;\r\n        }\r\n        else {\r\n            p = param;\r\n        }\r\n        // create slider itself\r\n        let slider = this.addRangeInput(p, onInput);\r\n        // create slider title\r\n        let text1 = this.addElement(\"p\", \"control-text\");\r\n        text1.innerText = p.name;\r\n        // create slider value indicator\r\n        let text2 = this.addElement(\"p\", \"control-value\");\r\n        if (param instanceof EnumParameter) {\r\n            text2.innerText = param.getName();\r\n        }\r\n        else {\r\n            text2.innerText = slider.value;\r\n        }\r\n        // put them all together\r\n        this.addDiv(\"control\", [text1, slider, text2]);\r\n        // on update in code\r\n        p.onset = () => {\r\n            // console.log(\"TODO\");\r\n        };\r\n        // on update by user\r\n        slider.oninput = () => {\r\n            p.set(slider.valueAsNumber);\r\n            onInput(slider.valueAsNumber);\r\n            if (param instanceof EnumParameter) {\r\n                text2.innerText = param.getName();\r\n            }\r\n            else {\r\n                text2.innerText = slider.value;\r\n            }\r\n        };\r\n        return slider;\r\n    }\r\n    addRangeInput(param, onInput = () => { }) {\r\n        // a slider looks like this : <input type=\"range\" min=\"1\" max=\"100\" step=\"1\" value=\"50\">\r\n        let slider = this.addElement(\"input\", \"control-slider\");\r\n        slider.type = \"range\";\r\n        slider.min = param.min.toString();\r\n        slider.max = param.max.toString();\r\n        slider.valueAsNumber = param.state;\r\n        slider.step = param.step.toString();\r\n        return slider;\r\n    }\r\n    addText(text) {\r\n        let p = this.addElement(\"p\", \"ui-text\");\r\n        p.innerText = text;\r\n    }\r\n    addButton(name, callback) {\r\n        let button = this.addElement(\"button\", \"control-button\");\r\n        button.innerText = name;\r\n        button.addEventListener(\"click\", callback);\r\n        let text1 = this.addElement(\"p\", \"control-text\");\r\n        let control = this.addDiv(\"control\", [text1, button]);\r\n        return control;\r\n    }\r\n    addDropdown(enumParam, onchange) {\r\n        // <select>\r\n        //  <option>Cappuccino</option>\r\n        //  <option>Mocha</option>\r\n        // </select>\r\n        let count = enumParam.values.length;\r\n        let dropdownSelector = this.addElement(\"select\", \"enum-selector dropdown-select\");\r\n        for (let i = 0; i < count; i++) {\r\n            let o = this.addElement(\"option\", \"enum-item\");\r\n            o.innerText = enumParam.values[i];\r\n            dropdownSelector.appendChild(o);\r\n        }\r\n        // console.log(e);\r\n        dropdownSelector.addEventListener(\"change\", (e) => {\r\n            let target = e.target;\r\n            let i = target.selectedIndex;\r\n            enumParam.set(i);\r\n            onchange(i);\r\n        });\r\n        this.addDiv(\"dropdown-dark\", [dropdownSelector]);\r\n        return dropdownSelector;\r\n    }\r\n}\r\n// a slider parameter\r\nclass Parameter {\r\n    constructor(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        this.name = name;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n        this.state = state;\r\n        this.set(this.state);\r\n    }\r\n    static new(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        return new Parameter(name, state, min, max, step);\r\n    }\r\n    static newBoolean(name, state) {\r\n        return new Parameter(name, state ? 1 : 0, 0, 1, 1);\r\n    }\r\n    get() {\r\n        return this.state;\r\n    }\r\n    set(state) {\r\n        // something is still wrong here...\r\n        let clamped = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.clamp(state, this.min, this.max);\r\n        let rest = state - this.min;\r\n        let times = Math.round(rest / this.step);\r\n        let stepped = this.min + this.step * times;\r\n        this.state = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.clamp(stepped, this.min, this.max);\r\n        if (this.onset)\r\n            this.onset(this.state);\r\n    }\r\n    getNPermutations() {\r\n        return Math.min((this.max - this.min) / this.step + 1);\r\n    }\r\n}\r\n// a parameter representing distinct states\r\nclass EnumParameter {\r\n    constructor(p, values) {\r\n        this.p = p;\r\n        this.values = values;\r\n    }\r\n    static new(name, state, descriptions) {\r\n        return new EnumParameter(new Parameter(name, state, 0, descriptions.length - 1, 1), descriptions);\r\n    }\r\n    getName() {\r\n        return this.values[this.get()];\r\n    }\r\n    // passthroughs\r\n    get() {\r\n        return this.p.get();\r\n    }\r\n    set(state) {\r\n        return this.p.set(state);\r\n    }\r\n    getNPermutations() {\r\n        return this.p.getNPermutations();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/ui.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./demo/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;