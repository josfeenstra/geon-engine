(()=>{"use strict";eval('\n// UNUSED EXPORTS: Core\n\n;// CONCATENATED MODULE: ./src/math/vector.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass Vector3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    // #endregion\r\n    // #region basics\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return this.constructor(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z == v.z;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        this.z /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        this.z = Math.min(this.z, other.z);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        this.z = Math.max(this.z, other.z);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        this.z = Math.max(min.z, Math.min(max.z, this.z));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        this.z = Math.max(minVal, Math.min(maxVal, this.z));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        this.z = Math.floor(this.z);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        this.z = Math.ceil(this.z);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        this.z = Math.round(this.z);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n        return this;\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x)\r\n            + Math.abs(this.y - v.y)\r\n            + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        this.z += (other.z - this.z) * alpha;\r\n        return this;\r\n    }\r\n    // #endregion\r\n    // #region math specific \r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector \r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectOnPlane(normal) {\r\n        // project a vector \r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.sub(_vector);\r\n    }\r\n    mirror(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.sub(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n}\r\n// vector object used within heavy calculations, to make sure we dont create Vectors all over the place.\r\nconst _vector = new Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\nfunction radToDeg(r) {\r\n    return r * 180 / Math.PI;\r\n}\r\nfunction degToRad(d) {\r\n    return d * Math.PI / 180;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/system/input-state.ts\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key["A"] = 0] = "A";\r\n    Key[Key["B"] = 1] = "B";\r\n    Key[Key["C"] = 2] = "C";\r\n    Key[Key["D"] = 3] = "D";\r\n    Key[Key["E"] = 4] = "E";\r\n    Key[Key["F"] = 5] = "F";\r\n    Key[Key["G"] = 6] = "G";\r\n    Key[Key["H"] = 7] = "H";\r\n    Key[Key["I"] = 8] = "I";\r\n    Key[Key["J"] = 9] = "J";\r\n    Key[Key["K"] = 10] = "K";\r\n    Key[Key["L"] = 11] = "L";\r\n    Key[Key["M"] = 12] = "M";\r\n    Key[Key["N"] = 13] = "N";\r\n    Key[Key["O"] = 14] = "O";\r\n    Key[Key["P"] = 15] = "P";\r\n    Key[Key["Q"] = 16] = "Q";\r\n    Key[Key["R"] = 17] = "R";\r\n    Key[Key["S"] = 18] = "S";\r\n    Key[Key["T"] = 19] = "T";\r\n    Key[Key["U"] = 20] = "U";\r\n    Key[Key["V"] = 21] = "V";\r\n    Key[Key["W"] = 22] = "W";\r\n    Key[Key["X"] = 23] = "X";\r\n    Key[Key["Y"] = 24] = "Y";\r\n    Key[Key["Z"] = 25] = "Z";\r\n    Key[Key["Up"] = 26] = "Up";\r\n    Key[Key["Down"] = 27] = "Down";\r\n    Key[Key["Left"] = 28] = "Left";\r\n    Key[Key["Right"] = 29] = "Right";\r\n    Key[Key["Space"] = 30] = "Space";\r\n    Key[Key["Control"] = 31] = "Control";\r\n    Key[Key["Alt"] = 32] = "Alt";\r\n    Key[Key["Shift"] = 33] = "Shift";\r\n    Key[Key["Enter"] = 34] = "Enter";\r\n    Key[Key["Esc"] = 35] = "Esc";\r\n    Key[Key["N1"] = 36] = "N1";\r\n    Key[Key["N2"] = 37] = "N2";\r\n    Key[Key["N3"] = 38] = "N3";\r\n    Key[Key["N4"] = 39] = "N4";\r\n    Key[Key["N5"] = 40] = "N5";\r\n    Key[Key["N6"] = 41] = "N6";\r\n    Key[Key["N7"] = 42] = "N7";\r\n    Key[Key["N8"] = 43] = "N8";\r\n    Key[Key["N9"] = 44] = "N9";\r\n    Key[Key["N0"] = 45] = "N0";\r\n    Key[Key["Plus"] = 46] = "Plus";\r\n    Key[Key["Minus"] = 47] = "Minus";\r\n    Key[Key["Backspace"] = 48] = "Backspace";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case (Key.A): return 1;\r\n        case (Key.B): return 2;\r\n        case (Key.C): return 3;\r\n        case (Key.D): return 4;\r\n        case (Key.E): return 5;\r\n        case (Key.F): return 6;\r\n        default: return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = Vector2.zero();\r\n        this.mouseDelta = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("mousedown", this.setMouseDown.bind(this));\r\n        canvas.addEventListener("mouseup", this.setMouseUp.bind(this));\r\n        canvas.addEventListener("contextmenu", (e) => { e.preventDefault(); e.stopPropagation(); });\r\n        canvas.addEventListener("mousemove", this.setMousePos.bind(this));\r\n        canvas.addEventListener("wheel", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener("touchmove", this.setTouch.bind(this));\r\n        canvas.addEventListener("touchstart", this.setTouch.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener("keydown", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener("keypressed", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener("keyup", this.onKeyUp.bind(this));\r\n        // final   \r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = (this.newTime - this.oldTime);\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n        this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n        this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log("we be scrollin\' now...")\r\n        this.scrollValue = e.deltaY;\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new Vector2(e.clientX, e.clientY);\r\n        ;\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/renderer.ts\n// webgl-helpers.ts\r\n// \r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this \r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth ||\r\n            gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n}\r\nfunction initWebglContext(canvas) {\r\n    let possiblyGl = canvas.getContext("webgl");\r\n    if (possiblyGl == undefined) {\r\n        console.log("webgl unavailable...");\r\n    }\r\n    let gl = possiblyGl;\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clearDepth(1.);\r\n    return gl;\r\n}\r\n// \r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed["StaticDraw"] = 0] = "StaticDraw";\r\n    DrawSpeed[DrawSpeed["DynamicDraw"] = 1] = "DynamicDraw"; // if you plan on using the \'set\' method every frame \r\n})(DrawSpeed || (DrawSpeed = {}));\r\n// the setup of a program containing 2 shader scripts\r\nfunction compileShader(gl, shaderSource, shaderType) {\r\n    var shader = gl.createShader(shaderType);\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        throw "could not compile shader:" + shaderSource + gl.getShaderInfoLog(shader);\r\n    }\r\n    return shader;\r\n}\r\nfunction createProgram(gl, vertexShader, fragmentShader) {\r\n    var program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!success) {\r\n        throw ("program failed to link:" + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n}\r\n;\r\nfunction createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n    var vertexShader = compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n    var fragmentShader = compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n    return createProgram(gl, vertexShader, fragmentShader);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/array.ts\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array to add interoperability with Vector2 & Vector3, \r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n// \r\n// NOTE:    all these small wrappers might not be good pratice, but i \r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\nclass FloatArray {\r\n    constructor(count, dim) {\r\n        this.data = new Float32Array(count * dim);\r\n        this.count = count; // number of entries\r\n        this.dim = dim; // dimention of entry\r\n    }\r\n    setAll(data) {\r\n        this.data.set(data);\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this.dim + j];\r\n    }\r\n    getRow(i, j) {\r\n        return this.data[i * this.dim + j];\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this.dim + j] = value;\r\n    }\r\n    setRow(i, row) {\r\n        if (this.dim != row.length)\r\n            throw "dimention of floatarray is not " + row.length;\r\n    }\r\n}\r\nclass Vector2Array extends FloatArray {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromNativeArray(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i] = vecs[i].x;\r\n            array.data[i + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this.dim + 0] = vec.x;\r\n        this.data[i * this.dim + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new Vector2(this.data[i * this.dim + 0], this.data[i * this.dim + 1]);\r\n    }\r\n    toNativeArray() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this.count; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n}\r\nclass Vector3Array extends FloatArray {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromNativeArray(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i] = vecs[i].x;\r\n            array.data[i + 1] = vecs[i].y;\r\n            array.data[i + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this.dim + 0] = vec.x;\r\n        this.data[i * this.dim + 1] = vec.y;\r\n        this.data[i * this.dim + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new Vector3(this.data[i * this.dim + 0], this.data[i * this.dim + 1], this.data[i * this.dim + 2]);\r\n    }\r\n    toNativeArray() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this.count; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n}\r\nclass FaceArray extends FloatArray {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/geo/mesh.ts\n// Mesh.Ts\r\n// Purpose: obj class for dealing with that specific filetype, and meshes in general\r\n// Author: Jos Feenstra\r\n\r\nclass Mesh {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.texture = undefined;\r\n        this.verts = new Vector3Array(vertCount);\r\n        this.norms = new Vector3Array(normCount);\r\n        this.uvs = new Vector2Array(uvCount);\r\n        this.faces = new FaceArray(faceCount);\r\n        this.texture = texture;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the \r\n        // Array class. \r\n        let mesh = new Mesh(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        mesh.verts.setAll(verts);\r\n        mesh.norms.setAll(norms);\r\n        mesh.uvs.setAll(uvs);\r\n        mesh.faces.setAll(faces);\r\n        return mesh;\r\n    }\r\n    exportToObj(path) {\r\n    }\r\n    setNeighbors() {\r\n    }\r\n    getLineIds() {\r\n        // 3 edges per face, 2 indices per edge\r\n        let count = this.faces.count * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < this.faces.count; i++) {\r\n            let iData = i * 6;\r\n            data[iData] = this.faces.get(i, 0);\r\n            data[iData + 1] = this.faces.get(i, 1);\r\n            data[iData + 2] = this.faces.get(i, 1);\r\n            data[iData + 3] = this.faces.get(i, 2);\r\n            data[iData + 4] = this.faces.get(i, 2);\r\n            data[iData + 5] = this.faces.get(i, 0);\r\n        }\r\n        console.log(data);\r\n        return data;\r\n    }\r\n}\r\n;\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how \r\n    // many vertices or faces well get. \r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float \r\n    let faces = []; // 9 long ints, u16\'s should suffice. \r\n    // note : this is very inefficient, but it\'ll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split(\'\\n\');\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === \'\' || line.startsWith(\'#\')) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case \'v\':\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vn\':\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'vt\':\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case \'f\':\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn(\'unhandled keyword:\', keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    console.log("number of vertices: " + verts.length / 3);\r\n    console.log("number of faces: " + faces.length / 3);\r\n    let mesh = Mesh.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// verbose way of processing one single vertex/normal/uv combination in a face. \r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split(\'/\');\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw "invalid face found when processing";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal        \r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/input/domwrappers.ts\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(env, filesCallback) {\r\n    // setup file upload\r\n    env.addEventListener(\'dragover\', function (ev) {\r\n        //add hover class when drag over\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        // console.log("entering drag....")\r\n        return false;\r\n    });\r\n    env.addEventListener(\'dragleave\', function (ev) {\r\n        //remove hover class when drag out\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        // console.log("leaving drag....")\r\n        return false;\r\n    });\r\n    env.addEventListener(\'drop\', function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return false;\r\n    });\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then(imageData => resolve(imageData), error => reject(error));\r\n    });\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement(\'img\');\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement(\'canvas\');\r\n    ;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext(\'2d\');\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/math/matrix.ts\n//\r\n// [JF]\r\n// \r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE: Matrix3 & Matr\r\n// generic all-pupose matrix of floats\r\nclass Matrix {\r\n    constructor(width, height, data = []) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.data = new Float32Array(this.width * this.height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this.height * this.width))\r\n            throw "data.length does not match width * height " + data.length.toString();\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.data[i] = data[i];\r\n        }\r\n    }\r\n    fill(value) {\r\n        let size = this.height * this.width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    get(x, y) {\r\n        return this.data[y * this.width + x];\r\n    }\r\n    set(x, y, value) {\r\n        this.data[y * this.width + x] = value;\r\n    }\r\n    // perform operation directly on all elements\r\n    divEntries(value) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] /= value;\r\n        }\r\n        return this;\r\n    }\r\n    // perform operation directly on elements\r\n    scaleEntries(value) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] *= value;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix3 extends (/* unused pure expression or super */ null && (Matrix)) {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([\r\n            2 / width, 0, 0,\r\n            0, -2 / height, 0,\r\n            -1, 1, 1,\r\n        ]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1,\r\n        ]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([\r\n            sx, 0, 0,\r\n            0, sy, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3\'s \r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here, \r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00, -d * t10, d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix4 extends Matrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    multiply(other) {\r\n        const a = this.data;\r\n        const b = other.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = 2 * near / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 * near / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            tx, ty, tz, 1\r\n        ]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix \r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([\r\n            sx, 0, 0, 0,\r\n            0, sy, 0, 0,\r\n            0, 0, sz, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/camera.ts\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding \r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 3) {\r\n        this.angleAlpha = 0; // rotation x \r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = Vector2.zero();\r\n        canvas.addEventListener("wheel", this.setMouseScroll.bind(this));\r\n        this.offset = new Vector3(0, 0, -z_offset);\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log("we be scrollin\' now...")\r\n        this.offset.z -= e.deltaY * 0.1;\r\n    }\r\n    updateWithControls(state) {\r\n        if (state.mouseLeftPressed) {\r\n            this.mousePos = state.mousePos.clone();\r\n        }\r\n        if (state.mouseLeftDown) {\r\n            let newPos = state.mousePos.clone();\r\n            let delta = state.mousePos.clone().sub(this.mousePos);\r\n            this.mousePos = newPos;\r\n            // console.log(delta);\r\n            this.angleAlpha -= delta.y * 0.01;\r\n            this.angleBeta -= delta.x * 0.01;\r\n        }\r\n        if (state.IsKeyDown("q"))\r\n            this.offset.z += 0.01;\r\n        if (state.IsKeyDown("e"))\r\n            this.offset.z -= 0.01;\r\n        if (state.IsKeyDown("q"))\r\n            this.offset.z += 0.01;\r\n        if (state.IsKeyDown("e"))\r\n            this.offset.z -= 0.01;\r\n        if (state.IsKeyDown("a"))\r\n            this.offset.x += 0.01;\r\n        if (state.IsKeyDown("d"))\r\n            this.offset.x -= 0.01;\r\n        if (state.IsKeyDown("s"))\r\n            this.offset.y += 0.01;\r\n        if (state.IsKeyDown("w"))\r\n            this.offset.y -= 0.01;\r\n    }\r\n    getRenderToScreenMatrix(canvas) {\r\n        let pos = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        const pi = Math.PI;\r\n        const fov = 45. * pi / 100.;\r\n        const Z_FAR = 1000.;\r\n        const Z_NEAR = 0.1;\r\n        let z_plane = -1. / Math.tan(pi / 8.);\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // translated to fit screen\r\n        let offset = Matrix4.newTranslation(pos.x, pos.y, pos.z);\r\n        // rotated by user\r\n        let x_rotation = Matrix4.newXRotation(angleA);\r\n        let y_rotation = Matrix4.newYRotation(angleB);\r\n        let rotation = x_rotation.multiply(y_rotation);\r\n        let transform = offset.multiply(rotation);\r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = Matrix4.newPerspective(fov, aspect, Z_NEAR, Z_FAR);\r\n        // return\r\n        return projection.multiply(transform);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/dot-renderer3.ts\n// jos feenstra\r\n\r\nclass DotRenderer3 extends Renderer {\r\n    constructor(gl, size = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n        uniform float u_size;\n\n        attribute vec3 a_vertex;\n\n        void main() {\n            // Set the size of a rendered point.\n            gl_PointSize = u_size;\n\n            // Transform the location of the vertex.\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\n        }\n\n        `;\r\n        let fragmentSourceSquare = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        // vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        let fragmentSourceRound = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n        vec2 center = vec2(0.5, 0.5);\n\n        void main() {\n            if (distance(center, gl_PointCoord) > 0.5) {\n               discard;\n            }\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_size = gl.getUniformLocation(this.program, "u_size");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        this.color = color;\r\n        this.size = size;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, "a_vertex");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    // render 1 image to the screen\r\n    renderQuick(gl, matrix, data) {\r\n        const COMPONENTS_PER_ITERATION = 3;\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = COMPONENTS_PER_ITERATION; // componenets per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don\'t normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // fill with data;\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\r\n        // Draw the point.\r\n        var primitiveType = gl.POINTS;\r\n        var offset = 0;\r\n        var count = data.length / COMPONENTS_PER_ITERATION;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    render(gl, matrix, dots) {\r\n        let data = this.toFloat32Array(dots);\r\n        return this.renderQuick(gl, matrix, data);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    toFloat32Array(dots) {\r\n        let data = new Float32Array(dots.length * 3);\r\n        for (let i = 0; i < dots.length; i++) {\r\n            data[i * 3] = dots[i].x;\r\n            data[i * 3 + 1] = dots[i].y;\r\n            data[i * 3 + 2] = dots[i].z;\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/simple-line-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\nclass SimpleLineRenderer extends Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(gl, verts, indices, speed = DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = indices.length;\r\n        // vertices \r\n        const size = 3; // size of a vertex, in number of floats \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, this.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/render/simple-mesh-renderer.ts\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass SimpleMeshRenderer extends Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\n        precision mediump int;\n        precision mediump float;\n\n        attribute vec4 a_position;\n        uniform mat4 u_transform;\n        uniform vec4 u_color;\n\n        void main() {\n            gl_Position = u_transform * a_position;\n        }\n        `;\r\n        const fs = `\n        precision mediump int;\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main () {\n            gl_FragColor = u_color;\n        }\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, "u_transform");\r\n        this.u_color = gl.getUniformLocation(this.program, "u_color");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        // we need 2 buffers \r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, "a_position");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    set(gl, verts, faces, speed = DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = faces.data.length;\r\n        // vertices \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        var size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces.data), this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/app.ts\nclass App {\r\n    constructor() {\r\n        // unique constructor    \r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/app/obj-loader-app.ts\n// obj-loader-app.ts\r\n//\r\n// author : Jos Feenstra\r\n// purpose : drag an obj to the canvas, and view it on the web\r\nvar obj_loader_app_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ObjLoaderApp extends App {\r\n    constructor(gl, canvas) {\r\n        super();\r\n        this.gl = gl; // this is bad practice, but i need it during procesFiles\r\n        this.dotRenderer = new DotRenderer3(gl, 2, [1, 0, 0, 1], false);\r\n        this.lineRenderer = new SimpleLineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new Camera(canvas);\r\n        addDropFileEventListeners(document, processFiles.bind(this));\r\n    }\r\n    start() {\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.updateWithControls(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.getRenderToScreenMatrix(canvas);\r\n        if (this.obj == undefined)\r\n            this.dotRenderer.render(gl, matrix, [new Vector3(0, 0, 0), new Vector3(1, 1, 1)]);\r\n        else {\r\n            this.dotRenderer.renderQuick(gl, matrix, this.obj.verts.data);\r\n            this.meshRenderer.render(gl, matrix);\r\n            this.lineRenderer.render(gl, matrix);\r\n        }\r\n    }\r\n}\r\nfunction processFiles(files) {\r\n    return obj_loader_app_awaiter(this, void 0, void 0, function* () {\r\n        console.log(files);\r\n        // assume its 1 file, the obj file.\r\n        let file = files[0];\r\n        // see if we can build an correct obj from the files\r\n        let objtext = yield loadTextFromFile(file);\r\n        this.obj = meshFromObj(objtext);\r\n        // scale down if too big\r\n        this.meshRenderer.set(this.gl, this.obj.verts, this.obj.faces);\r\n        this.lineRenderer.set(this.gl, this.obj.verts, this.obj.getLineIds());\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n// Author: Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\nconst REALTIME_DEMO = false;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById("canvas");\r\n    let video = document.getElementById("camera");\r\n    let context = document.getElementById("interface");\r\n    let cameraOn = document.getElementById("camera-on");\r\n    let cameraStop = document.getElementById("camera-off");\r\n    let buttonPredict = document.getElementById("predict");\r\n    let gl = initWebglContext(canvas);\r\n    const core = new Core(canvas, gl);\r\n    //core.addApp(new DebugApp(canvas, context));\r\n    // core.addApp(new RectangleApp(gl)); \r\n    // core.addApp(new DotApp3(gl, canvas)); \r\n    core.addApp(new ObjLoaderApp(gl, canvas));\r\n    //addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP)\r\n            return;\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    // loop();\r\n    requestAnimationFrame(loop);\r\n    // we broke out of the loop\r\n    // console.log("app has stopped.");\r\n}\r\nwindow.addEventListener("load", function () {\r\n    main();\r\n}, false);\r\nclass Core {\r\n    constructor(canvas, gl) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new InputState(canvas);\r\n        this.apps = [];\r\n    }\r\n    addApp(app) {\r\n        this.apps.push(app);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        if (this.state.IsKeyPressed("Esc"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height ||\r\n            window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL21hdGgvdmVjdG9yLnRzP2RkMTAiLCJ3ZWJwYWNrOi8vc2ZlcmVkLWxhbmRtYXJrcy8uL3NyYy9zeXN0ZW0vaW5wdXQtc3RhdGUudHM/MjIyOCIsIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3JlbmRlci9yZW5kZXJlci50cz9iNWM3Iiwid2VicGFjazovL3NmZXJlZC1sYW5kbWFya3MvLi9zcmMvbWF0aC9hcnJheS50cz9lNGY5Iiwid2VicGFjazovL3NmZXJlZC1sYW5kbWFya3MvLi9zcmMvZ2VvL21lc2gudHM/M2U1ZCIsIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2lucHV0L2RvbXdyYXBwZXJzLnRzPzc0OGIiLCJ3ZWJwYWNrOi8vc2ZlcmVkLWxhbmRtYXJrcy8uL3NyYy9tYXRoL21hdHJpeC50cz81YTM4Iiwid2VicGFjazovL3NmZXJlZC1sYW5kbWFya3MvLi9zcmMvcmVuZGVyL2NhbWVyYS50cz9iZGIzIiwid2VicGFjazovL3NmZXJlZC1sYW5kbWFya3MvLi9zcmMvcmVuZGVyL2RvdC1yZW5kZXJlcjMudHM/YjBjZCIsIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3JlbmRlci9zaW1wbGUtbGluZS1yZW5kZXJlci50cz8wYzM2Iiwid2VicGFjazovL3NmZXJlZC1sYW5kbWFya3MvLi9zcmMvcmVuZGVyL3NpbXBsZS1tZXNoLXJlbmRlcmVyLnRzP2Q5MTMiLCJ3ZWJwYWNrOi8vc2ZlcmVkLWxhbmRtYXJrcy8uL3NyYy9hcHAvYXBwLnRzPzVkYjUiLCJ3ZWJwYWNrOi8vc2ZlcmVkLWxhbmRtYXJrcy8uL3NyYy9hcHAvb2JqLWxvYWRlci1hcHAudHM/YWFmNCIsIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVCQUF1QjtBQUN2Qiw0QkFBNEI7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LENBQVU7UUFFVixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLENBQVM7UUFFWCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsR0FBRyxDQUFDLENBQVU7UUFFVixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLENBQVM7UUFFZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWM7UUFFcEIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWM7UUFFakIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQVksRUFBRSxHQUFZO1FBRS9CLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxXQUFXLENBQUMsTUFBYSxFQUFFLE1BQWE7UUFFdkMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVUsRUFBRSxHQUFVO1FBRWpDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUUsTUFBTSxJQUFJLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELEtBQUs7UUFFSixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJO1FBRUgsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSztRQUVKLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFdBQVc7UUFFVixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDO1FBQzdELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDbkUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElB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QUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFD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QUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFcEUsZUFBZTtRQUNmLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNaLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHO1lBQzNCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9ELENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9ELENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQUVELHdDQUF3QztBQUN4Qyw4QkFBOEI7QUFDdkIsTUFBTSxPQUFRLFNBQVEsTUFBTTtJQUUvQixZQUFZLE9BQWlCLEVBQUU7UUFDM0IsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXO1FBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQztZQUNmLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7U0FDVixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFjO1FBQ3pCLElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFDNUI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWM7UUFFbkIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNwQixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBRXJCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXZCLE9BQU8sSUFBSSxPQUFPLENBQUM7WUFDZixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztZQUM3QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRztTQUNoRCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBR0QsU0FBUztRQUNMLElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFFM0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXBCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBdUIsRUFBRSxNQUFlLEVBQUUsRUFBVztRQUVsRSxJQUFJLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzNCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzRCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzdDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFbkQsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztR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Q0FBQyxDQUFDO1FBRTNCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7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RyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDNUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDNUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDNUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFFNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ1gsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCx5QkFBeUI7SUFDekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVU7UUFDL0MsT0FBTyxJQUFJLE9BQU8sQ0FBQztZQUNmLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7WUFDUixDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDO1lBQ1IsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQztZQUNSLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUM7U0FDWCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUc7Ozs7Ozs7OztPQVNHO0lBQ1AsS0FBSyxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVTtRQUVwQyxtQ0FBbUM7UUFDbkMsZ0RBQWdEO1FBRWhELElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRWxCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTVCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNYLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbkI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFVBQVUsQ0FBQyxXQUFvQixFQUFFLFVBQXNCLEVBQUUsS0FBYztRQUVuRSxJQUFJLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFdEIsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUV2QixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsQixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsQixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsQixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkIsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVosT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELDZCQUE2QjtJQUM3Qix5R0FBeUc7SUFFekcsOEVBQThFO0lBQzlFLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIseUJBQXlCO0lBRXpCLHFDQUFxQztJQUVyQyx1QkFBdUI7SUFDdkIsZ0RBQWdEO0lBQ2hELDZCQUE2QjtJQUM3QixvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQywyQ0FBMkM7SUFDM0Msd0RBQXdEO0lBQ3hELG9DQUFvQztJQUNwQyw2QkFBNkI7SUFDN0Isb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyw4QkFBOEI7SUFDOUIsd0RBQXdEO0lBQ3hELG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsNkJBQTZCO0lBQzdCLG9DQUFvQztJQUNwQyxlQUFlO0lBQ2Ysd0RBQXdEO0lBQ3hELG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLDZCQUE2QjtJQUM3QixRQUFRO0lBQ1IsSUFBSTtJQUVKLG1EQUFtRDtJQUNuRCwyQ0FBMkM7SUFDM0MsNkNBQTZDO0lBQzdDLDhDQUE4QztJQUU5QyxpRUFBaUU7SUFDakUsb0NBQW9DO0lBQ3BDLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIsUUFBUTtJQUVSLGdDQUFnQztJQUNoQyxnQ0FBZ0M7SUFDaEMsZ0NBQWdDO0lBRWhDLGlDQUFpQztJQUNqQyxtQ0FBbUM7SUFFbkMsNEJBQTRCO0lBQzVCLDRCQUE0QjtJQUM1Qiw0QkFBNEI7SUFFNUIsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiwwQkFBMEI7SUFFMUIsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiwwQkFBMEI7SUFFMUIsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiwyQkFBMkI7SUFFM0Isa0RBQWtEO0lBRWxELHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLElBQUk7SUFFSixXQUFXO1FBRVAsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUVsQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUV2QixJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQzlDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQzlDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQy9DLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQy9DLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUUvQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsT0FBTztRQUVILElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRWxCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRXZCLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDOUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDOUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDL0MsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDL0MsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUUxRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUMvQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUMvQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNoRCxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNoRCxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsRCxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsRCxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNuRCxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNuRCxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdB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TSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFFMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELHVCQUF1QixDQUFDLE1BQXlCO1FBRTdDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBRTVCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkIsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDNUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNuQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0QyxVQUFVO1FBQ1YsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZ0NBQWdDO1FBRTNFLDJCQUEyQjtRQUMzQixJQUFJLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpELGtCQUFrQjtRQUNsQixJQUFJLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9DLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUMsdUJBQXVCO1FBQ3ZCLG9FQUFvRTtRQUNwRSxJQUFJLFVBQVUsR0FBRyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVwRSxTQUFTO1FBQ1QsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FFSjs7O0FDN0ZELGVBQWU7QUFJdUI7QUFFL0IsTUFBTSxZQUFhLFNBQVEsUUFBUTtJQWF0QyxZQUFZLEVBQXlCLEVBQ2pDLE9BQWMsQ0FBQyxFQUNmLFFBQWtCLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQzNCLFNBQWlCLElBQUk7UUFFckIsdUVBQXVFO1FBQ3ZFLHVFQUF1RTtRQUN2RSx3REFBd0Q7UUFDeEQsMkJBQTJCO1FBQzNCLElBQUksWUFBWSxHQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FrQjFCLENBQUM7UUFDRixJQUFJLG9CQUFvQixHQUFXOzs7Ozs7Ozs7O1NBVWxDLENBQUM7UUFFRixJQUFJLG1CQUFtQixHQUFXOzs7Ozs7Ozs7Ozs7O1NBYWpDLENBQUM7UUFFRixnQkFBZ0I7UUFDaEIsSUFBSSxNQUFNLEVBQUU7WUFDUixLQUFLLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDSCxLQUFLLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBRSxDQUFDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFFL0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIseUVBQXlFO1FBQ3pFLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFHLENBQUM7UUFDNUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCwrQkFBK0I7SUFDL0IsV0FBVyxDQUFDLEVBQXlCLEVBQUUsTUFBZSxFQUFFLElBQWtCO1FBRXRFLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxDQUFDO1FBRW5DLCtDQUErQztRQUMvQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QixlQUFlO1FBQ2YsNEJBQTRCO1FBQzVCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZGLCtCQUErQjtRQUMvQixFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUV2RCw2RUFBNkU7UUFDN0UsSUFBSSxJQUFJLEdBQUcsd0JBQXdCLENBQUMsQ0FBQyw0QkFBNEI7UUFDakUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFHLDJCQUEyQjtRQUNsRCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQywyQkFBMkI7UUFDbEQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQVEsK0VBQStFO1FBQ3RHLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFRLHVDQUF1QztRQUM5RCxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFL0Usa0JBQWtCO1FBQ2xCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXRELGtCQUFrQjtRQUNsQixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQzlCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7UUFDbkQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUMsRUFBeUIsRUFBRSxNQUFlLEVBQUUsSUFBZTtRQUU5RCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCwyREFBMkQ7SUFDM0QsY0FBYyxDQUFDLElBQWU7UUFDMUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKOzs7QUNuSkQsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4QiwyQ0FBMkM7QUFJTTtBQUUxQyxNQUFNLGtCQUFtQixTQUFRLFFBQVE7SUFTNUMsWUFBWSxFQUF5QixFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQztRQUV0RCx1RUFBdUU7UUFDdkUsdUVBQXVFO1FBQ3ZFLHdEQUF3RDtRQUN4RCwyQkFBMkI7UUFDM0IsTUFBTSxFQUFFLEdBQUc7Ozs7Ozs7Ozs7O1NBV1YsQ0FBQztRQUVGLE1BQU0sRUFBRSxHQUFHOzs7Ozs7Ozs7U0FTVixDQUFDO1FBRUYsb0JBQW9CO1FBQ3BCLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFFLENBQUM7UUFDdkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUUsQ0FBQztRQUMvRCxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFZixxQkFBcUI7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRyxDQUFDO0lBQzNDLENBQUM7SUFFRCxHQUFHLENBQUMsRUFBeUIsRUFBRSxLQUFtQixFQUFFLE9BQW9CLEVBQUUsUUFBbUIsb0JBQW9CO1FBRTdHLHVDQUF1QztRQUN2QyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNO1FBRTNCLFlBQVk7UUFDWixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyx5Q0FBeUM7UUFDekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZELEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFekUsV0FBVztRQUNYLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUF5QixFQUFFLE1BQWU7UUFFN0MsK0NBQStDO1FBQy9DLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZELEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxRCxlQUFlO1FBQ2YsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUxRCxrQkFBa0I7UUFDbEIsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0o7OztBQzVGRCw0QkFBNEI7QUFDNUIsd0JBQXdCO0FBQ3hCLDRDQUE0QztBQUlLO0FBRTFDLE1BQU0sa0JBQW1CLFNBQVEsUUFBUTtJQVU1QyxZQUFZLEVBQXlCLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDO1FBRXZELE1BQU0sRUFBRSxHQUFHOzs7Ozs7Ozs7OztTQVdWLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRzs7Ozs7Ozs7O1NBU1YsQ0FBQztRQUVGLG9CQUFvQjtRQUNwQixLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFDL0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRWYscUJBQXFCO1FBQ3JCLHVEQUF1RDtRQUN2RCxpREFBaUQ7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRyxDQUFDO0lBQzNDLENBQUM7SUFFRCxHQUFHLENBQUMsRUFBeUIsRUFBRSxLQUFtQixFQUFFLEtBQWdCLEVBQUUsUUFBbUIsb0JBQW9CO1FBRXpHLHVDQUF1QztRQUN2QyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUU5QixZQUFZO1FBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDcEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFekUsV0FBVztRQUNYLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELCtCQUErQjtJQUMvQixNQUFNLENBQUMsRUFBeUIsRUFBRSxNQUFlO1FBRTdDLCtDQUErQztRQUMvQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2RCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUQsZUFBZTtRQUNmLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUQsa0JBQWtCO1FBQ2xCLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNKOzs7QUM3Rk0sTUFBTSxHQUFHO0lBRVo7UUFDSSx5QkFBeUI7SUFDN0IsQ0FBQztJQUVELEtBQUs7UUFDRCw0QkFBNEI7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUNwQixpQkFBaUI7SUFDckIsQ0FBQztJQUVELElBQUksQ0FBQyxFQUF5QjtRQUMxQixnQkFBZ0I7SUFDcEIsQ0FBQztDQUNKOzs7QUNuQkQsb0JBQW9CO0FBQ3BCLEVBQUU7QUFDRix3QkFBd0I7QUFDeEIsOERBQThEOzs7Ozs7Ozs7O0FBR2Q7QUFDbUM7QUFDMUM7QUFDQztBQUNhO0FBQ2E7QUFDQTtBQUV4QztBQUdyQixNQUFNLFlBQWEsU0FBUSxHQUFHO0lBU2pDLFlBQVksRUFBeUIsRUFBRSxNQUF5QjtRQUU1RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMseURBQXlEO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakMseUJBQXlCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsS0FBSztJQUVMLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBaUI7UUFFcEIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUksQ0FBQyxFQUF5QjtRQUUxQix1QkFBdUI7UUFDdkIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTJCLENBQUM7UUFDOUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUd6RCxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksU0FBUztZQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3RTtZQUNELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7Q0FDSjtBQUVELFNBQWUsWUFBWSxDQUFxQixLQUFlOztRQUUzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRW5CLG1DQUFtQztRQUNuQyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEIsb0RBQW9EO1FBQ3BELElBQUksT0FBTyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEMsd0JBQXdCO1FBRXhCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0NBQUE7OztBQ2hGRCx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBSTJCO0FBRWE7QUFJWDtBQUVwRCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFFNUIsU0FBUyxJQUFJO0lBRVQsNENBQTRDO0lBQzVDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0lBQ3JFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixDQUFDO0lBQ25FLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFvQixDQUFDO0lBQ3RFLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUF1QixDQUFDO0lBQzFFLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUF1QixDQUFDO0lBQzdFLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUF1QixDQUFDO0lBRTdFLElBQUksRUFBRSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVsQyw2Q0FBNkM7SUFDN0Msc0NBQXNDO0lBQ3RDLHlDQUF5QztJQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFDLDZDQUE2QztJQUU3QyxnQkFBZ0I7SUFDaEIsU0FBUyxJQUFJO1FBRVQsSUFBSSxJQUFJLENBQUMsSUFBSTtZQUNULE9BQU87UUFFWCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsVUFBVTtJQUNWLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTVCLDJCQUEyQjtJQUMzQixtQ0FBbUM7QUFDdkMsQ0FBQztBQUdELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7SUFDNUIsSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFHSCxNQUFNLElBQUk7SUFRYixZQUFZLE1BQXlCLEVBQUUsRUFBeUI7UUFGaEUsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUdULElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJO1FBRUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRTtRQUVsQixrQkFBa0I7UUFDbEIsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1lBQ25DLE1BQU0sQ0FBQyxVQUFVLElBQUssTUFBTSxDQUFDLEtBQUssRUFDdEM7WUFDSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDbkMsNENBQTRDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFcEQsTUFBTSxDQUFDLEtBQUssR0FBSSxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ2xDLDBDQUEwQztZQUMxQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWxELEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM1RDtRQUVELGtDQUFrQztRQUNsQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFeEMsa0JBQWtCO1FBQ2xCLHVCQUF1QjtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDSiIsImZpbGUiOiI3OTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhdXRob3I6IEpvcyBGZWVuc3RyYVxyXG4vLyBpbnNwaXJhdGlvbiBmcm9tIFRocmVlLmpzXHJcbi8vIG5vdGU6IHJlY3ljbGUgdGhlIGNsYXNzIGFzIG11Y2ggYXMgcG9zc2JsZSwgYnVpbGRpbmcgYSBuZXcgY2xhc3MgaXMgZXhwZW5zaXZlLFxyXG4vLyBlc3BlY2lhbGx5IGluIGphdmFzY3JpcHRcclxuXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3IzXHJcbntcclxuICAgIC8vICNyZWdpb24gY29uc3RydWN0b3JzXHJcbiAgICBcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHo6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHggOiBudW1iZXIsIHkgOiBudW1iZXIsIHogOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMueiA9IHo7XHJcbiAgICB9XHJcblxyXG5cdHN0YXRpYyBmcm9tTGVycCggdjE6VmVjdG9yMywgdjI6VmVjdG9yMywgYWxwaGE6bnVtYmVyICkgOiBWZWN0b3IzIFxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgVmVjdG9yMyhcclxuXHRcdFx0djEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhLFxyXG4gICAgICAgICAgICB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGEsXHJcbiAgICAgICAgICAgIHYxLnogKyAoIHYyLnogLSB2MS56ICkgKiBhbHBoYVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG4gICAgc3RhdGljIGZyb21BcnJheShhOiBBcnJheTxudW1iZXI+KSA6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhhWzBdLCBhWzFdLCBhWzJdKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVJhbmRvbSgpIDogVmVjdG9yMyBcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoXHJcblx0XHQgICAgTWF0aC5yYW5kb20oKSxcclxuXHRcdCAgICBNYXRoLnJhbmRvbSgpLFxyXG5cdFx0ICAgIE1hdGgucmFuZG9tKClcclxuICAgICAgICApXHJcblx0fVxyXG5cclxuICAgIHN0YXRpYyBmcm9tU3BoZXJlKHJhZGl1czpudW1iZXIsIHRoZXRhOm51bWJlciwgcGhpOm51bWJlcikgOiBWZWN0b3IzXHJcbiAgICB7XHJcblx0XHRjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IoXHJcbiAgICAgICAgICAgIHNpblBoaVJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApLFxyXG4gICAgICAgICAgICBNYXRoLmNvcyggcGhpICkgKiByYWRpdXMsXHJcbiAgICAgICAgICAgIHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApLFxyXG4gICAgICAgICk7XHJcblx0fVxyXG5cclxuICAgIHN0YXRpYyBmcm9tQ3lsaW5kZXIocmFkaXVzOm51bWJlciwgdGhldGE6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKSA6IFZlY3RvcjMgXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IoXHJcbiAgICAgICAgICAgIHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApLFxyXG4gICAgICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgICAgIHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApXHJcbiAgICAgICAgKTtcclxuXHR9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvblxyXG5cdC8vICNyZWdpb24gYmFzaWNzXHJcblxyXG5cdHNldCh4Om51bWJlciwgeTpudW1iZXIsIHo6bnVtYmVyKSA6IFZlY3RvcjNcclxuXHR7XHJcblx0XHR0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgdGhpcy56ID0gejtcclxuXHRcdHJldHVybiB0aGlzIFx0XHRcclxuXHR9XHJcblxyXG5cdGVxdWFscyh2OlZlY3RvcjMpIDogYm9vbGVhblxyXG5cdHtcclxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7XHJcblx0fVxyXG5cclxuICAgIHRvU3RyaW5nKCkgOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYFZlY3RvcjMoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSlgO1xyXG4gICAgfVxyXG5cclxuXHR0b1ZlY3RvcjIoKSA6IFZlY3RvcjIge1xyXG5cdFx0cmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCwgdGhpcy55KTtcclxuXHR9XHJcblxyXG4gICAgY2xvbmUoKSA6IFZlY3RvcjNcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5KHY6IFZlY3RvcjMpIDogVmVjdG9yM1xyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCA9IHYueDtcclxuICAgICAgICB0aGlzLnkgPSB2Lnk7XHJcbiAgICAgICAgdGhpcy56ID0gdi56O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHR0bzJEKCk6IFZlY3RvcjIge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLngsIHRoaXMueSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvblxyXG5cdC8vICNyZWdpb24gbWF0aCBsaWtlIHZlY3RvcjJcclxuXHJcbiAgICBhZGQodjogVmVjdG9yMykgOiBWZWN0b3IzXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ICs9IHYueDtcclxuICAgICAgICB0aGlzLnkgKz0gdi55O1xyXG4gICAgICAgIHRoaXMueiArPSB2Lno7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3ViKHY6IFZlY3RvcjMpIDogVmVjdG9yM1xyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAtPSB2Lng7XHJcbiAgICAgICAgdGhpcy55IC09IHYueTtcclxuICAgICAgICB0aGlzLnogLT0gdi56O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBtdWwodjogVmVjdG9yMykgOiBWZWN0b3IzXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ICs9IHYueDtcclxuICAgICAgICB0aGlzLnkgKz0gdi55O1xyXG4gICAgICAgIHRoaXMueiA9PSB2Lno7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUodjogbnVtYmVyKSA6IFZlY3RvcjNcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggKj0gdjtcclxuICAgICAgICB0aGlzLnkgKj0gdjtcclxuICAgICAgICB0aGlzLnogKj0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBkaXYodjogVmVjdG9yMykgOiBWZWN0b3IzXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54IC89IHYueDtcclxuICAgICAgICB0aGlzLnkgLz0gdi55O1xyXG4gICAgICAgIHRoaXMueiAvPSB2Lno7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGl2c2NhbGUodjogbnVtYmVyKSA6IFZlY3RvcjNcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggLz0gdjtcclxuICAgICAgICB0aGlzLnkgLz0gdjtcclxuICAgICAgICB0aGlzLnogLz0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBtaW4ob3RoZXI6IFZlY3RvcjMpIDogVmVjdG9yMyBcclxuICAgIHtcclxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIG90aGVyLnggKTtcclxuICAgICAgICB0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCBvdGhlci55ICk7XHJcbiAgICAgICAgdGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgb3RoZXIueiApO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRtYXgob3RoZXI6IFZlY3RvcjMpIDogVmVjdG9yMyBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCBvdGhlci54ICk7XHJcbiAgICAgICAgdGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgb3RoZXIueSApO1xyXG4gICAgICAgIHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIG90aGVyLnogKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xhbXAobWluOiBWZWN0b3IzLCBtYXg6IFZlY3RvcjMpIDogVmVjdG9yMyBcclxuXHR7XHJcblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgobWluLngsIE1hdGgubWluKG1heC54LCB0aGlzLngpKTtcclxuICAgICAgICB0aGlzLnkgPSBNYXRoLm1heChtaW4ueSwgTWF0aC5taW4obWF4LnksIHRoaXMueSkpO1xyXG4gICAgICAgIHRoaXMueiA9IE1hdGgubWF4KG1pbi56LCBNYXRoLm1pbihtYXgueiwgdGhpcy56KSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNsYW1wU2NhbGFyKG1pblZhbDpudW1iZXIsIG1heFZhbDpudW1iZXIpIDogVmVjdG9yMyBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueCkpO1xyXG4gICAgICAgIHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy55KSk7XHJcbiAgICAgICAgdGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4obWF4VmFsLCB0aGlzLnopKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xhbXBMZW5ndGgobWluOm51bWJlciwgbWF4Om51bWJlcikgOiBWZWN0b3IzXHJcblx0e1xyXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcclxuXHRcdHJldHVybiB0aGlzLmRpdnNjYWxlKCBsZW5ndGggfHwgMSApLnNjYWxlKCBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgbGVuZ3RoKSkpO1xyXG5cdH1cclxuXHJcblx0Zmxvb3IoKSA6IFZlY3RvcjMgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vcih0aGlzLngpO1xyXG4gICAgICAgIHRoaXMueSA9IE1hdGguZmxvb3IodGhpcy55KTtcclxuICAgICAgICB0aGlzLnogPSBNYXRoLmZsb29yKHRoaXMueik7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNlaWwoKSA6IFZlY3RvcjMgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKHRoaXMueCk7XHJcbiAgICAgICAgdGhpcy55ID0gTWF0aC5jZWlsKHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy56ID0gTWF0aC5jZWlsKHRoaXMueik7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdHJvdW5kKCkgOiBWZWN0b3IzIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcclxuICAgICAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy56ID0gTWF0aC5yb3VuZCh0aGlzLnopO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRyb3VuZFRvWmVybygpIDogVmVjdG9yMyBcclxuXHR7XHJcblx0XHR0aGlzLnggPSAodGhpcy54IDwgMCkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XHJcbiAgICAgICAgdGhpcy55ID0gKHRoaXMueSA8IDApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xyXG4gICAgICAgIHRoaXMueiA9ICh0aGlzLnogPCAwKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0bmVnYXRlKCkgOiBWZWN0b3IzIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IC10aGlzLng7XHJcbiAgICAgICAgdGhpcy55ID0gLXRoaXMueTtcclxuICAgICAgICB0aGlzLnogPSAtdGhpcy56O1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRkb3QoIHY6VmVjdG9yMyApIDogbnVtYmVyIFxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XHJcblx0fVxyXG5cclxuXHRjcm9zcyggb3RoZXI6VmVjdG9yMyApIDogVmVjdG9yM1xyXG5cdHtcclxuICAgICAgICBjb25zdCBheCA9IHRoaXMueCwgYXkgPSB0aGlzLnksIGF6ID0gdGhpcy56O1xyXG5cdFx0Y29uc3QgYnggPSBvdGhlci54LCBieSA9IG90aGVyLnksIGJ6ID0gb3RoZXIuejtcclxuXHJcblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcclxuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xyXG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRnZXRMZW5ndGhTcXVhcmVkKCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56O1xyXG5cdH1cclxuXHJcblx0bGVuZ3RoKCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZ2V0TGVuZ3RoU3F1YXJlZCgpKTtcclxuXHR9XHJcblxyXG5cdG1hbmhhdCgpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKTtcclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZSgpIDogVmVjdG9yM1xyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmRpdnNjYWxlKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcclxuXHR9XHJcblxyXG5cdGRpc1RvKHY6IFZlY3RvcjMpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc1RvU3F1YXJlZCh2KSk7XHJcblx0fVxyXG5cclxuXHRkaXNUb1NxdWFyZWQodjogVmVjdG9yMykgOiBudW1iZXJcclxuXHR7XHJcblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgXHJcbiAgICAgICAgICAgICAgZHkgPSB0aGlzLnkgLSB2LnksXHJcbiAgICAgICAgICAgICAgZHogPSB0aGlzLnogLSB2Lno7XHJcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xyXG5cdH1cclxuXHJcblx0ZGlzVG9NYW5oYXQodjogVmVjdG9yMykgOiBudW1iZXJcclxuXHR7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMueCAtIHYueCkgXHJcbiAgICAgICAgICAgICArIE1hdGguYWJzKHRoaXMueSAtIHYueSkgXHJcbiAgICAgICAgICAgICArIE1hdGguYWJzKHRoaXMueiAtIHYueik7XHJcblx0fVxyXG5cclxuXHRzZXRMZW5ndGgobGVuZ3RoOiBudW1iZXIpIDogVmVjdG9yM1xyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLnNjYWxlKGxlbmd0aCk7XHJcblx0fVxyXG5cclxuXHRsZXJwKG90aGVyOiBWZWN0b3IzLCBhbHBoYTpudW1iZXIpIDogVmVjdG9yM1xyXG5cdHtcclxuXHRcdHRoaXMueCArPSAoIG90aGVyLnggLSB0aGlzLnggKSAqIGFscGhhO1xyXG4gICAgICAgIHRoaXMueSArPSAoIG90aGVyLnkgLSB0aGlzLnkgKSAqIGFscGhhO1xyXG4gICAgICAgIHRoaXMueiArPSAoIG90aGVyLnogLSB0aGlzLnogKSAqIGFscGhhO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vICNlbmRyZWdpb25cclxuICAgIC8vICNyZWdpb24gbWF0aCBzcGVjaWZpYyBcclxuXHJcbiAgICBwcm9qZWN0T25WZWN0b3Iob3RoZXI6IFZlY3RvcjMpIFxyXG4gICAge1xyXG4gICAgICAgIC8vIHVzZSBkb3QgcHJvZHVjdCB0byBwcm9qZWN0IHRoaXMgdmVjdG9yIG9uIHRoZSBvdGhlciB2ZWN0b3IgXHJcblx0XHRjb25zdCBkZW5vbWluYXRvciA9IG90aGVyLmdldExlbmd0aFNxdWFyZWQoKTtcclxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAgKTtcclxuXHRcdGNvbnN0IHNjYWxhciA9IG90aGVyLmRvdCh0aGlzKSAvIGRlbm9taW5hdG9yO1xyXG5cdFx0cmV0dXJuIHRoaXMuY29weShvdGhlcikuc2NhbGUoc2NhbGFyKTtcclxuXHR9XHJcblxyXG4gICAgcHJvamVjdE9uUGxhbmUobm9ybWFsOiBWZWN0b3IzKSBcclxuICAgIHtcclxuICAgICAgICAvLyBwcm9qZWN0IGEgdmVjdG9yIFxyXG5cdFx0X3ZlY3Rvci5jb3B5KHRoaXMpLnByb2plY3RPblZlY3Rvcihub3JtYWwpO1xyXG5cdFx0cmV0dXJuIHRoaXMuc3ViKF92ZWN0b3IpO1xyXG5cdH1cclxuXHJcbiAgICBtaXJyb3Iobm9ybWFsOiBWZWN0b3IzKSBcclxuICAgIHtcclxuXHRcdC8vIG1pcnJvciBpbmNpZGVudCB2ZWN0b3Igb2ZmIHBsYW5lIG9ydGhvZ29uYWwgdG8gbm9ybWFsXHJcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXHJcblx0XHRyZXR1cm4gdGhpcy5zdWIoX3ZlY3Rvci5jb3B5KG5vcm1hbCkuc2NhbGUoMiAqIHRoaXMuZG90KG5vcm1hbCkpKTtcclxuXHR9XHJcblxyXG4gICAgLy8gI2VuZHJlZ2lvblxyXG4gICAgLy8gVE9ETyA6IG1hdHJpeCBpbnRlcmFjdGlvbnNcclxufVxyXG5cclxuLy8gdmVjdG9yIG9iamVjdCB1c2VkIHdpdGhpbiBoZWF2eSBjYWxjdWxhdGlvbnMsIHRvIG1ha2Ugc3VyZSB3ZSBkb250IGNyZWF0ZSBWZWN0b3JzIGFsbCBvdmVyIHRoZSBwbGFjZS5cclxuY29uc3QgX3ZlY3RvciA9IG5ldyBWZWN0b3IzKDAsMCwwKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3IyXHJcbntcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHggOiBudW1iZXIsIHkgOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgfVxyXG5cclxuXHQvLyAtLS0gZmFjdG9yaWVzICYgb3RoZXIgc3RhdGljc1xyXG5cclxuICAgIHN0YXRpYyBmcm9tQXJyYXkoYTogQXJyYXk8bnVtYmVyPikgOiBWZWN0b3IyIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoYVswXSwgYVsxXSk7XHJcbiAgICB9XHJcblxyXG5cdHN0YXRpYyBmcm9tTGVycCggdjE6VmVjdG9yMiwgdjI6VmVjdG9yMiwgYWxwaGE6bnVtYmVyICkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgVmVjdG9yMihcclxuXHRcdFx0djEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhLFxyXG5cdFx0XHR2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGFcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuICAgIHN0YXRpYyBmcm9tUmFuZG9tKCkgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG5cdFx0ICAgIE1hdGgucmFuZG9tKCksXHJcblx0XHQgICAgTWF0aC5yYW5kb20oKVxyXG4gICAgICAgIClcclxuXHR9XHJcblxyXG4gICAgc3RhdGljIGZyb21SYW5kb21BbmdsZSgpIDogVmVjdG9yMlxyXG4gICAge1xyXG5cdFx0bGV0IGFscGhhID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyO1xyXG5cdFx0XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG5cdFx0XHRNYXRoLmNvcyhhbHBoYSksXHJcblx0XHRcdE1hdGguc2luKGFscGhhKVxyXG4gICAgICAgIClcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tMlB0KGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoXHJcblx0XHRcdGZyb20ueCAtIHRvLngsXHJcblx0XHRcdGZyb20ueSAtIHRvLnlcclxuXHRcdClcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tQ29weShvdGhlcjogVmVjdG9yMikgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuemVybygpLmNvcHkob3RoZXIpO1x0XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgemVybygpIHsgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApOyB9XHJcblxyXG5cclxuXHRzdGF0aWMgTmFOKCkgeyByZXR1cm4gbmV3IFZlY3RvcjIoTmFOLCBOYU4pOyB9XHJcblxyXG5cdHN0YXRpYyBmcm9tQ2lyY3VtY2VudGVyKGE6IFZlY3RvcjIsIGI6IFZlY3RvcjIsIGM6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGFzdW0gPSBhLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGJzdW0gPSBiLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGNzdW0gPSBjLnNxdWFyZVN1bSgpO1xyXG5cclxuICAgICAgICAvLyBzb3J0IG9mIGNyb3NzIHByb2R1Y3RcclxuICAgICAgICBsZXQgZCA9IDIgKiAoYS54ICogKGIueSAtIGMueSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICBiLnggKiAoYy55IC0gYS55KSArIFxyXG4gICAgICAgICAgICAgICAgICAgICBjLnggKiAoYS55IC0gYi55KSk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoaXMgdHJpYW5nbGUgaGFzIG5vIGNpcmN1bWNlbnRlcj8gXHJcbiAgICAgICAgaWYgKGQgPCAwLjAwMDAwMSlcclxuXHRcdFx0cmV0dXJuIFZlY3RvcjIuTmFOKCk7IFxyXG5cclxuXHRcdGxldCB4ID0gKGFzdW0gKiAoYi55IC0gYy55KSArIFxyXG5cdFx0XHRcdCBic3VtICogKGMueSAtIGEueSkgKyBcclxuXHRcdFx0XHQgY3N1bSAqIChhLnkgLSBiLnkpKSAvIGQ7XHJcblx0XHRsZXQgeSA9IChhc3VtICogKGMueCAtIGIueCkgKyBcclxuXHRcdFx0XHQgYnN1bSAqIChhLnggLSBjLngpICsgXHJcblx0XHRcdFx0IGNzdW0gKiAoYi54IC0gYS54KSkgLyBkO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCx5KTtcclxuICAgIH1cclxuXHJcblx0c3RhdGljIGdldFNpZ24oYTpWZWN0b3IyLCBiOlZlY3RvcjIgLCBjOlZlY3RvcjIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0Ly8gdGVzdCBoYWxmIHBsYW5lIHJlbGF0aW9uc2hpcFxyXG5cdFx0Ly8gPDAgOiBwb2ludCBvbiBmaXJzdCBoYWxmXHJcblx0XHQvLyAwICA6IHBvaW50cyBjb2xsaW5lYXJcclxuXHRcdC8vID4wIDogcG9pbnQgb24gc2Vjb25kIGhhbGYgXHJcblx0XHRyZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYy55KSAtIFxyXG5cdFx0ICAgICAgIChiLnggLSBjLngpICogKGEueSAtIGMueSk7XHJcblx0fVxyXG5cclxuXHQvLyAtLS0gYmFzaWNzXHJcblxyXG5cdHNldCh4Om51bWJlciwgeTpudW1iZXIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0cmV0dXJuIHRoaXMgXHRcdFxyXG5cdH1cclxuXHJcblx0cm91Z2hseUVxdWFscyh2OiBWZWN0b3IyLCB0b2w6bnVtYmVyKSA6IGJvb2xlYW5cclxuXHR7XHJcblx0XHRyZXR1cm4gKE1hdGguYWJzKHRoaXMueCAtIHYueCkgPCB0b2wgJiYgXHJcblx0XHRcdFx0TWF0aC5hYnModGhpcy55IC0gdi55KSA8IHRvbClcclxuXHR9XHJcblxyXG5cdGVxdWFscyh2OlZlY3RvcjIpIDogYm9vbGVhblxyXG5cdHtcclxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcclxuXHR9XHJcblxyXG4gICAgdG9TdHJpbmcoKSA6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBgVmVjdG9yMigke3RoaXMueH0sICR7dGhpcy55fSlgO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCwgdGhpcy55KTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5KHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCA9IHYueDtcclxuICAgICAgICB0aGlzLnkgPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cdC8vIC0tLSBtYXRoXHJcblxyXG4gICAgYWRkKHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCArPSB2Lng7XHJcbiAgICAgICAgdGhpcy55ICs9IHYueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblx0YWRkbihhcmcwOiBudW1iZXIsIGFyZzE6IG51bWJlcik6IFZlY3RvcjIge1xyXG5cdFx0dGhpcy54ICs9IGFyZzA7XHJcblx0XHR0aGlzLnkgKz0gYXJnMTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHN1Yih2OiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggLT0gdi54O1xyXG4gICAgICAgIHRoaXMueSAtPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG11bCh2OiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggKj0gdi54O1xyXG4gICAgICAgIHRoaXMueSAqPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUodjogbnVtYmVyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggKj0gdjtcclxuICAgICAgICB0aGlzLnkgKj0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBkaXYodjogVmVjdG9yMikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54IC89IHYueDtcclxuICAgICAgICB0aGlzLnkgLz0gdi55O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGRpdnNjYWxlKHY6IG51bWJlcikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54IC89IHY7XHJcbiAgICAgICAgdGhpcy55IC89IHY7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgbWluKG90aGVyOiBWZWN0b3IyKSA6IFZlY3RvcjIgXHJcbiAgICB7XHJcblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCBvdGhlci54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCBvdGhlci55ICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdG1heChvdGhlcjogVmVjdG9yMikgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIG90aGVyLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIG90aGVyLnkgKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xhbXAobWluOiBWZWN0b3IyLCBtYXg6IFZlY3RvcjIpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgobWluLngsIE1hdGgubWluKG1heC54LCB0aGlzLngpKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KG1pbi55LCBNYXRoLm1pbihtYXgueSwgdGhpcy55KSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNsYW1wU2NhbGFyKG1pblZhbDpudW1iZXIsIG1heFZhbDpudW1iZXIpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueCkpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4obWF4VmFsLCB0aGlzLnkpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xhbXBMZW5ndGgobWluOm51bWJlciwgbWF4Om51bWJlcikgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcclxuXHRcdHJldHVybiB0aGlzLmRpdnNjYWxlKCBsZW5ndGggfHwgMSApLnNjYWxlKCBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgbGVuZ3RoKSkpO1xyXG5cdH1cclxuXHJcblx0Zmxvb3IoKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vcih0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vcih0aGlzLnkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRjZWlsKCkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKHRoaXMueSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdHJvdW5kKCkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0cm91bmRUb1plcm8oKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gKHRoaXMueCA8IDApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xyXG5cdFx0dGhpcy55ID0gKHRoaXMueSA8IDApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRuZWdhdGUoKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XHJcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0ZG90KCB2OlZlY3RvcjIgKSA6IG51bWJlciBcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xyXG5cdH1cclxuXHJcblx0Y3Jvc3MoIHY6VmVjdG9yMiApIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueDsgLy8gPz8/P1xyXG5cdH1cclxuXHJcblx0c3F1YXJlU3VtKCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xyXG5cdH1cclxuXHJcblx0bGVuZ3RoKCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XHJcblx0fVxyXG5cclxuXHRtYW5oYXQoKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICk7XHJcblx0fVxyXG5cclxuXHRub3JtYWxpemUoKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5kaXZzY2FsZSggdGhpcy5sZW5ndGgoKSB8fCAxICk7XHJcblx0fVxyXG5cclxuXHRhbmdsZSgpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0Ly8gY29tcHV0ZXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXNcclxuXHRcdGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMiggLSB0aGlzLnksIC0gdGhpcy54ICkgKyBNYXRoLlBJO1xyXG5cdFx0cmV0dXJuIGFuZ2xlO1xyXG5cclxuXHR9XHJcblxyXG5cdGRpc1RvKHY6IFZlY3RvcjIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc1RvU3F1YXJlZCh2KSk7XHJcblx0fVxyXG5cclxuXHRkaXNUb1NxdWFyZWQodjogVmVjdG9yMikgOiBudW1iZXJcclxuXHR7XHJcblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgXHJcblx0XHRcdCAgZHkgPSB0aGlzLnkgLSB2Lnk7XHJcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XHJcblx0fVxyXG5cclxuXHRkaXNUb01hbmhhdCh2OiBWZWN0b3IyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLmFicyh0aGlzLnggLSB2LngpICsgTWF0aC5hYnModGhpcy55IC0gdi55KTtcclxuXHR9XHJcblxyXG5cdHNldExlbmd0aChsZW5ndGg6IG51bWJlcikgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkuc2NhbGUobGVuZ3RoKTtcclxuXHR9XHJcblxyXG5cdGxlcnAob3RoZXI6IFZlY3RvcjIsIGFscGhhOm51bWJlcikgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0dGhpcy54ICs9ICggb3RoZXIueCAtIHRoaXMueCApICogYWxwaGE7XHJcblx0XHR0aGlzLnkgKz0gKCBvdGhlci55IC0gdGhpcy55ICkgKiBhbHBoYTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhZFRvRGVnKHI6IG51bWJlcikge1xyXG5cdHJldHVybiByICogMTgwIC8gTWF0aC5QSTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZ1RvUmFkKGQ6IG51bWJlcikge1xyXG5cdHJldHVybiBkICogTWF0aC5QSSAvIDE4MDtcclxufSIsIi8vIENhbnZhc0lucHV0SGFuZGxlci50c1xuLy8gYXV0aG9yIDogSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlIDogaGFuZGxlIGFsbCBpbnB1dCBldmVudHMuXG5cbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcblxuZW51bSBLZXkge1xuICAgIEEsIEIsIEMsIEQsIEUsIEYsICBHLCBILCBJLCBKLCBLLCBMLCBNLCBOLCBPLCBQLCBRLCBSLCBTLCBULCBVLCBWLCBXLCBYLCBZLCBaLFxuICAgIFVwLCBEb3duLCBMZWZ0LCBSaWdodCwgU3BhY2UsIENvbnRyb2wsIEFsdCwgU2hpZnQsIEVudGVyLCBFc2MsXG4gICAgTjEsIE4yLCBOMywgTjQsICBONSwgIE42LCBONywgTjgsICBOOSwgTjAsIFBsdXMsIE1pbnVzLCBCYWNrc3BhY2Vcbn1cblxuZnVuY3Rpb24gdG9NYXBwaW5nKGtleTogS2V5KSA6IG51bWJlciB7XG4gICAgc3dpdGNoKGtleSkge1xuICAgICAgICBjYXNlKEtleS5BKTogcmV0dXJuIDE7XG4gICAgICAgIGNhc2UoS2V5LkIpOiByZXR1cm4gMjtcbiAgICAgICAgY2FzZShLZXkuQyk6IHJldHVybiAzO1xuICAgICAgICBjYXNlKEtleS5EKTogcmV0dXJuIDQ7XG4gICAgICAgIGNhc2UoS2V5LkUpOiByZXR1cm4gNTtcbiAgICAgICAgY2FzZShLZXkuRik6IHJldHVybiA2O1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gMDtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleXMgXG57XG4gICAgW2tleTogc3RyaW5nXSA6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIElucHV0U3RhdGUge1xuXG4gICAgdGljazogbnVtYmVyO1xuICAgIG9sZFRpbWU6IG51bWJlcjtcbiAgICBuZXdUaW1lOiBudW1iZXI7XG4gICAgc3RhcnRUaW1lOiBudW1iZXI7XG4gICAgbWluaW11bVRpY2s6IG51bWJlcjtcblxuICAgIG1vdXNlUG9zOiBWZWN0b3IyID0gVmVjdG9yMi56ZXJvKCk7XG4gICAgbW91c2VEZWx0YTogVmVjdG9yMiA9IFZlY3RvcjIuemVybygpO1xuICAgIG1vdXNlTGVmdERvd24gPSBmYWxzZTtcbiAgICBtb3VzZUxlZnRQcmVzc2VkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBtb3VzZUxlZnRQcmV2ID0gZmFsc2U7XG5cbiAgICBtb3VzZVJpZ2h0RG93biA9IGZhbHNlO1xuICAgIG1vdXNlUmlnaHRQcmVzc2VkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBtb3VzZVJpZ2h0UHJldiA9IGZhbHNlO1xuXG4gICAgbW91c2VNaWRkbGVEb3duID0gZmFsc2U7XG4gICAgbW91c2VNaWRkbGVQcmVzc2VkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBtb3VzZU1pZGRsZVByZXYgPSBmYWxzZTtcblxuICAgIHByaXZhdGUga2V5c0Rvd246IElLZXlzID0ge307XG4gICAgcHJpdmF0ZSBrZXlzUHJlc3NlZDogc3RyaW5nW10gPSBbXTtcblxuICAgIHNjcm9sbFZhbHVlID0gMDtcblxuICAgIC8vIGRlbGVnYXRlIGZ1bmN0aW9uc1xuICAgIG9uTW91c2VXaGVlbFNjcm9sbD86IEZ1bmN0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcblxuICAgICAgICAvLyB0aW1lXG4gICAgICAgIHRoaXMudGljayA9IDA7XG4gICAgICAgIHRoaXMub2xkVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMubmV3VGltZSA9IHRoaXMub2xkVGltZTtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLm1pbmltdW1UaWNrID0gMTAwMCAvIDE0NDtcblxuICAgICAgICAvLyBtb3VzZVxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLnNldE1vdXNlUG9zLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLnNldE1vdXNlRG93bi5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuc2V0TW91c2VVcC5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCAoZSkgPT4geyBlLnByZXZlbnREZWZhdWx0KCk7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLnNldE1vdXNlUG9zLmJpbmQodGhpcykpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIHRoaXMuc2V0TW91c2VTY3JvbGwuYmluZCh0aGlzKSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuc2V0VG91Y2guYmluZCh0aGlzKSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLnNldFRvdWNoLmJpbmQodGhpcykpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMjIzIDtpKyspXG4gICAgICAgICAgICB0aGlzLmtleXNEb3duW2ldID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICAvLyBrZXlib2FyZFxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24uYmluZCh0aGlzKSk7XG4gICAgICAgIC8vIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NlZFwiLCB0aGlzLm9uS2V5UHJlc3NlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gZmluYWwgICBcbiAgICAgICAgY2FudmFzLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHByZVVwZGF0ZSgpIHtcbiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIGNhbGxlZCBldmVyeSB0aWNrIHdpdGhpbiB3aGF0ZXZlciBjb250ZXh0IHRoaXMgaXMgdXNlZFxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aW1lXG4gICAgICAgIHRoaXMubmV3VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMudGljayA9ICh0aGlzLm5ld1RpbWUgLSB0aGlzLm9sZFRpbWUpO1xuICAgICAgICB0aGlzLm9sZFRpbWUgPSB0aGlzLm5ld1RpbWU7XG5cbiAgICAgICAgLy8gdXBkYXRlIG1vdXNlXG4gICAgICAgIHRoaXMubW91c2VMZWZ0UHJlc3NlZCA9ICAodGhpcy5tb3VzZUxlZnRQcmV2ICE9IHRoaXMubW91c2VMZWZ0RG93bikgJiYgdGhpcy5tb3VzZUxlZnREb3duO1xuICAgICAgICB0aGlzLm1vdXNlUmlnaHRQcmVzc2VkID0gICh0aGlzLm1vdXNlUmlnaHRQcmV2ICE9IHRoaXMubW91c2VSaWdodERvd24pICYmIHRoaXMubW91c2VSaWdodERvd247XG4gICAgICAgIHRoaXMubW91c2VNaWRkbGVQcmVzc2VkID0gICh0aGlzLm1vdXNlTWlkZGxlUHJldiAhPSB0aGlzLm1vdXNlTWlkZGxlRG93bikgJiYgdGhpcy5tb3VzZU1pZGRsZURvd247XG5cbiAgICAgICAgdGhpcy5tb3VzZUxlZnRQcmV2ID0gdGhpcy5tb3VzZUxlZnREb3duXG4gICAgICAgIHRoaXMubW91c2VSaWdodFByZXYgPSB0aGlzLm1vdXNlUmlnaHREb3duXG4gICAgICAgIHRoaXMubW91c2VNaWRkbGVQcmV2ID0gdGhpcy5tb3VzZU1pZGRsZURvd25cbiAgICB9XG5cbiAgICBwdWJsaWMgcG9zdFVwZGF0ZSgpIHtcblxuICAgICAgICAvLyB0aGlzIGFsc28gbXVzdCBiZSBjYWxsZWQgZm9yIGtleUlzUHJlc3NlZCB0byB3b3JrXG5cbiAgICAgICAgLy8gcmVmcmVzaCBrZXlwcmVzc2VzXG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWQgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgSXNLZXlEb3duKGtleTogc3RyaW5nKSA6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXNEb3duW2tleV07ICBcbiAgICB9XG5cbiAgICBwdWJsaWMgSXNLZXlQcmVzc2VkKGtleTogc3RyaW5nKSA6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXNQcmVzc2VkLmluY2x1ZGVzKGtleSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KVxuICAgIHsgXG4gICAgICAgIGlmICh0aGlzLmtleXNEb3duW2Uua2V5XSA9PSB0cnVlKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nKGUua2V5KTtcbiAgICAgICAgdGhpcy5rZXlzRG93bltlLmtleS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWQucHVzaChlLmtleSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uS2V5VXAoZTogS2V5Ym9hcmRFdmVudClcbiAgICB7XG4gICAgICAgIHRoaXMua2V5c0Rvd25bZS5rZXkudG9Mb3dlckNhc2UoKV0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25LZXlQcmVzc2VkKGU6IEtleWJvYXJkRXZlbnQpXG4gICAge1xuICAgICAgICAvLyBOT1RFOiBpIG1hZGUgYSBkaWZmZXJlbnQgc3lzdGVtIHRvIGhhbmRsZSB0aGlzLCBzZWUgb25LZXlEb3duXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRUb3VjaChlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB0aGlzLm1vdXNlUG9zID0gbmV3IFZlY3RvcjIoZS50b3VjaGVzWzBdLmNsaWVudFgsIGUudG91Y2hlc1swXS5jbGllbnRZKTtcbiAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vdXNlU2Nyb2xsKGU6IFdoZWVsRXZlbnQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ3ZSBiZSBzY3JvbGxpbicgbm93Li4uXCIpXG4gICAgICAgIHRoaXMuc2Nyb2xsVmFsdWUgPSBlLmRlbHRhWTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vdXNlUG9zKGU6IE1vdXNlRXZlbnQpXG4gICAge1xuICAgICAgICAvLyB0aGlzIGlzIGEgYml0IG1lc3N5LCBCVVQsIG11bHRpcGx5IGJ5IGNhbWVyYSBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMubW91c2VQb3MgPSBuZXcgVmVjdG9yMihlLmNsaWVudFgsIGUuY2xpZW50WSk7O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TW91c2VVcChlOiBNb3VzZUV2ZW50KVxuICAgIHtcbiAgICAgICAgbGV0IGNvZGUgPSBlLmJ1dHRvbnM7XG4gICAgICAgIGlmIChjb2RlIDwgNCkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubW91c2VNaWRkbGVEb3duID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUgPCAyKSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5tb3VzZVJpZ2h0RG93biA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlIDwgMSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0RG93biA9IGZhbHNlO1xuICAgICAgICB9IFxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TW91c2VEb3duKGU6IE1vdXNlRXZlbnQpXG4gICAge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGxldCBjb2RlID0gZS5idXR0b25zO1xuICAgICAgICBpZiAoY29kZSA+PSA0KSBcbiAgICAgICAge1xuICAgICAgICAgICAgY29kZSAtPSA0O1xuICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZURvd24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlID49IDIpIFxuICAgICAgICB7XG4gICAgICAgICAgICBjb2RlIC09IDI7XG4gICAgICAgICAgICB0aGlzLm1vdXNlUmlnaHREb3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA+PSAxKSBcbiAgICAgICAge1xuICAgICAgICAgICAgY29kZSAtPSAxO1xuICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duID0gdHJ1ZTtcbiAgICAgICAgfSAgXG4gICAgICAgIHJldHVybiBmYWxzZTsgICAgIFxuICAgIH1cblxuXG5cblxufSIsIi8vIHdlYmdsLWhlbHBlcnMudHNcbi8vIFxuLy8gYXV0aG9yOiBKb3MgRmVlbnN0cmFcbi8vIGNyZWRpdHMgdG8gOiBodHRwczovL3dlYmdsZnVuZGFtZW50YWxzLm9yZy9cbi8vIG5vdGU6IGltIHN0aWxsIGZpZ3VyaW5nIG91dCBob3cgdG8gb3JnYW5pemUgdGhpcyBcblxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyIHtcblxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2NyaXB0OiBzdHJpbmcsIGZyYWdtZW50U2NyaXB0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBjcmVhdGVQcm9ncmFtRnJvbVNjcmlwdHMoZ2wsIHZlcnRleFNjcmlwdCwgZnJhZ21lbnRTY3JpcHQpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZXNpemVDYW52YXMoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuXG4gICAgICAgIC8vIExvb2t1cCB0aGUgc2l6ZSB0aGUgYnJvd3NlciBpcyBkaXNwbGF5aW5nIHRoZSBjYW52YXMgaW4gQ1NTIHBpeGVscy5cbiAgICAgICAgbGV0IGNhbnZhcyA9IGdsLmNhbnZhcyBhcyBIVE1MQ2FudmFzRWxlbWVudDtcblxuICAgICAgICBjb25zdCBkaXNwbGF5V2lkdGggID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBkaXNwbGF5SGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNhbnZhcyBpcyBub3QgdGhlIHNhbWUgc2l6ZS5cbiAgICAgICAgY29uc3QgbmVlZFJlc2l6ZSA9IGdsLmNhbnZhcy53aWR0aCAgIT09IGRpc3BsYXlXaWR0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY2FudmFzLmhlaWdodCAhPT0gZGlzcGxheUhlaWdodDtcbiAgICAgICBcbiAgICAgICAgaWYgKG5lZWRSZXNpemUpIHtcbiAgICAgICAgICAvLyBNYWtlIHRoZSBjYW52YXMgdGhlIHNhbWUgc2l6ZVxuICAgICAgICAgIGdsLmNhbnZhcy53aWR0aCAgPSBkaXNwbGF5V2lkdGg7XG4gICAgICAgICAgZ2wuY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgLy8gVGVsbCBXZWJHTCBob3cgdG8gY29udmVydCBmcm9tIGNsaXAgc3BhY2UgdG8gcGl4ZWxzXG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIG5lZWRSZXNpemU7XG4gICAgfVxuICAgIFxuICAgIGNvbnZlcnREcmF3U3BlZWQoc3BlZWQ6IERyYXdTcGVlZCkgOiBudW1iZXIge1xuICAgICAgICBpZiAoc3BlZWQgPT0gRHJhd1NwZWVkLkR5bmFtaWNEcmF3KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbC5EWU5BTUlDX0RSQVc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbC5TVEFUSUNfRFJBVztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRXZWJnbENvbnRleHQoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuXG4gICAgbGV0IHBvc3NpYmx5R2wgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpO1xuICAgIGlmIChwb3NzaWJseUdsID09IHVuZGVmaW5lZClcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwid2ViZ2wgdW5hdmFpbGFibGUuLi5cIik7XG4gICAgfVxuICAgIGxldCBnbCA9IHBvc3NpYmx5R2whO1xuXG4gICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICBnbC5jbGVhckRlcHRoKDEuKTtcblxuICAgIHJldHVybiBnbDtcbn1cblxuLy8gXG5leHBvcnQgZW51bSBEcmF3U3BlZWQge1xuICAgIFN0YXRpY0RyYXcsICAvLyBpZiB5b3UgcGxhbiBvbiB1c2luZyB0aGUgJ3NldCcgbWV0aG9kIG9ubHkgYSBjb3VwbGUgb2YgdGltZXMgLyBvbmNlXG4gICAgRHluYW1pY0RyYXcgLy8gaWYgeW91IHBsYW4gb24gdXNpbmcgdGhlICdzZXQnIG1ldGhvZCBldmVyeSBmcmFtZSBcbn1cblxuXG5cbi8vIHRoZSBzZXR1cCBvZiBhIHByb2dyYW0gY29udGFpbmluZyAyIHNoYWRlciBzY3JpcHRzXG5cbmZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgc2hhZGVyU291cmNlOiBzdHJpbmcsIHNoYWRlclR5cGU6IG51bWJlcikgOiBXZWJHTFNoYWRlciB7XG4gICAgXG4gICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKSE7IFxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNoYWRlclNvdXJjZSk7IFxuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTsgXG4gICAgdmFyIHN1Y2Nlc3MgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUyk7IFxuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICB0aHJvdyBcImNvdWxkIG5vdCBjb21waWxlIHNoYWRlcjpcIiArIHNoYWRlclNvdXJjZSArIGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWRlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyLCBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXIpIHtcblxuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpITtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIHZhciBzdWNjZXNzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XG4gICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgIHRocm93IChcInByb2dyYW0gZmFpbGVkIHRvIGxpbms6XCIgKyBnbC5nZXRQcm9ncmFtSW5mb0xvZyAocHJvZ3JhbSkpO1xuICAgIH0gICBcbiAgICByZXR1cm4gcHJvZ3JhbTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2dyYW1Gcm9tU2NyaXB0cyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2ZXJ0ZXhTY3JpcHQ6IHN0cmluZywgZnJhZ21lbnRTY3JpcHQ6IHN0cmluZyk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgdmFyIHZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIHZlcnRleFNjcmlwdCwgZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZnJhZ21lbnRTY3JpcHQsIGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgcmV0dXJuIGNyZWF0ZVByb2dyYW0oZ2wsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xufSIsIi8vIG5hbWU6ICAgIGFycmF5LnRzXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcbi8vIHB1cnBvc2U6IFNtYWxsIHdyYXBwZXIgYXJvdW5kIEZsb2F0MzJBcnJheSB0byBhZGQgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIFZlY3RvcjIgJiBWZWN0b3IzLCBcbi8vICAgICAgICAgIHdoaWxlIHJlbWFpbmluZyBhIGRhdGFzdHJ1Y3R1cmUgdGhhdHMgZWFzeSB0byBwYXNzIG92ZXIgdG8gd2ViZ2xcbi8vIFxuLy8gTk9URTogICAgYWxsIHRoZXNlIHNtYWxsIHdyYXBwZXJzIG1pZ2h0IG5vdCBiZSBnb29kIHByYXRpY2UsIGJ1dCBpIFxuLy8gICAgICAgICAgbGlrZSB0byBleHRyYWN0IHNpbXBsZSBsb2dpYyBsaWtlIHRoaXMgdG8gbm90IGNsdXR0ZXIgdGhlIGNvZGUgdG9vIG11Y2hcblxuaW1wb3J0IHsgVmVjdG9yMywgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvclwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIEZsb2F0QXJyYXkge1xuXG4gICAgZGF0YTogRmxvYXQzMkFycmF5O1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgZGltOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb3VudDogbnVtYmVyLCBkaW06IG51bWJlcikge1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogZGltKTtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50OyAvLyBudW1iZXIgb2YgZW50cmllc1xuICAgICAgICB0aGlzLmRpbSA9IGRpbTsgLy8gZGltZW50aW9uIG9mIGVudHJ5XG4gICAgfVxuICAgXG4gICAgc2V0QWxsKGRhdGE6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZXQoZGF0YSk7XG4gICAgfVxuXG4gICAgZ2V0KGk6IG51bWJlciwgajogbnVtYmVyKSA6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbaSAqIHRoaXMuZGltICsgal07XG4gICAgfVxuICAgIFxuICAgIGdldFJvdyhpOiBudW1iZXIsIGo6IG51bWJlcikgOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2kgKiB0aGlzLmRpbSArIGpdO1xuICAgIH1cblxuICAgIHNldChpOiBudW1iZXIsIGo6IG51bWJlciwgdmFsdWU6IG51bWJlcikgIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKiB0aGlzLmRpbSArIGpdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0Um93KGk6IG51bWJlciwgcm93OiBudW1iZXJbXSkge1xuICAgICAgICBpZiAodGhpcy5kaW0gIT0gcm93Lmxlbmd0aCkgdGhyb3cgXCJkaW1lbnRpb24gb2YgZmxvYXRhcnJheSBpcyBub3QgXCIgKyByb3cubGVuZ3RoO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZlY3RvcjJBcnJheSBleHRlbmRzIEZsb2F0QXJyYXkge1xuICAgXG4gICAgY29uc3RydWN0b3IoY291bnQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcihjb3VudCwgMik7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21OYXRpdmVBcnJheSh2ZWNzOiBWZWN0b3IyW10pIDogVmVjdG9yMkFycmF5IHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHZlY3MubGVuZ3RoO1xuICAgICAgICBsZXQgYXJyYXkgPSBuZXcgVmVjdG9yMkFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB2ZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheS5kYXRhW2ldID0gdmVjc1tpXS54O1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpKzFdID0gdmVjc1tpXS55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICBzZXRWZWN0b3IoaTogbnVtYmVyLCB2ZWM6IFZlY3RvcjIpIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKiB0aGlzLmRpbSArIDBdID0gdmVjLng7XG4gICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5kaW0gKyAxXSA9IHZlYy55O1xuICAgIH1cblxuICAgIGdldFZlY3RvcihpOiBudW1iZXIpIDogVmVjdG9yMiB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMihcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5kaW0gKyAwXSxcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5kaW0gKyAxXSxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHRvTmF0aXZlQXJyYXkoKSA6IFZlY3RvcjJbXSB7XG5cbiAgICAgICAgbGV0IHZlY3M6IFZlY3RvcjJbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHZlY3MucHVzaCh0aGlzLmdldFZlY3RvcihpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZlY3M7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmVjdG9yM0FycmF5IGV4dGVuZHMgRmxvYXRBcnJheSB7XG4gICAgXG4gICAgY29uc3RydWN0b3IoY291bnQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcihjb3VudCwgMyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21OYXRpdmVBcnJheSh2ZWNzOiBWZWN0b3IzW10pIDogVmVjdG9yM0FycmF5IHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHZlY3MubGVuZ3RoO1xuICAgICAgICBsZXQgYXJyYXkgPSBuZXcgVmVjdG9yM0FycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB2ZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheS5kYXRhW2ldID0gdmVjc1tpXS54O1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpKzFdID0gdmVjc1tpXS55O1xuICAgICAgICAgICAgYXJyYXkuZGF0YVtpKzJdID0gdmVjc1tpXS56O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICBzZXRWZWN0b3IoaTogbnVtYmVyLCB2ZWM6IFZlY3RvcjMpIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKiB0aGlzLmRpbSArIDBdID0gdmVjLng7XG4gICAgICAgIHRoaXMuZGF0YVtpICogdGhpcy5kaW0gKyAxXSA9IHZlYy55O1xuICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuZGltICsgMl0gPSB2ZWMuejtcbiAgICB9XG5cbiAgICBnZXRWZWN0b3IoaTogbnVtYmVyKSA6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoXG4gICAgICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuZGltICsgMF0sXG4gICAgICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuZGltICsgMV0sXG4gICAgICAgICAgICB0aGlzLmRhdGFbaSAqIHRoaXMuZGltICsgMl0sXG4gICAgICAgIClcbiAgICB9XG5cbiAgICB0b05hdGl2ZUFycmF5KCkgOiBWZWN0b3IzW10ge1xuXG4gICAgICAgIGxldCB2ZWNzOiBWZWN0b3IzW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgdGhpcy5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2ZWNzLnB1c2godGhpcy5nZXRWZWN0b3IoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2ZWNzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY2VBcnJheSBleHRlbmRzIEZsb2F0QXJyYXkge1xuXG4gICAgY29uc3RydWN0b3IoY291bnQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcihjb3VudCwgMyk7XG4gICAgfVxufSIsIlxuLy8gTWVzaC5Uc1xuLy8gUHVycG9zZTogb2JqIGNsYXNzIGZvciBkZWFsaW5nIHdpdGggdGhhdCBzcGVjaWZpYyBmaWxldHlwZSwgYW5kIG1lc2hlcyBpbiBnZW5lcmFsXG4vLyBBdXRob3I6IEpvcyBGZWVuc3RyYVxuXG5pbXBvcnQgeyBjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZSB9IGZyb20gXCJAdGVuc29yZmxvdy90ZmpzLWJhY2tlbmQtd2ViZ2wvZGlzdC9ncGdwdV91dGlsXCI7XG5pbXBvcnQgeyBicm93c2VyTG9jYWxTdG9yYWdlIH0gZnJvbSBcIkB0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L2lvL2xvY2FsX3N0b3JhZ2VcIjtcbmltcG9ydCB7IEZhY2VBcnJheSwgVmVjdG9yMkFycmF5LCBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vbWF0aC9hcnJheVwiO1xuXG5leHBvcnQgY2xhc3MgTWVzaCB7XG5cbiAgICB2ZXJ0czogVmVjdG9yM0FycmF5OyAvLyAzIGxvbmcgZmxvYXRcbiAgICBub3JtczogVmVjdG9yM0FycmF5OyAvLyAzIGxvbmcgZmxvYXRcbiAgICB1dnM6ICAgVmVjdG9yMkFycmF5OyAvLyAyIGxvbmcgZmxvYXQgXG4gICAgZmFjZXM6IEZhY2VBcnJheTtcblxuICAgIGxhc3RUb3VjaGVkOiBudW1iZXIgPSAwOyAvLyBuZWVkZWQgZm9yIHRyaWFuZ2xlIHdhbGtcbiAgICB0ZXh0dXJlPzogSW1hZ2VEYXRhID0gdW5kZWZpbmVkO1xuXG4gICAgY29uc3RydWN0b3IodmVydENvdW50OiBudW1iZXIsIG5vcm1Db3VudDogbnVtYmVyLCB1dkNvdW50OiBudW1iZXIsIGZhY2VDb3VudDogbnVtYmVyLCB0ZXh0dXJlOiBJbWFnZURhdGEgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy52ZXJ0cyA9IG5ldyBWZWN0b3IzQXJyYXkodmVydENvdW50KTtcbiAgICAgICAgdGhpcy5ub3JtcyA9IG5ldyBWZWN0b3IzQXJyYXkobm9ybUNvdW50KTtcbiAgICAgICAgdGhpcy51dnMgPSBuZXcgVmVjdG9yMkFycmF5KHV2Q291bnQpO1xuICAgICAgICB0aGlzLmZhY2VzID0gbmV3IEZhY2VBcnJheShmYWNlQ291bnQpO1xuICAgICAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tRGF0YSh2ZXJ0czogbnVtYmVyW10sIG5vcm1zOiBudW1iZXJbXSwgdXZzOiBudW1iZXJbXSwgZmFjZXM6IG51bWJlcltdKSA6IE1lc2gge1xuICAgICAgICBcbiAgICAgICAgLy8gTk9URSA6IHRoaXMgdHlwZSBvZiBwYXJzaW5nIG1ha2VzIG15IGxpZmUgZWFzeSwgYnV0IGlzIGRhbmdlcm91cy4gVGhpcyBpcyB3aHkgaSBjcmVhdGVkIHRoZSBcbiAgICAgICAgLy8gQXJyYXkgY2xhc3MuIFxuICAgICAgICBsZXQgbWVzaCA9IG5ldyBNZXNoKHZlcnRzLmxlbmd0aCAvIDMsIG5vcm1zLmxlbmd0aCAvIDMsIHV2cy5sZW5ndGggLyAyLCBmYWNlcy5sZW5ndGggLyAzKTtcbiAgICAgICAgbWVzaC52ZXJ0cy5zZXRBbGwodmVydHMpO1xuICAgICAgICBtZXNoLm5vcm1zLnNldEFsbChub3Jtcyk7XG4gICAgICAgIG1lc2gudXZzLnNldEFsbCh1dnMpO1xuICAgICAgICBtZXNoLmZhY2VzLnNldEFsbChmYWNlcyk7XG4gICAgICAgIHJldHVybiBtZXNoO1xuICAgIH1cblxuXG4gICAgZXhwb3J0VG9PYmoocGF0aDogc3RyaW5nKSB7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHNldE5laWdoYm9ycygpIHtcblxuICAgIH1cblxuICAgIGdldExpbmVJZHMoKSA6IFVpbnQxNkFycmF5IHtcbiAgICAgICAgLy8gMyBlZGdlcyBwZXIgZmFjZSwgMiBpbmRpY2VzIHBlciBlZGdlXG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMuZmFjZXMuY291bnQgKiA2O1xuICAgICAgICBsZXQgZGF0YSA9IG5ldyBVaW50MTZBcnJheShjb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IHRoaXMuZmFjZXMuY291bnQ7IGkrKykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgaURhdGEgPSBpICogNjtcbiAgICAgICAgICAgIGRhdGFbaURhdGFdICAgPSB0aGlzLmZhY2VzLmdldChpLCAwKTtcbiAgICAgICAgICAgIGRhdGFbaURhdGErMV0gPSB0aGlzLmZhY2VzLmdldChpLCAxKTtcbiAgICAgICAgICAgIGRhdGFbaURhdGErMl0gPSB0aGlzLmZhY2VzLmdldChpLCAxKTtcbiAgICAgICAgICAgIGRhdGFbaURhdGErM10gPSB0aGlzLmZhY2VzLmdldChpLCAyKTtcbiAgICAgICAgICAgIGRhdGFbaURhdGErNF0gPSB0aGlzLmZhY2VzLmdldChpLCAyKTtcbiAgICAgICAgICAgIGRhdGFbaURhdGErNV0gPSB0aGlzLmZhY2VzLmdldChpLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufTtcblxuLy8gPT09PT09PT09PT09PT09PSBPYmogPT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgZnVuY3Rpb24gbWVzaEZyb21PYmoodGV4dDogc3RyaW5nKSA6IE1lc2gge1xuXG4gICAgLy8gVGhpcyBpcyBub3QgYSBmdWxsIC5vYmogcGFyc2VyLlxuICAgIC8vIHNlZSBodHRwOi8vcGF1bGJvdXJrZS5uZXQvZGF0YWZvcm1hdHMvb2JqL1xuICAgIC8vIElOREVYRVMgT1JJR0lOQUxMWSBSRUZFUiBUTyBMSU5FUywgc28gLTEgaXMgbmVlZGVkXG5cbiAgICAvLyBydW4gdGhyb3VnaCBhbGwgbGluZXMsIGFuZCB0ZW1wb3JhcmVseSBzdG9yZVxuICAgIC8vIGFsbCBkYXRhIGluIHJhdyBudW1iZXIgbGlzdHMsIHNpbmNlIHdlIGRvbnQga25vdyBob3cgXG4gICAgLy8gbWFueSB2ZXJ0aWNlcyBvciBmYWNlcyB3ZWxsIGdldC4gXG4gICAgbGV0IHZlcnRzOiBudW1iZXJbXSA9IFtdOyAvLyAzIGxvbmcgZmxvYXRcbiAgICBsZXQgbm9ybXM6IG51bWJlcltdID0gW107IC8vIDMgbG9uZyBmbG9hdFxuICAgIGxldCB1dnM6ICAgbnVtYmVyW10gPSBbXTsgLy8gMiBsb25nIGZsb2F0IFxuICAgIGxldCBmYWNlczogbnVtYmVyW10gPSBbXTsgLy8gOSBsb25nIGludHMsIHUxNidzIHNob3VsZCBzdWZmaWNlLiBcbiAgICBcbiAgICAvLyBub3RlIDogdGhpcyBpcyB2ZXJ5IGluZWZmaWNpZW50LCBidXQgaXQnbGwgaGF2ZSB0byBkbyBmb3Igbm93Li4uXG4gICAgY29uc3Qga2V5d29yZFJFID0gLyhcXHcqKSg/OiApKiguKikvO1xuICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XG5cbiAgICAgICAgLy8gZmlsdGVyIG91dCBjb21tZW50c1xuICAgICAgICBpZiAobGluZSA9PT0gJycgfHwgbGluZS5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG0gPSBrZXl3b3JkUkUuZXhlYyhsaW5lKTtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbLCBrZXl3b3JkLCB1bnBhcnNlZEFyZ3NdID0gbTtcbiAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KC9cXHMrLykuc2xpY2UoMSk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2goa2V5d29yZCkge1xuICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRzLnB1c2gocGFyc2VGbG9hdChwYXJ0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndm4nOlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICBub3Jtcy5wdXNoKHBhcnNlRmxvYXQocGFydCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Z0JzpcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXZzLnB1c2gocGFyc2VGbG9hdChwYXJ0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBQcm9jZXNzT2JqRmFjZShwYXJ0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFjZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3VuaGFuZGxlZCBrZXl3b3JkOicsIGtleXdvcmQpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJudW1iZXIgb2YgdmVydGljZXM6IFwiICsgdmVydHMubGVuZ3RoIC8gMyk7XG4gICAgY29uc29sZS5sb2coXCJudW1iZXIgb2YgZmFjZXM6IFwiICsgZmFjZXMubGVuZ3RoIC8gMyk7XG4gICAgbGV0IG1lc2ggPSBNZXNoLmZyb21EYXRhKHZlcnRzLCBub3JtcywgdXZzLCBmYWNlcyk7XG4gICAgXG4gICAgcmV0dXJuIG1lc2g7XG59XG5cbi8vIHZlcmJvc2Ugd2F5IG9mIHByb2Nlc3Npbmcgb25lIHNpbmdsZSB2ZXJ0ZXgvbm9ybWFsL3V2IGNvbWJpbmF0aW9uIGluIGEgZmFjZS4gXG5mdW5jdGlvbiBQcm9jZXNzT2JqRmFjZVZlcnRleChwYXJ0OiBzdHJpbmcpIDogbnVtYmVyW10ge1xuXG4gICAgLy8gbWFrZSBzdXJlIGRhdGEgYWx3YXlzIGhhcyBsZW5ndGg6IDNcbiAgICBsZXQgZGF0YTogbnVtYmVyW10gPSBbXTtcbiAgICBcbiAgICAvLyBjdXQgc3RyaW5nIGFwYXJ0IGFuZCBwcm9jZXNzIGl0XG4gICAgbGV0IHN1YnBhcnRzID0gcGFydC5zcGxpdCgnLycpO1xuICAgIGlmIChzdWJwYXJ0cy5sZW5ndGggPT0gMSkge1xuICAgICAgICBkYXRhLnB1c2gocGFyc2VJbnQoc3VicGFydHNbMF0pLTEpO1xuICAgICAgICAvLyBkYXRhLnB1c2goMCk7XG4gICAgICAgIC8vIGRhdGEucHVzaCgwKTtcbiAgICB9IGVsc2UgaWYgKHN1YnBhcnRzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgIGRhdGEucHVzaChwYXJzZUludChzdWJwYXJ0c1swXSktMSk7XG4gICAgICAgIC8vIGRhdGEucHVzaChwYXJzZUludChzdWJwYXJ0c1sxXSktMSk7XG4gICAgICAgIC8vIGRhdGEucHVzaChwYXJzZUludChzdWJwYXJ0c1syXSktMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJpbnZhbGlkIGZhY2UgZm91bmQgd2hlbiBwcm9jZXNzaW5nXCI7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuXG4vLyBwcm9jZXNzIGEgZmFjZSBlbnRyeSBpbiBhbiBvYmogZmlsZVxuZnVuY3Rpb24gUHJvY2Vzc09iakZhY2UocGFydHM6IHN0cmluZ1tdKSA6IG51bWJlcltdIHtcbiAgICBcbiAgICBsZXQgZGF0YTogbnVtYmVyW10gPSBbXTtcblxuICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gNCkge1xuICAgICAgICAvLyBpIGRvbnQgd2FudCB0byBkZWFsIHdpdGggcXVhZHMgZm9yIG5vdywgY3JlYXRlIDIgZmFjZXMgZnJvbSBhIHF1YWRcbiAgICAgICAgbGV0IGEgPSBQcm9jZXNzT2JqRmFjZVZlcnRleChwYXJ0c1swXSk7XG4gICAgICAgIGxldCBiID0gUHJvY2Vzc09iakZhY2VWZXJ0ZXgocGFydHNbMV0pO1xuICAgICAgICBsZXQgYyA9IFByb2Nlc3NPYmpGYWNlVmVydGV4KHBhcnRzWzJdKTtcbiAgICAgICAgbGV0IGQgPSBQcm9jZXNzT2JqRmFjZVZlcnRleChwYXJ0c1szXSk7XG5cbiAgICAgICAgZGF0YS5wdXNoKC4uLmEsIC4uLmIsIC4uLmMsIC4uLmEsIC4uLmMsIC4uLmQpO1xuXG4gICAgfSBlbHNlIGlmIChwYXJ0cy5sZW5ndGggPT0gMykge1xuICAgICAgICAvLyBhcyBub3JtYWwgICAgICAgIFxuICAgICAgICBsZXQgYSA9IFByb2Nlc3NPYmpGYWNlVmVydGV4KHBhcnRzWzBdKTtcbiAgICAgICAgbGV0IGIgPSBQcm9jZXNzT2JqRmFjZVZlcnRleChwYXJ0c1sxXSk7XG4gICAgICAgIGxldCBjID0gUHJvY2Vzc09iakZhY2VWZXJ0ZXgocGFydHNbMl0pO1xuICAgICAgICBkYXRhLnB1c2goLi4uYSwgLi4uYiwgLi4uYyk7XG4gICAgfVxuXG4gICAgLy8gZGF0YSBhbHdheXMgaGFzIGxlbmd0aCA5IG9yIDE4XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbiIsIi8vIGRvbXdyYXBwZXJzLnRzXG4vLyBhdXRob3IgOiBKb3MgRmVlbnN0cmFcbi8vIHB1cnB1c2UgOiB3cmFwIGNlcnRhaW4gRE9NIGZ1bmN0aW9uYWxpdGllcyBcblxuLy8gc2V0IGFueSB0byBkb2N1bWVudCB0byBhZGQgZHJvcCBmdW5jdGlvbmFsaXR5IHRvIHRoZSBlbnRpcmUgZG9jdW1lbnQsIG9yIHVzZSBhbnkgb3RoZXIgZGl2LlxudHlwZSBGdW5jR2VuZXJpY1JldHVybiA9IDxUPigpID0+IFQ7XG5leHBvcnQgZnVuY3Rpb24gYWRkRHJvcEZpbGVFdmVudExpc3RlbmVycyhlbnY6IGFueSwgZmlsZXNDYWxsYmFjazogQ2FsbGJhY2tPbmVQYXJhbTxGaWxlTGlzdD4pIFxue1xuICAgIC8vIHNldHVwIGZpbGUgdXBsb2FkXG4gICAgZW52LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZnVuY3Rpb24oZXY6IERyYWdFdmVudCkge1xuXG4gICAgICAgIC8vYWRkIGhvdmVyIGNsYXNzIHdoZW4gZHJhZyBvdmVyXG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImVudGVyaW5nIGRyYWcuLi4uXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICAgICAgXG4gICAgZW52LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGZ1bmN0aW9uKGV2OiBEcmFnRXZlbnQpIHtcblxuICAgICAgICAvL3JlbW92ZSBob3ZlciBjbGFzcyB3aGVuIGRyYWcgb3V0XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxlYXZpbmcgZHJhZy4uLi5cIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgZW52LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBmdW5jdGlvbihldjogRHJhZ0V2ZW50KSB7XG5cbiAgICAgICAgLy9wcmV2ZW50IGJyb3dzZXIgZnJvbSBvcGVuIHRoZSBmaWxlIHdoZW4gZHJvcCBvZmZcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy9yZXRyaWV2ZSB1cGxvYWRlZCBmaWxlcyBkYXRhXG4gICAgICAgIHZhciBmaWxlczogRmlsZUxpc3QgPSBldi5kYXRhVHJhbnNmZXIhLmZpbGVzO1xuXG4gICAgICAgIGZpbGVzQ2FsbGJhY2soZmlsZXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG5cblxuaW50ZXJmYWNlIENhbGxiYWNrT25lUGFyYW08VDEsIFQyID0gdm9pZD4ge1xuICAgIChwYXJhbTE6IFQxKTogVDI7XG59XG5cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEltYWdlVGVzdChmaWxlczogRmlsZUxpc3QpIHtcblxuICAgIGxldCBpbWFnZSA9IGF3YWl0IGxvYWRJbWFnZUZyb21GaWxlKGZpbGVzLml0ZW0oMCkhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRUZXh0RnJvbUZpbGUoZmlsZTogRmlsZSkgOiBQcm9taXNlPHN0cmluZz4ge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZWFkZXIub25lcnJvciA9IChlcnJvcikgPT4gcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRKU09ORnJvbUZpbGUoZmlsZTogRmlsZSkgOiBQcm9taXNlPEpTT04+IHtcbiAgICBcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZWFkZXIucmVzdWx0KTtcbiAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZWFkZXIucmVzdWx0IGFzIHN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gKGVycm9yKSA9PiByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEltYWdlRnJvbUZpbGUoZmlsZTogRmlsZSkgOiBQcm9taXNlPEltYWdlRGF0YT4ge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4gbG9hZEltYWdlSGVscGVyMShyZWFkZXIpLnRoZW4oXG4gICAgICAgICAgICBpbWFnZURhdGEgPT4gcmVzb2x2ZShpbWFnZURhdGEpLFxuICAgICAgICAgICAgZXJyb3IgPT4gcmVqZWN0KGVycm9yKSxcbiAgICAgICAgKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZEltYWdlSGVscGVyMShmaWxlUmVhZGVyOiBGaWxlUmVhZGVyKSA6IFByb21pc2U8SW1hZ2VEYXRhPiB7XG4gICAgXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJykgYXMgSFRNTEltYWdlRWxlbWVudFxuICAgICAgICBpbWcuc3JjID0gZmlsZVJlYWRlci5yZXN1bHQgYXMgc3RyaW5nO1xuICAgIFxuICAgICAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShsb2FkSW1hZ2VIZWxwZXIyKGltZykpO1xuICAgICAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoYFNjcmlwdCBsb2FkIGVycm9yIGZvciAke2ltZ31gKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZUhlbHBlcjIoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpIDogSW1hZ2VEYXRhXG57XG4gICAgLy8gdHVybiBpdCBpbnRvIGltYWdlIGRhdGEgYnkgYnVpbGRpbmcgYSBjb21wbGV0ZSBjYW52YXMgYW5kIHNhbXBsaW5nIGl0XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpITs7XG4gICAgY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhO1xuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgIGxldCBkYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcbiAgICBjYW52YXMucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoY2FudmFzKTtcbiAgICByZXR1cm4gZGF0YTtcbn0iLCIvL1xuLy8gW0pGXVxuLy8gXG4vLyBhdXRob3I6IEpvcyBGZWVuc3RyYVxuLy8gVE9ETzogRklYIE1BVFJJWDQgISEhXG4vLyBOT1RFOiBNYXRyaXgzICYgTWF0clxuXG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4vcXVhdGVybmlvblwiO1xuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMyB9IGZyb20gXCIuL3ZlY3RvclwiO1xuXG5cbi8vIGdlbmVyaWMgYWxsLXB1cG9zZSBtYXRyaXggb2YgZmxvYXRzXG5leHBvcnQgY2xhc3MgTWF0cml4IHtcblxuICAgIGRhdGE6IEZsb2F0MzJBcnJheTtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGRhdGE6IG51bWJlcltdID0gW10pIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgaWYgKGRhdGEgPT0gW10gfHwgZGF0YS5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHRoaXMuZmlsbCgwKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpOyAgICBcbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGE6IG51bWJlcltdKSB7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9ICh0aGlzLmhlaWdodCAqIHRoaXMud2lkdGgpKVxuICAgICAgICAgICAgdGhyb3cgXCJkYXRhLmxlbmd0aCBkb2VzIG5vdCBtYXRjaCB3aWR0aCAqIGhlaWdodCBcIiArIGRhdGEubGVuZ3RoLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5kYXRhW2ldID0gZGF0YVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbGwodmFsdWU6IG51bWJlcikge1xuXG4gICAgICAgIGxldCBzaXplID0gdGhpcy5oZWlnaHQgKiB0aGlzLndpZHRoXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCh4OiBudW1iZXIsIHk6IG51bWJlcikgOiBudW1iZXIge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbeSAqIHRoaXMud2lkdGggKyB4XVxuICAgIH1cblxuICAgIHNldCh4OiBudW1iZXIsIHk6IG51bWJlciwgdmFsdWU6IG51bWJlcikge1xuXG4gICAgICAgIHRoaXMuZGF0YVt5ICogdGhpcy53aWR0aCArIHhdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gcGVyZm9ybSBvcGVyYXRpb24gZGlyZWN0bHkgb24gYWxsIGVsZW1lbnRzXG4gICAgZGl2RW50cmllcyh2YWx1ZTogbnVtYmVyKSA6IE1hdHJpeCB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaV0gLz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gcGVyZm9ybSBvcGVyYXRpb24gZGlyZWN0bHkgb24gZWxlbWVudHNcbiAgICBzY2FsZUVudHJpZXModmFsdWU6IG51bWJlcikgOiBNYXRyaXgge1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbaV0gKj0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59XG5cbi8vIDN4MyBtYXRyaXggb2YgZmxvYXRzIHVzZWQgZm9yIDJkIG1hdGhcbi8vIGluc3BpcmVkIGJ5IEdyZWdnIFRhdmFyZXMuIFxuZXhwb3J0IGNsYXNzIE1hdHJpeDMgZXh0ZW5kcyBNYXRyaXgge1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogbnVtYmVyW10gPSBbXSkge1xuICAgICAgICBzdXBlcigzLCAzLCBkYXRhKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmV3SWRlbnRpdHkoKSA6IE1hdHJpeDMge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoW1xuICAgICAgICAgICAgMSwgMCwgMCxcbiAgICAgICAgICAgIDAsIDEsIDAsIFxuICAgICAgICAgICAgMCwgMCwgMSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG5ld1Byb2plY3Rpb24od2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIDogTWF0cml4MyB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgbWF0cml4IGZsaXBzIHRoZSBZIGF4aXMgc28gMCBpcyBhdCB0aGUgdG9wLlxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoW1xuICAgICAgICAgICAgMiAvIHdpZHRoLCAwLCAwLCBcbiAgICAgICAgICAgIDAsIC0yIC8gaGVpZ2h0LCAwLFxuICAgICAgICAgICAgLTEsIDEsIDEsXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBuZXdUcmFuc2xhdGlvbihkeDogbnVtYmVyLCBkeTogbnVtYmVyKSA6IE1hdHJpeDN7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4MyhbXG4gICAgICAgICAgICAxLCAwLCAwLFxuICAgICAgICAgICAgMCwgMSwgMCxcbiAgICAgICAgICAgIGR4LCBkeSwgMSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLy8gYW5nbGUgaW4gcmFkaWFuc1xuICAgIHN0YXRpYyBuZXdSb3RhdGlvbihyOiBudW1iZXIpIDogTWF0cml4MyB7XG4gICAgICAgIHZhciBjID0gTWF0aC5jb3Mocik7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocik7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4MyhbXG4gICAgICAgICAgICBjLCAtcywgMCxcbiAgICAgICAgICAgIHMsIGMsIDAsXG4gICAgICAgICAgICAwLCAwLCAxLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmV3U2NhbGFyKHN4OiBudW1iZXIsIHN5OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKFtcbiAgICAgICAgICAgIHN4LCAwLCAwLFxuICAgICAgICAgICAgMCwgc3ksIDAsXG4gICAgICAgICAgICAwLCAwLCAxLFxuICAgICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByb2plY3Qod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIDogTWF0cml4MyB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KE1hdHJpeDMubmV3UHJvamVjdGlvbih3aWR0aCwgaGVpZ2h0KSlcbiAgICB9XG5cbiAgICB0cmFuc2xhdGVOKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpIDogTWF0cml4MyB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KE1hdHJpeDMubmV3VHJhbnNsYXRpb24oZHgsIGR5KSk7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHY6IFZlY3RvcjIpIDogTWF0cml4MyB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KE1hdHJpeDMubmV3VHJhbnNsYXRpb24odi54LCB2LnkpKTtcbiAgICB9XG5cbiAgICByb3RhdGUocjogbnVtYmVyKSA6IE1hdHJpeDMge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseShNYXRyaXgzLm5ld1JvdGF0aW9uKHIpKTtcbiAgICB9XG5cbiAgICBzY2FsZShzeDogbnVtYmVyLCBzeTogbnVtYmVyKSA6IE1hdHJpeDMge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseShNYXRyaXgzLm5ld1NjYWxhcihzeCwgc3kpKTtcbiAgICB9XG5cbiAgICAvLyBtdWx0aXBseSB0d28gbTMncyBcbiAgICBtdWx0aXBseShvdGhlcjogTWF0cml4MykgOiBNYXRyaXgzIHtcbiAgICAgICAgbGV0IGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGxldCBiID0gb3RoZXIuZGF0YTtcblxuICAgICAgICB2YXIgYTAwID0gYVswICogMyArIDBdO1xuICAgICAgICB2YXIgYTAxID0gYVswICogMyArIDFdO1xuICAgICAgICB2YXIgYTAyID0gYVswICogMyArIDJdO1xuICAgICAgICB2YXIgYTEwID0gYVsxICogMyArIDBdO1xuICAgICAgICB2YXIgYTExID0gYVsxICogMyArIDFdO1xuICAgICAgICB2YXIgYTEyID0gYVsxICogMyArIDJdO1xuICAgICAgICB2YXIgYTIwID0gYVsyICogMyArIDBdO1xuICAgICAgICB2YXIgYTIxID0gYVsyICogMyArIDFdO1xuICAgICAgICB2YXIgYTIyID0gYVsyICogMyArIDJdO1xuICAgICAgICB2YXIgYjAwID0gYlswICogMyArIDBdO1xuICAgICAgICB2YXIgYjAxID0gYlswICogMyArIDFdO1xuICAgICAgICB2YXIgYjAyID0gYlswICogMyArIDJdO1xuICAgICAgICB2YXIgYjEwID0gYlsxICogMyArIDBdO1xuICAgICAgICB2YXIgYjExID0gYlsxICogMyArIDFdO1xuICAgICAgICB2YXIgYjEyID0gYlsxICogMyArIDJdO1xuICAgICAgICB2YXIgYjIwID0gYlsyICogMyArIDBdO1xuICAgICAgICB2YXIgYjIxID0gYlsyICogMyArIDFdO1xuICAgICAgICB2YXIgYjIyID0gYlsyICogMyArIDJdO1xuXG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4MyhbXG4gICAgICAgICAgICBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjAsXG4gICAgICAgICAgICBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjEsXG4gICAgICAgICAgICBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjIsXG4gICAgICAgICAgICBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjAsXG4gICAgICAgICAgICBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjEsXG4gICAgICAgICAgICBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjIsXG4gICAgICAgICAgICBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjAsXG4gICAgICAgICAgICBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjEsXG4gICAgICAgICAgICBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjIsXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8vIHRyYW5zZm9ybSBhIHZlY3Rvci4gUkVDWUNMRSBJVFxuICAgIHRyYW5zZm9ybVZlY3Rvcih2OiBWZWN0b3IyKSA6IFZlY3RvcjIge1xuICAgICAgICBsZXQgbSA9IHRoaXMuZGF0YTtcbiAgICAgICAgbGV0IHYwID0gdi54O1xuICAgICAgICBsZXQgdjEgPSB2Lnk7XG4gICAgICAgIGxldCBkID0gdjAgKiBtWzAgKiAzICsgMl0gKyB2MSAqIG1bMSAqIDMgKyAyXSArIG1bMiAqIDMgKyAyXTtcbiAgICAgICAgdi54ID0gKHYwICogbVswICogMyArIDBdICsgdjEgKiBtWzEgKiAzICsgMF0gKyBtWzIgKiAzICsgMF0pIC8gZDtcbiAgICAgICAgdi55ID0gKHYwICogbVswICogMyArIDFdICsgdjEgKiBtWzEgKiAzICsgMV0gKyBtWzIgKiAzICsgMV0pIC8gZDtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIFxuICAgIC8vIHJldHVybiB0aGUgaW52ZXJzZSBvZiB0aGlzIG1hdHJpeFxuICAgIGludmVyc2UoKSA6IE1hdHJpeDMge1xuXG4gICAgICAgIC8vIGl2ZSBnb3Qgbm8gaWRlYSB3aGF0IGlzIGhhcHBlbmluZyBoZXJlLCBcbiAgICAgICAgLy8gYnV0IGFwcGFyYW50bHksIHRoaXMgaXMgaG93IHlvdSBpbnZlcnNlIGEgM3gzIG1hdHJpeC5cbiAgICAgICAgbGV0IG0gPSB0aGlzLmRhdGE7XG4gICAgICAgIHZhciB0MDAgPSBtWzEgKiAzICsgMV0gKiBtWzIgKiAzICsgMl0gLSBtWzEgKiAzICsgMl0gKiBtWzIgKiAzICsgMV07XG4gICAgICAgIHZhciB0MTAgPSBtWzAgKiAzICsgMV0gKiBtWzIgKiAzICsgMl0gLSBtWzAgKiAzICsgMl0gKiBtWzIgKiAzICsgMV07XG4gICAgICAgIHZhciB0MjAgPSBtWzAgKiAzICsgMV0gKiBtWzEgKiAzICsgMl0gLSBtWzAgKiAzICsgMl0gKiBtWzEgKiAzICsgMV07XG5cbiAgICAgICAgLy8gZGlzY3JpbWluYW50XG4gICAgICAgIHZhciBkID0gMS4wIC8gKG1bMCAqIDMgKyAwXSAqIHQwMCAtIG1bMSAqIDMgKyAwXSAqIHQxMCArIG1bMiAqIDMgKyAwXSAqIHQyMCk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShbXG4gICAgICAgICBkICogdDAwLCAtZCAqIHQxMCwgZCAqIHQyMCxcbiAgICAgICAgLWQgKiAobVsxICogMyArIDBdICogbVsyICogMyArIDJdIC0gbVsxICogMyArIDJdICogbVsyICogMyArIDBdKSxcbiAgICAgICAgIGQgKiAobVswICogMyArIDBdICogbVsyICogMyArIDJdIC0gbVswICogMyArIDJdICogbVsyICogMyArIDBdKSxcbiAgICAgICAgLWQgKiAobVswICogMyArIDBdICogbVsxICogMyArIDJdIC0gbVswICogMyArIDJdICogbVsxICogMyArIDBdKSxcbiAgICAgICAgIGQgKiAobVsxICogMyArIDBdICogbVsyICogMyArIDFdIC0gbVsxICogMyArIDFdICogbVsyICogMyArIDBdKSxcbiAgICAgICAgLWQgKiAobVswICogMyArIDBdICogbVsyICogMyArIDFdIC0gbVswICogMyArIDFdICogbVsyICogMyArIDBdKSxcbiAgICAgICAgIGQgKiAobVswICogMyArIDBdICogbVsxICogMyArIDFdIC0gbVswICogMyArIDFdICogbVsxICogMyArIDBdKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuLy8gNHg0IG1hdHJpeCBvZiBmbG9hdHMgdXNlZCBmb3IgM2QgbWF0aFxuLy8gaW5zcGlyZWQgYnkgR3JlZ2cgVGF2YXJlcy4gXG5leHBvcnQgY2xhc3MgTWF0cml4NCBleHRlbmRzIE1hdHJpeCB7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBudW1iZXJbXSA9IFtdKSB7XG4gICAgICAgIHN1cGVyKDQsIDQsIGRhdGEpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgbmV3SWRlbnRpdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4NChbXG4gICAgICAgICAgICAxLDAsMCwwLFxuICAgICAgICAgICAgMCwxLDAsMCxcbiAgICAgICAgICAgIDAsMCwxLDAsXG4gICAgICAgICAgICAwLDAsMCwxLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmV3Q29weShvdGhlcjogTWF0cml4NCkgOiBNYXRyaXg0IHsgXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4NCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCAxNjsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQuZGF0YVtpXSA9IG90aGVyLmRhdGFbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBtdWx0aXBseShvdGhlcjogTWF0cml4NCkge1xuICBcbiAgICAgICAgY29uc3QgYSA9IHRoaXMuZGF0YTtcbiAgICAgICAgY29uc3QgYiA9IG90aGVyLmRhdGE7IFxuXG4gICAgICAgIHZhciBiMDAgPSBiWzAgKiA0ICsgMF07XG4gICAgICAgIHZhciBiMDEgPSBiWzAgKiA0ICsgMV07XG4gICAgICAgIHZhciBiMDIgPSBiWzAgKiA0ICsgMl07XG4gICAgICAgIHZhciBiMDMgPSBiWzAgKiA0ICsgM107XG4gICAgICAgIHZhciBiMTAgPSBiWzEgKiA0ICsgMF07XG4gICAgICAgIHZhciBiMTEgPSBiWzEgKiA0ICsgMV07XG4gICAgICAgIHZhciBiMTIgPSBiWzEgKiA0ICsgMl07XG4gICAgICAgIHZhciBiMTMgPSBiWzEgKiA0ICsgM107XG4gICAgICAgIHZhciBiMjAgPSBiWzIgKiA0ICsgMF07XG4gICAgICAgIHZhciBiMjEgPSBiWzIgKiA0ICsgMV07XG4gICAgICAgIHZhciBiMjIgPSBiWzIgKiA0ICsgMl07XG4gICAgICAgIHZhciBiMjMgPSBiWzIgKiA0ICsgM107XG4gICAgICAgIHZhciBiMzAgPSBiWzMgKiA0ICsgMF07XG4gICAgICAgIHZhciBiMzEgPSBiWzMgKiA0ICsgMV07XG4gICAgICAgIHZhciBiMzIgPSBiWzMgKiA0ICsgMl07XG4gICAgICAgIHZhciBiMzMgPSBiWzMgKiA0ICsgM107XG4gICAgICAgIHZhciBhMDAgPSBhWzAgKiA0ICsgMF07XG4gICAgICAgIHZhciBhMDEgPSBhWzAgKiA0ICsgMV07XG4gICAgICAgIHZhciBhMDIgPSBhWzAgKiA0ICsgMl07XG4gICAgICAgIHZhciBhMDMgPSBhWzAgKiA0ICsgM107XG4gICAgICAgIHZhciBhMTAgPSBhWzEgKiA0ICsgMF07XG4gICAgICAgIHZhciBhMTEgPSBhWzEgKiA0ICsgMV07XG4gICAgICAgIHZhciBhMTIgPSBhWzEgKiA0ICsgMl07XG4gICAgICAgIHZhciBhMTMgPSBhWzEgKiA0ICsgM107XG4gICAgICAgIHZhciBhMjAgPSBhWzIgKiA0ICsgMF07XG4gICAgICAgIHZhciBhMjEgPSBhWzIgKiA0ICsgMV07XG4gICAgICAgIHZhciBhMjIgPSBhWzIgKiA0ICsgMl07XG4gICAgICAgIHZhciBhMjMgPSBhWzIgKiA0ICsgM107XG4gICAgICAgIHZhciBhMzAgPSBhWzMgKiA0ICsgMF07XG4gICAgICAgIHZhciBhMzEgPSBhWzMgKiA0ICsgMV07XG4gICAgICAgIHZhciBhMzIgPSBhWzMgKiA0ICsgMl07XG4gICAgICAgIHZhciBhMzMgPSBhWzMgKiA0ICsgM107XG5cbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFtcbiAgICAgICAgICAgIGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMCArIGIwMyAqIGEzMCxcbiAgICAgICAgICAgIGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMSArIGIwMyAqIGEzMSxcbiAgICAgICAgICAgIGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMiArIGIwMyAqIGEzMixcbiAgICAgICAgICAgIGIwMCAqIGEwMyArIGIwMSAqIGExMyArIGIwMiAqIGEyMyArIGIwMyAqIGEzMyxcbiAgICAgICAgICAgIGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMCArIGIxMyAqIGEzMCxcbiAgICAgICAgICAgIGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMSArIGIxMyAqIGEzMSxcbiAgICAgICAgICAgIGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMiArIGIxMyAqIGEzMixcbiAgICAgICAgICAgIGIxMCAqIGEwMyArIGIxMSAqIGExMyArIGIxMiAqIGEyMyArIGIxMyAqIGEzMyxcbiAgICAgICAgICAgIGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMCArIGIyMyAqIGEzMCxcbiAgICAgICAgICAgIGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMSArIGIyMyAqIGEzMSxcbiAgICAgICAgICAgIGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMiArIGIyMyAqIGEzMixcbiAgICAgICAgICAgIGIyMCAqIGEwMyArIGIyMSAqIGExMyArIGIyMiAqIGEyMyArIGIyMyAqIGEzMyxcbiAgICAgICAgICAgIGIzMCAqIGEwMCArIGIzMSAqIGExMCArIGIzMiAqIGEyMCArIGIzMyAqIGEzMCxcbiAgICAgICAgICAgIGIzMCAqIGEwMSArIGIzMSAqIGExMSArIGIzMiAqIGEyMSArIGIzMyAqIGEzMSxcbiAgICAgICAgICAgIGIzMCAqIGEwMiArIGIzMSAqIGExMiArIGIzMiAqIGEyMiArIGIzMyAqIGEzMixcbiAgICAgICAgICAgIGIzMCAqIGEwMyArIGIzMSAqIGExMyArIGIzMiAqIGEyMyArIGIzMyAqIGEzMyxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIHRyYW5zcG9zZSgpIDogTWF0cml4NCB7XG4gICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHJlcyA9IG1hdHJpeC5kYXRhO1xuICAgICAgICBsZXQgb2xkID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIHJlc1sgMF0gPSBvbGRbMF07XG4gICAgICAgIHJlc1sgMV0gPSBvbGRbNF07XG4gICAgICAgIHJlc1sgMl0gPSBvbGRbOF07XG4gICAgICAgIHJlc1sgM10gPSBvbGRbMTJdO1xuICAgICAgICByZXNbIDRdID0gb2xkWzFdO1xuICAgICAgICByZXNbIDVdID0gb2xkWzVdO1xuICAgICAgICByZXNbIDZdID0gb2xkWzldO1xuICAgICAgICByZXNbIDddID0gb2xkWzEzXTtcbiAgICAgICAgcmVzWyA4XSA9IG9sZFsyXTtcbiAgICAgICAgcmVzWyA5XSA9IG9sZFs2XTtcbiAgICAgICAgcmVzWzEwXSA9IG9sZFsxMF07XG4gICAgICAgIHJlc1sxMV0gPSBvbGRbMTRdO1xuICAgICAgICByZXNbMTJdID0gb2xkWzNdO1xuICAgICAgICByZXNbMTNdID0gb2xkWzddO1xuICAgICAgICByZXNbMTRdID0gb2xkWzExXTtcbiAgICAgICAgcmVzWzE1XSA9IG9sZFsxNV07XG4gICAgXG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBuZXdMb29rQXQoY2FtZXJhUG9zaXRpb246IFZlY3RvcjMsIHRhcmdldDogVmVjdG9yMywgdXA6IFZlY3RvcjMpIDogTWF0cml4NCB7XG5cbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgICAgIGxldCBkYXRhID0gbWF0cml4LmRhdGE7XG4gICAgICAgIGxldCB6QXhpcyA9IGNhbWVyYVBvc2l0aW9uLmNsb25lKCkuc3ViKHRhcmdldCkubm9ybWFsaXplKCk7XG4gICAgICAgIGxldCB4QXhpcyA9IHVwLmNsb25lKCkuY3Jvc3ModXApLm5vcm1hbGl6ZSgpO1xuICAgICAgICBsZXQgeUF4aXMgPSB6QXhpcy5jbG9uZSgpLmNyb3NzKHhBeGlzKS5ub3JtYWxpemUoKTtcbiAgICBcbiAgICAgICAgZGF0YVsgMF0gPSB4QXhpcy54O1xuICAgICAgICBkYXRhWyAxXSA9IHhBeGlzLnk7XG4gICAgICAgIGRhdGFbIDJdID0geEF4aXMuejtcbiAgICAgICAgZGF0YVsgM10gPSAwO1xuICAgICAgICBkYXRhWyA0XSA9IHlBeGlzLng7XG4gICAgICAgIGRhdGFbIDVdID0geUF4aXMueTtcbiAgICAgICAgZGF0YVsgNl0gPSB5QXhpcy56O1xuICAgICAgICBkYXRhWyA3XSA9IDA7XG4gICAgICAgIGRhdGFbIDhdID0gekF4aXMueDtcbiAgICAgICAgZGF0YVsgOV0gPSB6QXhpcy55O1xuICAgICAgICBkYXRhWzEwXSA9IHpBeGlzLno7XG4gICAgICAgIGRhdGFbMTFdID0gMDtcbiAgICAgICAgZGF0YVsxMl0gPSBjYW1lcmFQb3NpdGlvbi54O1xuICAgICAgICBkYXRhWzEzXSA9IGNhbWVyYVBvc2l0aW9uLnk7XG4gICAgICAgIGRhdGFbMTRdID0gY2FtZXJhUG9zaXRpb24uejtcbiAgICAgICAgZGF0YVsxNV0gPSAxO1xuICAgIFxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIDQtYnktNCBwZXJzcGVjdGl2ZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggZ2l2ZW4gdGhlIGFuZ3VsYXIgaGVpZ2h0XG4gICAgICogb2YgdGhlIGZydXN0dW0sIHRoZSBhc3BlY3QgcmF0aW8sIGFuZCB0aGUgbmVhciBhbmQgZmFyIGNsaXBwaW5nIHBsYW5lcy4gIFRoZVxuICAgICAqIGFyZ3VtZW50cyBkZWZpbmUgYSBmcnVzdHVtIGV4dGVuZGluZyBpbiB0aGUgbmVnYXRpdmUgeiBkaXJlY3Rpb24uICBUaGUgZ2l2ZW5cbiAgICAgKiBhbmdsZSBpcyB0aGUgdmVydGljYWwgYW5nbGUgb2YgdGhlIGZydXN0dW0sIGFuZCB0aGUgaG9yaXpvbnRhbCBhbmdsZSBpc1xuICAgICAqIGRldGVybWluZWQgdG8gcHJvZHVjZSB0aGUgZ2l2ZW4gYXNwZWN0IHJhdGlvLiAgVGhlIGFyZ3VtZW50cyBuZWFyIGFuZCBmYXIgYXJlXG4gICAgICogdGhlIGRpc3RhbmNlcyB0byB0aGUgbmVhciBhbmQgZmFyIGNsaXBwaW5nIHBsYW5lcy4gIE5vdGUgdGhhdCBuZWFyIGFuZCBmYXJcbiAgICAgKiBhcmUgbm90IHogY29vcmRpbmF0ZXMsIGJ1dCByYXRoZXIgdGhleSBhcmUgZGlzdGFuY2VzIGFsb25nIHRoZSBuZWdhdGl2ZVxuICAgICAqIHotYXhpcy4gIFRoZSBtYXRyaXggZ2VuZXJhdGVkIHNlbmRzIHRoZSB2aWV3aW5nIGZydXN0dW0gdG8gdGhlIHVuaXQgYm94LlxuICAgICAqIFdlIGFzc3VtZSBhIHVuaXQgYm94IGV4dGVuZGluZyBmcm9tIC0xIHRvIDEgaW4gdGhlIHggYW5kIHkgZGltZW5zaW9ucyBhbmRcbiAgICAgKiBmcm9tIC0xIHRvIDEgaW4gdGhlIHogZGltZW5zaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZE9mVmlld0luUmFkaWFucyBmaWVsZCBvZiB2aWV3IGluIHkgYXhpcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IGFzcGVjdCBvZiB2aWV3cG9ydCAod2lkdGggLyBoZWlnaHQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgbmVhciBaIGNsaXBwaW5nIHBsYW5lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZhciBmYXIgWiBjbGlwcGluZyBwbGFuZVxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gW2RzdF0gb3B0aW9uYWwgbWF0cml4IHRvIHN0b3JlIHJlc3VsdFxuICAgICAqIEByZXR1cm4ge01hdHJpeDR9IGRzdCBvciBhIG5ldyBtYXRyaXggaWYgbm9uZSBwcm92aWRlZFxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtM2QtbWF0aFxuICAgICAqL1xuICAgIHN0YXRpYyBuZXdQZXJzcGVjdGl2ZShmb3Y6IG51bWJlciwgYXNwZWN0OiBudW1iZXIsIG5lYXI6IG51bWJlciwgZmFyOiBudW1iZXIpIDogTWF0cml4NCB7XG5cbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgICAgIGxldCBkYXRhID0gbWF0cml4LmRhdGE7XG5cbiAgICAgICAgdmFyIGYgPSBNYXRoLnRhbihNYXRoLlBJICogMC41IC0gMC41ICogZm92KTtcbiAgICAgICAgdmFyIHJhbmdlSW52ID0gMS4wIC8gKG5lYXIgLSBmYXIpO1xuICAgIFxuICAgICAgICBkYXRhWyAwXSA9IGYgLyBhc3BlY3Q7XG4gICAgICAgIGRhdGFbIDFdID0gMDtcbiAgICAgICAgZGF0YVsgMl0gPSAwO1xuICAgICAgICBkYXRhWyAzXSA9IDA7XG4gICAgICAgIGRhdGFbIDRdID0gMDtcbiAgICAgICAgZGF0YVsgNV0gPSBmO1xuICAgICAgICBkYXRhWyA2XSA9IDA7XG4gICAgICAgIGRhdGFbIDddID0gMDtcbiAgICAgICAgZGF0YVsgOF0gPSAwO1xuICAgICAgICBkYXRhWyA5XSA9IDA7XG4gICAgICAgIGRhdGFbMTBdID0gKG5lYXIgKyBmYXIpICogcmFuZ2VJbnY7XG4gICAgICAgIGRhdGFbMTFdID0gLTE7XG4gICAgICAgIGRhdGFbMTJdID0gMDtcbiAgICAgICAgZGF0YVsxM10gPSAwO1xuICAgICAgICBkYXRhWzE0XSA9IG5lYXIgKiBmYXIgKiByYW5nZUludiAqIDI7XG4gICAgICAgIGRhdGFbMTVdID0gMDtcbiAgICBcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSA0LWJ5LTQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4IGdpdmVuIHRoZSBjb29yZGluYXRlcyBvZiB0aGVcbiAgICAgKiBwbGFuZXMgZGVmaW5pbmcgdGhlIGF4aXMtYWxpZ25lZCwgYm94LXNoYXBlZCB2aWV3aW5nIHZvbHVtZS4gIFRoZSBtYXRyaXhcbiAgICAgKiBnZW5lcmF0ZWQgc2VuZHMgdGhhdCBib3ggdG8gdGhlIHVuaXQgYm94LiAgTm90ZSB0aGF0IGFsdGhvdWdoIGxlZnQgYW5kIHJpZ2h0XG4gICAgICogYXJlIHggY29vcmRpbmF0ZXMgYW5kIGJvdHRvbSBhbmQgdG9wIGFyZSB5IGNvb3JkaW5hdGVzLCBuZWFyIGFuZCBmYXJcbiAgICAgKiBhcmUgbm90IHogY29vcmRpbmF0ZXMsIGJ1dCByYXRoZXIgdGhleSBhcmUgZGlzdGFuY2VzIGFsb25nIHRoZSBuZWdhdGl2ZVxuICAgICAqIHotYXhpcy4gIFdlIGFzc3VtZSBhIHVuaXQgYm94IGV4dGVuZGluZyBmcm9tIC0xIHRvIDEgaW4gdGhlIHggYW5kIHlcbiAgICAgKiBkaW1lbnNpb25zIGFuZCBmcm9tIC0xIHRvIDEgaW4gdGhlIHogZGltZW5zaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGxlZnQgcGxhbmUgb2YgdGhlIGJveC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgcmlnaHQgcGxhbmUgb2YgdGhlIGJveC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGJvdHRvbSBwbGFuZSBvZiB0aGUgYm94LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgcmlnaHQgcGxhbmUgb2YgdGhlIGJveC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbmVhciBUaGUgbmVnYXRpdmUgeiBjb29yZGluYXRlIG9mIHRoZSBuZWFyIHBsYW5lIG9mIHRoZSBib3guXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZhciBUaGUgbmVnYXRpdmUgeiBjb29yZGluYXRlIG9mIHRoZSBmYXIgcGxhbmUgb2YgdGhlIGJveC5cbiAgICAgKiBAcGFyYW0ge01hdHJpeDR9IFtkc3RdIG9wdGlvbmFsIG1hdHJpeCB0byBzdG9yZSByZXN1bHRcbiAgICAgKiBAcmV0dXJuIHtNYXRyaXg0fSBkc3Qgb3IgYSBuZXcgbWF0cml4IGlmIG5vbmUgcHJvdmlkZWRcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcbiAgICAgKi9cbiAgICBzdGF0aWMgbmV3T3J0aG9ncmFwaGljKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHRvcDogbnVtYmVyLCBuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyKSA6IE1hdHJpeDQge1xuICAgIFxuICAgICAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgICAgICAgbGV0IGRzdCA9IG1hdHJpeC5kYXRhO1xuICAgIFxuICAgICAgICBkc3RbIDBdID0gMiAvIChyaWdodCAtIGxlZnQpO1xuICAgICAgICBkc3RbIDFdID0gMDtcbiAgICAgICAgZHN0WyAyXSA9IDA7XG4gICAgICAgIGRzdFsgM10gPSAwO1xuICAgICAgICBkc3RbIDRdID0gMDtcbiAgICAgICAgZHN0WyA1XSA9IDIgLyAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgZHN0WyA2XSA9IDA7XG4gICAgICAgIGRzdFsgN10gPSAwO1xuICAgICAgICBkc3RbIDhdID0gMDtcbiAgICAgICAgZHN0WyA5XSA9IDA7XG4gICAgICAgIGRzdFsxMF0gPSAyIC8gKG5lYXIgLSBmYXIpO1xuICAgICAgICBkc3RbMTFdID0gMDtcbiAgICAgICAgZHN0WzEyXSA9IChsZWZ0ICsgcmlnaHQpIC8gKGxlZnQgLSByaWdodCk7XG4gICAgICAgIGRzdFsxM10gPSAoYm90dG9tICsgdG9wKSAvIChib3R0b20gLSB0b3ApO1xuICAgICAgICBkc3RbMTRdID0gKG5lYXIgKyBmYXIpIC8gKG5lYXIgLSBmYXIpO1xuICAgICAgICBkc3RbMTVdID0gMTtcbiAgICBcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSA0LWJ5LTQgcGVyc3BlY3RpdmUgdHJhbnNmb3JtYXRpb24gbWF0cml4IGdpdmVuIHRoZSBsZWZ0LCByaWdodCxcbiAgICAgKiB0b3AsIGJvdHRvbSwgbmVhciBhbmQgZmFyIGNsaXBwaW5nIHBsYW5lcy4gVGhlIGFyZ3VtZW50cyBkZWZpbmUgYSBmcnVzdHVtXG4gICAgICogZXh0ZW5kaW5nIGluIHRoZSBuZWdhdGl2ZSB6IGRpcmVjdGlvbi4gVGhlIGFyZ3VtZW50cyBuZWFyIGFuZCBmYXIgYXJlIHRoZVxuICAgICAqIGRpc3RhbmNlcyB0byB0aGUgbmVhciBhbmQgZmFyIGNsaXBwaW5nIHBsYW5lcy4gTm90ZSB0aGF0IG5lYXIgYW5kIGZhciBhcmUgbm90XG4gICAgICogeiBjb29yZGluYXRlcywgYnV0IHJhdGhlciB0aGV5IGFyZSBkaXN0YW5jZXMgYWxvbmcgdGhlIG5lZ2F0aXZlIHotYXhpcy4gVGhlXG4gICAgICogbWF0cml4IGdlbmVyYXRlZCBzZW5kcyB0aGUgdmlld2luZyBmcnVzdHVtIHRvIHRoZSB1bml0IGJveC4gV2UgYXNzdW1lIGEgdW5pdFxuICAgICAqIGJveCBleHRlbmRpbmcgZnJvbSAtMSB0byAxIGluIHRoZSB4IGFuZCB5IGRpbWVuc2lvbnMgYW5kIGZyb20gLTEgdG8gMSBpbiB0aGUgelxuICAgICAqIGRpbWVuc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBsZWZ0IHBsYW5lIG9mIHRoZSBib3guXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHJpZ2h0IHBsYW5lIG9mIHRoZSBib3guXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBib3R0b20gcGxhbmUgb2YgdGhlIGJveC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9wIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHJpZ2h0IHBsYW5lIG9mIHRoZSBib3guXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgVGhlIG5lZ2F0aXZlIHogY29vcmRpbmF0ZSBvZiB0aGUgbmVhciBwbGFuZSBvZiB0aGUgYm94LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgVGhlIG5lZ2F0aXZlIHogY29vcmRpbmF0ZSBvZiB0aGUgZmFyIHBsYW5lIG9mIHRoZSBib3guXG4gICAgICogQHBhcmFtIHtNYXRyaXg0fSBbZHN0XSBvcHRpb25hbCBtYXRyaXggdG8gc3RvcmUgcmVzdWx0XG4gICAgICogQHJldHVybiB7TWF0cml4NH0gZHN0IG9yIGEgbmV3IG1hdHJpeCBpZiBub25lIHByb3ZpZGVkXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTp3ZWJnbC0zZC1tYXRoXG4gICAgICovXG4gICAgc3RhdGljIG5ld0ZydXN0dW0obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgdG9wOiBudW1iZXIsIG5lYXI6IG51bWJlciwgZmFyOiBudW1iZXIpIDogTWF0cml4NCB7XG4gICAgICAgIFxuICAgICAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgICAgICAgbGV0IGRzdCA9IG1hdHJpeC5kYXRhO1xuICAgIFxuICAgICAgICB2YXIgZHggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIHZhciBkeSA9IHRvcCAtIGJvdHRvbTtcbiAgICAgICAgdmFyIGR6ID0gZmFyIC0gbmVhcjtcbiAgICBcbiAgICAgICAgZHN0WyAwXSA9IDIgKiBuZWFyIC8gZHg7XG4gICAgICAgIGRzdFsgMV0gPSAwO1xuICAgICAgICBkc3RbIDJdID0gMDtcbiAgICAgICAgZHN0WyAzXSA9IDA7XG4gICAgICAgIGRzdFsgNF0gPSAwO1xuICAgICAgICBkc3RbIDVdID0gMiAqIG5lYXIgLyBkeTtcbiAgICAgICAgZHN0WyA2XSA9IDA7XG4gICAgICAgIGRzdFsgN10gPSAwO1xuICAgICAgICBkc3RbIDhdID0gKGxlZnQgKyByaWdodCkgLyBkeDtcbiAgICAgICAgZHN0WyA5XSA9ICh0b3AgKyBib3R0b20pIC8gZHk7XG4gICAgICAgIGRzdFsxMF0gPSAtKGZhciArIG5lYXIpIC8gZHo7XG4gICAgICAgIGRzdFsxMV0gPSAtMTtcbiAgICAgICAgZHN0WzEyXSA9IDA7XG4gICAgICAgIGRzdFsxM10gPSAwO1xuICAgICAgICBkc3RbMTRdID0gLTIgKiBuZWFyICogZmFyIC8gZHo7XG4gICAgICAgIGRzdFsxNV0gPSAwO1xuICAgIFxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgbmV3VHJhbnNsYXRpb24odHg6IG51bWJlciwgdHk6IG51bWJlciwgdHo6IG51bWJlcikgOiBNYXRyaXg0IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFtcbiAgICAgICAgICAgIDEsMCwwLDAsXG4gICAgICAgICAgICAwLDEsMCwwLFxuICAgICAgICAgICAgMCwwLDEsMCxcbiAgICAgICAgICAgIHR4LHR5LHR6LDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBuZXdYUm90YXRpb24oYW5nbGVJblJhZGlhbnM6IG51bWJlcikgOiBNYXRyaXg0IHtcbiAgICAgICAgXG4gICAgICAgIHZhciBjID0gTWF0aC5jb3MoYW5nbGVJblJhZGlhbnMpO1xuICAgICAgICB2YXIgcyA9IE1hdGguc2luKGFuZ2xlSW5SYWRpYW5zKTtcblxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoW1xuICAgICAgICAgICAgMSwwLDAsMCxcbiAgICAgICAgICAgIDAsYywtcywwLFxuICAgICAgICAgICAgMCxzLGMsMCxcbiAgICAgICAgICAgIDAsMCwwLDEsXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgbmV3WVJvdGF0aW9uKGFuZ2xlSW5SYWRpYW5zOiBudW1iZXIpIDogTWF0cml4NCB7XG5cbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhhbmdsZUluUmFkaWFucyk7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpO1xuICAgIFxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoW1xuICAgICAgICAgICAgYywwLHMsMCxcbiAgICAgICAgICAgIDAsMSwwLDAsXG4gICAgICAgICAgICAtcywwLGMsMCxcbiAgICAgICAgICAgIDAsMCwwLDEsXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgbmV3WlJvdGF0aW9uKGFuZ2xlSW5SYWRpYW5zOiBudW1iZXIpIHtcbiAgICBcbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgICAgIGxldCBkc3QgPSBtYXRyaXguZGF0YTtcbiAgICBcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhhbmdsZUluUmFkaWFucyk7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpO1xuICAgIFxuICAgICAgICBkc3RbIDBdID0gYztcbiAgICAgICAgZHN0WyAxXSA9IHM7XG4gICAgICAgIGRzdFsgMl0gPSAwO1xuICAgICAgICBkc3RbIDNdID0gMDtcbiAgICAgICAgZHN0WyA0XSA9IC1zO1xuICAgICAgICBkc3RbIDVdID0gYztcbiAgICAgICAgZHN0WyA2XSA9IDA7XG4gICAgICAgIGRzdFsgN10gPSAwO1xuICAgICAgICBkc3RbIDhdID0gMDtcbiAgICAgICAgZHN0WyA5XSA9IDA7XG4gICAgICAgIGRzdFsxMF0gPSAxO1xuICAgICAgICBkc3RbMTFdID0gMDtcbiAgICAgICAgZHN0WzEyXSA9IDA7XG4gICAgICAgIGRzdFsxM10gPSAwO1xuICAgICAgICBkc3RbMTRdID0gMDtcbiAgICAgICAgZHN0WzE1XSA9IDE7XG4gICAgXG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuXG4gICAgXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gcm90YXRpb24gbWF0cml4IGFyb3VuZCBhbiBhcmJpdHJhcnkgYXhpc1xuICAgICAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVJblJhZGlhbnMgYW1vdW50IHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gW2RzdF0gb3B0aW9uYWwgbWF0cml4IHRvIHN0b3JlIHJlc3VsdFxuICAgICAqIEByZXR1cm4ge01hdHJpeDR9IGRzdCBvciBhIG5ldyBtYXRyaXggaWYgbm9uZSBwcm92aWRlZFxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtM2QtbWF0aFxuICAgICAqL1xuICAgIHN0YXRpYyBuZXdBeGlzUm90YXRpb24oYXhpczogVmVjdG9yMywgYW5nbGVJblJhZGlhbnM6IG51bWJlcikge1xuXG4gICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuICAgICAgICBsZXQgZHN0ID0gbWF0cml4LmRhdGE7XG4gICAgXG4gICAgICAgIGxldCB4ID0gYXhpcy54O1xuICAgICAgICBsZXQgeSA9IGF4aXMueTtcbiAgICAgICAgbGV0IHogPSBheGlzLno7XG4gICAgICAgIGxldCBuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gICAgICAgIHggLz0gbjtcbiAgICAgICAgeSAvPSBuO1xuICAgICAgICB6IC89IG47XG4gICAgICAgIGxldCB4eCA9IHggKiB4O1xuICAgICAgICBsZXQgeXkgPSB5ICogeTtcbiAgICAgICAgbGV0IHp6ID0geiAqIHo7XG4gICAgICAgIGxldCBjID0gTWF0aC5jb3MoYW5nbGVJblJhZGlhbnMpO1xuICAgICAgICBsZXQgcyA9IE1hdGguc2luKGFuZ2xlSW5SYWRpYW5zKTtcbiAgICAgICAgbGV0IG9uZU1pbnVzQ29zaW5lID0gMSAtIGM7XG4gICAgXG4gICAgICAgIGRzdFsgMF0gPSB4eCArICgxIC0geHgpICogYztcbiAgICAgICAgZHN0WyAxXSA9IHggKiB5ICogb25lTWludXNDb3NpbmUgKyB6ICogcztcbiAgICAgICAgZHN0WyAyXSA9IHggKiB6ICogb25lTWludXNDb3NpbmUgLSB5ICogcztcbiAgICAgICAgZHN0WyAzXSA9IDA7XG4gICAgICAgIGRzdFsgNF0gPSB4ICogeSAqIG9uZU1pbnVzQ29zaW5lIC0geiAqIHM7XG4gICAgICAgIGRzdFsgNV0gPSB5eSArICgxIC0geXkpICogYztcbiAgICAgICAgZHN0WyA2XSA9IHkgKiB6ICogb25lTWludXNDb3NpbmUgKyB4ICogcztcbiAgICAgICAgZHN0WyA3XSA9IDA7XG4gICAgICAgIGRzdFsgOF0gPSB4ICogeiAqIG9uZU1pbnVzQ29zaW5lICsgeSAqIHM7XG4gICAgICAgIGRzdFsgOV0gPSB5ICogeiAqIG9uZU1pbnVzQ29zaW5lIC0geCAqIHM7XG4gICAgICAgIGRzdFsxMF0gPSB6eiArICgxIC0genopICogYztcbiAgICAgICAgZHN0WzExXSA9IDA7XG4gICAgICAgIGRzdFsxMl0gPSAwO1xuICAgICAgICBkc3RbMTNdID0gMDtcbiAgICAgICAgZHN0WzE0XSA9IDA7XG4gICAgICAgIGRzdFsxNV0gPSAxO1xuICAgIFxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSBieSBhbiBheGlzIHJvdGF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gbSBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICAgKiBAcGFyYW0ge1ZlY3RvcjN9IGF4aXMgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlSW5SYWRpYW5zIGFtb3VudCB0byByb3RhdGVcbiAgICAgKiBAcGFyYW0ge01hdHJpeDR9IFtkc3RdIG9wdGlvbmFsIG1hdHJpeCB0byBzdG9yZSByZXN1bHRcbiAgICAgKiBAcmV0dXJuIHtNYXRyaXg0fSBkc3Qgb3IgYSBuZXcgbWF0cml4IGlmIG5vbmUgcHJvdmlkZWRcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcbiAgICAgKi9cbiAgICBheGlzUm90YXRlKGF4aXM6IFZlY3RvcjMsIGFuZ2xlSW5SYWRpYW5zOiBudW1iZXIpIDogTWF0cml4NCB7XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgb3B0aW1pemVkIHZlcnNpb24gb2ZcbiAgICAgICAgLy8gcmV0dXJuIG11bHRpcGx5KG0sIGF4aXNSb3RhdGlvbihheGlzLCBhbmdsZUluUmFkaWFucyksIGRzdCk7XG4gICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuICAgICAgICBsZXQgZHN0ID0gbWF0cml4LmRhdGE7XG4gICAgICAgIGxldCBtID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIHZhciB4ID0gYXhpcy54O1xuICAgICAgICB2YXIgeSA9IGF4aXMueTtcbiAgICAgICAgdmFyIHogPSBheGlzLno7XG4gICAgICAgIHZhciBuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gICAgICAgIHggLz0gbjtcbiAgICAgICAgeSAvPSBuO1xuICAgICAgICB6IC89IG47XG4gICAgICAgIHZhciB4eCA9IHggKiB4O1xuICAgICAgICB2YXIgeXkgPSB5ICogeTtcbiAgICAgICAgdmFyIHp6ID0geiAqIHo7XG4gICAgICAgIHZhciBjID0gTWF0aC5jb3MoYW5nbGVJblJhZGlhbnMpO1xuICAgICAgICB2YXIgcyA9IE1hdGguc2luKGFuZ2xlSW5SYWRpYW5zKTtcbiAgICAgICAgdmFyIG9uZU1pbnVzQ29zaW5lID0gMSAtIGM7XG4gICAgXG4gICAgICAgIHZhciByMDAgPSB4eCArICgxIC0geHgpICogYztcbiAgICAgICAgdmFyIHIwMSA9IHggKiB5ICogb25lTWludXNDb3NpbmUgKyB6ICogcztcbiAgICAgICAgdmFyIHIwMiA9IHggKiB6ICogb25lTWludXNDb3NpbmUgLSB5ICogcztcbiAgICAgICAgdmFyIHIxMCA9IHggKiB5ICogb25lTWludXNDb3NpbmUgLSB6ICogcztcbiAgICAgICAgdmFyIHIxMSA9IHl5ICsgKDEgLSB5eSkgKiBjO1xuICAgICAgICB2YXIgcjEyID0geSAqIHogKiBvbmVNaW51c0Nvc2luZSArIHggKiBzO1xuICAgICAgICB2YXIgcjIwID0geCAqIHogKiBvbmVNaW51c0Nvc2luZSArIHkgKiBzO1xuICAgICAgICB2YXIgcjIxID0geSAqIHogKiBvbmVNaW51c0Nvc2luZSAtIHggKiBzO1xuICAgICAgICB2YXIgcjIyID0genogKyAoMSAtIHp6KSAqIGM7XG4gICAgXG4gICAgICAgIHZhciBtMDAgPSBtWzBdO1xuICAgICAgICB2YXIgbTAxID0gbVsxXTtcbiAgICAgICAgdmFyIG0wMiA9IG1bMl07XG4gICAgICAgIHZhciBtMDMgPSBtWzNdO1xuICAgICAgICB2YXIgbTEwID0gbVs0XTtcbiAgICAgICAgdmFyIG0xMSA9IG1bNV07XG4gICAgICAgIHZhciBtMTIgPSBtWzZdO1xuICAgICAgICB2YXIgbTEzID0gbVs3XTtcbiAgICAgICAgdmFyIG0yMCA9IG1bOF07XG4gICAgICAgIHZhciBtMjEgPSBtWzldO1xuICAgICAgICB2YXIgbTIyID0gbVsxMF07XG4gICAgICAgIHZhciBtMjMgPSBtWzExXTtcbiAgICBcbiAgICAgICAgZHN0WyAwXSA9IHIwMCAqIG0wMCArIHIwMSAqIG0xMCArIHIwMiAqIG0yMDtcbiAgICAgICAgZHN0WyAxXSA9IHIwMCAqIG0wMSArIHIwMSAqIG0xMSArIHIwMiAqIG0yMTtcbiAgICAgICAgZHN0WyAyXSA9IHIwMCAqIG0wMiArIHIwMSAqIG0xMiArIHIwMiAqIG0yMjtcbiAgICAgICAgZHN0WyAzXSA9IHIwMCAqIG0wMyArIHIwMSAqIG0xMyArIHIwMiAqIG0yMztcbiAgICAgICAgZHN0WyA0XSA9IHIxMCAqIG0wMCArIHIxMSAqIG0xMCArIHIxMiAqIG0yMDtcbiAgICAgICAgZHN0WyA1XSA9IHIxMCAqIG0wMSArIHIxMSAqIG0xMSArIHIxMiAqIG0yMTtcbiAgICAgICAgZHN0WyA2XSA9IHIxMCAqIG0wMiArIHIxMSAqIG0xMiArIHIxMiAqIG0yMjtcbiAgICAgICAgZHN0WyA3XSA9IHIxMCAqIG0wMyArIHIxMSAqIG0xMyArIHIxMiAqIG0yMztcbiAgICAgICAgZHN0WyA4XSA9IHIyMCAqIG0wMCArIHIyMSAqIG0xMCArIHIyMiAqIG0yMDtcbiAgICAgICAgZHN0WyA5XSA9IHIyMCAqIG0wMSArIHIyMSAqIG0xMSArIHIyMiAqIG0yMTtcbiAgICAgICAgZHN0WzEwXSA9IHIyMCAqIG0wMiArIHIyMSAqIG0xMiArIHIyMiAqIG0yMjtcbiAgICAgICAgZHN0WzExXSA9IHIyMCAqIG0wMyArIHIyMSAqIG0xMyArIHIyMiAqIG0yMztcbiAgICBcbiAgICAgICAgaWYgKG0gIT09IGRzdCkge1xuICAgICAgICAgICAgZHN0WzEyXSA9IG1bMTJdO1xuICAgICAgICAgICAgZHN0WzEzXSA9IG1bMTNdO1xuICAgICAgICAgICAgZHN0WzE0XSA9IG1bMTRdO1xuICAgICAgICAgICAgZHN0WzE1XSA9IG1bMTVdO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBhIHNjYWxpbmcgbWF0cml4IFxuICAgIHN0YXRpYyBuZXdTY2FsZXIoc3g6IG51bWJlciwgc3k6IG51bWJlciwgc3o6IG51bWJlcikgOiBNYXRyaXg0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFtcbiAgICAgICAgICAgIHN4LDAsMCwwLFxuICAgICAgICAgICAgMCxzeSwwLDAsXG4gICAgICAgICAgICAwLDAsc3osMCxcbiAgICAgICAgICAgIDAsMCwwLCAxLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNdWx0aXBseSBieSBhIHNjYWxpbmcgbWF0cml4XG4gICAgICAgICAqIEBwYXJhbSB7TWF0cml4NH0gbSBtYXRyaXggdG8gbXVsdGlwbHlcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN4IHggc2NhbGUuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSB5IHNjYWxlLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ogeiBzY2FsZS5cbiAgICAgICAgICogQHBhcmFtIHtNYXRyaXg0fSBbZHN0XSBvcHRpb25hbCBtYXRyaXggdG8gc3RvcmUgcmVzdWx0XG4gICAgICAgICAqIEByZXR1cm4ge01hdHJpeDR9IGRzdCBvciBhIG5ldyBtYXRyaXggaWYgbm9uZSBwcm92aWRlZFxuICAgICAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcbiAgICAgICAgICovXG4gICAgc2NhbGUoc3g6IG51bWJlciwgc3k6IG51bWJlciwgc3o6IG51bWJlcikgOiBNYXRyaXg0IHtcbiAgICBcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgb3B0aW1pemVkIHZlcnNpb24gb2ZcbiAgICAgICAgLy8gcmV0dXJuIG11bHRpcGx5KG0sIHNjYWxpbmcoc3gsIHN5LCBzeiksIGRzdCk7XG4gICAgXG4gICAgICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuICAgICAgICBsZXQgZHN0ID0gbWF0cml4LmRhdGE7XG4gICAgICAgIGxldCBtID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIGRzdFsgMF0gPSBzeCAqIG1bMCAqIDQgKyAwXTtcbiAgICAgICAgZHN0WyAxXSA9IHN4ICogbVswICogNCArIDFdO1xuICAgICAgICBkc3RbIDJdID0gc3ggKiBtWzAgKiA0ICsgMl07XG4gICAgICAgIGRzdFsgM10gPSBzeCAqIG1bMCAqIDQgKyAzXTtcbiAgICAgICAgZHN0WyA0XSA9IHN5ICogbVsxICogNCArIDBdO1xuICAgICAgICBkc3RbIDVdID0gc3kgKiBtWzEgKiA0ICsgMV07XG4gICAgICAgIGRzdFsgNl0gPSBzeSAqIG1bMSAqIDQgKyAyXTtcbiAgICAgICAgZHN0WyA3XSA9IHN5ICogbVsxICogNCArIDNdO1xuICAgICAgICBkc3RbIDhdID0gc3ogKiBtWzIgKiA0ICsgMF07XG4gICAgICAgIGRzdFsgOV0gPSBzeiAqIG1bMiAqIDQgKyAxXTtcbiAgICAgICAgZHN0WzEwXSA9IHN6ICogbVsyICogNCArIDJdO1xuICAgICAgICBkc3RbMTFdID0gc3ogKiBtWzIgKiA0ICsgM107XG4gICAgXG4gICAgICAgIGlmIChtICE9PSBkc3QpIHtcbiAgICAgICAgICAgIGRzdFsxMl0gPSBtWzEyXTtcbiAgICAgICAgICAgIGRzdFsxM10gPSBtWzEzXTtcbiAgICAgICAgICAgIGRzdFsxNF0gPSBtWzE0XTtcbiAgICAgICAgICAgIGRzdFsxNV0gPSBtWzE1XTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBjcmVhdGVzIGEgbWF0cml4IGZyb20gdHJhbnNsYXRpb24sIHF1YXRlcm5pb24sIHNjYWxlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gdHJhbnNsYXRpb24gW3gsIHksIHpdIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gcXVhdGVybmlvbiBbeCwgeSwgeiwgel0gcXVhdGVybmlvbiByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHNjYWxlIFt4LCB5LCB6XSBzY2FsZVxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gW2RzdF0gb3B0aW9uYWwgbWF0cml4IHRvIHN0b3JlIHJlc3VsdFxuICAgICAqIEByZXR1cm4ge01hdHJpeDR9IGRzdCBvciBhIG5ldyBtYXRyaXggaWYgbm9uZSBwcm92aWRlZFxuICAgICAqL1xuICAgIG5ld0NvbXBvc2UodHJhbnNsYXRpb246IFZlY3RvcjMsIHF1YXRlcm5pb246IFF1YXRlcm5pb24sIHNjYWxlOiBWZWN0b3IzKSA6IE1hdHJpeDQge1xuICAgICAgICBcbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgICAgIGxldCBkc3QgPSBtYXRyaXguZGF0YTtcbiAgICBcbiAgICAgICAgY29uc3QgeCA9IHF1YXRlcm5pb24ueDtcbiAgICAgICAgY29uc3QgeSA9IHF1YXRlcm5pb24ueTtcbiAgICAgICAgY29uc3QgeiA9IHF1YXRlcm5pb24uejtcbiAgICAgICAgY29uc3QgdyA9IHF1YXRlcm5pb24udztcbiAgICBcbiAgICAgICAgY29uc3QgeDIgPSB4ICsgeDtcbiAgICAgICAgY29uc3QgeTIgPSB5ICsgeTtcbiAgICAgICAgY29uc3QgejIgPSB6ICsgejtcbiAgICBcbiAgICAgICAgY29uc3QgeHggPSB4ICogeDI7XG4gICAgICAgIGNvbnN0IHh5ID0geCAqIHkyO1xuICAgICAgICBjb25zdCB4eiA9IHggKiB6MjtcbiAgICBcbiAgICAgICAgY29uc3QgeXkgPSB5ICogeTI7XG4gICAgICAgIGNvbnN0IHl6ID0geSAqIHoyO1xuICAgICAgICBjb25zdCB6eiA9IHogKiB6MjtcbiAgICBcbiAgICAgICAgY29uc3Qgd3ggPSB3ICogeDI7XG4gICAgICAgIGNvbnN0IHd5ID0gdyAqIHkyO1xuICAgICAgICBjb25zdCB3eiA9IHcgKiB6MjtcbiAgICBcbiAgICAgICAgY29uc3Qgc3ggPSBzY2FsZS54O1xuICAgICAgICBjb25zdCBzeSA9IHNjYWxlLnk7XG4gICAgICAgIGNvbnN0IHN6ID0gc2NhbGUuejtcbiAgICBcbiAgICAgICAgZHN0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgICAgIGRzdFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICAgICAgICBkc3RbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICAgICAgZHN0WzNdID0gMDtcbiAgICBcbiAgICAgICAgZHN0WzRdID0gKHh5IC0gd3opICogc3k7XG4gICAgICAgIGRzdFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICAgICAgICBkc3RbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICAgICAgZHN0WzddID0gMDtcbiAgICBcbiAgICAgICAgZHN0WyA4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgICAgICBkc3RbIDldID0gKHl6IC0gd3gpICogc3o7XG4gICAgICAgIGRzdFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICAgICAgZHN0WzExXSA9IDA7XG4gICAgXG4gICAgICAgIGRzdFsxMl0gPSB0cmFuc2xhdGlvbi54O1xuICAgICAgICBkc3RbMTNdID0gdHJhbnNsYXRpb24ueTtcbiAgICAgICAgZHN0WzE0XSA9IHRyYW5zbGF0aW9uLno7XG4gICAgICAgIGRzdFsxNV0gPSAxO1xuICAgIFxuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICBcbiAgICAvLyBxdWF0RnJvbVJvdGF0aW9uTWF0cml4KCkge1xuICAgIC8vICAgICAvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuICAgIFxuICAgIC8vICAgICAvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuICAgIC8vICAgICBjb25zdCBtMTEgPSBtWzBdO1xuICAgIC8vICAgICBjb25zdCBtMTIgPSBtWzRdO1xuICAgIC8vICAgICBjb25zdCBtMTMgPSBtWzhdO1xuICAgIC8vICAgICBjb25zdCBtMjEgPSBtWzFdO1xuICAgIC8vICAgICBjb25zdCBtMjIgPSBtWzVdO1xuICAgIC8vICAgICBjb25zdCBtMjMgPSBtWzldO1xuICAgIC8vICAgICBjb25zdCBtMzEgPSBtWzJdO1xuICAgIC8vICAgICBjb25zdCBtMzIgPSBtWzZdO1xuICAgIC8vICAgICBjb25zdCBtMzMgPSBtWzEwXTtcbiAgICBcbiAgICAvLyAgICAgY29uc3QgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XG4gICAgXG4gICAgLy8gICAgIGlmICh0cmFjZSA+IDApIHtcbiAgICAvLyAgICAgICAgIGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQodHJhY2UgKyAxKTtcbiAgICAvLyAgICAgICAgIGRzdFszXSA9IDAuMjUgLyBzO1xuICAgIC8vICAgICAgICAgZHN0WzBdID0gKG0zMiAtIG0yMykgKiBzO1xuICAgIC8vICAgICAgICAgZHN0WzFdID0gKG0xMyAtIG0zMSkgKiBzO1xuICAgIC8vICAgICAgICAgZHN0WzJdID0gKG0yMSAtIG0xMikgKiBzO1xuICAgIC8vICAgICB9IGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAvLyAgICAgICAgIGNvbnN0IHMgPSAyICogTWF0aC5zcXJ0KDEgKyBtMTEgLSBtMjIgLSBtMzMpO1xuICAgIC8vICAgICAgICAgZHN0WzNdID0gKG0zMiAtIG0yMykgLyBzO1xuICAgIC8vICAgICAgICAgZHN0WzBdID0gMC4yNSAqIHM7XG4gICAgLy8gICAgICAgICBkc3RbMV0gPSAobTEyICsgbTIxKSAvIHM7XG4gICAgLy8gICAgICAgICBkc3RbMl0gPSAobTEzICsgbTMxKSAvIHM7XG4gICAgLy8gICAgIH0gZWxzZSBpZiAobTIyID4gbTMzKSB7XG4gICAgLy8gICAgICAgICBjb25zdCBzID0gMiAqIE1hdGguc3FydCgxICsgbTIyIC0gbTExIC0gbTMzKTtcbiAgICAvLyAgICAgICAgIGRzdFszXSA9IChtMTMgLSBtMzEpIC8gcztcbiAgICAvLyAgICAgICAgIGRzdFswXSA9IChtMTIgKyBtMjEpIC8gcztcbiAgICAvLyAgICAgICAgIGRzdFsxXSA9IDAuMjUgKiBzO1xuICAgIC8vICAgICAgICAgZHN0WzJdID0gKG0yMyArIG0zMikgLyBzO1xuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgY29uc3QgcyA9IDIgKiBNYXRoLnNxcnQoMSArIG0zMyAtIG0xMSAtIG0yMik7XG4gICAgLy8gICAgICAgICBkc3RbM10gPSAobTIxIC0gbTEyKSAvIHM7XG4gICAgLy8gICAgICAgICBkc3RbMF0gPSAobTEzICsgbTMxKSAvIHM7XG4gICAgLy8gICAgICAgICBkc3RbMV0gPSAobTIzICsgbTMyKSAvIHM7XG4gICAgLy8gICAgICAgICBkc3RbMl0gPSAwLjI1ICogcztcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbiAgICBcbiAgICAvLyBkZWNvbXBvc2UobWF0LCB0cmFuc2xhdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUpIHtcbiAgICAvLyAgICAgbGV0IHN4ID0gbTQubGVuZ3RoKG1hdC5zbGljZSgwLCAzKSk7XG4gICAgLy8gICAgIGNvbnN0IHN5ID0gbTQubGVuZ3RoKG1hdC5zbGljZSg0LCA3KSk7XG4gICAgLy8gICAgIGNvbnN0IHN6ID0gbTQubGVuZ3RoKG1hdC5zbGljZSg4LCAxMSkpO1xuICAgIFxuICAgIC8vICAgICAvLyBpZiBkZXRlcm1pbmF0ZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG4gICAgLy8gICAgIGNvbnN0IGRldCA9IGRldGVybWluYXRlKG1hdCk7XG4gICAgLy8gICAgIGlmIChkZXQgPCAwKSB7XG4gICAgLy8gICAgICAgICBzeCA9IC1zeDtcbiAgICAvLyAgICAgfVxuICAgIFxuICAgIC8vICAgICB0cmFuc2xhdGlvblswXSA9IG1hdFsxMl07XG4gICAgLy8gICAgIHRyYW5zbGF0aW9uWzFdID0gbWF0WzEzXTtcbiAgICAvLyAgICAgdHJhbnNsYXRpb25bMl0gPSBtYXRbMTRdO1xuICAgIFxuICAgIC8vICAgICAvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuICAgIC8vICAgICBjb25zdCBtYXRyaXggPSBtNC5jb3B5KG1hdCk7XG4gICAgXG4gICAgLy8gICAgIGNvbnN0IGludlNYID0gMSAvIHN4O1xuICAgIC8vICAgICBjb25zdCBpbnZTWSA9IDEgLyBzeTtcbiAgICAvLyAgICAgY29uc3QgaW52U1ogPSAxIC8gc3o7XG4gICAgXG4gICAgLy8gICAgIG1hdHJpeFswXSAqPSBpbnZTWDtcbiAgICAvLyAgICAgbWF0cml4WzFdICo9IGludlNYO1xuICAgIC8vICAgICBtYXRyaXhbMl0gKj0gaW52U1g7XG4gICAgXG4gICAgLy8gICAgIG1hdHJpeFs0XSAqPSBpbnZTWTtcbiAgICAvLyAgICAgbWF0cml4WzVdICo9IGludlNZO1xuICAgIC8vICAgICBtYXRyaXhbNl0gKj0gaW52U1k7XG4gICAgXG4gICAgLy8gICAgIG1hdHJpeFs4XSAqPSBpbnZTWjtcbiAgICAvLyAgICAgbWF0cml4WzldICo9IGludlNaO1xuICAgIC8vICAgICBtYXRyaXhbMTBdICo9IGludlNaO1xuICAgIFxuICAgIC8vICAgICBxdWF0RnJvbVJvdGF0aW9uTWF0cml4KG1hdHJpeCwgcXVhdGVybmlvbik7XG4gICAgXG4gICAgLy8gICAgIHNjYWxlWzBdID0gc3g7XG4gICAgLy8gICAgIHNjYWxlWzFdID0gc3k7XG4gICAgLy8gICAgIHNjYWxlWzJdID0gc3o7XG4gICAgLy8gfVxuICAgIFxuICAgIGRldGVybWluYXRlKCkgOiBudW1iZXIge1xuXG4gICAgICAgIGxldCBtID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIHZhciBtMDAgPSBtWzAgKiA0ICsgMF07XG4gICAgICAgIHZhciBtMDEgPSBtWzAgKiA0ICsgMV07XG4gICAgICAgIHZhciBtMDIgPSBtWzAgKiA0ICsgMl07XG4gICAgICAgIHZhciBtMDMgPSBtWzAgKiA0ICsgM107XG4gICAgICAgIHZhciBtMTAgPSBtWzEgKiA0ICsgMF07XG4gICAgICAgIHZhciBtMTEgPSBtWzEgKiA0ICsgMV07XG4gICAgICAgIHZhciBtMTIgPSBtWzEgKiA0ICsgMl07XG4gICAgICAgIHZhciBtMTMgPSBtWzEgKiA0ICsgM107XG4gICAgICAgIHZhciBtMjAgPSBtWzIgKiA0ICsgMF07XG4gICAgICAgIHZhciBtMjEgPSBtWzIgKiA0ICsgMV07XG4gICAgICAgIHZhciBtMjIgPSBtWzIgKiA0ICsgMl07XG4gICAgICAgIHZhciBtMjMgPSBtWzIgKiA0ICsgM107XG4gICAgICAgIHZhciBtMzAgPSBtWzMgKiA0ICsgMF07XG4gICAgICAgIHZhciBtMzEgPSBtWzMgKiA0ICsgMV07XG4gICAgICAgIHZhciBtMzIgPSBtWzMgKiA0ICsgMl07XG4gICAgICAgIHZhciBtMzMgPSBtWzMgKiA0ICsgM107XG4gICAgICAgIHZhciB0bXBfMCAgPSBtMjIgKiBtMzM7XG4gICAgICAgIHZhciB0bXBfMSAgPSBtMzIgKiBtMjM7XG4gICAgICAgIHZhciB0bXBfMiAgPSBtMTIgKiBtMzM7XG4gICAgICAgIHZhciB0bXBfMyAgPSBtMzIgKiBtMTM7XG4gICAgICAgIHZhciB0bXBfNCAgPSBtMTIgKiBtMjM7XG4gICAgICAgIHZhciB0bXBfNSAgPSBtMjIgKiBtMTM7XG4gICAgICAgIHZhciB0bXBfNiAgPSBtMDIgKiBtMzM7XG4gICAgICAgIHZhciB0bXBfNyAgPSBtMzIgKiBtMDM7XG4gICAgICAgIHZhciB0bXBfOCAgPSBtMDIgKiBtMjM7XG4gICAgICAgIHZhciB0bXBfOSAgPSBtMjIgKiBtMDM7XG4gICAgICAgIHZhciB0bXBfMTAgPSBtMDIgKiBtMTM7XG4gICAgICAgIHZhciB0bXBfMTEgPSBtMTIgKiBtMDM7XG4gICAgXG4gICAgICAgIHZhciB0MCA9ICh0bXBfMCAqIG0xMSArIHRtcF8zICogbTIxICsgdG1wXzQgKiBtMzEpIC1cbiAgICAgICAgICAgICh0bXBfMSAqIG0xMSArIHRtcF8yICogbTIxICsgdG1wXzUgKiBtMzEpO1xuICAgICAgICB2YXIgdDEgPSAodG1wXzEgKiBtMDEgKyB0bXBfNiAqIG0yMSArIHRtcF85ICogbTMxKSAtXG4gICAgICAgICAgICAodG1wXzAgKiBtMDEgKyB0bXBfNyAqIG0yMSArIHRtcF84ICogbTMxKTtcbiAgICAgICAgdmFyIHQyID0gKHRtcF8yICogbTAxICsgdG1wXzcgKiBtMTEgKyB0bXBfMTAgKiBtMzEpIC1cbiAgICAgICAgICAgICh0bXBfMyAqIG0wMSArIHRtcF82ICogbTExICsgdG1wXzExICogbTMxKTtcbiAgICAgICAgdmFyIHQzID0gKHRtcF81ICogbTAxICsgdG1wXzggKiBtMTEgKyB0bXBfMTEgKiBtMjEpIC1cbiAgICAgICAgICAgICh0bXBfNCAqIG0wMSArIHRtcF85ICogbTExICsgdG1wXzEwICogbTIxKTtcbiAgICBcbiAgICAgICAgcmV0dXJuIDEuMCAvIChtMDAgKiB0MCArIG0xMCAqIHQxICsgbTIwICogdDIgKyBtMzAgKiB0Myk7XG4gICAgfVxuXG4gICAgaW52ZXJzZSgpIDogTWF0cml4NCB7XG5cbiAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG4gICAgICAgIGxldCBkc3QgPSBtYXRyaXguZGF0YTtcbiAgICAgICAgbGV0IG0gPSB0aGlzLmRhdGE7XG5cbiAgICAgICAgdmFyIG0wMCA9IG1bMCAqIDQgKyAwXTtcbiAgICAgICAgdmFyIG0wMSA9IG1bMCAqIDQgKyAxXTtcbiAgICAgICAgdmFyIG0wMiA9IG1bMCAqIDQgKyAyXTtcbiAgICAgICAgdmFyIG0wMyA9IG1bMCAqIDQgKyAzXTtcbiAgICAgICAgdmFyIG0xMCA9IG1bMSAqIDQgKyAwXTtcbiAgICAgICAgdmFyIG0xMSA9IG1bMSAqIDQgKyAxXTtcbiAgICAgICAgdmFyIG0xMiA9IG1bMSAqIDQgKyAyXTtcbiAgICAgICAgdmFyIG0xMyA9IG1bMSAqIDQgKyAzXTtcbiAgICAgICAgdmFyIG0yMCA9IG1bMiAqIDQgKyAwXTtcbiAgICAgICAgdmFyIG0yMSA9IG1bMiAqIDQgKyAxXTtcbiAgICAgICAgdmFyIG0yMiA9IG1bMiAqIDQgKyAyXTtcbiAgICAgICAgdmFyIG0yMyA9IG1bMiAqIDQgKyAzXTtcbiAgICAgICAgdmFyIG0zMCA9IG1bMyAqIDQgKyAwXTtcbiAgICAgICAgdmFyIG0zMSA9IG1bMyAqIDQgKyAxXTtcbiAgICAgICAgdmFyIG0zMiA9IG1bMyAqIDQgKyAyXTtcbiAgICAgICAgdmFyIG0zMyA9IG1bMyAqIDQgKyAzXTtcbiAgICAgICAgdmFyIHRtcF8wICA9IG0yMiAqIG0zMztcbiAgICAgICAgdmFyIHRtcF8xICA9IG0zMiAqIG0yMztcbiAgICAgICAgdmFyIHRtcF8yICA9IG0xMiAqIG0zMztcbiAgICAgICAgdmFyIHRtcF8zICA9IG0zMiAqIG0xMztcbiAgICAgICAgdmFyIHRtcF80ICA9IG0xMiAqIG0yMztcbiAgICAgICAgdmFyIHRtcF81ICA9IG0yMiAqIG0xMztcbiAgICAgICAgdmFyIHRtcF82ICA9IG0wMiAqIG0zMztcbiAgICAgICAgdmFyIHRtcF83ICA9IG0zMiAqIG0wMztcbiAgICAgICAgdmFyIHRtcF84ICA9IG0wMiAqIG0yMztcbiAgICAgICAgdmFyIHRtcF85ICA9IG0yMiAqIG0wMztcbiAgICAgICAgdmFyIHRtcF8xMCA9IG0wMiAqIG0xMztcbiAgICAgICAgdmFyIHRtcF8xMSA9IG0xMiAqIG0wMztcbiAgICAgICAgdmFyIHRtcF8xMiA9IG0yMCAqIG0zMTtcbiAgICAgICAgdmFyIHRtcF8xMyA9IG0zMCAqIG0yMTtcbiAgICAgICAgdmFyIHRtcF8xNCA9IG0xMCAqIG0zMTtcbiAgICAgICAgdmFyIHRtcF8xNSA9IG0zMCAqIG0xMTtcbiAgICAgICAgdmFyIHRtcF8xNiA9IG0xMCAqIG0yMTtcbiAgICAgICAgdmFyIHRtcF8xNyA9IG0yMCAqIG0xMTtcbiAgICAgICAgdmFyIHRtcF8xOCA9IG0wMCAqIG0zMTtcbiAgICAgICAgdmFyIHRtcF8xOSA9IG0zMCAqIG0wMTtcbiAgICAgICAgdmFyIHRtcF8yMCA9IG0wMCAqIG0yMTtcbiAgICAgICAgdmFyIHRtcF8yMSA9IG0yMCAqIG0wMTtcbiAgICAgICAgdmFyIHRtcF8yMiA9IG0wMCAqIG0xMTtcbiAgICAgICAgdmFyIHRtcF8yMyA9IG0xMCAqIG0wMTtcbiAgICBcbiAgICAgICAgdmFyIHQwID0gKHRtcF8wICogbTExICsgdG1wXzMgKiBtMjEgKyB0bXBfNCAqIG0zMSkgLVxuICAgICAgICAgICAgKHRtcF8xICogbTExICsgdG1wXzIgKiBtMjEgKyB0bXBfNSAqIG0zMSk7XG4gICAgICAgIHZhciB0MSA9ICh0bXBfMSAqIG0wMSArIHRtcF82ICogbTIxICsgdG1wXzkgKiBtMzEpIC1cbiAgICAgICAgICAgICh0bXBfMCAqIG0wMSArIHRtcF83ICogbTIxICsgdG1wXzggKiBtMzEpO1xuICAgICAgICB2YXIgdDIgPSAodG1wXzIgKiBtMDEgKyB0bXBfNyAqIG0xMSArIHRtcF8xMCAqIG0zMSkgLVxuICAgICAgICAgICAgKHRtcF8zICogbTAxICsgdG1wXzYgKiBtMTEgKyB0bXBfMTEgKiBtMzEpO1xuICAgICAgICB2YXIgdDMgPSAodG1wXzUgKiBtMDEgKyB0bXBfOCAqIG0xMSArIHRtcF8xMSAqIG0yMSkgLVxuICAgICAgICAgICAgKHRtcF80ICogbTAxICsgdG1wXzkgKiBtMTEgKyB0bXBfMTAgKiBtMjEpO1xuICAgIFxuICAgICAgICB2YXIgZCA9IDEuMCAvIChtMDAgKiB0MCArIG0xMCAqIHQxICsgbTIwICogdDIgKyBtMzAgKiB0Myk7XG4gICAgXG4gICAgICAgIGRzdFswXSA9IGQgKiB0MDtcbiAgICAgICAgZHN0WzFdID0gZCAqIHQxO1xuICAgICAgICBkc3RbMl0gPSBkICogdDI7XG4gICAgICAgIGRzdFszXSA9IGQgKiB0MztcbiAgICAgICAgZHN0WzRdID0gZCAqICgodG1wXzEgKiBtMTAgKyB0bXBfMiAqIG0yMCArIHRtcF81ICogbTMwKSAtXG4gICAgICAgICAgICAgICAgKHRtcF8wICogbTEwICsgdG1wXzMgKiBtMjAgKyB0bXBfNCAqIG0zMCkpO1xuICAgICAgICBkc3RbNV0gPSBkICogKCh0bXBfMCAqIG0wMCArIHRtcF83ICogbTIwICsgdG1wXzggKiBtMzApIC1cbiAgICAgICAgICAgICAgICAodG1wXzEgKiBtMDAgKyB0bXBfNiAqIG0yMCArIHRtcF85ICogbTMwKSk7XG4gICAgICAgIGRzdFs2XSA9IGQgKiAoKHRtcF8zICogbTAwICsgdG1wXzYgKiBtMTAgKyB0bXBfMTEgKiBtMzApIC1cbiAgICAgICAgICAgICAgICAodG1wXzIgKiBtMDAgKyB0bXBfNyAqIG0xMCArIHRtcF8xMCAqIG0zMCkpO1xuICAgICAgICBkc3RbN10gPSBkICogKCh0bXBfNCAqIG0wMCArIHRtcF85ICogbTEwICsgdG1wXzEwICogbTIwKSAtXG4gICAgICAgICAgICAgICAgKHRtcF81ICogbTAwICsgdG1wXzggKiBtMTAgKyB0bXBfMTEgKiBtMjApKTtcbiAgICAgICAgZHN0WzhdID0gZCAqICgodG1wXzEyICogbTEzICsgdG1wXzE1ICogbTIzICsgdG1wXzE2ICogbTMzKSAtXG4gICAgICAgICAgICAgICAgKHRtcF8xMyAqIG0xMyArIHRtcF8xNCAqIG0yMyArIHRtcF8xNyAqIG0zMykpO1xuICAgICAgICBkc3RbOV0gPSBkICogKCh0bXBfMTMgKiBtMDMgKyB0bXBfMTggKiBtMjMgKyB0bXBfMjEgKiBtMzMpIC1cbiAgICAgICAgICAgICAgICAodG1wXzEyICogbTAzICsgdG1wXzE5ICogbTIzICsgdG1wXzIwICogbTMzKSk7XG4gICAgICAgIGRzdFsxMF0gPSBkICogKCh0bXBfMTQgKiBtMDMgKyB0bXBfMTkgKiBtMTMgKyB0bXBfMjIgKiBtMzMpIC1cbiAgICAgICAgICAgICAgICAodG1wXzE1ICogbTAzICsgdG1wXzE4ICogbTEzICsgdG1wXzIzICogbTMzKSk7XG4gICAgICAgIGRzdFsxMV0gPSBkICogKCh0bXBfMTcgKiBtMDMgKyB0bXBfMjAgKiBtMTMgKyB0bXBfMjMgKiBtMjMpIC1cbiAgICAgICAgICAgICAgICAodG1wXzE2ICogbTAzICsgdG1wXzIxICogbTEzICsgdG1wXzIyICogbTIzKSk7XG4gICAgICAgIGRzdFsxMl0gPSBkICogKCh0bXBfMTQgKiBtMjIgKyB0bXBfMTcgKiBtMzIgKyB0bXBfMTMgKiBtMTIpIC1cbiAgICAgICAgICAgICAgICAodG1wXzE2ICogbTMyICsgdG1wXzEyICogbTEyICsgdG1wXzE1ICogbTIyKSk7XG4gICAgICAgIGRzdFsxM10gPSBkICogKCh0bXBfMjAgKiBtMzIgKyB0bXBfMTIgKiBtMDIgKyB0bXBfMTkgKiBtMjIpIC1cbiAgICAgICAgICAgICAgICAodG1wXzE4ICogbTIyICsgdG1wXzIxICogbTMyICsgdG1wXzEzICogbTAyKSk7XG4gICAgICAgIGRzdFsxNF0gPSBkICogKCh0bXBfMTggKiBtMTIgKyB0bXBfMjMgKiBtMzIgKyB0bXBfMTUgKiBtMDIpIC1cbiAgICAgICAgICAgICAgICAodG1wXzIyICogbTMyICsgdG1wXzE0ICogbTAyICsgdG1wXzE5ICogbTEyKSk7XG4gICAgICAgIGRzdFsxNV0gPSBkICogKCh0bXBfMjIgKiBtMjIgKyB0bXBfMTYgKiBtMDIgKyB0bXBfMjEgKiBtMTIpIC1cbiAgICAgICAgICAgICAgICAodG1wXzIwICogbTEyICsgdG1wXzIzICogbTIyICsgdG1wXzE3ICogbTAyKSk7XG4gICAgXG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuXG4gICAgLy8gLyoqXG4gICAgLy8gICogVGFrZXMgYSAgbWF0cml4IGFuZCBhIHZlY3RvciB3aXRoIDQgZW50cmllcywgdHJhbnNmb3JtcyB0aGF0IHZlY3RvciBieVxuICAgIC8vICAqIHRoZSBtYXRyaXgsIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSB2ZWN0b3Igd2l0aCA0IGVudHJpZXMuXG4gICAgLy8gICogQHBhcmFtIHtNYXRyaXg0fSBtIFRoZSBtYXRyaXguXG4gICAgLy8gICogQHBhcmFtIHtWZWN0b3I0fSB2IFRoZSBwb2ludCBpbiBob21vZ2Vub3VzIGNvb3JkaW5hdGVzLlxuICAgIC8vICAqIEBwYXJhbSB7VmVjdG9yNH0gZHN0IG9wdGlvbmFsIHZlY3RvcjQgdG8gc3RvcmUgcmVzdWx0XG4gICAgLy8gICogQHJldHVybiB7VmVjdG9yNH0gZHN0IG9yIG5ldyBWZWN0b3I0IGlmIG5vdCBwcm92aWRlZFxuICAgIC8vICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtM2QtbWF0aFxuICAgIC8vICAqL1xuICAgIC8vIGZ1bmN0aW9uIHRyYW5zZm9ybVZlY3RvcihtLCB2LCBkc3QpIHtcbiAgICAvLyAgICAgZHN0ID0gZHN0IHx8IG5ldyBNYXRUeXBlKDQpO1xuICAgIC8vICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgIC8vICAgICAgICAgZHN0W2ldID0gMC4wO1xuICAgIC8vICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyArK2opIHtcbiAgICAvLyAgICAgICAgIGRzdFtpXSArPSB2W2pdICogbVtqICogNCArIGldO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBkc3Q7XG4gICAgLy8gfVxuICAgIFxuICAgIC8vIC8qKlxuICAgIC8vICAqIFRha2VzIGEgNC1ieS00IG1hdHJpeCBhbmQgYSB2ZWN0b3Igd2l0aCAzIGVudHJpZXMsXG4gICAgLy8gICogaW50ZXJwcmV0cyB0aGUgdmVjdG9yIGFzIGEgcG9pbnQsIHRyYW5zZm9ybXMgdGhhdCBwb2ludCBieSB0aGUgbWF0cml4LCBhbmRcbiAgICAvLyAgKiByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSB2ZWN0b3Igd2l0aCAzIGVudHJpZXMuXG4gICAgLy8gICogQHBhcmFtIHtNYXRyaXg0fSBtIFRoZSBtYXRyaXguXG4gICAgLy8gICogQHBhcmFtIHtWZWN0b3IzfSB2IFRoZSBwb2ludC5cbiAgICAvLyAgKiBAcGFyYW0ge1ZlY3RvcjR9IGRzdCBvcHRpb25hbCB2ZWN0b3I0IHRvIHN0b3JlIHJlc3VsdFxuICAgIC8vICAqIEByZXR1cm4ge1ZlY3RvcjR9IGRzdCBvciBuZXcgVmVjdG9yNCBpZiBub3QgcHJvdmlkZWRcbiAgICAvLyAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcbiAgICAvLyAgKi9cbiAgICAvLyBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChtLCB2LCBkc3QpIHtcbiAgICAvLyAgICAgZHN0ID0gZHN0IHx8IG5ldyBNYXRUeXBlKDMpO1xuICAgIC8vICAgICB2YXIgdjAgPSB2WzBdO1xuICAgIC8vICAgICB2YXIgdjEgPSB2WzFdO1xuICAgIC8vICAgICB2YXIgdjIgPSB2WzJdO1xuICAgIC8vICAgICB2YXIgZCA9IHYwICogbVswICogNCArIDNdICsgdjEgKiBtWzEgKiA0ICsgM10gKyB2MiAqIG1bMiAqIDQgKyAzXSArIG1bMyAqIDQgKyAzXTtcbiAgICBcbiAgICAvLyAgICAgZHN0WzBdID0gKHYwICogbVswICogNCArIDBdICsgdjEgKiBtWzEgKiA0ICsgMF0gKyB2MiAqIG1bMiAqIDQgKyAwXSArIG1bMyAqIDQgKyAwXSkgLyBkO1xuICAgIC8vICAgICBkc3RbMV0gPSAodjAgKiBtWzAgKiA0ICsgMV0gKyB2MSAqIG1bMSAqIDQgKyAxXSArIHYyICogbVsyICogNCArIDFdICsgbVszICogNCArIDFdKSAvIGQ7XG4gICAgLy8gICAgIGRzdFsyXSA9ICh2MCAqIG1bMCAqIDQgKyAyXSArIHYxICogbVsxICogNCArIDJdICsgdjIgKiBtWzIgKiA0ICsgMl0gKyBtWzMgKiA0ICsgMl0pIC8gZDtcbiAgICBcbiAgICAvLyAgICAgcmV0dXJuIGRzdDtcbiAgICAvLyB9XG4gICAgXG4gICAgLy8gLyoqXG4gICAgLy8gICogVGFrZXMgYSA0LWJ5LTQgbWF0cml4IGFuZCBhIHZlY3RvciB3aXRoIDMgZW50cmllcywgaW50ZXJwcmV0cyB0aGUgdmVjdG9yIGFzIGFcbiAgICAvLyAgKiBkaXJlY3Rpb24sIHRyYW5zZm9ybXMgdGhhdCBkaXJlY3Rpb24gYnkgdGhlIG1hdHJpeCwgYW5kIHJldHVybnMgdGhlIHJlc3VsdDtcbiAgICAvLyAgKiBhc3N1bWVzIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiAzLWRpbWVuc2lvbmFsIHNwYWNlIHJlcHJlc2VudGVkIGJ5IHRoZSBtYXRyaXhcbiAgICAvLyAgKiBpcyBwYXJhbGxlbC1wcmVzZXJ2aW5nLCBpLmUuIGFueSBjb21iaW5hdGlvbiBvZiByb3RhdGlvbiwgc2NhbGluZyBhbmRcbiAgICAvLyAgKiB0cmFuc2xhdGlvbiwgYnV0IG5vdCBhIHBlcnNwZWN0aXZlIGRpc3RvcnRpb24uIFJldHVybnMgYSB2ZWN0b3Igd2l0aCAzXG4gICAgLy8gICogZW50cmllcy5cbiAgICAvLyAgKiBAcGFyYW0ge01hdHJpeDR9IG0gVGhlIG1hdHJpeC5cbiAgICAvLyAgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgVGhlIGRpcmVjdGlvbi5cbiAgICAvLyAgKiBAcGFyYW0ge1ZlY3RvcjR9IGRzdCBvcHRpb25hbCB2ZWN0b3I0IHRvIHN0b3JlIHJlc3VsdFxuICAgIC8vICAqIEByZXR1cm4ge1ZlY3RvcjR9IGRzdCBvciBuZXcgVmVjdG9yNCBpZiBub3QgcHJvdmlkZWRcbiAgICAvLyAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcbiAgICAvLyAgKi9cbiAgICAvLyBmdW5jdGlvbiB0cmFuc2Zvcm1EaXJlY3Rpb24obSwgdiwgZHN0KSB7XG4gICAgLy8gICAgIGRzdCA9IGRzdCB8fCBuZXcgTWF0VHlwZSgzKTtcbiAgICBcbiAgICAvLyAgICAgdmFyIHYwID0gdlswXTtcbiAgICAvLyAgICAgdmFyIHYxID0gdlsxXTtcbiAgICAvLyAgICAgdmFyIHYyID0gdlsyXTtcbiAgICBcbiAgICAvLyAgICAgZHN0WzBdID0gdjAgKiBtWzAgKiA0ICsgMF0gKyB2MSAqIG1bMSAqIDQgKyAwXSArIHYyICogbVsyICogNCArIDBdO1xuICAgIC8vICAgICBkc3RbMV0gPSB2MCAqIG1bMCAqIDQgKyAxXSArIHYxICogbVsxICogNCArIDFdICsgdjIgKiBtWzIgKiA0ICsgMV07XG4gICAgLy8gICAgIGRzdFsyXSA9IHYwICogbVswICogNCArIDJdICsgdjEgKiBtWzEgKiA0ICsgMl0gKyB2MiAqIG1bMiAqIDQgKyAyXTtcbiAgICBcbiAgICAvLyAgICAgcmV0dXJuIGRzdDtcbiAgICAvLyB9XG5cbiAgICAvLyAvKipcbiAgICAvLyAgKiBUYWtlcyBhIDQtYnktNCBtYXRyaXggbSBhbmQgYSB2ZWN0b3IgdiB3aXRoIDMgZW50cmllcywgaW50ZXJwcmV0cyB0aGUgdmVjdG9yXG4gICAgLy8gICogYXMgYSBub3JtYWwgdG8gYSBzdXJmYWNlLCBhbmQgY29tcHV0ZXMgYSB2ZWN0b3Igd2hpY2ggaXMgbm9ybWFsIHVwb25cbiAgICAvLyAgKiB0cmFuc2Zvcm1pbmcgdGhhdCBzdXJmYWNlIGJ5IHRoZSBtYXRyaXguIFRoZSBlZmZlY3Qgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGVcbiAgICAvLyAgKiBzYW1lIGFzIHRyYW5zZm9ybWluZyB2IChhcyBhIGRpcmVjdGlvbikgYnkgdGhlIGludmVyc2UtdHJhbnNwb3NlIG9mIG0uICBUaGlzXG4gICAgLy8gICogZnVuY3Rpb24gYXNzdW1lcyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgMy1kaW1lbnNpb25hbCBzcGFjZSByZXByZXNlbnRlZCBieSB0aGVcbiAgICAvLyAgKiBtYXRyaXggaXMgcGFyYWxsZWwtcHJlc2VydmluZywgaS5lLiBhbnkgY29tYmluYXRpb24gb2Ygcm90YXRpb24sIHNjYWxpbmcgYW5kXG4gICAgLy8gICogdHJhbnNsYXRpb24sIGJ1dCBub3QgYSBwZXJzcGVjdGl2ZSBkaXN0b3J0aW9uLiAgUmV0dXJucyBhIHZlY3RvciB3aXRoIDNcbiAgICAvLyAgKiBlbnRyaWVzLlxuICAgIC8vICAqIEBwYXJhbSB7TWF0cml4NH0gbSBUaGUgbWF0cml4LlxuICAgIC8vICAqIEBwYXJhbSB7VmVjdG9yM30gdiBUaGUgbm9ybWFsLlxuICAgIC8vICAqIEBwYXJhbSB7VmVjdG9yM30gW2RzdF0gVGhlIGRpcmVjdGlvbi5cbiAgICAvLyAgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdHJhbnNmb3JtZWQgZGlyZWN0aW9uLlxuICAgIC8vICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtM2QtbWF0aFxuICAgIC8vICAqL1xuICAgIC8vIGZ1bmN0aW9uIHRyYW5zZm9ybU5vcm1hbChtLCB2LCBkc3QpIHtcbiAgICAvLyAgICAgZHN0ID0gZHN0IHx8IG5ldyBNYXRUeXBlKDMpO1xuICAgIC8vICAgICB2YXIgbWkgPSBpbnZlcnNlKG0pO1xuICAgIC8vICAgICB2YXIgdjAgPSB2WzBdO1xuICAgIC8vICAgICB2YXIgdjEgPSB2WzFdO1xuICAgIC8vICAgICB2YXIgdjIgPSB2WzJdO1xuICAgIFxuICAgIC8vICAgICBkc3RbMF0gPSB2MCAqIG1pWzAgKiA0ICsgMF0gKyB2MSAqIG1pWzAgKiA0ICsgMV0gKyB2MiAqIG1pWzAgKiA0ICsgMl07XG4gICAgLy8gICAgIGRzdFsxXSA9IHYwICogbWlbMSAqIDQgKyAwXSArIHYxICogbWlbMSAqIDQgKyAxXSArIHYyICogbWlbMSAqIDQgKyAyXTtcbiAgICAvLyAgICAgZHN0WzJdID0gdjAgKiBtaVsyICogNCArIDBdICsgdjEgKiBtaVsyICogNCArIDFdICsgdjIgKiBtaVsyICogNCArIDJdO1xuICAgIFxuICAgIC8vICAgICByZXR1cm4gZHN0O1xuICAgIC8vIH1cbn0iLCJcbi8vIGF1dGhvciA6IEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZSA6IGNvbnRhaW4gYWxsIGxvZ2ljIHJlZ2FyZGluZyBcblxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiXG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4uL3N5c3RlbS9pbnB1dC1zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgQ2FtZXJhIHtcblxuICAgIG9mZnNldDogVmVjdG9yMzsgLy8gb2Zmc2V0IGZyb20gcm90YXRpb24gY2VudGVyXG4gICAgYW5nbGVBbHBoYSA9IDA7IC8vIHJvdGF0aW9uIHggXG4gICAgYW5nbGVCZXRhID0gMDsgLy8gcm90YXRpb24geVxuICAgIG1vdXNlUG9zID0gVmVjdG9yMi56ZXJvKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB6X29mZnNldCA9IDMpIHtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLnNldE1vdXNlU2Nyb2xsLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IzKDAsMCwgLXpfb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldE1vdXNlU2Nyb2xsKGU6IFdoZWVsRXZlbnQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ3ZSBiZSBzY3JvbGxpbicgbm93Li4uXCIpXG4gICAgICAgIHRoaXMub2Zmc2V0LnogLT0gZS5kZWx0YVkgKiAwLjE7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgdXBkYXRlV2l0aENvbnRyb2xzKHN0YXRlOiBJbnB1dFN0YXRlKSB7XG5cbiAgICAgICAgaWYgKHN0YXRlLm1vdXNlTGVmdFByZXNzZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW91c2VQb3MgPSBzdGF0ZS5tb3VzZVBvcy5jbG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLm1vdXNlTGVmdERvd24pIHtcbiAgICAgICAgICAgIGxldCBuZXdQb3MgPSBzdGF0ZS5tb3VzZVBvcy5jbG9uZSgpO1xuICAgICAgICAgICAgbGV0IGRlbHRhID0gc3RhdGUubW91c2VQb3MuY2xvbmUoKS5zdWIodGhpcy5tb3VzZVBvcyk7XG4gICAgICAgICAgICB0aGlzLm1vdXNlUG9zID0gbmV3UG9zO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGVsdGEpO1xuICAgICAgICAgICAgdGhpcy5hbmdsZUFscGhhIC09IGRlbHRhLnkgKiAwLjAxO1xuICAgICAgICAgICAgdGhpcy5hbmdsZUJldGEgLT0gZGVsdGEueCAqIDAuMDE7XG4gICAgICAgIH0gICBcbiAgICAgICAgXG4gICAgICAgIGlmIChzdGF0ZS5Jc0tleURvd24oXCJxXCIpKVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQueiArPSAwLjAxO1xuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwiZVwiKSlcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0LnogLT0gMC4wMTtcblxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwicVwiKSlcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0LnogKz0gMC4wMTtcbiAgICAgICAgaWYgKHN0YXRlLklzS2V5RG93bihcImVcIikpXG4gICAgICAgICAgICB0aGlzLm9mZnNldC56IC09IDAuMDE7ICAgICAgICAgICAgXG4gICAgICAgIGlmIChzdGF0ZS5Jc0tleURvd24oXCJhXCIpKVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQueCArPSAwLjAxO1xuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwiZFwiKSlcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0LnggLT0gMC4wMTtcbiAgICAgICAgaWYgKHN0YXRlLklzS2V5RG93bihcInNcIikpXG4gICAgICAgICAgICB0aGlzLm9mZnNldC55ICs9IDAuMDE7XG4gICAgICAgIGlmIChzdGF0ZS5Jc0tleURvd24oXCJ3XCIpKVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQueSAtPSAwLjAxO1xuICAgIH1cblxuICAgIGdldFJlbmRlclRvU2NyZWVuTWF0cml4KGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIDogTWF0cml4NCB7XG4gICAgICAgIFxuICAgICAgICBsZXQgcG9zID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGxldCBhbmdsZUEgPSB0aGlzLmFuZ2xlQWxwaGE7XG4gICAgICAgIGxldCBhbmdsZUIgPSB0aGlzLmFuZ2xlQmV0YTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBpID0gTWF0aC5QSTtcbiAgICAgICAgY29uc3QgZm92ID0gNDUuICogcGkgLyAxMDAuO1xuICAgICAgICBjb25zdCBaX0ZBUiA9IDEwMDAuO1xuICAgICAgICBjb25zdCBaX05FQVIgPSAwLjE7XG4gICAgICAgIGxldCB6X3BsYW5lID0gLTEuIC8gTWF0aC50YW4ocGkgLyA4Lik7XG4gICAgICAgIFxuICAgICAgICAvLyBhc3BlY3RzXG4gICAgICAgIGxldCBhc3BlY3QgPSBjYW52YXMud2lkdGggLyBjYW52YXMuaGVpZ2h0OyAvLyBub3RlOiB0aGlzIHNob3VsZCBiZSBjb25zdGFudFxuICAgIFxuICAgICAgICAvLyB0cmFuc2xhdGVkIHRvIGZpdCBzY3JlZW5cbiAgICAgICAgbGV0IG9mZnNldCA9IE1hdHJpeDQubmV3VHJhbnNsYXRpb24ocG9zLngsIHBvcy55LCBwb3Mueik7XG4gICAgICAgIFxuICAgICAgICAvLyByb3RhdGVkIGJ5IHVzZXJcbiAgICAgICAgbGV0IHhfcm90YXRpb24gPSBNYXRyaXg0Lm5ld1hSb3RhdGlvbihhbmdsZUEpO1xuICAgICAgICBsZXQgeV9yb3RhdGlvbiA9IE1hdHJpeDQubmV3WVJvdGF0aW9uKGFuZ2xlQik7XG4gICAgICAgIGxldCByb3RhdGlvbiA9IHhfcm90YXRpb24ubXVsdGlwbHkoeV9yb3RhdGlvbik7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHJhbnNmb3JtID0gb2Zmc2V0Lm11bHRpcGx5KHJvdGF0aW9uKTtcbiAgICBcbiAgICAgICAgLy8gcHJvamVjdGlvbiB0byBzY3JlZW5cbiAgICAgICAgLy8gbGV0IHByb2plY3Rpb24gPSBNYXRyaXg0Lm5ld09ydGhvZ3JhcGhpYygtMSwgMSwgLTEsIDEsIDAuMSwgMC4xKTtcbiAgICAgICAgbGV0IHByb2plY3Rpb24gPSBNYXRyaXg0Lm5ld1BlcnNwZWN0aXZlKGZvdiwgYXNwZWN0LCBaX05FQVIsIFpfRkFSKTtcbiAgICBcbiAgICAgICAgLy8gcmV0dXJuXG4gICAgICAgIHJldHVybiBwcm9qZWN0aW9uLm11bHRpcGx5KHRyYW5zZm9ybSk7XG4gICAgfVxuXG59IiwiLy8gam9zIGZlZW5zdHJhXG5cbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcblxuZXhwb3J0IGNsYXNzIERvdFJlbmRlcmVyMyBleHRlbmRzIFJlbmRlcmVyIHtcblxuICAgIC8vIGF0dHJpYnV0ZSAmIHVuaWZvcm0gbG9jYXRpb25zXG4gICAgYV9wb3NpdGlvbjogbnVtYmVyO1xuICAgIGFfcG9zaXRpb25fYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICAgIHVfdHJhbnNmb3JtOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgICB1X2NvbG9yOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcbiAgICB1X3NpemU6IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xuXG4gICAgY29sb3I6IG51bWJlcltdO1xuICAgIHNpemU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIFxuICAgICAgICBzaXplOiBudW1iZXIgPTUsIFxuICAgICAgICBjb2xvcjogbnVtYmVyW10gPSBbMSwxLDEsMV0sIFxuICAgICAgICBzcXVhcmU6IGJvb2xlYW49IHRydWUgKSB7XG5cbiAgICAgICAgLy8gbm90ZTogSSBsaWtlIHZlcnRleCAmIGZyYWdtZW50cyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0IGl0c2VsZi5cbiAgICAgICAgLy8gd2hlbiB5b3UgY2hhbmdlIHZlcnRleCBvciBmcmFnbWVudCwgdGhpcyBjbGFzcyBoYXMgdG8gZGVhbCB3aXRoIGl0LiBcbiAgICAgICAgLy8gcHV0dGluZyB0aGVtIHNvbWV3aGVyZSBlbHNlIGRvZXNudCBtYWtlIHNlbnNlIHRvIG1lLCBcbiAgICAgICAgLy8gdGhleSBhcmUgY291cGxlZCAxIHRvIDEuXG4gICAgICAgIGxldCB2ZXJ0ZXhTb3VyY2U6IHN0cmluZyA9IGBcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICB1bmlmb3JtIG1hdDQgdV90cmFuc2Zvcm07XG4gICAgICAgIHVuaWZvcm0gdmVjNCB1X2NvbG9yO1xuICAgICAgICB1bmlmb3JtIGZsb2F0IHVfc2l6ZTtcblxuICAgICAgICBhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleDtcblxuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNpemUgb2YgYSByZW5kZXJlZCBwb2ludC5cbiAgICAgICAgICAgIGdsX1BvaW50U2l6ZSA9IHVfc2l6ZTtcblxuICAgICAgICAgICAgLy8gVHJhbnNmb3JtIHRoZSBsb2NhdGlvbiBvZiB0aGUgdmVydGV4LlxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X3RyYW5zZm9ybSAqIHZlYzQoYV92ZXJ0ZXgsIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBgO1xuICAgICAgICBsZXQgZnJhZ21lbnRTb3VyY2VTcXVhcmU6IHN0cmluZyA9IGBcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICB1bmlmb3JtIHZlYzQgdV9jb2xvcjtcbiAgICAgICAgLy8gdmVjMiBjZW50ZXIgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB1X2NvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGA7XG5cbiAgICAgICAgbGV0IGZyYWdtZW50U291cmNlUm91bmQ6IHN0cmluZyA9IGBcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICB1bmlmb3JtIHZlYzQgdV9jb2xvcjtcbiAgICAgICAgdmVjMiBjZW50ZXIgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UoY2VudGVyLCBnbF9Qb2ludENvb3JkKSA+IDAuNSkge1xuICAgICAgICAgICAgICAgZGlzY2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgYDtcblxuICAgICAgICAvLyBzZXR1cCBwcm9ncmFtXG4gICAgICAgIGlmIChzcXVhcmUpIHsgICAgXG4gICAgICAgICAgICBzdXBlcihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZVNxdWFyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZVJvdW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudV90cmFuc2Zvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcInVfdHJhbnNmb3JtXCIpITtcbiAgICAgICAgdGhpcy51X3NpemUgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcInVfc2l6ZVwiKSE7XG4gICAgICAgIHRoaXMudV9jb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9jb2xvclwiKSE7XG5cbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuXG4gICAgICAgIC8vIEJpbmQgaXQgdG8gQVJSQVlfQlVGRkVSICh0aGluayBvZiBpdCBhcyBBUlJBWV9CVUZGRVIgPSBwb3NpdGlvbkJ1ZmZlcilcbiAgICAgICAgLy8gbG9vayB1cCB3aGVyZSB0aGUgdmVydGV4IGRhdGEgbmVlZHMgdG8gZ28uXG4gICAgICAgIHRoaXMuYV9wb3NpdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJhX3ZlcnRleFwiKTtcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIpOyAgICAgXG4gICAgfVxuXG4gICAgLy8gcmVuZGVyIDEgaW1hZ2UgdG8gdGhlIHNjcmVlblxuICAgIHJlbmRlclF1aWNrKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCwgZGF0YTogRmxvYXQzMkFycmF5KSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBDT01QT05FTlRTX1BFUl9JVEVSQVRJT04gPSAzO1xuXG4gICAgICAgIC8vIFRlbGwgaXQgdG8gdXNlIG91ciBwcm9ncmFtIChwYWlyIG9mIHNoYWRlcnMpXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcblxuICAgICAgICAvLyBzZXQgdW5pZm9ybXNcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0cml4LmRhdGEpO1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV90cmFuc2Zvcm0sIGZhbHNlLCBtYXRyaXguZGF0YSk7XG4gICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLnVfc2l6ZSwgdGhpcy5zaXplKTtcbiAgICAgICAgZ2wudW5pZm9ybTRmKHRoaXMudV9jb2xvciwgdGhpcy5jb2xvclswXSwgdGhpcy5jb2xvclsxXSwgdGhpcy5jb2xvclsyXSwgdGhpcy5jb2xvclszXSk7XG5cbiAgICAgICAgLy8gLy8gQmluZCB0aGUgcG9zaXRpb24gYnVmZmVyLlxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfcG9zaXRpb24pO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlcik7XG5cbiAgICAgICAgLy8gLy8gVGVsbCB0aGUgYXR0cmlidXRlIGhvdyB0byBnZXQgZGF0YSBvdXQgb2YgcG9zaXRpb25CdWZmZXIgKEFSUkFZX0JVRkZFUilcbiAgICAgICAgdmFyIHNpemUgPSBDT01QT05FTlRTX1BFUl9JVEVSQVRJT047IC8vIGNvbXBvbmVuZXRzIHBlciBpdGVyYXRpb25cbiAgICAgICAgdmFyIHR5cGUgPSBnbC5GTE9BVDsgICAvLyB0aGUgZGF0YSBpcyAzMmJpdCBmbG9hdHNcbiAgICAgICAgdmFyIG5vcm1hbGl6ZSA9IGZhbHNlOyAvLyBkb24ndCBub3JtYWxpemUgdGhlIGRhdGFcbiAgICAgICAgdmFyIHN0cmlkZSA9IDA7ICAgICAgICAvLyAwID0gbW92ZSBmb3J3YXJkIHNpemUgKiBzaXplb2YodHlwZSkgZWFjaCBpdGVyYXRpb24gdG8gZ2V0IHRoZSBuZXh0IHBvc2l0aW9uXG4gICAgICAgIHZhciBvZmZzZXQgPSAwOyAgICAgICAgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uLCBzaXplLCB0eXBlLCBub3JtYWxpemUsIHN0cmlkZSwgb2Zmc2V0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIGZpbGwgd2l0aCBkYXRhO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgICAgXG4gICAgICAgIC8vIERyYXcgdGhlIHBvaW50LlxuICAgICAgICB2YXIgcHJpbWl0aXZlVHlwZSA9IGdsLlBPSU5UUztcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBjb3VudCA9IGRhdGEubGVuZ3RoIC8gQ09NUE9ORU5UU19QRVJfSVRFUkFUSU9OO1xuICAgICAgICBnbC5kcmF3QXJyYXlzKHByaW1pdGl2ZVR5cGUsIG9mZnNldCwgY291bnQpO1xuICAgIH1cblxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IE1hdHJpeDQsIGRvdHM6IFZlY3RvcjNbXSkge1xuICAgICBcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLnRvRmxvYXQzMkFycmF5KGRvdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJRdWljayhnbCwgbWF0cml4LCBkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBGaWxsIHRoZSBidWZmZXIgd2l0aCB0aGUgdmFsdWVzIHRoYXQgZGVmaW5lIGEgcmVjdGFuZ2xlLlxuICAgIHRvRmxvYXQzMkFycmF5KGRvdHM6IFZlY3RvcjNbXSkgOiBGbG9hdDMyQXJyYXl7XG4gICAgICAgIGxldCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShkb3RzLmxlbmd0aCAqIDMpO1xuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IGRvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbaSozXSAgICAgPSBkb3RzW2ldLng7XG4gICAgICAgICAgICBkYXRhW2kqMyArIDFdID0gZG90c1tpXS55O1xuICAgICAgICAgICAgZGF0YVtpKjMgKyAyXSA9IGRvdHNbaV0uejtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG59IiwiLy8gbmFtZTogICAgbWVzaC1yZW5kZXJlci50c1xuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXG4vLyBwdXJwb3NlOiBXZWJHTCBiYXNlZCByZW5kZXJpbmcgb2YgbGluZXMuXG5cbmltcG9ydCB7IFZlY3RvcjNBcnJheSB9IGZyb20gXCIuLi9tYXRoL2FycmF5XCI7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XG5pbXBvcnQgeyBEcmF3U3BlZWQsIFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUxpbmVSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcblxuICAgIGFfcG9zaXRpb246IG51bWJlcjtcbiAgICBhX3Bvc2l0aW9uX2J1ZmZlcjogV2ViR0xCdWZmZXI7XG4gICAgaW5kZXhfYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICB1X3RyYW5zZm9ybTogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgdV9jb2xvcjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgY291bnQ6IG51bWJlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb2xvciA9IFsxLDAsMCwwLjVdKSB7XG5cbiAgICAgICAgLy8gbm90ZTogSSBsaWtlIHZlcnRleCAmIGZyYWdtZW50cyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0IGl0c2VsZi5cbiAgICAgICAgLy8gd2hlbiB5b3UgY2hhbmdlIHZlcnRleCBvciBmcmFnbWVudCwgdGhpcyBjbGFzcyBoYXMgdG8gZGVhbCB3aXRoIGl0LiBcbiAgICAgICAgLy8gcHV0dGluZyB0aGVtIHNvbWV3aGVyZSBlbHNlIGRvZXNudCBtYWtlIHNlbnNlIHRvIG1lLCBcbiAgICAgICAgLy8gdGhleSBhcmUgY291cGxlZCAxIHRvIDEuXG4gICAgICAgIGNvbnN0IHZzID0gYFxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247XG4gICAgICAgIHVuaWZvcm0gbWF0NCB1X3RyYW5zZm9ybTtcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X3RyYW5zZm9ybSAqIGFfcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgYDtcblxuICAgICAgICBjb25zdCBmcyA9IGBcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICB1bmlmb3JtIHZlYzQgdV9jb2xvcjtcblxuICAgICAgICB2b2lkIG1haW4gKCkge1xuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdV9jb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBgO1xuXG4gICAgICAgIC8vIHNldHVwIHByb2dyYW0gICAgXG4gICAgICAgIHN1cGVyKGdsLCB2cywgZnMpO1xuICAgICAgICB0aGlzLnVfdHJhbnNmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X3RyYW5zZm9ybVwiKSE7XG4gICAgICAgIHRoaXMudV9jb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9jb2xvclwiKSE7XG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgZ2wudW5pZm9ybTRmKHRoaXMudV9jb2xvciwgY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSwgY29sb3JbM10pO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIHdlIG5lZWQgMiBidWZmZXJzIFxuICAgICAgICB0aGlzLmFfcG9zaXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITtcbiAgICAgICAgdGhpcy5pbmRleF9idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKSE7ICAgIFxuICAgIH1cblxuICAgIHNldChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB2ZXJ0czogVmVjdG9yM0FycmF5LCBpbmRpY2VzOiBVaW50MTZBcnJheSwgc3BlZWQ6IERyYXdTcGVlZCA9IERyYXdTcGVlZC5TdGF0aWNEcmF3KSB7XG4gICAgICAgIFxuICAgICAgICAvLyBzYXZlIGhvdyBtYW55IGZhY2VzIG5lZWQgdG8gYmUgZHJhd25cbiAgICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICB0aGlzLmNvdW50ID0gaW5kaWNlcy5sZW5ndGhcblxuICAgICAgICAvLyB2ZXJ0aWNlcyBcbiAgICAgICAgY29uc3Qgc2l6ZSA9IDM7IC8vIHNpemUgb2YgYSB2ZXJ0ZXgsIGluIG51bWJlciBvZiBmbG9hdHMgXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmFfcG9zaXRpb24sIHNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0cy5kYXRhLCB0aGlzLmNvbnZlcnREcmF3U3BlZWQoc3BlZWQpKTtcblxuICAgICAgICAvLyBpbmRpY2VzIFxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGV4X2J1ZmZlcik7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGluZGljZXMsIHRoaXMuY29udmVydERyYXdTcGVlZChzcGVlZCkpO1xuICAgIH1cblxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IE1hdHJpeDQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFRlbGwgaXQgdG8gdXNlIG91ciBwcm9ncmFtIChwYWlyIG9mIHNoYWRlcnMpXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGV4X2J1ZmZlcik7XG5cbiAgICAgICAgLy8gc2V0IHVuaWZvcm1zXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51X3RyYW5zZm9ybSwgZmFsc2UsIG1hdHJpeC5kYXRhKTtcblxuICAgICAgICAvLyBEcmF3IHRoZSBwb2ludC5cbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLkxJTkVTLCB0aGlzLmNvdW50LCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG4gICAgfVxufSIsIi8vIG5hbWU6ICAgIG1lc2gtcmVuZGVyZXIudHNcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZTogV2ViR0wgYmFzZWQgcmVuZGVyaW5nIG9mIGEgbWVzaC5cblxuaW1wb3J0IHsgRmFjZUFycmF5LCBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vbWF0aC9hcnJheVwiO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xuaW1wb3J0IHsgRHJhd1NwZWVkLCBSZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVNZXNoUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG5cbiAgICAvLyBhdHRyaWJ1dGUgJiB1bmlmb3JtIGxvY2F0aW9uc1xuICAgIGFfcG9zaXRpb246IG51bWJlcjtcbiAgICBhX3Bvc2l0aW9uX2J1ZmZlcjogV2ViR0xCdWZmZXI7XG4gICAgaW5kZXhfYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICB1X3RyYW5zZm9ybTogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgdV9jb2xvcjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgY291bnQ6IG51bWJlclxuXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgY29sb3IgPSBbMSwwLDAsMC4yNV0pIHtcblxuICAgICAgICBjb25zdCB2cyA9IGBcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICBhdHRyaWJ1dGUgdmVjNCBhX3Bvc2l0aW9uO1xuICAgICAgICB1bmlmb3JtIG1hdDQgdV90cmFuc2Zvcm07XG4gICAgICAgIHVuaWZvcm0gdmVjNCB1X2NvbG9yO1xuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdV90cmFuc2Zvcm0gKiBhX3Bvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGA7XG5cbiAgICAgICAgY29uc3QgZnMgPSBgXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XG5cbiAgICAgICAgdm9pZCBtYWluICgpIHtcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgYDtcblxuICAgICAgICAvLyBzZXR1cCBwcm9ncmFtICAgIFxuICAgICAgICBzdXBlcihnbCwgdnMsIGZzKTtcblxuICAgICAgICB0aGlzLnVfdHJhbnNmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X3RyYW5zZm9ybVwiKSE7XG4gICAgICAgIHRoaXMudV9jb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9jb2xvclwiKSE7XG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgZ2wudW5pZm9ybTRmKHRoaXMudV9jb2xvciwgY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSwgY29sb3JbM10pO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIHdlIG5lZWQgMiBidWZmZXJzIFxuICAgICAgICAvLyAtPiAxIGZsb2F0IGJ1ZmZlciBmb3IgdGhlIHBvc2l0aW9ucyBvZiBhbGwgdmVydGljZXMuXG4gICAgICAgIC8vIC0+IDEgaW50IGJ1ZmZlciBmb3IgdGhlIGluZGV4IG9mIGFsbCB0cmlhbmdsZXNcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XG4gICAgICAgIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKSE7XG4gICAgICAgIHRoaXMuaW5kZXhfYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCkhOyAgXG4gICAgfVxuXG4gICAgc2V0KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZlcnRzOiBWZWN0b3IzQXJyYXksIGZhY2VzOiBGYWNlQXJyYXksIHNwZWVkOiBEcmF3U3BlZWQgPSBEcmF3U3BlZWQuU3RhdGljRHJhdykge1xuICAgICAgICBcbiAgICAgICAgLy8gc2F2ZSBob3cgbWFueSBmYWNlcyBuZWVkIHRvIGJlIGRyYXduXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgdGhpcy5jb3VudCA9IGZhY2VzLmRhdGEubGVuZ3RoXG5cbiAgICAgICAgLy8gdmVydGljZXMgXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTtcbiAgICAgICAgdmFyIHNpemUgPSAzO1xuICAgICAgICB2YXIgdHlwZSA9IGdsLkZMT0FUO1xuICAgICAgICB2YXIgbm9ybWFsaXplID0gZmFsc2U7IFxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV9wb3NpdGlvbiwgc2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHZlcnRzLmRhdGEsIHRoaXMuY29udmVydERyYXdTcGVlZChzcGVlZCkpO1xuXG4gICAgICAgIC8vIGluZGljZXMgXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kZXhfYnVmZmVyKTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KGZhY2VzLmRhdGEpLCB0aGlzLmNvbnZlcnREcmF3U3BlZWQoc3BlZWQpKTtcbiAgICB9XG5cbiAgICAvLyByZW5kZXIgMSBpbWFnZSB0byB0aGUgc2NyZWVuXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCkge1xuICAgICAgICBcbiAgICAgICAgLy8gVGVsbCBpdCB0byB1c2Ugb3VyIHByb2dyYW0gKHBhaXIgb2Ygc2hhZGVycylcbiAgICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfcG9zaXRpb24pO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlcik7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kZXhfYnVmZmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIHNldCB1bmlmb3Jtc1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV90cmFuc2Zvcm0sIGZhbHNlLCBtYXRyaXguZGF0YSk7XG5cbiAgICAgICAgLy8gRHJhdyB0aGUgcG9pbnQuXG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMuY291bnQsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIlxuXG5leHBvcnQgY2xhc3MgQXBwIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyB1bmlxdWUgY29uc3RydWN0b3IgICAgXG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIC8vIGFkZGl0aW9uYWwgc2V0dXAgb2Ygc3RhdGVcbiAgICB9XG5cbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcbiAgICAgICAgLy8gdXBkYXRpbmcgc3RhdGVcbiAgICB9XG5cbiAgICBkcmF3KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgLy8gZHJhd2luZyBzdGF0ZVxuICAgIH1cbn0iLCIvLyBvYmotbG9hZGVyLWFwcC50c1xuLy9cbi8vIGF1dGhvciA6IEpvcyBGZWVuc3RyYVxuLy8gcHVycG9zZSA6IGRyYWcgYW4gb2JqIHRvIHRoZSBjYW52YXMsIGFuZCB2aWV3IGl0IG9uIHRoZSB3ZWJcblxuaW1wb3J0IHsgdmVyc2lvbl9jb252ZXJ0ZXIgfSBmcm9tIFwiQHRlbnNvcmZsb3cvdGZqc1wiO1xuaW1wb3J0IHsgTWVzaCwgbWVzaEZyb21PYmogfSBmcm9tIFwiLi4vZ2VvL21lc2hcIjtcbmltcG9ydCB7IGFkZERyb3BGaWxlRXZlbnRMaXN0ZW5lcnMsIGxvYWRUZXh0RnJvbUZpbGUgfSBmcm9tIFwiLi4vaW5wdXQvZG9td3JhcHBlcnNcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuLi9yZW5kZXIvY2FtZXJhXCI7XG5pbXBvcnQgeyBEb3RSZW5kZXJlcjMgfSBmcm9tIFwiLi4vcmVuZGVyL2RvdC1yZW5kZXJlcjNcIjtcbmltcG9ydCB7IFNpbXBsZUxpbmVSZW5kZXJlciB9IGZyb20gXCIuLi9yZW5kZXIvc2ltcGxlLWxpbmUtcmVuZGVyZXJcIjtcbmltcG9ydCB7IFNpbXBsZU1lc2hSZW5kZXJlciB9IGZyb20gXCIuLi9yZW5kZXIvc2ltcGxlLW1lc2gtcmVuZGVyZXJcIjtcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi4vc3lzdGVtL2lucHV0LXN0YXRlXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcblxuXG5leHBvcnQgY2xhc3MgT2JqTG9hZGVyQXBwIGV4dGVuZHMgQXBwIHtcbiAgICBcbiAgICBkb3RSZW5kZXJlcjogRG90UmVuZGVyZXIzO1xuICAgIGxpbmVSZW5kZXJlcjogU2ltcGxlTGluZVJlbmRlcmVyO1xuICAgIG1lc2hSZW5kZXJlcjogU2ltcGxlTWVzaFJlbmRlcmVyO1xuICAgIGNhbWVyYTogQ2FtZXJhO1xuICAgIG9iaj86IE1lc2g7XG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDsgLy8gdGhpcyBpcyBiYWQgcHJhY3RpY2UsIGJ1dCBpIG5lZWQgaXQgZHVyaW5nIHByb2Nlc0ZpbGVzXG4gICAgICAgIHRoaXMuZG90UmVuZGVyZXIgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCAyLCBbMSwwLDAsMV0sIGZhbHNlKTtcbiAgICAgICAgdGhpcy5saW5lUmVuZGVyZXIgPSBuZXcgU2ltcGxlTGluZVJlbmRlcmVyKGdsLCBbMCwwLDEsMC41XSk7XG4gICAgICAgIHRoaXMubWVzaFJlbmRlcmVyID0gbmV3IFNpbXBsZU1lc2hSZW5kZXJlcihnbCwgWzAsMCwxLDAuMjVdKTtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKGNhbnZhcyk7XG5cbiAgICAgICAgYWRkRHJvcEZpbGVFdmVudExpc3RlbmVycyhkb2N1bWVudCwgcHJvY2Vzc0ZpbGVzLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuXG4gICAgfVxuXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBtb3ZlIHRoZSBjYW1lcmEgd2l0aCB0aGUgbW91c2VcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlV2l0aENvbnRyb2xzKHN0YXRlKTsgXG4gICAgfVxuXG4gICAgZHJhdyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG5cbiAgICAgICAgLy8gZ2V0IHRvLXNjcmVlbiBtYXRyaXhcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICBsZXQgbWF0cml4ID0gdGhpcy5jYW1lcmEuZ2V0UmVuZGVyVG9TY3JlZW5NYXRyaXgoY2FudmFzKTtcblxuICAgICBcbiAgICAgICAgaWYgKHRoaXMub2JqID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuZG90UmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgsIFtuZXcgVmVjdG9yMygwLDAsMCksIG5ldyBWZWN0b3IzKDEsMSwxKV0pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZG90UmVuZGVyZXIucmVuZGVyUXVpY2soZ2wsIG1hdHJpeCwgdGhpcy5vYmohLnZlcnRzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5tZXNoUmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5saW5lUmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgpO1xuICAgICAgICB9ICAgIFxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0ZpbGVzKHRoaXM6IE9iakxvYWRlckFwcCwgZmlsZXM6IEZpbGVMaXN0KSB7XG4gICAgXG4gICAgY29uc29sZS5sb2coZmlsZXMpO1xuXG4gICAgLy8gYXNzdW1lIGl0cyAxIGZpbGUsIHRoZSBvYmogZmlsZS5cbiAgICBsZXQgZmlsZSA9IGZpbGVzWzBdO1xuXG4gICAgLy8gc2VlIGlmIHdlIGNhbiBidWlsZCBhbiBjb3JyZWN0IG9iaiBmcm9tIHRoZSBmaWxlc1xuICAgIGxldCBvYmp0ZXh0ID0gYXdhaXQgbG9hZFRleHRGcm9tRmlsZShmaWxlKTtcbiAgICB0aGlzLm9iaiA9IG1lc2hGcm9tT2JqKG9ianRleHQpO1xuXG4gICAgLy8gc2NhbGUgZG93biBpZiB0b28gYmlnXG5cbiAgICB0aGlzLm1lc2hSZW5kZXJlci5zZXQodGhpcy5nbCwgdGhpcy5vYmoudmVydHMsIHRoaXMub2JqLmZhY2VzKTtcbiAgICB0aGlzLmxpbmVSZW5kZXJlci5zZXQodGhpcy5nbCwgdGhpcy5vYmoudmVydHMsIHRoaXMub2JqLmdldExpbmVJZHMoKSk7XG59IiwiLy8gQXV0aG9yOiBKb3MgRmVlbnN0cmFcbi8vIFB1cnBvc2U6IEVudHJ5IHBvaW50XG5cbmltcG9ydCB7YWRkV2ViY2FtQXBwV2hlblJlYWR5LCBXZWJjYW1BcHB9IGZyb20gXCIuL2FwcC93ZWJjYW0tYXBwXCI7XG5pbXBvcnQge0RlYnVnQXBwfSBmcm9tIFwiLi9hcHAvZGVidWctYXBwXCI7XG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4vc3lzdGVtL2lucHV0LXN0YXRlXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHAvYXBwXCI7XG5pbXBvcnQgeyBpbml0V2ViZ2xDb250ZXh0LCBSZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlci9yZW5kZXJlclwiO1xuaW1wb3J0IHsgRG90QXBwMiB9IGZyb20gXCIuL2FwcC1kZW1vcy9kb3QtYXBwMlwiO1xuaW1wb3J0IHsgUmVjdGFuZ2xlQXBwIH0gZnJvbSBcIi4vYXBwLWRlbW9zL3JlY3RhbmdsZS1hcHBcIjtcbmltcG9ydCB7IERvdEFwcDMgfSBmcm9tIFwiLi9hcHAtZGVtb3MvZG90LWFwcDNcIjtcbmltcG9ydCB7IE9iakxvYWRlckFwcCB9IGZyb20gXCIuL2FwcC9vYmotbG9hZGVyLWFwcFwiO1xuXG5jb25zdCBSRUFMVElNRV9ERU1PID0gZmFsc2U7XG5cbmZ1bmN0aW9uIG1haW4oKSB7XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlcyBvZiBhbGwgaXRlbXMgb24gdGhlIGNhbnZhc1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSEgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgbGV0IHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFcIikhIGFzIEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgbGV0IGNvbnRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludGVyZmFjZVwiKSAgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgbGV0IGNhbWVyYU9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmEtb25cIikhIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGxldCBjYW1lcmFTdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmEtb2ZmXCIpISBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBsZXQgYnV0dG9uUHJlZGljdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJlZGljdFwiKSEgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgXG4gICAgbGV0IGdsID0gaW5pdFdlYmdsQ29udGV4dChjYW52YXMpO1xuICAgIGNvbnN0IGNvcmUgPSBuZXcgQ29yZShjYW52YXMsIGdsKTtcblxuICAgIC8vY29yZS5hZGRBcHAobmV3IERlYnVnQXBwKGNhbnZhcywgY29udGV4dCkpO1xuICAgIC8vIGNvcmUuYWRkQXBwKG5ldyBSZWN0YW5nbGVBcHAoZ2wpKTsgXG4gICAgLy8gY29yZS5hZGRBcHAobmV3IERvdEFwcDMoZ2wsIGNhbnZhcykpOyBcbiAgICBjb3JlLmFkZEFwcChuZXcgT2JqTG9hZGVyQXBwKGdsLCBjYW52YXMpKTtcbiAgICAvL2FkZFdlYmNhbUFwcFdoZW5SZWFkeShjb3JlLCBjYW52YXMsIHZpZGVvKTtcblxuICAgIC8vIGluZmluaXRlIGxvb3BcbiAgICBmdW5jdGlvbiBsb29wKCkge1xuIFxuICAgICAgICBpZiAoY29yZS5TVE9QKSBcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb3JlLnVwZGF0ZSgpO1xuICAgICAgICBjb3JlLmRyYXcoKTtcbiAgICAgICAgXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9XG4gICAgLy8gbG9vcCgpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcblxuICAgIC8vIHdlIGJyb2tlIG91dCBvZiB0aGUgbG9vcFxuICAgIC8vIGNvbnNvbGUubG9nKFwiYXBwIGhhcyBzdG9wcGVkLlwiKTtcbn1cblxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgbWFpbigpO1xufSwgZmFsc2UpO1xuXG5cbmV4cG9ydCBjbGFzcyBDb3JlIHtcblxuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgICBzdGF0ZTogSW5wdXRTdGF0ZTtcbiAgICBwcml2YXRlIGFwcHM6IEFwcFtdO1xuICAgIFNUT1AgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBJbnB1dFN0YXRlKGNhbnZhcyk7XG4gICAgICAgIHRoaXMuYXBwcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZEFwcChhcHA6IEFwcCkge1xuICAgICAgICB0aGlzLmFwcHMucHVzaChhcHApO1xuICAgICAgICBhcHAuc3RhcnQoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUucHJlVXBkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLklzS2V5UHJlc3NlZChcIkVzY1wiKSlcbiAgICAgICAgICAgIHRoaXMuU1RPUCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXBwcy5mb3JFYWNoKChhcHApID0+IHtcbiAgICAgICAgICAgIGFwcC51cGRhdGUodGhpcy5zdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXRlLnBvc3RVcGRhdGUoKTtcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbFxuXG4gICAgICAgIC8vIHByZS1nbCBidXNpbmVzc1xuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0ICE9IGNhbnZhcy5oZWlnaHQgfHwgXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAgIT0gY2FudmFzLndpZHRoKSBcbiAgICAgICAge1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIC8vIGNhbnZhcy5jbGllbnRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCAgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgIC8vIGNhbnZhcy5jbGllbnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGgudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5kZXJlci5yZXNpemVDYW52YXModGhpcy5nbCk7XG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcbiAgICAgICAgdGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXG4gICAgICAgIC8vIHJlbmRlciBhbGwgYXBwc1xuICAgICAgICAvLyBUT0RPIDogcmV2ZXJzZSBvcmRlclxuICAgICAgICB0aGlzLmFwcHMuZm9yRWFjaCgoYXBwKSA9PiB7XG4gICAgICAgICAgICBhcHAuZHJhdyh0aGlzLmdsKTtcbiAgICAgICAgfSlcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///791\n')})();