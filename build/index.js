/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app-demos/dot-app3.ts":
/*!***********************************!*\
  !*** ./src/app-demos/dot-app3.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotApp3\": () => /* binding */ DotApp3\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _app_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../app/app */ \"./src/app/app.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n// dot-app3.ts\r\n// \r\n// author : Jos Feenstra\r\n// purpose : test with Renderers, Domains & Vectors\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass DotApp3 extends _app_app__WEBPACK_IMPORTED_MODULE_3__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots = [];\r\n        this.dirs = [];\r\n        let canvas = gl.canvas;\r\n        let n = 1;\r\n        this.bounds = _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-n, n, -n, n, -n, n);\r\n        this.whiteDotRend = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_4__.DotRenderer3(gl, 10, [1, 1, 1, 1], false);\r\n        this.redDotRend = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_4__.DotRenderer3(gl, 10, [1, 0, 0, 1], false);\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_5__.Camera(canvas);\r\n    }\r\n    start() {\r\n        this.spawnSome(100, 0.001);\r\n    }\r\n    spawnSome(count, normrange) {\r\n        const normSpace = _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-normrange, normrange, -normrange, normrange, -normrange, normrange);\r\n        for (let i = 0; i < count; i++) {\r\n            this.dots.push(this.bounds.elevate(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromRandom()));\r\n            this.dirs.push(normSpace.elevate(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromRandom()));\r\n        }\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        if (state.mouseLeftPressed) {\r\n            this.spawnSome(100, 0.001);\r\n        }\r\n        // update the position of all dots\r\n        for (let i = 0; i < this.dots.length; i++) {\r\n            // this gives us a pointer apparantly\r\n            let dot = this.dots[i];\r\n            let dir = this.dirs[i];\r\n            // bounce of the edges\r\n            if (!this.bounds.x.includes(dot.x))\r\n                dir.x = -dir.x;\r\n            if (!this.bounds.y.includes(dot.y))\r\n                dir.y = -dir.y;\r\n            if (!this.bounds.z.includes(dot.z))\r\n                dir.z = -dir.z;\r\n            // update position\r\n            dot.add(dir);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the corners of the box with the red renderer,\r\n        // and the dots themselves with the white renderer\r\n        this.redDotRend.setAndRender(gl, matrix, this.bounds.corners(_math_matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix4.newIdentity()));\r\n        this.whiteDotRend.setAndRender(gl, matrix, this.dots);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2FwcC1kZW1vcy9kb3QtYXBwMy50cz9iYmVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxjQUFjO0FBQ2QsR0FBRztBQUNILHdCQUF3QjtBQUN4QixtREFBbUQ7QUFHTztBQUNSO0FBQ0E7QUFFbEI7QUFDdUI7QUFDYjtBQUVuQyxNQUFNLE9BQVEsU0FBUSx5Q0FBRztJQVU1QixZQUFZLEVBQXlCO1FBQ2pDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQVRkLFNBQUksR0FBYyxFQUFFLENBQUM7UUFDckIsU0FBSSxHQUFjLEVBQUUsQ0FBQztRQVVqQixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLDREQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLCtEQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwrREFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksa0RBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLFNBQWlCO1FBRXRDLE1BQU0sU0FBUyxHQUFHLDREQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFMUcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyw0REFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDREQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzNEO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUVwQixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUI7UUFFRCxrQ0FBa0M7UUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBRXhDLHFDQUFxQztZQUNyQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkIsc0JBQXNCO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWxCLGtCQUFrQjtZQUNsQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVELElBQUksQ0FBQyxFQUF5QjtRQUUxQix1QkFBdUI7UUFDdkIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTJCLENBQUM7UUFDOUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFFckMsdURBQXVEO1FBQ3ZELGtEQUFrRDtRQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDZEQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9hcHAtZGVtb3MvZG90LWFwcDMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkb3QtYXBwMy50c1xyXG4vLyBcclxuLy8gYXV0aG9yIDogSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2UgOiB0ZXN0IHdpdGggUmVuZGVyZXJzLCBEb21haW5zICYgVmVjdG9yc1xyXG5cclxuaW1wb3J0IHsgR2VvbkltYWdlIH0gZnJvbSBcIi4uL2ltZy9JbWFnZVwiO1xyXG5pbXBvcnQgeyBEb21haW4sIERvbWFpbjIsIERvbWFpbjMgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgTWF0cml4MywgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi4vc3lzdGVtL2lucHV0LXN0YXRlXCJcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcC9hcHBcIlxyXG5pbXBvcnQgeyBEb3RSZW5kZXJlcjMgfSBmcm9tIFwiLi4vcmVuZGVyL2RvdC1yZW5kZXJlcjNcIjtcclxuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4uL3JlbmRlci9jYW1lcmFcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb3RBcHAzIGV4dGVuZHMgQXBwIHtcclxuXHJcbiAgICBkb3RzOiBWZWN0b3IzW10gPSBbXTtcclxuICAgIGRpcnM6IFZlY3RvcjNbXSA9IFtdO1xyXG5cclxuICAgIGJvdW5kczogRG9tYWluMztcclxuICAgIHdoaXRlRG90UmVuZDogRG90UmVuZGVyZXIzO1xyXG4gICAgcmVkRG90UmVuZDogRG90UmVuZGVyZXIzO1xyXG4gICAgY2FtZXJhOiBDYW1lcmE7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKGdsKTtcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGdsLmNhbnZhcyBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgICAgICBsZXQgbiA9IDE7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBEb21haW4zLmZyb21Cb3VuZHMoLW4sIG4sIC1uLCBuLCAtbiwgbik7XHJcbiAgICAgICAgdGhpcy53aGl0ZURvdFJlbmQgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCAxMCwgWzEsMSwxLDFdLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5yZWREb3RSZW5kID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgMTAsIFsxLDAsMCwxXSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuc3Bhd25Tb21lKDEwMCwgMC4wMDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHNwYXduU29tZShjb3VudDogbnVtYmVyLCBub3JtcmFuZ2U6IG51bWJlcikge1xyXG5cclxuICAgICAgICBjb25zdCBub3JtU3BhY2UgPSBEb21haW4zLmZyb21Cb3VuZHMoLW5vcm1yYW5nZSwgbm9ybXJhbmdlLCAtbm9ybXJhbmdlLCBub3JtcmFuZ2UsIC1ub3JtcmFuZ2UsIG5vcm1yYW5nZSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGNvdW50OyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG90cy5wdXNoKHRoaXMuYm91bmRzLmVsZXZhdGUoVmVjdG9yMy5mcm9tUmFuZG9tKCkpKTtcclxuICAgICAgICAgICAgdGhpcy5kaXJzLnB1c2gobm9ybVNwYWNlLmVsZXZhdGUoVmVjdG9yMy5mcm9tUmFuZG9tKCkpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbW92ZSB0aGUgY2FtZXJhIHdpdGggdGhlIG1vdXNlXHJcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHN0YXRlKTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXRlLm1vdXNlTGVmdFByZXNzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zcGF3blNvbWUoMTAwLCAwLjAwMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIGFsbCBkb3RzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgdGhpcy5kb3RzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzIGdpdmVzIHVzIGEgcG9pbnRlciBhcHBhcmFudGx5XHJcbiAgICAgICAgICAgIGxldCBkb3QgPSB0aGlzLmRvdHNbaV07XHJcbiAgICAgICAgICAgIGxldCBkaXIgPSB0aGlzLmRpcnNbaV07XHJcblxyXG4gICAgICAgICAgICAvLyBib3VuY2Ugb2YgdGhlIGVkZ2VzXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ib3VuZHMueC5pbmNsdWRlcyhkb3QueCkpXHJcbiAgICAgICAgICAgICAgICBkaXIueCA9IC1kaXIueFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYm91bmRzLnkuaW5jbHVkZXMoZG90LnkpKVxyXG4gICAgICAgICAgICAgICAgZGlyLnkgPSAtZGlyLnlcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5kcy56LmluY2x1ZGVzKGRvdC56KSlcclxuICAgICAgICAgICAgICAgIGRpci56ID0gLWRpci56XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb25cclxuICAgICAgICAgICAgZG90LmFkZChkaXIpO1xyXG4gICAgICAgIH0gICAgXHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcblxyXG4gICAgICAgIC8vIGdldCB0by1zY3JlZW4gbWF0cml4XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIGxldCBtYXRyaXggPSB0aGlzLmNhbWVyYS50b3RhbE1hdHJpeDtcclxuXHJcbiAgICAgICAgLy8gcmVuZGVyIHRoZSBjb3JuZXJzIG9mIHRoZSBib3ggd2l0aCB0aGUgcmVkIHJlbmRlcmVyLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgZG90cyB0aGVtc2VsdmVzIHdpdGggdGhlIHdoaXRlIHJlbmRlcmVyXHJcbiAgICAgICAgdGhpcy5yZWREb3RSZW5kLnNldEFuZFJlbmRlcihnbCwgbWF0cml4LCB0aGlzLmJvdW5kcy5jb3JuZXJzKE1hdHJpeDQubmV3SWRlbnRpdHkoKSkpO1xyXG4gICAgICAgIHRoaXMud2hpdGVEb3RSZW5kLnNldEFuZFJlbmRlcihnbCwgbWF0cml4LCB0aGlzLmRvdHMpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/app-demos/dot-app3.ts\n");

/***/ }),

/***/ "./src/app/app.ts":
/*!************************!*\
  !*** ./src/app/app.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"App\": () => /* binding */ App\n/* harmony export */ });\nclass App {\r\n    constructor(gl) {\r\n        // unique constructor    \r\n        this.gl = gl;\r\n        this.name = this.constructor.name;\r\n    }\r\n    ui(ui) {\r\n        // setup for UI\r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2FwcC9hcHAudHM/NWRiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR08sTUFBTSxHQUFHO0lBS1osWUFBWSxFQUF5QjtRQUNqQyx5QkFBeUI7UUFDekIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxFQUFFLENBQUMsRUFBTTtRQUNMLGVBQWU7SUFDbkIsQ0FBQztJQUVELEtBQUs7UUFDRCw0QkFBNEI7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUNwQixpQkFBaUI7SUFDckIsQ0FBQztJQUVELElBQUksQ0FBQyxFQUF5QjtRQUMxQixnQkFBZ0I7SUFDcEIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2FwcC9hcHAudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4uL3N5c3RlbS9pbnB1dC1zdGF0ZVwiXHJcbmltcG9ydCB7IFVJIH0gZnJvbSBcIi4uL3N5c3RlbS91aVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFwcCB7XHJcblxyXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgLy8gdW5pcXVlIGNvbnN0cnVjdG9yICAgIFxyXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgdWkodWk6IFVJKSB7XHJcbiAgICAgICAgLy8gc2V0dXAgZm9yIFVJXHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgLy8gYWRkaXRpb25hbCBzZXR1cCBvZiBzdGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShzdGF0ZTogSW5wdXRTdGF0ZSkge1xyXG4gICAgICAgIC8vIHVwZGF0aW5nIHN0YXRlXHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgLy8gZHJhd2luZyBzdGF0ZVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/app/app.ts\n");

/***/ }),

/***/ "./src/app/geometry-app.ts":
/*!*********************************!*\
  !*** ./src/app/geometry-app.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeometryApp\": () => /* binding */ GeometryApp\n/* harmony export */ });\n/* harmony import */ var _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/pure-mesh */ \"./src/mesh/pure-mesh.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _geo_cube__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../geo/cube */ \"./src/geo/cube.ts\");\n/* harmony import */ var _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../render/mesh-debug-renderer */ \"./src/render/mesh-debug-renderer.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _data_int_cube__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../data/int-cube */ \"./src/data/int-cube.ts\");\n// name:    geometry-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: a 3d voxel environment to toy around in. Uses several features of geon\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GeometryApp extends _app__WEBPACK_IMPORTED_MODULE_7__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _geo_plane__WEBPACK_IMPORTED_MODULE_9__.Plane.WorldXY();\r\n        this.dots = [];\r\n        this.geo = [];\r\n        this.mapGeo = [];\r\n        // logic data \r\n        this.size = 50;\r\n        this.cellSize = 1;\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_4__.Camera(gl.canvas, 10, true);\r\n        this.dotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_5__.DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.whiteLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__.LineRenderer(gl, [1, 1, 1, 1]);\r\n        this.greyLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__.LineRenderer(gl, [0.2, 0, 1, 0.5]);\r\n        this.redLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__.LineRenderer(gl, [0.8, 0, 0, 1]);\r\n        this.meshRenderer = new _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_11__.MeshDebugRenderer(gl);\r\n        this.transMeshRenderer = new _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_11__.MeshDebugRenderer(gl, [1, 1, 1, 0.10], [1, 1, 1, 0.10]);\r\n    }\r\n    // called after init\r\n    start() {\r\n        this.map = new _data_int_cube__WEBPACK_IMPORTED_MODULE_13__.IntCube(this.size, this.size, this.size);\r\n        this.map.fill(0);\r\n        // add random blocks in the world\r\n        this.map.map((value, index) => {\r\n            if (Math.random() > 0.99) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        });\r\n        // let perlin = new Perlin();\r\n        // this.map.map((value, i) => {\r\n        //     let c = this.map.getCoords(i);\r\n        //     let scale = 0.05;\r\n        //     let noise = perlin.noise(c.x * scale, c.y * scale, c.z * scale);\r\n        //     if (i < 10) {\r\n        //         console.log(c);\r\n        //         console.log(noise);\r\n        //     }\r\n        //     if (noise > 0.60) {\r\n        //         return 1;\r\n        //     } else {\r\n        //         return value;\r\n        //     }\r\n        // })\r\n        // console.log(\"done setting\")\r\n        // after change, buffer \r\n        this.bufferMap();\r\n        // console.log(\"done\")\r\n        this.gridLarge = _mesh_line_array__WEBPACK_IMPORTED_MODULE_8__.LineArray.fromGrid(this.plane, this.size, this.cellSize);\r\n        this.gridSmall = _mesh_line_array__WEBPACK_IMPORTED_MODULE_8__.LineArray.fromGrid(this.plane, (this.size * 10) - 1, this.cellSize / 10);\r\n        // this.whiteLineRenderer.set(this.gl, this.gridLarge, DrawSpeed.StaticDraw);\r\n        // this.greyLineRenderer.set(this.gl, this.gridSmall, DrawSpeed.StaticDraw);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        this.updateCursor(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the grid\r\n        // this.greyLineRenderer.render(gl, matrix);\r\n        // this.whiteLineRenderer.render(gl, matrix);\r\n        // this.redLineRenderer.setAndRender(gl, matrix, this.cursorVisual!);\r\n        // render the map\r\n        // TODO create MeshArray\r\n        this.meshRenderer.render(gl, matrix);\r\n        // render other things\r\n        for (let geo of this.geo) {\r\n            this.transMeshRenderer.setAndRender(gl, matrix, geo);\r\n        }\r\n    }\r\n    addPreviewCube(point) {\r\n        let cubeCenter = this.mapToWorld(point);\r\n        let cube = this.createCube(cubeCenter);\r\n        this.geo.push(_mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCube(cube).toDisplayMesh());\r\n    }\r\n    flushPreviewCubes() {\r\n        this.geo = [];\r\n    }\r\n    updateCursor(state) {\r\n        // render mouse to world line \r\n        let mouseRay = this.camera.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        // snap to world\r\n        // let cursor = mouseRay.at(mouseRay.xPlane(this.plane));\r\n        // let mapCursor = this.worldToMap(cursor);\r\n        // let coord = this.mapToWorld(mapCursor);\r\n        // place circle at cursor\r\n        // let plane = this.plane.clone();\r\n        // plane.matrix = plane.matrix.multiply(Matrix4.newTranslation(cursor.x, cursor.y, cursor.z));\r\n        // this.cursorVisual = LineArray.fromCircle(new Circle3(plane, 0.1));\r\n        // figure out which cube we are pointing to\r\n        this.flushPreviewCubes();\r\n        let [cubeID, cubeIDprevious] = this.voxelRaycast(mouseRay, 40);\r\n        if (cubeID == -1) {\r\n            // nothing else to do\r\n            return;\r\n        }\r\n        let cubeCursor = this.map.getCoords(cubeIDprevious);\r\n        this.addPreviewCube(cubeCursor);\r\n        // render cube at this position\r\n        // this.geo.push(Mesh.fromCube(cube));  \r\n        // click\r\n        if (state.mouseLeftPressed) {\r\n            console.log(\"click\");\r\n            if (state.IsKeyDown(\" \")) {\r\n                if (this.map.data[cubeID] == 0)\r\n                    return;\r\n                this.map.data[cubeID] = 0;\r\n                this.bufferMap();\r\n            }\r\n            else if (this.map.data[cubeIDprevious] != 1) {\r\n                this.map.data[cubeIDprevious] = 1;\r\n                this.bufferMap();\r\n            }\r\n        }\r\n    }\r\n    // return the ID of the \r\n    // A Fast Voxel Traversal Algorithm for Ray Tracing\r\n    // Amanatides, Woo\r\n    // Dept. of Computer Science\r\n    voxelRaycast(ray, range) {\r\n        let startPoint = this.worldToMap(ray.origin);\r\n        let voxelCenter = this.mapToWorld(startPoint);\r\n        // integers\r\n        let x = startPoint.x;\r\n        let y = startPoint.y;\r\n        let z = startPoint.z;\r\n        let xprev = x;\r\n        let yprev = y;\r\n        let zprev = z;\r\n        let stepX = ray.normal.x > 0 ? 1 : -1;\r\n        let stepY = ray.normal.y > 0 ? 1 : -1;\r\n        let stepZ = ray.normal.z > 0 ? 1 : -1;\r\n        // floats\r\n        let voxelsize = this.cellSize;\r\n        let deltax = voxelsize / Math.abs(ray.normal.x);\r\n        let deltay = voxelsize / Math.abs(ray.normal.y);\r\n        let deltaz = voxelsize / Math.abs(ray.normal.z);\r\n        // intit tx, ty, and tz, at their first intersection with corresponding plane\r\n        voxelCenter.add(new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(voxelsize / 2 * stepX, voxelsize / 2 * stepY, voxelsize / 2 * stepZ));\r\n        let move = _math_matrix__WEBPACK_IMPORTED_MODULE_12__.Matrix4.newTranslation(voxelCenter.x, voxelCenter.y, voxelCenter.z);\r\n        let xy = _geo_plane__WEBPACK_IMPORTED_MODULE_9__.Plane.WorldXY();\r\n        xy._matrix.multiply(move);\r\n        let yz = _geo_plane__WEBPACK_IMPORTED_MODULE_9__.Plane.WorldYZ();\r\n        yz._matrix.multiply(move);\r\n        let xz = _geo_plane__WEBPACK_IMPORTED_MODULE_9__.Plane.WorldXZ();\r\n        xz._matrix.multiply(move);\r\n        let tx = ray.xPlane(yz);\r\n        let ty = ray.xPlane(xz);\r\n        let tz = ray.xPlane(xy);\r\n        if (tx < 0 || ty < 0 || tz < 0) {\r\n            console.log(\"something critical went wrong!\");\r\n            return [-1, -1];\r\n        }\r\n        // debug ray\r\n        // let lineSets: LineArray[] = [ray.toLine(100), LineArray.fromPlane(xy), LineArray.fromPlane(yz), LineArray.fromPlane(xz)];\r\n        // this.whiteLineRenderer.set(this.gl, LineArray.fromJoin(lineSets), DrawSpeed.StaticDraw);\r\n        // console.log(\"voxel raycast initialized with:\");\r\n        // console.log(\"deltas: \", deltax, deltay, deltaz);\r\n        // console.log(\"t's: \", tx, ty, tz);\r\n        // start iterating\r\n        // console.log(\"cast away!\");\r\n        // this.addPreviewCube(new Vector3(x,y,z));\r\n        // console.log(x,y,z);\r\n        for (let i = 0; i < range; i++) {\r\n            // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n            // if hit, return previous\r\n            let value = this.map.tryGet(x, y, z);\r\n            if (value == 1) {\r\n                // console.log(\"found a cube after \" + i + \"steps...\");\r\n                // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n                return [this.map.getIndex(x, y, z), this.map.getIndex(xprev, yprev, zprev)];\r\n            }\r\n            else {\r\n                xprev = x;\r\n                yprev = y;\r\n                zprev = z;\r\n            }\r\n            // to the next cube!\r\n            if (tx < ty && tx < tz) {\r\n                // x \r\n                tx += deltax;\r\n                x += stepX;\r\n            }\r\n            else if (ty < tz) {\r\n                // y\r\n                ty += deltay;\r\n                y += stepY;\r\n            }\r\n            else {\r\n                // z\r\n                tz += deltaz;\r\n                z += stepZ;\r\n            }\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    // flush this.meshRenderer\r\n    // turn this.map into this.mapGeo\r\n    bufferMap() {\r\n        let mapGeo = [];\r\n        this.map.iter((entry, index) => {\r\n            if (entry == 1) {\r\n                let mapCoord = this.map.getCoords(index);\r\n                let coord = this.mapToWorld(mapCoord);\r\n                let cube = this.createCube(coord);\r\n                mapGeo.push(_mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCube(cube).toDisplayMesh());\r\n            }\r\n        });\r\n        this.meshRenderer.set(this.gl, _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.RenderMesh.fromJoin(mapGeo));\r\n    }\r\n    worldToMap(coord) {\r\n        let halfsize = (this.size / 2) + (this.cellSize / 2);\r\n        return coord.added(new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(halfsize, halfsize, halfsize)).floored();\r\n    }\r\n    mapToWorld(point) {\r\n        let halfsize = this.size / 2;\r\n        return point.added(new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(-halfsize, -halfsize, -halfsize));\r\n    }\r\n    createCube(center) {\r\n        let hs = this.cellSize / 2;\r\n        let move = _math_matrix__WEBPACK_IMPORTED_MODULE_12__.Matrix4.newTranslation(center.x, center.y, center.z);\r\n        let cube = new _geo_cube__WEBPACK_IMPORTED_MODULE_10__.Cube(_geo_plane__WEBPACK_IMPORTED_MODULE_9__.Plane.WorldXY().transform(move), _math_domain__WEBPACK_IMPORTED_MODULE_2__.Domain3.fromBounds(-hs, hs, -hs, hs, -hs, hs));\r\n        return cube;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app/geometry-app.ts\n");

/***/ }),

/***/ "./src/app/mesh-inspector-app.ts":
/*!***************************************!*\
  !*** ./src/app/mesh-inspector-app.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshInspectorApp\": () => /* binding */ MeshInspectorApp\n/* harmony export */ });\n/* harmony import */ var _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/pure-mesh */ \"./src/mesh/pure-mesh.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _geo_cube__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geo/cube */ \"./src/geo/cube.ts\");\n/* harmony import */ var _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../render/mesh-debug-renderer */ \"./src/render/mesh-debug-renderer.ts\");\n/* harmony import */ var _system_ui__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../system/ui */ \"./src/system/ui.ts\");\n// name:    shapes-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test creation of basic mesh shapes. Test UI\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MeshInspectorApp extends _app__WEBPACK_IMPORTED_MODULE_6__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _geo_plane__WEBPACK_IMPORTED_MODULE_8__.Plane.WorldXY();\r\n        this.geo = [];\r\n        // logic data \r\n        this.distance = new _system_ui__WEBPACK_IMPORTED_MODULE_11__.SliderParameter(\"distance\", 3.0, 0, 4.0, 0.01);\r\n        this.size = 10;\r\n        this.cellSize = 0.5;\r\n        this.radius = new _system_ui__WEBPACK_IMPORTED_MODULE_11__.SliderParameter(\"radius\", 1.0, 0, 4.0, 0.01);\r\n        this.detail = new _system_ui__WEBPACK_IMPORTED_MODULE_11__.SliderParameter(\"detail\", 5, 0, 100, 1);\r\n        this.renderNormals = new _system_ui__WEBPACK_IMPORTED_MODULE_11__.SliderParameter(\"render normals\", 1, 0, 1, 1);\r\n        let canvas = gl.canvas;\r\n        // TODO abstract this to scene\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_3__.Camera(canvas);\r\n        this.camera.z_offset = -10;\r\n        this.camera.angleAlpha = 0.4;\r\n        this.camera.angleBeta = 0.5;\r\n        this.dotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_4__.DotRenderer3(gl, 4, [0, 1, 0, 1]);\r\n        this.meshRenderer = new _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_10__.MeshDebugRenderer(gl, [0, 0, 1, 1], [0, 0, 0.5, 1]);\r\n        this.lineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_5__.LineRenderer(gl);\r\n    }\r\n    ui(ui) {\r\n        // TODO : think of a system that ties parameter & slider together fully\r\n        ui.addSlider(this.radius, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addSlider(this.distance, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addSlider(this.detail, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addBooleanSlider(this.renderNormals, (b) => {\r\n            this.start();\r\n        });\r\n    }\r\n    start() {\r\n        let grid = _mesh_line_array__WEBPACK_IMPORTED_MODULE_7__.LineArray.fromGrid(this.plane, this.size, this.cellSize);\r\n        let spherePerRing = this.detail.get() * 2;\r\n        let mesh = _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromJoin([\r\n            _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromSphere(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(this.distance.get(), 0, 0), this.radius.get(), this.detail.get(), spherePerRing),\r\n            _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCube(new _geo_cube__WEBPACK_IMPORTED_MODULE_9__.Cube(this.plane, _math_domain__WEBPACK_IMPORTED_MODULE_1__.Domain3.fromRadius(this.radius.get()))),\r\n            _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCone(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-this.distance.get(), 0, -this.radius.get()), this.radius.get(), this.radius.get() * 2, spherePerRing),\r\n        ]);\r\n        let dmesh = mesh.toDisplayMesh();\r\n        if (this.renderNormals.get() == 1) {\r\n            dmesh.calculateFaceNormals();\r\n        }\r\n        // let mesh = Mesh.fromCube(new Cube(this.plane, Domain3.fromRadius(1)));\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        // TODO abstract this to scene \r\n        this.meshRenderer.set(this.gl, dmesh);\r\n        // this.lineRenderer.set(this.gl, grid);\r\n        // this.dotRenderer.set(mesh.verts, DrawSpeed.StaticDraw);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // TODO abstract this to 'scene'\r\n        let matrix = this.camera.totalMatrix;\r\n        this.dotRenderer.render(gl, matrix);\r\n        this.meshRenderer.render(gl, matrix);\r\n        // this.lineRenderer.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app/mesh-inspector-app.ts\n");

/***/ }),

/***/ "./src/app/obj-loader-app.ts":
/*!***********************************!*\
  !*** ./src/app/obj-loader-app.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ObjLoaderApp\": () => /* binding */ ObjLoaderApp\n/* harmony export */ });\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _system_domwrappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../system/domwrappers */ \"./src/system/domwrappers.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../render/simple-mesh-renderer */ \"./src/render/simple-mesh-renderer.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: drag an obj to the canvas, and view it on the web\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ObjLoaderApp extends _app__WEBPACK_IMPORTED_MODULE_8__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        let canvas = gl.canvas;\r\n        this.dotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_5__.DotRenderer3(gl, 4, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_6__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_7__.SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_4__.Camera(canvas);\r\n        (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_1__.addDropFileEventListeners)(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        // nothing\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        if (this.obj == undefined)\r\n            this.dotRenderer.setAndRender(gl, matrix, _data_vector_array__WEBPACK_IMPORTED_MODULE_10__.Vector3Array.fromList([new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0), new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(1, 1, 1)]));\r\n        else {\r\n            this.dotRenderer.setAndRender(gl, matrix, this.obj.verts);\r\n            // this.meshRenderer.render(gl, matrix);\r\n            this.lineRenderer.render(gl, matrix);\r\n        }\r\n    }\r\n}\r\nfunction processFiles(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // assume its 1 file, the obj file.\r\n        let file = files[0];\r\n        // see if we can build an correct obj from the files\r\n        let objtext = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_1__.loadTextFromFile)(file);\r\n        this.obj = (0,_mesh_render_mesh__WEBPACK_IMPORTED_MODULE_0__.meshFromObj)(objtext);\r\n        this.renderable = _mesh_line_array__WEBPACK_IMPORTED_MODULE_11__.LineArray.fromMesh(this.obj);\r\n        // scale down if too big.\r\n        // NOTE: this could also be done using matrices. Figure that out!\r\n        console.log(\"scaling...\");\r\n        let bounds = _math_domain__WEBPACK_IMPORTED_MODULE_2__.Domain3.fromInclude(this.obj.verts);\r\n        let factor = 1 / bounds.size().largestValue();\r\n        // TODO : one line these types of operations? \r\n        // they will be quite common i think...\r\n        let count = this.obj.verts.count();\r\n        for (let i = 0; i < count; i++) {\r\n            let vec = this.obj.verts.getVector(i);\r\n            vec.scale(factor);\r\n            this.obj.verts.setVector(i, vec);\r\n        }\r\n        // let objBounds = Domain3.fromInclude(this.obj.verts);\r\n        // console.log(objBounds);\r\n        // let factor = 100;\r\n        // let smaller = Domain3.fromRadii(\r\n        //     objBounds.x.size() / factor,\r\n        //     objBounds.y.size() / factor,\r\n        //     objBounds.z.size() / factor,\r\n        // );\r\n        // this.obj.verts = objBounds.remapAll(this.obj.verts, smaller);\r\n        console.log(\"done!\");\r\n        // put the data into the render buffers.\r\n        // this.meshRenderer.set(this.gl, this.obj.verts, this.obj.faces);\r\n        this.lineRenderer.set(this.gl, this.renderable, _render_renderer__WEBPACK_IMPORTED_MODULE_9__.DrawSpeed.StaticDraw);\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app/obj-loader-app.ts\n");

/***/ }),

/***/ "./src/app/stat-app.ts":
/*!*****************************!*\
  !*** ./src/app/stat-app.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StatApp\": () => /* binding */ StatApp\n/* harmony export */ });\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/simple-mesh-renderer */ \"./src/render/simple-mesh-renderer.ts\");\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/statistics */ \"./src/math/statistics.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test statistic functionalties\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass StatApp extends _app__WEBPACK_IMPORTED_MODULE_4__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots = [];\r\n        let canvas = gl.canvas;\r\n        this.dotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_1__.DotRenderer3(gl, 4, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_2__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__.SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n    }\r\n    start() {\r\n        // test things\r\n        let a = _data_float_matrix__WEBPACK_IMPORTED_MODULE_5__.FloatMatrix.fromNative([\r\n            [22., 10., 2., 3., 7.],\r\n            [14., 7., 10., 0., 8.],\r\n            [-1., 13., -1., -11., 3.],\r\n            [-3., -2., 13., -2., 4.],\r\n            [9., 8., 1., -2., 4.],\r\n            [9., 1., -7., 5., -1.],\r\n            [2., -6., 6., 5., 1.],\r\n            [4., 5., 0., -2., 2.]\r\n        ]);\r\n        let data = _math_statistics__WEBPACK_IMPORTED_MODULE_6__.Stat.svd(a);\r\n        console.log(data);\r\n        console.log(Math.sqrt(1248.), 20., Math.sqrt(384.), 0., 0.);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2FwcC9zdGF0LWFwcC50cz82Y2M4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsNkJBQTZCO0FBQzdCLHdCQUF3QjtBQUN4Qix5Q0FBeUM7QUFNQztBQUNhO0FBQ0E7QUFDYTtBQUV4QztBQUl1QjtBQUNUO0FBRW5DLE1BQU0sT0FBUSxTQUFRLHFDQUFHO0lBWTVCLFlBQVksRUFBeUI7UUFFakMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBTGQsU0FBSSxHQUFjLEVBQUUsQ0FBQztRQU9qQixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUU1QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksK0RBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLCtEQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksNEVBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksa0RBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsS0FBSztRQUNELGNBQWM7UUFDZCxJQUFJLENBQUMsR0FBRyxzRUFBc0IsQ0FBQztZQUMzQixDQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdEIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFDLEdBQUcsRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztZQUN0QixDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdEIsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdEIsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFHLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQztZQUN0QixDQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN0QixDQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUN6QixDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksR0FBRyxzREFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWlCO1FBRXBCLGlDQUFpQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxDQUFDLEVBQXlCO1FBRTFCLHVCQUF1QjtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUl6QyxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvYXBwL3N0YXQtYXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgb2JqLWxvYWRlci1hcHAudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IHRlc3Qgc3RhdGlzdGljIGZ1bmN0aW9uYWx0aWVzXHJcblxyXG5pbXBvcnQgeyBSZW5kZXJNZXNoLCBtZXNoRnJvbU9iaiB9IGZyb20gXCIuLi9tZXNoL3JlbmRlci1tZXNoXCI7XHJcbmltcG9ydCB7IGFkZERyb3BGaWxlRXZlbnRMaXN0ZW5lcnMsIGxvYWRUZXh0RnJvbUZpbGUgfSBmcm9tIFwiLi4vc3lzdGVtL2RvbXdyYXBwZXJzXCI7XHJcbmltcG9ydCB7IERvbWFpbjMgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tIFwiLi4vcmVuZGVyL2NhbWVyYVwiO1xyXG5pbXBvcnQgeyBEb3RSZW5kZXJlcjMgfSBmcm9tIFwiLi4vcmVuZGVyL2RvdC1yZW5kZXJlcjNcIjtcclxuaW1wb3J0IHsgTGluZVJlbmRlcmVyIH0gZnJvbSBcIi4uL3JlbmRlci9saW5lLXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IFNpbXBsZU1lc2hSZW5kZXJlciB9IGZyb20gXCIuLi9yZW5kZXIvc2ltcGxlLW1lc2gtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcbmltcG9ydCB7IERyYXdTcGVlZCB9IGZyb20gXCIuLi9yZW5kZXIvcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcbmltcG9ydCB7IExpbmVBcnJheSB9IGZyb20gXCIuLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuaW1wb3J0IHsgRmxvYXRNYXRyaXggfSBmcm9tIFwiLi4vZGF0YS9mbG9hdC1tYXRyaXhcIjtcclxuaW1wb3J0IHsgU3RhdCB9IGZyb20gXCIuLi9tYXRoL3N0YXRpc3RpY3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0QXBwIGV4dGVuZHMgQXBwIHtcclxuXHJcbiAgICBkb3RSZW5kZXJlcjogRG90UmVuZGVyZXIzO1xyXG4gICAgbGluZVJlbmRlcmVyOiBMaW5lUmVuZGVyZXI7XHJcbiAgICBtZXNoUmVuZGVyZXI6IFNpbXBsZU1lc2hSZW5kZXJlcjtcclxuXHJcbiAgICBjYW1lcmE6IENhbWVyYTtcclxuXHJcbiAgICBvYmo/OiBSZW5kZXJNZXNoO1xyXG4gICAgZG90czogVmVjdG9yM1tdID0gW107XHJcbiAgICByZW5kZXJhYmxlPzogTGluZUFycmF5O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlcihnbCk7XHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG4gICAgICAgIHRoaXMuZG90UmVuZGVyZXIgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCA0LCBbMCwwLDEsMV0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmxpbmVSZW5kZXJlciA9IG5ldyBMaW5lUmVuZGVyZXIoZ2wsIFswLDAsMSwwLjVdKTtcclxuICAgICAgICB0aGlzLm1lc2hSZW5kZXJlciA9IG5ldyBTaW1wbGVNZXNoUmVuZGVyZXIoZ2wsIFswLDAsMSwwLjI1XSk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgLy8gdGVzdCB0aGluZ3NcclxuICAgICAgICBsZXQgYSA9IEZsb2F0TWF0cml4LmZyb21OYXRpdmUoW1xyXG4gICAgICAgICAgICBbMjIuLDEwLiwgMi4sICAzLiwgNy5dLFxyXG4gICAgICAgICAgICBbMTQuLCA3LiwxMC4sICAwLiwgOC5dLFxyXG4gICAgICAgICAgICBbLTEuLDEzLiwtMS4sLTExLiwgMy5dLFxyXG4gICAgICAgICAgICBbLTMuLC0yLiwxMy4sIC0yLiwgNC5dLFxyXG4gICAgICAgICAgICBbIDkuLCA4LiwgMS4sIC0yLiwgNC5dLFxyXG4gICAgICAgICAgICBbIDkuLCAxLiwtNy4sICA1LiwtMS5dLFxyXG4gICAgICAgICAgICBbIDIuLC02LiwgNi4sICA1LiwgMS5dLFxyXG4gICAgICAgICAgICBbIDQuLCA1LiwgMC4sIC0yLiwgMi5dXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGxldCBkYXRhID0gU3RhdC5zdmQoYSk7IFxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKE1hdGguc3FydCgxMjQ4LiksMjAuLE1hdGguc3FydCgzODQuKSwwLiwwLik7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbW92ZSB0aGUgY2FtZXJhIHdpdGggdGhlIG1vdXNlXHJcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHN0YXRlKTsgXHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcblxyXG4gICAgICAgIC8vIGdldCB0by1zY3JlZW4gbWF0cml4XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIGxldCBtYXRyaXggPSB0aGlzLmNhbWVyYS50b3RhbE1hdHJpeDtcclxuXHJcblxyXG5cclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/app/stat-app.ts\n");

/***/ }),

/***/ "./src/app/swap-app.ts":
/*!*****************************!*\
  !*** ./src/app/swap-app.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SwapApp\": () => /* binding */ SwapApp\n/* harmony export */ });\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n\r\n// purpose: swap between different apps.\r\n//          - factory for initiazing these apps\r\n//          - making sure core deletes old apps\r\nclass SwapApp extends _app__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl, core, possibleApps) {\r\n        super(gl);\r\n        this.currentAppIndex = -1;\r\n        this.core = core;\r\n        this.possibleApps = possibleApps;\r\n    }\r\n    ui(ui) {\r\n        let names = [];\r\n        let ids = [];\r\n        let count = this.possibleApps.length;\r\n        for (let i = 0; i < count; i++) {\r\n            names.push(this.possibleApps[i].name);\r\n            ids.push(i);\r\n        }\r\n        ui.addEnum(names, ids, (i) => {\r\n            this.swap(i);\r\n        });\r\n    }\r\n    swap(index) {\r\n        // todo do some range checking\r\n        let AppType = this.possibleApps[index];\r\n        if (this.currentAppIndex > -1) {\r\n            let PreviousType = this.possibleApps[this.currentAppIndex];\r\n            console.log(\"removing\", PreviousType.name);\r\n            this.core.removeApp(PreviousType.name);\r\n        }\r\n        console.log(\"constructing\", AppType.name);\r\n        this.currentAppIndex = index;\r\n        let app = new AppType(this.gl);\r\n        this.core.addApp(app);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2FwcC9zd2FwLWFwcC50cz9jYmI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBSTRCO0FBRTVCLHdDQUF3QztBQUN4QywrQ0FBK0M7QUFDL0MsK0NBQStDO0FBQ3hDLE1BQU0sT0FBUSxTQUFRLHFDQUFHO0lBTTVCLFlBQVksRUFBeUIsRUFBRSxJQUFVLEVBQUUsWUFBbUI7UUFFbEUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBSmQsb0JBQWUsR0FBVyxDQUFDLENBQUMsQ0FBQztRQUt6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBRUQsRUFBRSxDQUFDLEVBQU07UUFFTCxJQUFJLEtBQUssR0FBYSxFQUFFLENBQUM7UUFDekIsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDZjtRQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWE7UUFDZCw4QkFBOEI7UUFFOUIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQztZQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFFN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9hcHAvc3dhcC1hcHAudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bnNvcnRlZFNlZ21lbnRTdW0gfSBmcm9tIFwiQHRlbnNvcmZsb3cvdGZqcy1jb3JlXCI7XHJcbmltcG9ydCB7IENvcmUgfSBmcm9tIFwiLi4vY29yZVwiO1xyXG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4uL3N5c3RlbS9pbnB1dC1zdGF0ZVwiXHJcbmltcG9ydCB7IFVJIH0gZnJvbSBcIi4uL3N5c3RlbS91aVwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcclxuXHJcbi8vIHB1cnBvc2U6IHN3YXAgYmV0d2VlbiBkaWZmZXJlbnQgYXBwcy5cclxuLy8gICAgICAgICAgLSBmYWN0b3J5IGZvciBpbml0aWF6aW5nIHRoZXNlIGFwcHNcclxuLy8gICAgICAgICAgLSBtYWtpbmcgc3VyZSBjb3JlIGRlbGV0ZXMgb2xkIGFwcHNcclxuZXhwb3J0IGNsYXNzIFN3YXBBcHAgZXh0ZW5kcyBBcHAge1xyXG5cclxuICAgIHBvc3NpYmxlQXBwczogYW55W107XHJcbiAgICBjb3JlOiBDb3JlO1xyXG4gICAgY3VycmVudEFwcEluZGV4OiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb3JlOiBDb3JlLCBwb3NzaWJsZUFwcHM6IGFueVtdKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGdsKTtcclxuICAgICAgICB0aGlzLmNvcmUgPSBjb3JlO1xyXG4gICAgICAgIHRoaXMucG9zc2libGVBcHBzID0gcG9zc2libGVBcHBzO1xyXG4gICAgfVxyXG5cclxuICAgIHVpKHVpOiBVSSkge1xyXG5cclxuICAgICAgICBsZXQgbmFtZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IGlkczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLnBvc3NpYmxlQXBwcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBuYW1lcy5wdXNoKHRoaXMucG9zc2libGVBcHBzW2ldLm5hbWUpO1xyXG4gICAgICAgICAgICBpZHMucHVzaChpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVpLmFkZEVudW0obmFtZXMsIGlkcywgKGkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zd2FwKGkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN3YXAoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIC8vIHRvZG8gZG8gc29tZSByYW5nZSBjaGVja2luZ1xyXG4gICAgXHJcbiAgICAgICAgbGV0IEFwcFR5cGUgPSB0aGlzLnBvc3NpYmxlQXBwc1tpbmRleF07XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFwcEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgbGV0IFByZXZpb3VzVHlwZSA9IHRoaXMucG9zc2libGVBcHBzW3RoaXMuY3VycmVudEFwcEluZGV4XTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZW1vdmluZ1wiLCBQcmV2aW91c1R5cGUubmFtZSlcclxuICAgICAgICAgICAgdGhpcy5jb3JlLnJlbW92ZUFwcChQcmV2aW91c1R5cGUubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29uc3RydWN0aW5nXCIsIEFwcFR5cGUubmFtZSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50QXBwSW5kZXggPSBpbmRleDtcclxuXHJcbiAgICAgICAgbGV0IGFwcCA9IG5ldyBBcHBUeXBlKHRoaXMuZ2wpO1xyXG4gICAgICAgIHRoaXMuY29yZS5hZGRBcHAoYXBwKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/app/swap-app.ts\n");

/***/ }),

/***/ "./src/core.ts":
/*!*********************!*\
  !*** ./src/core.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Core\": () => /* binding */ Core\n/* harmony export */ });\n/* harmony import */ var _system_input_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system/input-state */ \"./src/system/input-state.ts\");\n/* harmony import */ var _system_fpsCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./system/fpsCounter */ \"./src/system/fpsCounter.ts\");\n/* harmony import */ var _system_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./system/ui */ \"./src/system/ui.ts\");\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls. \r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\n\r\n\r\nclass Core {\r\n    constructor(canvas, gl, uiFrame) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new _system_input_state__WEBPACK_IMPORTED_MODULE_0__.InputState(canvas);\r\n        this.fpsCounter = new _system_fpsCounter__WEBPACK_IMPORTED_MODULE_1__.FpsCounter();\r\n        this.ui = new _system_ui__WEBPACK_IMPORTED_MODULE_2__.UI(uiFrame);\r\n        this.apps = new Map();\r\n    }\r\n    // todo: cycle through apps\r\n    addApp(app) {\r\n        this.apps.set(app.name, app);\r\n        this.activateApp(app);\r\n    }\r\n    removeApp(appName) {\r\n        this.ui.removeContext(appName);\r\n        this.apps.delete(appName);\r\n    }\r\n    activateApp(app) {\r\n        this.ui.addContext(app.name);\r\n        app.ui(this.ui);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        this.fpsCounter.update(this.state);\r\n        if (this.state.IsKeyPressed(\"Esc\"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // put fps in the titel\r\n        document.title = \"fps: \" + this.fpsCounter.getFps();\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height ||\r\n            window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2NvcmUudHM/Njk5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUJBQXVCO0FBQ3ZCLGtHQUFrRztBQUNsRyx5REFBeUQ7QUFFUDtBQUVEO0FBQ2hCO0FBRTFCLE1BQU0sSUFBSTtJQVliLFlBQVksTUFBeUIsRUFBRSxFQUF5QixFQUFFLE9BQXVCO1FBRnpGLFNBQUksR0FBRyxLQUFLLENBQUM7UUFHVCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSwyREFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwwREFBVSxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLDBDQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFHRCwyQkFBMkI7SUFDM0IsTUFBTSxDQUFDLEdBQVE7UUFFWCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFNBQVMsQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFHRCxXQUFXLENBQUMsR0FBUTtRQUVoQixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFHRCxNQUFNO1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUdELElBQUk7UUFFQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBRWxCLHVCQUF1QjtRQUN2QixRQUFRLENBQUMsS0FBSyxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXBELGtCQUFrQjtRQUNsQixJQUFJLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLE1BQU07WUFDbkMsTUFBTSxDQUFDLFVBQVUsSUFBSyxNQUFNLENBQUMsS0FBSyxFQUN0QztZQUNJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUNuQyw0Q0FBNEM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVwRCxNQUFNLENBQUMsS0FBSyxHQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFDbEMsMENBQTBDO1lBQzFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFbEQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVEO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV4QyxrQkFBa0I7UUFDbEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDO0lBQ04sQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2NvcmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBdXRob3I6IEpvcyBGZWVuc3RyYVxyXG4vLyBQdXJwb3NlOiBUaGUgQ29yZSBhcHAuIFRoaXMgY2FuIGhvbGQgbXVsdGlwbGUgb3RoZXIgYXBwcyB3aXRoIHRoZWlyIG93biBVcGRhdGUgYW5kIERyYXcgY2FsbHMuIFxyXG4vLyBVc2UgdGhpcyB0byBzd2l0Y2ggYmV0d2VlbiBBcHBzLCBvciBydW4gbXVsdGlwbGUgQXBwcy5cclxuXHJcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwL2FwcFwiO1xyXG5pbXBvcnQgeyBGcHNDb3VudGVyIH0gZnJvbSBcIi4vc3lzdGVtL2Zwc0NvdW50ZXJcIjtcclxuaW1wb3J0IHsgVUkgfSBmcm9tIFwiLi9zeXN0ZW0vdWlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3JlIHtcclxuXHJcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHN0YXRlOiBJbnB1dFN0YXRlO1xyXG4gICAgdWk6IFVJO1xyXG4gICAgZnBzQ291bnRlcjogRnBzQ291bnRlcjtcclxuXHJcbiAgICBwcml2YXRlIGFwcHM6IE1hcDxzdHJpbmcsIEFwcD47XHJcbiAgICBcclxuICAgIFNUT1AgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdWlGcmFtZTogSFRNTERpdkVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBJbnB1dFN0YXRlKGNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy5mcHNDb3VudGVyID0gbmV3IEZwc0NvdW50ZXIoKTtcclxuICAgICAgICB0aGlzLnVpID0gbmV3IFVJKHVpRnJhbWUpO1xyXG4gICAgICAgIHRoaXMuYXBwcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gdG9kbzogY3ljbGUgdGhyb3VnaCBhcHBzXHJcbiAgICBhZGRBcHAoYXBwOiBBcHApIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmFwcHMuc2V0KGFwcC5uYW1lLCBhcHApO1xyXG4gICAgICAgIHRoaXMuYWN0aXZhdGVBcHAoYXBwKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBcHAoYXBwTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy51aS5yZW1vdmVDb250ZXh0KGFwcE5hbWUpO1xyXG4gICAgICAgIHRoaXMuYXBwcy5kZWxldGUoYXBwTmFtZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFjdGl2YXRlQXBwKGFwcDogQXBwKSB7XHJcblxyXG4gICAgICAgIHRoaXMudWkuYWRkQ29udGV4dChhcHAubmFtZSk7XHJcbiAgICAgICAgYXBwLnVpKHRoaXMudWkpO1xyXG4gICAgICAgIGFwcC5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5wcmVVcGRhdGUoKTtcclxuICAgICAgICB0aGlzLmZwc0NvdW50ZXIudXBkYXRlKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLklzS2V5UHJlc3NlZChcIkVzY1wiKSlcclxuICAgICAgICAgICAgdGhpcy5TVE9QID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmFwcHMuZm9yRWFjaCgoYXBwKSA9PiB7XHJcbiAgICAgICAgICAgIGFwcC51cGRhdGUodGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5wb3N0VXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXM7XHJcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsXHJcblxyXG4gICAgICAgIC8vIHB1dCBmcHMgaW4gdGhlIHRpdGVsXHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcImZwczogXCIgKyB0aGlzLmZwc0NvdW50ZXIuZ2V0RnBzKCk7XHJcblxyXG4gICAgICAgIC8vIHByZS1nbCBidXNpbmVzc1xyXG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgIT0gY2FudmFzLmhlaWdodCB8fCBcclxuICAgICAgICAgICAgd2luZG93LmlubmVyV2lkdGggICE9IGNhbnZhcy53aWR0aCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyBjYW52YXMuY2xpZW50SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICBjYW52YXMud2lkdGggID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgICAgIC8vIGNhbnZhcy5jbGllbnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aC50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW5kZXJlci5yZXNpemVDYW52YXModGhpcy5nbCk7XHJcbiAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgICAgLy8gcmVuZGVyIGFsbCBhcHBzXHJcbiAgICAgICAgLy8gVE9ETyA6IHJldmVyc2Ugb3JkZXJcclxuICAgICAgICB0aGlzLmFwcHMuZm9yRWFjaCgoYXBwKSA9PiB7XHJcbiAgICAgICAgICAgIGFwcC5kcmF3KHRoaXMuZ2wpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/core.ts\n");

/***/ }),

/***/ "./src/data/float-matrix.ts":
/*!**********************************!*\
  !*** ./src/data/float-matrix.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FloatMatrix\": () => /* binding */ FloatMatrix\n/* harmony export */ });\n// generic all-pupose matrix of floats\r\nclass FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new FloatMatrix(this._height, this._width);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    // generalized multiplication\r\n    multiply(b) {\r\n        let a = this;\r\n        if (b._width !== a._height) {\r\n            throw new Error('Columns in A should be the same as the number of rows in B');\r\n        }\r\n        var product = new FloatMatrix(a._height, b._width);\r\n        for (var i = 0; i < product._height; i++) {\r\n            for (var j = 0; j < b._width; j++) {\r\n                for (var k = 0; k < a._width; k++) {\r\n                    product.set(i, j, product.get(i, j) + a.get(i, k) * b.get(k, j));\r\n                }\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let width = native[0].length;\r\n        let matrix = new FloatMatrix(height, width);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    toNative() {\r\n        let native = [];\r\n        for (var i = 0; i < this._height; i++) {\r\n            native[i] = [];\r\n            for (var j = 0; j < this._width; j++) {\r\n                native[i][j] = this.get(i, j);\r\n            }\r\n        }\r\n        return native;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/float-matrix.ts\n");

/***/ }),

/***/ "./src/data/hash-table.ts":
/*!********************************!*\
  !*** ./src/data/hash-table.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HashTable\": () => /* binding */ HashTable\n/* harmony export */ });\n// note: this wont always work, but it does in most cases\r\n// todo: implement proper hashtable\r\nclass HashTable {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    stringify(key) {\r\n        return key.toString();\r\n    }\r\n    set(key, value) {\r\n        return this.data.set(this.stringify(key), value);\r\n    }\r\n    has(key) {\r\n        return this.data.has(this.stringify(key));\r\n    }\r\n    get(key) {\r\n        return this.data.get(this.stringify(key));\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2RhdGEvaGFzaC10YWJsZS50cz9kN2ExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSx5REFBeUQ7QUFDekQsbUNBQW1DO0FBQzVCLE1BQU0sU0FBUztJQUlsQjtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQVE7UUFDdEIsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFRLEVBQUUsS0FBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUVKIiwiZmlsZSI6Ii4vc3JjL2RhdGEvaGFzaC10YWJsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vLyBub3RlOiB0aGlzIHdvbnQgYWx3YXlzIHdvcmssIGJ1dCBpdCBkb2VzIGluIG1vc3QgY2FzZXNcclxuLy8gdG9kbzogaW1wbGVtZW50IHByb3BlciBoYXNodGFibGVcclxuZXhwb3J0IGNsYXNzIEhhc2hUYWJsZTxWPiB7XHJcblxyXG4gICAgZGF0YTogTWFwPHN0cmluZywgVj5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgTWFwPHN0cmluZywgVj4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0cmluZ2lmeShrZXk6IGFueSkgOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoa2V5OiBhbnksIHZhbHVlOiBWKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zZXQodGhpcy5zdHJpbmdpZnkoa2V5KSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhcyhrZXk6IGFueSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmhhcyh0aGlzLnN0cmluZ2lmeShrZXkpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoa2V5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldCh0aGlzLnN0cmluZ2lmeShrZXkpKTtcclxuICAgIH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/data/hash-table.ts\n");

/***/ }),

/***/ "./src/data/int-cube.ts":
/*!******************************!*\
  !*** ./src/data/int-cube.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntCube\": () => /* binding */ IntCube\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n// a Cube of voxels\r\nclass IntCube {\r\n    constructor(height, width, depth, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this._depth = depth;\r\n        let size = this._width * this._height * this._depth;\r\n        this.data = new Int32Array(size);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else {\r\n            this.setData(data);\r\n        }\r\n    }\r\n    size() {\r\n        return this._width * this._height * this._depth;\r\n    }\r\n    // shallow copy \r\n    clone() {\r\n        let clone = new IntCube(this._height, this._width, this._depth);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this.size())\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    fill(value) {\r\n        let size = this.size();\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    inRange(i, j, k) {\r\n        return (!(i < 0 || j < 0 || k < 0 ||\r\n            i > this._width - 1 || j > this._height - 1 || k > this._depth - 1));\r\n    }\r\n    getIndex(i, j, k) {\r\n        return i * (this._height * this._depth) + j * this._depth + k;\r\n    }\r\n    getCoords(index) {\r\n        // javascript, dont you dare turn  'int / int' into a float...\r\n        let i = Math.floor(index / (this._height * this._depth)) % this._width;\r\n        let j = Math.floor(index / this._depth) % this._height;\r\n        let k = index % this._depth;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(i, j, k);\r\n    }\r\n    get(i, j, k) {\r\n        return this.data[this.getIndex(i, j, k)];\r\n    }\r\n    tryGet(i, j, k) {\r\n        if (this.inRange(i, j, k)) {\r\n            return this.data[this.getIndex(i, j, k)];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    set(i, j, k, value) {\r\n        this.data[this.getIndex(i, j, k)] = value;\r\n    }\r\n    trySet(i, j, k, value) {\r\n        if (this.inRange(i, j, k)) {\r\n            this.data[this.getIndex(i, j, k)] = value;\r\n        }\r\n    }\r\n    iter(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    map(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-cube.ts\n");

/***/ }),

/***/ "./src/data/int-matrix.ts":
/*!********************************!*\
  !*** ./src/data/int-matrix.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntMatrix\": () => /* binding */ IntMatrix\n/* harmony export */ });\n// generic all-pupose matrix of ints\r\nclass IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Int32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    static fromList(list, width) {\r\n        let height = list.length / width;\r\n        let array = new IntMatrix(height, width);\r\n        for (let i = 0; i < list.length; i++) {\r\n            array.data[i] = list[i];\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    inRange(i, j) {\r\n        return !(i < 0 || i > this._height - 1 || j < 0 || j > this._width - 1);\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return 0;\r\n        }\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for Array\"\r\n        let data = new Int32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for Array\"\r\n        let data = new Int32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return;\r\n        }\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    toUInt16Array() {\r\n        return new Uint16Array(this.data);\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    forEachRow(callbackfn) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let row = this.getRow(i);\r\n            callbackfn(row, i);\r\n            this.setRow(i, row);\r\n        }\r\n        return this;\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-matrix.ts\n");

/***/ }),

/***/ "./src/data/vector-array.ts":
/*!**********************************!*\
  !*** ./src/data/vector-array.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector2Array\": () => /* binding */ Vector2Array,\n/* harmony export */   \"Vector3Array\": () => /* binding */ Vector3Array,\n/* harmony export */   \"getGeneralFloatMatrix\": () => /* binding */ getGeneralFloatMatrix\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _float_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3, \r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n// \r\n// NOTE:    all these small wrappers might not be good pratice, but I \r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass Vector2Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    to3D() {\r\n        let array = new Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n}\r\nclass Vector3Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let matrix = new Vector3Array(height);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    fillFromList(vecs) {\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            this.data[i * 3] = vecs[i].x;\r\n            this.data[i * 3 + 1] = vecs[i].y;\r\n            this.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            vec = callbackfn(vec, i);\r\n            if (vec instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                this.setVector(i, vec);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                clone.set(i, j, this.get(i, j));\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    clone() {\r\n        let clone = new Vector3Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    mean() {\r\n        // the mean vector of a series of vectors\r\n        let sum = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.zero();\r\n        let count = this.count();\r\n        for (let i = 0; i < count; i++) {\r\n            sum.x += this.data[i * 3];\r\n            sum.y += this.data[i * 3 + 1];\r\n            sum.z += this.data[i * 3 + 2];\r\n        }\r\n        return sum.scale(1 / count);\r\n    }\r\n    average() {\r\n        return this.mean();\r\n    }\r\n    closestId(point) {\r\n        let lowScore = Infinity;\r\n        let id = -1;\r\n        this.forEach((v, i) => {\r\n            let disSquared = point.disToSquared(v);\r\n            if (disSquared < lowScore) {\r\n                lowScore = disSquared;\r\n                id = i;\r\n            }\r\n        });\r\n        return id;\r\n    }\r\n    closestIds(point, n) {\r\n        // O(m*n)... TODO implement quicksort \r\n        let ids = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let lowScore = Infinity;\r\n            let id = -1;\r\n            this.forEach((v, i) => {\r\n                if (ids.includes(id))\r\n                    return;\r\n                let disSquared = point.disToSquared(v);\r\n                if (disSquared < lowScore) {\r\n                    lowScore = disSquared;\r\n                    id = i;\r\n                }\r\n            });\r\n            ids.push(id);\r\n        }\r\n        return ids;\r\n    }\r\n}\r\nfunction getGeneralFloatMatrix(vectors) {\r\n    if (vectors instanceof Vector2Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors instanceof Vector3Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors[0] instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n        return Vector2Array.fromList(vectors);\r\n    }\r\n    else {\r\n        return Vector3Array.fromList(vectors);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/vector-array.ts\n");

/***/ }),

/***/ "./src/geo/circle2.ts":
/*!****************************!*\
  !*** ./src/geo/circle2.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle2\": () => /* binding */ Circle2\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\nclass Circle2 {\r\n    constructor(center, radius) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    // thank you mr Mitteldorf for making me remember how basic math works\r\n    // http://mathforum.org/library/drmath/view/53027.html\r\n    // calculate the centers of two circles, defined by two points and a radius\r\n    static centersFromPPR(a, b, radius) {\r\n        // throw new Error(\"Method not implemented.\");\r\n        // get in between length and halfway point\r\n        let normal = b.clone().sub(a);\r\n        let dis = normal.length();\r\n        let middle = a.clone().add(b).scale(1 / 2);\r\n        // scalar length on mirror line (pythagoras)\r\n        let value = Math.pow(radius, 2) - Math.pow((dis / 2), 2);\r\n        if (value < -_math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // no sollution\r\n            return [];\r\n        }\r\n        else if (value < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // center roughly in the middle, so just return the middle\r\n            return [middle];\r\n        }\r\n        else {\r\n            // two circles possible:\r\n            let disToCenter = Math.pow((value), 0.5);\r\n            let normY = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(normal.y, -normal.x).normalize();\r\n            // move the middle point up and down\r\n            return [\r\n                middle.clone().add(normY.clone().scale(disToCenter)),\r\n                middle.clone().add(normY.clone().scale(-disToCenter)),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2dlby9jaXJjbGUyLnRzPzBjMWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRXNDO0FBQ0c7QUFFbEMsTUFBTSxPQUFPO0lBS2hCLFlBQVksTUFBZSxFQUFFLE1BQWM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELHNFQUFzRTtJQUN0RSxzREFBc0Q7SUFDdEQsMkVBQTJFO0lBQzNFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxNQUFjO1FBQ3hELDhDQUE4QztRQUU5QywwQ0FBMEM7UUFDMUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpDLDRDQUE0QztRQUM1QyxJQUFJLEtBQUssR0FBRyxlQUFNLEVBQUUsQ0FBQyxJQUFHLFVBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyx3REFBZSxFQUFFO1lBQzFCLGVBQWU7WUFDZixPQUFPLEVBQUUsQ0FBQztTQUNiO2FBQU0sSUFBSSxLQUFLLEdBQUcsd0RBQWUsRUFBRTtZQUNoQywwREFBMEQ7WUFDMUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25CO2FBQU07WUFDSCx3QkFBd0I7WUFDeEIsSUFBSSxXQUFXLEdBQUcsVUFBQyxLQUFLLENBQUMsRUFBRSxHQUFHO1lBQzlCLElBQUksS0FBSyxHQUFHLElBQUksaURBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRXpELG9DQUFvQztZQUNwQyxPQUFPO2dCQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEQsQ0FBQztTQUNMO0lBQ0wsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9jaXJjbGUyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9ybSB9IGZyb20gXCJAdGVuc29yZmxvdy90ZmpzXCI7XHJcbmltcG9ydCB7IHJhbmRVbmlmb3JtIH0gZnJvbSBcIkB0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L3V0aWxcIjtcclxuaW1wb3J0IHsgQ29uc3QgfSBmcm9tIFwiLi4vbWF0aC9jb25zdFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2lyY2xlMiB7XHJcblxyXG4gICAgY2VudGVyOiBWZWN0b3IyO1xyXG4gICAgcmFkaXVzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2VudGVyOiBWZWN0b3IyLCByYWRpdXM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyB0aGFuayB5b3UgbXIgTWl0dGVsZG9yZiBmb3IgbWFraW5nIG1lIHJlbWVtYmVyIGhvdyBiYXNpYyBtYXRoIHdvcmtzXHJcbiAgICAvLyBodHRwOi8vbWF0aGZvcnVtLm9yZy9saWJyYXJ5L2RybWF0aC92aWV3LzUzMDI3Lmh0bWxcclxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgY2VudGVycyBvZiB0d28gY2lyY2xlcywgZGVmaW5lZCBieSB0d28gcG9pbnRzIGFuZCBhIHJhZGl1c1xyXG4gICAgc3RhdGljIGNlbnRlcnNGcm9tUFBSKGE6IFZlY3RvcjIsIGI6IFZlY3RvcjIsIHJhZGl1czogbnVtYmVyKSA6IFZlY3RvcjJbXSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcblxyXG4gICAgICAgIC8vIGdldCBpbiBiZXR3ZWVuIGxlbmd0aCBhbmQgaGFsZndheSBwb2ludFxyXG4gICAgICAgIGxldCBub3JtYWwgPSBiLmNsb25lKCkuc3ViKGEpO1xyXG4gICAgICAgIGxldCBkaXMgPSBub3JtYWwubGVuZ3RoKCk7XHJcbiAgICAgICAgbGV0IG1pZGRsZSA9IGEuY2xvbmUoKS5hZGQoYikuc2NhbGUoMS8yKTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGFyIGxlbmd0aCBvbiBtaXJyb3IgbGluZSAocHl0aGFnb3JhcylcclxuICAgICAgICBsZXQgdmFsdWUgPSByYWRpdXMqKjIgLSAoZGlzLzIpKioyXHJcbiAgICAgICAgaWYgKHZhbHVlIDwgLUNvbnN0LlRPTEVSQU5DRSkge1xyXG4gICAgICAgICAgICAvLyBubyBzb2xsdXRpb25cclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCBDb25zdC5UT0xFUkFOQ0UpIHtcclxuICAgICAgICAgICAgLy8gY2VudGVyIHJvdWdobHkgaW4gdGhlIG1pZGRsZSwgc28ganVzdCByZXR1cm4gdGhlIG1pZGRsZVxyXG4gICAgICAgICAgICByZXR1cm4gW21pZGRsZV07IFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHR3byBjaXJjbGVzIHBvc3NpYmxlOlxyXG4gICAgICAgICAgICBsZXQgZGlzVG9DZW50ZXIgPSAodmFsdWUpKiowLjVcclxuICAgICAgICAgICAgbGV0IG5vcm1ZID0gbmV3IFZlY3RvcjIobm9ybWFsLnksIC1ub3JtYWwueCkubm9ybWFsaXplKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBtb3ZlIHRoZSBtaWRkbGUgcG9pbnQgdXAgYW5kIGRvd25cclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIG1pZGRsZS5jbG9uZSgpLmFkZChub3JtWS5jbG9uZSgpLnNjYWxlKGRpc1RvQ2VudGVyKSksXHJcbiAgICAgICAgICAgICAgICBtaWRkbGUuY2xvbmUoKS5hZGQobm9ybVkuY2xvbmUoKS5zY2FsZSgtZGlzVG9DZW50ZXIpKSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/circle2.ts\n");

/***/ }),

/***/ "./src/geo/circle3.ts":
/*!****************************!*\
  !*** ./src/geo/circle3.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle3\": () => /* binding */ Circle3\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// purpose: represents a 3d circle\r\n\r\n\r\nclass Circle3 {\r\n    constructor(plane, radius) {\r\n        this.plane = plane;\r\n        this.radius = radius;\r\n    }\r\n    static fromCircle2(circle2, plane = _plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY()) {\r\n        // elevate center of circle, make it the center of a plane\r\n        let center3d = plane.pushToWorld(circle2.center.to3D());\r\n        plane = plane.clone();\r\n        plane.center = center3d;\r\n        return new Circle3(plane, circle2.radius);\r\n    }\r\n    includes(p) {\r\n        // test if the point falls in range of the circle, by regarding\r\n        // the circle as a torus\r\n        // CHANGE NOTE: i set this to zero, for testing\r\n        // vertical error\r\n        let [projPoint, yError] = this.plane.closestPoint(p);\r\n        yError = yError / 3;\r\n        // horizontal error: get the difference between point\r\n        let xError = this.plane.center.clone().disTo(projPoint) - this.radius;\r\n        // length of total error vector needs to be smaller than the given\r\n        // tolerance\r\n        return Math.pow(yError, 2) + Math.pow(xError, 2) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOL_SQUARED;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2dlby9jaXJjbGUzLnRzP2VkY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0Esa0NBQWtDO0FBRUk7QUFJTjtBQUl6QixNQUFNLE9BQU87SUFLaEIsWUFBWSxLQUFZLEVBQUUsTUFBYztRQUNwQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFnQixFQUFFLEtBQUssR0FBRyxpREFBYSxFQUFFO1FBRXhELDBEQUEwRDtRQUMxRCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQVU7UUFDZiwrREFBK0Q7UUFDL0Qsd0JBQXdCO1FBRXhCLCtDQUErQztRQUMvQyxpQkFBaUI7UUFDakIsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUM7UUFFbkIscURBQXFEO1FBQ3JELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRXRFLGtFQUFrRTtRQUNsRSxZQUFZO1FBQ1osT0FBTyxlQUFNLEVBQUUsQ0FBQyxJQUFHLGVBQU0sRUFBRyxDQUFDLElBQUcsMERBQWlCLENBQUM7SUFDdEQsQ0FBQztDQUlKIiwiZmlsZSI6Ii4vc3JjL2dlby9jaXJjbGUzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIHB1cnBvc2U6IHJlcHJlc2VudHMgYSAzZCBjaXJjbGVcclxuXHJcbmltcG9ydCB7IENvbnN0IH0gZnJvbSBcIi4uL21hdGgvY29uc3RcIjtcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENpcmNsZTIgfSBmcm9tIFwiLi9jaXJjbGUyXCI7XHJcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSBcIi4vcGxhbmVcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZTMge1xyXG5cclxuICAgIHBsYW5lOiBQbGFuZTtcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYW5lOiBQbGFuZSwgcmFkaXVzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBsYW5lID0gcGxhbmU7XHJcbiAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21DaXJjbGUyKGNpcmNsZTI6IENpcmNsZTIsIHBsYW5lID0gUGxhbmUuV29ybGRYWSgpKSB7XHJcblxyXG4gICAgICAgIC8vIGVsZXZhdGUgY2VudGVyIG9mIGNpcmNsZSwgbWFrZSBpdCB0aGUgY2VudGVyIG9mIGEgcGxhbmVcclxuICAgICAgICBsZXQgY2VudGVyM2QgPSBwbGFuZS5wdXNoVG9Xb3JsZChjaXJjbGUyLmNlbnRlci50bzNEKCkpO1xyXG4gICAgICAgIHBsYW5lID0gcGxhbmUuY2xvbmUoKTtcclxuICAgICAgICBwbGFuZS5jZW50ZXIgPSBjZW50ZXIzZDtcclxuICAgICAgICByZXR1cm4gbmV3IENpcmNsZTMocGxhbmUsIGNpcmNsZTIucmFkaXVzKTtcclxuICAgIH1cclxuXHJcbiAgICBpbmNsdWRlcyhwOiBWZWN0b3IzKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIHRlc3QgaWYgdGhlIHBvaW50IGZhbGxzIGluIHJhbmdlIG9mIHRoZSBjaXJjbGUsIGJ5IHJlZ2FyZGluZ1xyXG4gICAgICAgIC8vIHRoZSBjaXJjbGUgYXMgYSB0b3J1c1xyXG5cclxuICAgICAgICAvLyBDSEFOR0UgTk9URTogaSBzZXQgdGhpcyB0byB6ZXJvLCBmb3IgdGVzdGluZ1xyXG4gICAgICAgIC8vIHZlcnRpY2FsIGVycm9yXHJcbiAgICAgICAgbGV0IFtwcm9qUG9pbnQsIHlFcnJvcl0gPSB0aGlzLnBsYW5lLmNsb3Nlc3RQb2ludChwKTtcclxuICAgICAgICB5RXJyb3IgPSB5RXJyb3IgLyAzXHJcbiAgICBcclxuICAgICAgICAvLyBob3Jpem9udGFsIGVycm9yOiBnZXQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBwb2ludFxyXG4gICAgICAgIGxldCB4RXJyb3IgPSB0aGlzLnBsYW5lLmNlbnRlci5jbG9uZSgpLmRpc1RvKHByb2pQb2ludCkgLSB0aGlzLnJhZGl1cztcclxuICAgIFxyXG4gICAgICAgIC8vIGxlbmd0aCBvZiB0b3RhbCBlcnJvciB2ZWN0b3IgbmVlZHMgdG8gYmUgc21hbGxlciB0aGFuIHRoZSBnaXZlblxyXG4gICAgICAgIC8vIHRvbGVyYW5jZVxyXG4gICAgICAgIHJldHVybiB5RXJyb3IqKjIgKyB4RXJyb3IgKioyIDwgQ29uc3QuVE9MX1NRVUFSRUQ7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/circle3.ts\n");

/***/ }),

/***/ "./src/geo/cube.ts":
/*!*************************!*\
  !*** ./src/geo/cube.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cube\": () => /* binding */ Cube\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// name:    cube.ts\r\n// author:  Jos Feenstra\r\n// purpose: Represents a cube in 3d space, in a certain pose. \r\n\r\n\r\nclass Cube {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    static fromRadius(point, radius) {\r\n        return new Cube(_plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY().moveTo(point), _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromRadius(radius));\r\n    }\r\n    getCorners() {\r\n        return this.domain.corners(this.plane.matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2dlby9jdWJlLnRzPzMxMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qiw4REFBOEQ7QUFHckI7QUFHVDtBQUV6QixNQUFNLElBQUk7SUFNYixZQUFZLEtBQVksRUFBRSxNQUFlO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFHRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWMsRUFBRSxNQUFjO1FBQzVDLE9BQU8sSUFBSSxJQUFJLENBQ1gsaURBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFDN0IsNERBQWtCLENBQUMsTUFBTSxDQUFDLENBQzdCLENBQUM7SUFDTixDQUFDO0lBR0QsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL2N1YmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBjdWJlLnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBSZXByZXNlbnRzIGEgY3ViZSBpbiAzZCBzcGFjZSwgaW4gYSBjZXJ0YWluIHBvc2UuIFxyXG5cclxuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcbmltcG9ydCB7IERvbWFpbjMgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBHZW8gfSBmcm9tIFwiLi9nZW9cIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi9wbGFuZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1YmUge1xyXG5cclxuICAgIFxyXG4gICAgcGxhbmU6IFBsYW5lXHJcbiAgICBkb21haW46IERvbWFpbjNcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbGFuZTogUGxhbmUsIGRvbWFpbjogRG9tYWluMykge1xyXG4gICAgICAgIHRoaXMucGxhbmUgPSBwbGFuZTtcclxuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGZyb21SYWRpdXMocG9pbnQ6IFZlY3RvcjMsIHJhZGl1czogbnVtYmVyKTogQ3ViZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDdWJlKFxyXG4gICAgICAgICAgICBQbGFuZS5Xb3JsZFhZKCkubW92ZVRvKHBvaW50KSxcclxuICAgICAgICAgICAgRG9tYWluMy5mcm9tUmFkaXVzKHJhZGl1cyksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGdldENvcm5lcnMoKSA6IFZlY3RvcjNbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tYWluLmNvcm5lcnModGhpcy5wbGFuZS5tYXRyaXgpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/cube.ts\n");

/***/ }),

/***/ "./src/geo/line.ts":
/*!*************************!*\
  !*** ./src/geo/line.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineCurve2\": () => /* binding */ LineCurve2\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\n// heavy weight Line class\r\nclass LineCurve2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.vector = to.subbed(this.from);\r\n        this.normal = this.vector.normalized();\r\n        this.bounds = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, this.vector.length());\r\n        this.length = this.vector.length();\r\n    }\r\n    at(t, bounded = true) {\r\n        if (bounded)\r\n            t = this.bounds.comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t / this.length);\r\n    }\r\n    atNormal(t, bounded = true) {\r\n        if (bounded)\r\n            t = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, 1).comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t);\r\n    }\r\n    closestPoint(point, bounded = true) {\r\n        const d = this.vector.length();\r\n        if (d === 0)\r\n            return;\r\n        let lineToPoint = point.subbed(this.from);\r\n        let dot = lineToPoint.dot(this.vector);\r\n        return this.at(dot, bounded);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2dlby9saW5lLnRzP2FhODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlEO0FBQ1Q7QUFFeEMsMEJBQTBCO0FBQ25CLE1BQU0sVUFBVTtJQVVuQixZQUFZLElBQWEsRUFBRSxFQUFXO1FBQ2xDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGdEQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUdELEVBQUUsQ0FBQyxDQUFTLEVBQUUsT0FBTyxHQUFDLElBQUk7UUFDdEIsSUFBSSxPQUFPO1lBQ1AsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sMERBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2hFLENBQUM7SUFHRCxRQUFRLENBQUMsQ0FBUyxFQUFFLE9BQU8sR0FBQyxJQUFJO1FBQzVCLElBQUksT0FBTztZQUNQLENBQUMsR0FBRyxJQUFJLGdEQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxPQUFPLDBEQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBR0QsWUFBWSxDQUFDLEtBQWMsRUFBRSxPQUFPLEdBQUMsSUFBSTtRQUVyQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDRCxPQUFPO1FBRVgsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL2xpbmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21haW4sIERvbWFpbjIgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiXHJcblxyXG4vLyBoZWF2eSB3ZWlnaHQgTGluZSBjbGFzc1xyXG5leHBvcnQgY2xhc3MgTGluZUN1cnZlMiB7XHJcblxyXG4gICAgcmVhZG9ubHkgZnJvbTogVmVjdG9yMjtcclxuICAgIHJlYWRvbmx5IHRvOiBWZWN0b3IyO1xyXG4gICAgcmVhZG9ubHkgdmVjdG9yOiBWZWN0b3IyO1xyXG4gICAgcmVhZG9ubHkgbm9ybWFsOiBWZWN0b3IyO1xyXG4gICAgcmVhZG9ubHkgYm91bmRzOiBEb21haW47XHJcbiAgICByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoZnJvbTogVmVjdG9yMiwgdG86IFZlY3RvcjIpIHtcclxuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xyXG4gICAgICAgIHRoaXMudG8gPSB0bztcclxuICAgICAgICB0aGlzLnZlY3RvciA9IHRvLnN1YmJlZCh0aGlzLmZyb20pO1xyXG4gICAgICAgIHRoaXMubm9ybWFsID0gdGhpcy52ZWN0b3Iubm9ybWFsaXplZCgpO1xyXG4gICAgICAgIHRoaXMuYm91bmRzID0gbmV3IERvbWFpbigwLCB0aGlzLnZlY3Rvci5sZW5ndGgoKSk7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLnZlY3Rvci5sZW5ndGgoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXQodDogbnVtYmVyLCBib3VuZGVkPXRydWUpIDogVmVjdG9yMiB7XHJcbiAgICAgICAgaWYgKGJvdW5kZWQpIFxyXG4gICAgICAgICAgICB0ID0gdGhpcy5ib3VuZHMuY29tZm9ybSh0KTtcclxuICAgICAgICByZXR1cm4gVmVjdG9yMi5mcm9tTGVycCh0aGlzLmZyb20sIHRoaXMudG8sIHQgLyB0aGlzLmxlbmd0aClcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXROb3JtYWwodDogbnVtYmVyLCBib3VuZGVkPXRydWUpIDogVmVjdG9yMiB7XHJcbiAgICAgICAgaWYgKGJvdW5kZWQpXHJcbiAgICAgICAgICAgIHQgPSBuZXcgRG9tYWluKDAsMSkuY29tZm9ybSh0KTtcclxuICAgICAgICByZXR1cm4gVmVjdG9yMi5mcm9tTGVycCh0aGlzLmZyb20sIHRoaXMudG8sIHQpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjbG9zZXN0UG9pbnQocG9pbnQ6IFZlY3RvcjIsIGJvdW5kZWQ9dHJ1ZSkgOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcclxuXHJcbiAgICAgICAgY29uc3QgZCA9IHRoaXMudmVjdG9yLmxlbmd0aCgpO1xyXG5cdFx0aWYgKGQgPT09IDApIFxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBsaW5lVG9Qb2ludCA9IHBvaW50LnN1YmJlZCh0aGlzLmZyb20pO1xyXG4gICAgICAgIGxldCBkb3QgPSBsaW5lVG9Qb2ludC5kb3QodGhpcy52ZWN0b3IpO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXQoZG90LCBib3VuZGVkKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/line.ts\n");

/***/ }),

/***/ "./src/geo/plane.ts":
/*!**************************!*\
  !*** ./src/geo/plane.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plane\": () => /* binding */ Plane\n/* harmony export */ });\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/statistics */ \"./src/math/statistics.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    plane.ts\r\n// author:  Jos Feenstra\r\n// purpose: definition of a 3d plane. \r\n// todo:    turn Center, Ihat, Jhat, Khat construction to an actual matrix\r\n\r\n\r\n\r\nclass Plane {\r\n    // _inverse!: Matrix4; // NOTE: currently im not caching this. Might be needed.\r\n    // NOTE : d is not really needed anymore...\r\n    constructor(m) {\r\n        this._matrix = m;\r\n    }\r\n    static fromPVV(a, v1, v2) {\r\n        // TODO check if we still need this -1 thing \r\n        let khat = v1.clone().cross(v2).normalize(); //.scale(-1);\r\n        let center = a.clone();\r\n        let ihat = v1.normalize();\r\n        let jhat = v1.clone().cross(khat);\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, khat);\r\n        return new Plane(mat);\r\n    }\r\n    static from3pt(a, b, c) {\r\n        let v1 = b.clone().sub(a);\r\n        let v2 = c.clone().sub(a);\r\n        return this.fromPVV(a, v1, v2);\r\n    }\r\n    static WorldXY() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY());\r\n    }\r\n    static WorldYZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static WorldXZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static fromLeastSquares(pts) {\r\n        let mean = pts.mean();\r\n        let cov = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.cov(pts);\r\n        let [eigValues, eigVectors] = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.eig(cov);\r\n        console.log(eigValues);\r\n        let biggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(0));\r\n        let secondBiggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(1));\r\n        return Plane.fromPVV(mean, biggestEigenVector, secondBiggestEigenVector);\r\n    }\r\n    static fromXYLeastSquares(pts) {\r\n        // quite specific, but this was needed.\r\n        let mean = pts.mean();\r\n        return Plane.WorldXY().transform(_math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(mean.x, mean.y, mean.z));\r\n    }\r\n    static planeMatrixFromVecs(c, i, j, k) {\r\n        return new _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4([\r\n            i.x, i.y, i.z, 0,\r\n            j.x, j.y, j.z, 0,\r\n            k.x, k.y, k.z, 0,\r\n            c.x, c.y, c.z, 1,\r\n        ]);\r\n    }\r\n    get ihat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(0)); }\r\n    get jhat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(1)); }\r\n    get khat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(2)); }\r\n    get center() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(3)); }\r\n    get matrix() { return this._matrix.clone(); }\r\n    get normal() { return this.khat; }\r\n    get d() { return this.closestPoint(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero())[1]; }\r\n    set ihat(v) { this._matrix.setRow(0, [v.x, v.y, v.z, 0]); }\r\n    set jhat(v) { this._matrix.setRow(1, [v.x, v.y, v.z, 0]); }\r\n    set khat(v) { this._matrix.setRow(2, [v.x, v.y, v.z, 0]); }\r\n    set center(v) { this._matrix.setRow(3, [v.x, v.y, v.z, 1]); }\r\n    set matrix(m) { this._matrix = m; }\r\n    get inverse() { return this._matrix.inverse(); }\r\n    clone() {\r\n        return new Plane(this._matrix.clone());\r\n    }\r\n    transform(m) {\r\n        this._matrix = this._matrix.multiply(m);\r\n        return this;\r\n    }\r\n    moveTo(origin) {\r\n        this.center = origin;\r\n        return this;\r\n    }\r\n    // NOTE: pulling is inefficient since i do not cache the inverse.\r\n    pullToPlane(p) {\r\n        return this.inverse.multiplyVector(p);\r\n    }\r\n    pushToWorld(p) {\r\n        return this.matrix.multiplyVector(p);\r\n    }\r\n    closestPoint(p) {\r\n        let pulled = this.pullToPlane(p);\r\n        let distance = pulled.z;\r\n        pulled.z = 0;\r\n        let vec = this.pushToWorld(pulled);\r\n        return [vec, distance];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geo/plane.ts\n");

/***/ }),

/***/ "./src/geo/rectangle.ts":
/*!******************************!*\
  !*** ./src/geo/rectangle.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Rectangle2\": () => /* binding */ Rectangle2,\n/* harmony export */   \"Rectangle3\": () => /* binding */ Rectangle3\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n    to3D() {\r\n        let mat4 = this.pose.toMat4();\r\n        return new Rectangle3(new _plane__WEBPACK_IMPORTED_MODULE_1__.Plane(mat4), this.domain);\r\n    }\r\n}\r\nclass Rectangle3 {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    getCorners() {\r\n        let corners = this.domain.corners();\r\n        let corners3 = corners.map((c) => this.plane.pushToWorld(c.to3D()));\r\n        return corners3;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2dlby9yZWN0YW5nbGUudHM/MTRiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRXlDO0FBV1Q7QUFFekIsTUFBTSxVQUFVO0lBS25CLFlBQVksSUFBYSxFQUFFLE1BQWU7UUFDdEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksaURBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsV0FBVztRQUVQLElBQUksS0FBSyxHQUFHO1lBQ1IsSUFBSSxpREFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0MsSUFBSSxpREFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0MsSUFBSSxpREFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0MsSUFBSSxpREFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDbEQsQ0FBQztRQUVGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlCLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSx5Q0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0o7QUFFTSxNQUFNLFVBQVU7SUFLbkIsWUFBWSxLQUFZLEVBQUUsTUFBZTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwRSxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL3JlY3RhbmdsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbWFpbjIgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgTWF0cml4MywgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcblxyXG4vLyBiYXNpYyAyZCByZWN0YW5nbGVcclxuLy8gYSBNYXRyaXgzIGFuZCBEb21haW4yIGlzIHVzZWQuIFxyXG4vLyB0aGlzIHdheSwgYSByZWN0YW5nbGUgY2FuIGJlIHJvdGF0ZWQgYXJvdW5kIGFuIGFyYmlydGFyeSBwb2ludCBpdCByZWdhcmRzIGFzIGl0cyBjZW50ZXIuXHJcbi8vIG5hbWU6ICAgIGN1YmUudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IFJlcHJlc2VudHMgYSBjdWJlIGluIDNkIHNwYWNlLCBpbiBhIGNlcnRhaW4gcG9zZS4gXHJcblxyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IEdlbyB9IGZyb20gXCIuL2dlb1wiO1xyXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuL3BsYW5lXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVjdGFuZ2xlMiB7XHJcblxyXG4gICAgcG9zZTogTWF0cml4MztcclxuICAgIGRvbWFpbjogRG9tYWluMjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwb3NlOiBNYXRyaXgzLCBkb21haW46IERvbWFpbjIpIHtcclxuICAgICAgICB0aGlzLnBvc2UgPSBwb3NlO1xyXG4gICAgICAgIHRoaXMuZG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGNlbnRlcigpIDogVmVjdG9yMiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zZS50cmFuc2Zvcm1WZWN0b3IobmV3IFZlY3RvcjIoMCwgMCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZlcnRpY2VzKCkgOiBWZWN0b3IyW10ge1xyXG5cclxuICAgICAgICBsZXQgdmVydHMgPSBbXHJcbiAgICAgICAgICAgIG5ldyBWZWN0b3IyKHRoaXMuZG9tYWluLngudDAsIHRoaXMuZG9tYWluLnkudDApLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yMih0aGlzLmRvbWFpbi54LnQxLCB0aGlzLmRvbWFpbi55LnQwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcjIodGhpcy5kb21haW4ueC50MCwgdGhpcy5kb21haW4ueS50MSksXHJcbiAgICAgICAgICAgIG5ldyBWZWN0b3IyKHRoaXMuZG9tYWluLngudDEsIHRoaXMuZG9tYWluLnkudDEpLFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHZlcnRzLmZvckVhY2goKHYpID0+IHRoaXMucG9zZS50cmFuc2Zvcm1WZWN0b3IodikpO1xyXG4gICAgICAgIHJldHVybiB2ZXJ0cztcclxuICAgIH1cclxuXHJcbiAgICB0bzNEKCk6IFJlY3RhbmdsZTMge1xyXG4gICAgICAgIGxldCBtYXQ0ID0gdGhpcy5wb3NlLnRvTWF0NCgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlMyhuZXcgUGxhbmUobWF0NCksIHRoaXMuZG9tYWluKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlY3RhbmdsZTMge1xyXG4gICAgXHJcbiAgICBwbGFuZTogUGxhbmVcclxuICAgIGRvbWFpbjogRG9tYWluMlxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYW5lOiBQbGFuZSwgZG9tYWluOiBEb21haW4yKSB7XHJcbiAgICAgICAgdGhpcy5wbGFuZSA9IHBsYW5lO1xyXG4gICAgICAgIHRoaXMuZG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvcm5lcnMoKSA6IFZlY3RvcjNbXSB7XHJcbiAgICAgICAgbGV0IGNvcm5lcnMgPSB0aGlzLmRvbWFpbi5jb3JuZXJzKCk7XHJcbiAgICAgICAgbGV0IGNvcm5lcnMzID0gY29ybmVycy5tYXAoKGMpID0+IHRoaXMucGxhbmUucHVzaFRvV29ybGQoYy50bzNEKCkpKTtcclxuICAgICAgICByZXR1cm4gY29ybmVyczM7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/rectangle.ts\n");

/***/ }),

/***/ "./src/geo/triangle.ts":
/*!*****************************!*\
  !*** ./src/geo/triangle.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Triangle2\": () => /* binding */ Triangle2,\n/* harmony export */   \"Triangle3\": () => /* binding */ Triangle3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line */ \"./src/geo/line.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\n\r\n\r\nclass Triangle2 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector2Array.fromList([this.a, this.b, this.c]);\r\n    }\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.scaled(bari.x);\r\n        let b = this.b.scaled(bari.y);\r\n        let c = this.c.scaled(bari.z);\r\n        return a.add(b).add(c);\r\n    }\r\n    closestPoint(point) {\r\n        // figure out roughly where the point is. \r\n        // note: \r\n        let ab = point.sign(this.a, this.b);\r\n        let bc = point.sign(this.b, this.c);\r\n        let ca = point.sign(this.c, this.a);\r\n        // if its fully within, return it!\r\n        if ((ab < 0 && bc < 0 && ca < 0) ||\r\n            (ab > 0 && bc > 0 && ca > 0)) {\r\n            console.log(\"fully inside!\");\r\n            return point;\r\n        }\r\n        else {\r\n            let abs = Math.abs(ab);\r\n            let bcs = Math.abs(bc);\r\n            let cas = Math.abs(ca);\r\n            if (abs < bcs && abs < cas) {\r\n                // ab\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.a, this.b).closestPoint(point);\r\n            }\r\n            else if (bcs < cas) {\r\n                // bc\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.b, this.c).closestPoint(point);\r\n            }\r\n            else {\r\n                // ca\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.c, this.a).closestPoint(point);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Triangle3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    getPlane() {\r\n        return _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.from3pt(this.a, this.b, this.c);\r\n    }\r\n    to2D(plane = _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.WorldXY()) {\r\n        return new Triangle2(plane.pullToPlane(this.a).to2D(), plane.pullToPlane(this.b).to2D(), plane.pullToPlane(this.c).to2D());\r\n    }\r\n    closestPoint(point) {\r\n        let plane = this.getPlane();\r\n        let [cp, _] = plane.closestPoint(point);\r\n        let planeCP = plane.pullToPlane(cp);\r\n        let planeTriangle = this.to2D(plane);\r\n        return point;\r\n    }\r\n    // Transcribed from Christer Ericson's Real-Time Collision Detection:\r\n    // http://realtimecollisiondetection.net/\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.clone().scale(bari.x);\r\n        let b = this.b.clone().scale(bari.y);\r\n        let c = this.c.clone().scale(bari.z);\r\n        return a.added(b).add(c);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geo/triangle.ts\n");

/***/ }),

/***/ "./src/img/Image.ts":
/*!**************************!*\
  !*** ./src/img/Image.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeonImage\": () => /* binding */ GeonImage\n/* harmony export */ });\n// image.ts\r\n// author: Jos Feenstra\r\n// purpose: wrapper around the ImageData class, \r\n// - in order to get more functionality out of it\r\n// \r\n// note: named GeonImage to not collide with Image classes.\r\n// TODO : x and y are not the same as i and j, and used inconsistently.\r\n// fix this. \r\nconst acceptedKernels = [3, 5, 7, 9];\r\nclass GeonImage {\r\n    constructor(width, height, pixelSize = 4) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixelSize = pixelSize;\r\n        this.data = new Uint8ClampedArray(this.width * this.height * this.pixelSize);\r\n        this.data.fill(0);\r\n    }\r\n    static fromImageData(id) {\r\n        let image = new GeonImage(id.width, id.height);\r\n        image.setData(id.data);\r\n        return image;\r\n    }\r\n    toImageData() {\r\n        // imagedata requires pixelsize of 4.\r\n        if (this.pixelSize != 4)\r\n            throw \"pixelsize must be 4 for toImageData to work\";\r\n        return new ImageData(this.data, this.width, this.height);\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this.height * this.width * this.pixelSize))\r\n            throw \"data.length does not match width * height \";\r\n        this.data = data;\r\n    }\r\n    clone() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        image.setData(this.data);\r\n        return image;\r\n    }\r\n    fill(pixel) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, pixel);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    fillEvery(filler) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, filler());\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    includes(x, y) {\r\n        return (x < this.width && x >= 0 && y < this.height && y >= 0);\r\n    }\r\n    set(i, j, pixel) {\r\n        this.data[4 * ((j * this.width + i))] = pixel[0];\r\n        this.data[4 * ((j * this.width + i)) + 1] = pixel[1];\r\n        this.data[4 * ((j * this.width + i)) + 2] = pixel[2];\r\n        this.data[4 * ((j * this.width + i)) + 3] = pixel[3];\r\n    }\r\n    get(i, j) {\r\n        return [\r\n            this.data[4 * (j * this.width + i)],\r\n            this.data[4 * (j * this.width + i) + 1],\r\n            this.data[4 * (j * this.width + i) + 2],\r\n            this.data[4 * (j * this.width + i) + 3]\r\n        ];\r\n    }\r\n    flipHor() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                let jMirror = this.width - 1 - j;\r\n                image.set(j, i, this.get(jMirror, i));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    flipVer() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            let iMirror = this.height - 1 - i;\r\n            for (let j = 0; j < this.width; j++) {\r\n                image.set(j, i, this.get(j, iMirror));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    applyKernel(kernel) {\r\n        // determine kernel size\r\n        let size = kernel.count();\r\n        let radius = (size / 2) - 0.5;\r\n        let image = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                let pixel = this.getWithKernel(i, j, kernel, radius);\r\n                image.set(i - radius, j - radius, pixel);\r\n            }\r\n        }\r\n        return image; // succes \r\n    }\r\n    getMinMax() {\r\n        // get the minimum and maximum pixel value\r\n        // assumes pixelsize = 1\r\n        let min = Infinity;\r\n        let max = 0;\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (this.data[i] < min) {\r\n                min = this.data[i];\r\n            }\r\n            else if (this.data[i] > max) {\r\n                max = this.data[i];\r\n            }\r\n        }\r\n        return [min, max];\r\n    }\r\n    applyThreshold(lower, upper) {\r\n        return this.apply((x, y) => {\r\n            let pixel = this.get(x, y);\r\n            if (pixel[0] < lower) {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            else if (pixel[0] > upper) {\r\n                return [255, 255, 255, 255];\r\n            }\r\n            else {\r\n                return pixel;\r\n            }\r\n        });\r\n    }\r\n    apply(filler) {\r\n        let copy = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                copy.set(x, y, filler(x, y));\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    applyNMS() {\r\n        // determine kernel size\r\n        let size = 3;\r\n        let radius = (size / 2) - 0.5;\r\n        let copy = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                // let pixel = this.getWithKernel(i, j, kernel, radius)\r\n                // copy.set(i-radius, j-radius, pixel);\r\n            }\r\n        }\r\n        // img.eachPixel(3, function(x, y, c, n) {\r\n        //     if (n[1][1] > n[0][1] && n[1][1] > n[2][1]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][2] && n[1][1] > n[2][0]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[1][0] && n[1][1] > n[1][2]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][0] && n[1][1] > n[2][2]) {\r\n        //         return copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         return copy.data[x][y] = 0;\r\n        //     }\r\n        // });\r\n        return copy;\r\n    }\r\n    getWithKernel(i, j, kernel, radius) {\r\n        // kernel space\r\n        let sum = [0, 0, 0, 255];\r\n        let [dimx, dimy] = kernel.getDimensions();\r\n        for (let ki = 0; ki < dimx; ki++) {\r\n            for (let kj = 0; kj < dimy; kj++) {\r\n                let weight = kernel.get(ki, kj);\r\n                let pixel = this.get(i + ki - radius, j + kj - radius);\r\n                for (let i = 0; i < 3; i++) {\r\n                    sum[i] += pixel[i] * weight;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    setAplha(a) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                this.set(x, y, [pixel[0], pixel[1], pixel[2], a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        // scale the image to a new width and height, using nearest neighbour\r\n        return this.resize(Math.round(this.width * scaleX), Math.round(this.height * scaleY));\r\n    }\r\n    resize(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        const x_factor = (1 / image.width) * old.width;\r\n        const y_factor = (1 / image.height) * old.height;\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let pixel = old.get(Math.round(x * x_factor), Math.round(y * y_factor));\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    // add borders till this size is achieved\r\n    buffer(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // console.log(x, y);\r\n                let pixel = old.includes(x, y) ? old.get(x, y) : [0, 0, 0, 255];\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        // for (let y = 0; y < height; y++) {\r\n        //     for (let x = 0; x < width; x++) {\r\n        //         image.set(x, y, [x,0,0,255]);\r\n        //     }\r\n        // }\r\n        // build some simple image instead to test\r\n        // for (let i = 0; i < image.data.length / 4; i++) {\r\n        //     image.data[i*4 + 0] = i % 255;\r\n        //     image.data[i*4 + 1] = 0;\r\n        //     image.data[i*4 + 2] = 0;\r\n        //     image.data[i*4 + 3] = 255;\r\n        // }\r\n        return image;\r\n    }\r\n    trimWithDomain(dom) {\r\n        const x1 = Math.round(dom.x.t0);\r\n        const x2 = Math.round(dom.x.t1);\r\n        const y1 = Math.round(dom.y.t0);\r\n        const y2 = Math.round(dom.y.t1);\r\n        return this.trim(x1, y1, x2, y2);\r\n    }\r\n    trim(x1, y1, x2, y2) {\r\n        // return a hardcopy of this particular window\r\n        const imageWidth = x2 - x1;\r\n        const imageHeight = y2 - y1;\r\n        const image = new GeonImage(imageWidth, imageHeight, this.pixelSize);\r\n        for (let y = 0; y < imageHeight; y++) {\r\n            for (let x = 0; x < imageWidth; x++) {\r\n                let pixel = this.get(x + x1, y + y1);\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toGreyscale() {\r\n        if (this.pixelSize != 4)\r\n            throw \"please, only use this when pixelsize is 4\";\r\n        let image = new GeonImage(this.width, this.height, 4);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                let avg = (pixel[0] + pixel[1] + pixel[2]) / 3;\r\n                image.set(x, y, [avg, avg, avg, 255]);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toRGBA() {\r\n        // if (this.pixelSize != 1) throw \"please, only use this when pixelsize is 1\"\r\n        return this;\r\n        // let image = new GeonImage(this.width, this.height, 4);\r\n        // for (let y = 0; y < this.height; y++) {\r\n        //     for (let x = 0; x < this.width; x++) {\r\n        //         let pixel = this.get(x,y);\r\n        //         let val = pixel[0];\r\n        //         image.set(x, y, [val, val, val, 255]);\r\n        //     }\r\n        // }\r\n        // return image;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/Image.ts\n");

/***/ }),

/***/ "./src/img/kernels.ts":
/*!****************************!*\
  !*** ./src/img/kernels.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Kernels\": () => /* binding */ Kernels\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated \r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, (kernel.get(i, j) / sum));\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 1, 1\r\n]).forEachValue((i) => i * 1 / 9);\r\nKernels.SmoothKernel5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1\r\n]).forEachValue((v) => v * 1 / 25);\r\nKernels.Gauss5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    2, 4, 5, 4, 2,\r\n    4, 9, 12, 9, 4,\r\n    5, 12, 15, 12, 5,\r\n    4, 9, 12, 9, 4,\r\n    2, 4, 5, 4, 2,\r\n]).forEachValue((v) => v * 1 / 159);\r\nKernels.TestKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    0, 0, 0,\r\n    -1, 0, 1,\r\n]);\r\nKernels.SobelLeft = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 2, 1,\r\n    0, 0, 0,\r\n    -1, -2, -1,\r\n]);\r\nKernels.SobelRight = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    -1, -2, -1,\r\n    0, 0, 0,\r\n    1, 2, 1,\r\n]);\r\nKernels.SobelUp = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    2, 0, -2,\r\n    1, 0, -1,\r\n]);\r\nKernels.SobelDown = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    -1, 0, 1,\r\n    -2, 0, 2,\r\n    -1, 0, 1,\r\n]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/kernels.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sfered_eye_finder_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sfered/eye-finder-app */ \"./src/sfered/eye-finder-app.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _app_demos_dot_app3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app-demos/dot-app3 */ \"./src/app-demos/dot-app3.ts\");\n/* harmony import */ var _app_obj_loader_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/obj-loader-app */ \"./src/app/obj-loader-app.ts\");\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core */ \"./src/core.ts\");\n/* harmony import */ var _app_stat_app__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app/stat-app */ \"./src/app/stat-app.ts\");\n/* harmony import */ var _app_geometry_app__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./app/geometry-app */ \"./src/app/geometry-app.ts\");\n/* harmony import */ var _app_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./app/mesh-inspector-app */ \"./src/app/mesh-inspector-app.ts\");\n/* harmony import */ var _app_swap_app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app/swap-app */ \"./src/app/swap-app.ts\");\n// Name:    index.ts\r\n// Author:  Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar core;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById(\"canvas\");\r\n    let video = document.getElementById(\"camera\");\r\n    let ui = document.getElementById(\"interface\");\r\n    let cameraOn = document.getElementById(\"camera-on\");\r\n    let cameraStop = document.getElementById(\"camera-off\");\r\n    let buttonPredict = document.getElementById(\"predict\");\r\n    // init core \r\n    let gl = _render_renderer__WEBPACK_IMPORTED_MODULE_1__.Renderer.initWebglContext(canvas);\r\n    core = new _core__WEBPACK_IMPORTED_MODULE_4__.Core(canvas, gl, ui);\r\n    // init swap app\r\n    let appCollection = [\r\n        _app_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_7__.MeshInspectorApp,\r\n        _sfered_eye_finder_app__WEBPACK_IMPORTED_MODULE_0__.EyeFinderApp,\r\n        _app_geometry_app__WEBPACK_IMPORTED_MODULE_6__.GeometryApp,\r\n        _app_demos_dot_app3__WEBPACK_IMPORTED_MODULE_2__.DotApp3,\r\n        _app_obj_loader_app__WEBPACK_IMPORTED_MODULE_3__.ObjLoaderApp,\r\n        _app_stat_app__WEBPACK_IMPORTED_MODULE_5__.StatApp,\r\n    ];\r\n    let swapApp = new _app_swap_app__WEBPACK_IMPORTED_MODULE_8__.SwapApp(gl, core, appCollection);\r\n    core.addApp(swapApp);\r\n    swapApp.swap(0);\r\n    // a specific app dealing with webcams & other things\r\n    // addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    requestAnimationFrame(loop);\r\n}\r\nwindow.addEventListener(\"load\", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBRzhCO0FBR1I7QUFFRTtBQUNLO0FBQ3RCO0FBQ1c7QUFDUTtBQUVXO0FBQ25CO0FBRXpDLElBQUksSUFBVSxDQUFDO0FBRWYsU0FBUyxJQUFJO0lBRVQsNENBQTRDO0lBQzVDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0lBQ3JFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixDQUFDO0lBQ25FLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFvQixDQUFDO0lBQ2pFLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUF1QixDQUFDO0lBQzFFLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUF1QixDQUFDO0lBQzdFLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUF1QixDQUFDO0lBRTdFLGFBQWE7SUFDYixJQUFJLEVBQUUsR0FBRyx1RUFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxJQUFJLEdBQUcsSUFBSSx1Q0FBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFaEMsZ0JBQWdCO0lBQ2hCLElBQUksYUFBYSxHQUFHO1FBQ2hCLHFFQUFnQjtRQUNoQixnRUFBWTtRQUNaLDBEQUFXO1FBQ1gsd0RBQU87UUFDUCw2REFBWTtRQUNaLGtEQUFPO0tBQ1Y7SUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLGtEQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEIscURBQXFEO0lBQ3JELDhDQUE4QztJQUU5QyxnQkFBZ0I7SUFDaEIsU0FBUyxJQUFJO1FBQ1QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gseURBQXlEO1lBQ3pELE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBQ0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtJQUM1QixJQUFJLEVBQUUsQ0FBQztBQUNYLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyIsImZpbGUiOiIuL3NyYy9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5hbWU6ICAgIGluZGV4LnRzXHJcbi8vIEF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBQdXJwb3NlOiBFbnRyeSBwb2ludFxyXG5cclxuaW1wb3J0IHthZGRXZWJjYW1BcHBXaGVuUmVhZHksIFdlYmNhbUFwcH0gZnJvbSBcIi4vYXBwL3dlYmNhbS1hcHBcIjtcclxuaW1wb3J0IHtFeWVGaW5kZXJBcHB9IGZyb20gXCIuL3NmZXJlZC9leWUtZmluZGVyLWFwcFwiO1xyXG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4vc3lzdGVtL2lucHV0LXN0YXRlXCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcC9hcHBcIjtcclxuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi9yZW5kZXIvcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgRG90QXBwMiB9IGZyb20gXCIuL2FwcC1kZW1vcy9kb3QtYXBwMlwiO1xyXG5pbXBvcnQgeyBEb3RBcHAzIH0gZnJvbSBcIi4vYXBwLWRlbW9zL2RvdC1hcHAzXCI7XHJcbmltcG9ydCB7IE9iakxvYWRlckFwcCB9IGZyb20gXCIuL2FwcC9vYmotbG9hZGVyLWFwcFwiO1xyXG5pbXBvcnQgeyBDb3JlIH0gZnJvbSBcIi4vY29yZVwiO1xyXG5pbXBvcnQgeyBTdGF0QXBwIH0gZnJvbSBcIi4vYXBwL3N0YXQtYXBwXCI7XHJcbmltcG9ydCB7IEdlb21ldHJ5QXBwIH0gZnJvbSBcIi4vYXBwL2dlb21ldHJ5LWFwcFwiO1xyXG5pbXBvcnQgeyBNYXJjaGluZ0N1YmVBcHAgfSBmcm9tIFwiLi9hcHAvbWFyY2hpbmctY3ViZS1hcHBcIjtcclxuaW1wb3J0IHsgTWVzaEluc3BlY3RvckFwcCB9IGZyb20gXCIuL2FwcC9tZXNoLWluc3BlY3Rvci1hcHBcIjtcclxuaW1wb3J0IHsgU3dhcEFwcCB9IGZyb20gXCIuL2FwcC9zd2FwLWFwcFwiO1xyXG5cclxudmFyIGNvcmU6IENvcmU7XHJcblxyXG5mdW5jdGlvbiBtYWluKCkge1xyXG5cclxuICAgIC8vIGdldCByZWZlcmVuY2VzIG9mIGFsbCBpdGVtcyBvbiB0aGUgY2FudmFzXHJcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikhIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgbGV0IHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFcIikhIGFzIEhUTUxWaWRlb0VsZW1lbnQ7XHJcbiAgICBsZXQgdWkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludGVyZmFjZVwiKSAgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBsZXQgY2FtZXJhT24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYS1vblwiKSEgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBsZXQgY2FtZXJhU3RvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhLW9mZlwiKSEgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBsZXQgYnV0dG9uUHJlZGljdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJlZGljdFwiKSEgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBcclxuICAgIC8vIGluaXQgY29yZSBcclxuICAgIGxldCBnbCA9IFJlbmRlcmVyLmluaXRXZWJnbENvbnRleHQoY2FudmFzKTtcclxuICAgIGNvcmUgPSBuZXcgQ29yZShjYW52YXMsIGdsLCB1aSk7XHJcblxyXG4gICAgLy8gaW5pdCBzd2FwIGFwcFxyXG4gICAgbGV0IGFwcENvbGxlY3Rpb24gPSBbXHJcbiAgICAgICAgTWVzaEluc3BlY3RvckFwcCxcclxuICAgICAgICBFeWVGaW5kZXJBcHAsXHJcbiAgICAgICAgR2VvbWV0cnlBcHAsXHJcbiAgICAgICAgRG90QXBwMyxcclxuICAgICAgICBPYmpMb2FkZXJBcHAsXHJcbiAgICAgICAgU3RhdEFwcCxcclxuICAgIF1cclxuXHJcbiAgICBsZXQgc3dhcEFwcCA9IG5ldyBTd2FwQXBwKGdsLCBjb3JlLCBhcHBDb2xsZWN0aW9uKTtcclxuICAgIGNvcmUuYWRkQXBwKHN3YXBBcHApO1xyXG4gICAgc3dhcEFwcC5zd2FwKDApO1xyXG5cclxuICAgIC8vIGEgc3BlY2lmaWMgYXBwIGRlYWxpbmcgd2l0aCB3ZWJjYW1zICYgb3RoZXIgdGhpbmdzXHJcbiAgICAvLyBhZGRXZWJjYW1BcHBXaGVuUmVhZHkoY29yZSwgY2FudmFzLCB2aWRlbyk7XHJcblxyXG4gICAgLy8gaW5maW5pdGUgbG9vcFxyXG4gICAgZnVuY3Rpb24gbG9vcCgpIHtcclxuICAgICAgICBpZiAoY29yZS5TVE9QKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gOiBub3RpZnkgdGhlIFVzZXIgdGhhdCB3ZSBoYXZlIHN0b3BwZWQgcnVubmluZy4uLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvcmUudXBkYXRlKCk7XHJcbiAgICAgICAgY29yZS5kcmF3KCk7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG4gICAgfVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG59XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcclxuICAgIG1haW4oKTtcclxufSwgZmFsc2UpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/math/const.ts":
/*!***************************!*\
  !*** ./src/math/const.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Const\": () => /* binding */ Const\n/* harmony export */ });\n// name:    const.ts\r\n// author:  Jos Feenstra\r\n// purpose: Certain math constances\r\n// todo:    These are somewhat like the settings of the entire application. This could be expanded upon (json's, in-app functionalitiy)\r\nclass Const {\r\n    static IsRouglyZero(value) {\r\n        return Math.abs(value) < this.TOLERANCE;\r\n    }\r\n}\r\nConst.TOLERANCE = 0.0001; // tolerance used for determining if 1 value is the same as some other value, relatively speaking\r\nConst.TOL_SQUARED = Math.pow(Const.TOLERANCE, 2);\r\n// ----- Line Render Settings ----- \r\nConst.PLANE_RENDER_LINECOUNT = 9;\r\nConst.PLANE_RENDER_LINEDISTANCE = .3;\r\nConst.CIRCLE_SEGMENTS = 100;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL21hdGgvY29uc3QudHM/ZjY0MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixtQ0FBbUM7QUFDbkMsdUlBQXVJO0FBRWhJLE1BQU0sS0FBSztJQVdkLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBYTtRQUM3QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUM1QyxDQUFDOztBQVpNLGVBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxpR0FBaUc7QUFDckgsaUJBQVcsR0FBRyxjQUFLLENBQUMsU0FBUyxFQUFJLENBQUMsRUFBQztBQUUxQyxvQ0FBb0M7QUFDN0IsNEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLCtCQUF5QixHQUFHLEVBQUUsQ0FBQztBQUUvQixxQkFBZSxHQUFHLEdBQUcsQ0FBQyIsImZpbGUiOiIuL3NyYy9tYXRoL2NvbnN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgY29uc3QudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IENlcnRhaW4gbWF0aCBjb25zdGFuY2VzXHJcbi8vIHRvZG86ICAgIFRoZXNlIGFyZSBzb21ld2hhdCBsaWtlIHRoZSBzZXR0aW5ncyBvZiB0aGUgZW50aXJlIGFwcGxpY2F0aW9uLiBUaGlzIGNvdWxkIGJlIGV4cGFuZGVkIHVwb24gKGpzb24ncywgaW4tYXBwIGZ1bmN0aW9uYWxpdGl5KVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnN0IHtcclxuICAgIHN0YXRpYyBUT0xFUkFOQ0UgPSAwLjAwMDE7IC8vIHRvbGVyYW5jZSB1c2VkIGZvciBkZXRlcm1pbmluZyBpZiAxIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHNvbWUgb3RoZXIgdmFsdWUsIHJlbGF0aXZlbHkgc3BlYWtpbmdcclxuICAgIHN0YXRpYyBUT0xfU1FVQVJFRCA9IENvbnN0LlRPTEVSQU5DRSAqKiAyO1xyXG5cclxuICAgIC8vIC0tLS0tIExpbmUgUmVuZGVyIFNldHRpbmdzIC0tLS0tIFxyXG4gICAgc3RhdGljIFBMQU5FX1JFTkRFUl9MSU5FQ09VTlQgPSA5O1xyXG4gICAgc3RhdGljIFBMQU5FX1JFTkRFUl9MSU5FRElTVEFOQ0UgPSAuMztcclxuXHJcbiAgICBzdGF0aWMgQ0lSQ0xFX1NFR01FTlRTID0gMTAwO1xyXG5cclxuXHJcbiAgICBzdGF0aWMgSXNSb3VnbHlaZXJvKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnModmFsdWUpIDwgdGhpcy5UT0xFUkFOQ0U7XHJcbiAgICB9XHJcbn0gXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/const.ts\n");

/***/ }),

/***/ "./src/math/domain.ts":
/*!****************************!*\
  !*** ./src/math/domain.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Domain\": () => /* binding */ Domain,\n/* harmony export */   \"Domain2\": () => /* binding */ Domain2,\n/* harmony export */   \"Domain3\": () => /* binding */ Domain3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// domain.ts\r\n// \r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//          \r\n\r\n\r\nclass Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        // if (t0 > t1) console.error(\"created a domain with negative size.\");\r\n        // if (t0 == t1) console.warn(\"created a domain with size is 0.0. could cause problems\");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain 'count' number of times \r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of 'step'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    // comform a number to the bound\r\n    comform(value) {\r\n        if (value < this.t0) {\r\n            return this.t0;\r\n        }\r\n        else if (value > this.t1) {\r\n            return this.t1;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nclass Domain2 {\r\n    constructor(x = new Domain(), y = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain2(Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new Domain2(new Domain(x0, x1), new Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new Domain2(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw \"need 4 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners() {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass Domain3 {\r\n    constructor(x = new Domain(), y = new Domain(), z = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new Domain3(new Domain(x0, x1), new Domain(y0, y1), new Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain3(Domain.fromRadius(r), Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new Domain3(Domain.fromRadius(rx), Domain.fromRadius(ry), Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new Domain3(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)), Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw \"need 6 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(matrix.multiplyVector(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(x, y, z)));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/domain.ts\n");

/***/ }),

/***/ "./src/math/math.ts":
/*!**************************!*\
  !*** ./src/math/math.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GMath\": () => /* binding */ GMath\n/* harmony export */ });\n// purpose: simple operations with only numbers\r\nclass GMath {\r\n    // make sure 'value' is more than 'lower', and less than 'upper'\r\n    static clamp(value, lower, upper) {\r\n        return Math.min(Math.max(value, lower), upper);\r\n    }\r\n    static fade(t) {\r\n        // Fade function as defined by Ken Perlin.  This eases coordinate values\r\n        // so that they will ease towards integral values.  This ends up smoothing\r\n        // the final output.\r\n        return t * t * t * (t * (t * 6 - 15) + 10); // 6t^5 - 15t^4 + 10t^3\r\n    }\r\n    static lerp(a, b, x) {\r\n        return a + x * (b - a);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL21hdGgvbWF0aC50cz8wN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwrQ0FBK0M7QUFLeEMsTUFBTSxLQUFLO0lBRWQsZ0VBQWdFO0lBQ2hFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBYSxFQUFFLEtBQWEsRUFBRSxLQUFhO1FBQ3BELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFTO1FBRXZCLHdFQUF3RTtRQUN4RSwwRUFBMEU7UUFDMUUsb0JBQW9CO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQVMsdUJBQXVCO0lBQzVFLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztRQUUxQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUdEIiwiZmlsZSI6Ii4vc3JjL21hdGgvbWF0aC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHB1cnBvc2U6IHNpbXBsZSBvcGVyYXRpb25zIHdpdGggb25seSBudW1iZXJzXHJcbiBcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdNYXRoIHtcclxuICAgIFxyXG4gICAgLy8gbWFrZSBzdXJlICd2YWx1ZScgaXMgbW9yZSB0aGFuICdsb3dlcicsIGFuZCBsZXNzIHRoYW4gJ3VwcGVyJ1xyXG4gICAgc3RhdGljIGNsYW1wKHZhbHVlOiBudW1iZXIsIGxvd2VyOiBudW1iZXIsIHVwcGVyOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIGxvd2VyKSwgdXBwZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmYWRlKHQ6IG51bWJlcikgOiBudW1iZXJcclxuXHR7XHJcblx0XHQvLyBGYWRlIGZ1bmN0aW9uIGFzIGRlZmluZWQgYnkgS2VuIFBlcmxpbi4gIFRoaXMgZWFzZXMgY29vcmRpbmF0ZSB2YWx1ZXNcclxuXHRcdC8vIHNvIHRoYXQgdGhleSB3aWxsIGVhc2UgdG93YXJkcyBpbnRlZ3JhbCB2YWx1ZXMuICBUaGlzIGVuZHMgdXAgc21vb3RoaW5nXHJcblx0XHQvLyB0aGUgZmluYWwgb3V0cHV0LlxyXG5cdFx0cmV0dXJuIHQgKiB0ICogdCAqICh0ICogKHQgKiA2IC0gMTUpICsgMTApOyAgICAgICAgIC8vIDZ0XjUgLSAxNXReNCArIDEwdF4zXHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgeDogbnVtYmVyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBhICsgeCAqIChiIC0gYSk7XHJcblx0fVxyXG5cclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/math/math.ts\n");

/***/ }),

/***/ "./src/math/matrix.ts":
/*!****************************!*\
  !*** ./src/math/matrix.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix3\": () => /* binding */ Matrix3,\n/* harmony export */   \"Matrix4\": () => /* binding */ Matrix4\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE: \r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix3 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([\r\n            2 / width, 0, 0,\r\n            0, -2 / height, 0,\r\n            -1, 1, 1,\r\n        ]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1,\r\n        ]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([\r\n            sx, 0, 0,\r\n            0, sy, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    toMat4() {\r\n        let d = this.data;\r\n        return new Matrix4([\r\n            d[0], d[1], 0, d[2],\r\n            d[3], d[4], 0, d[5],\r\n            0, 0, 1, 0,\r\n            d[6], d[7], 0, d[8],\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3's \r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here, \r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00, -d * t10, d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix4 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    clone() {\r\n        return Matrix4.newCopy(this);\r\n    }\r\n    multiplied(other) {\r\n        // NOTE: i swapped a and b, this makes more sense to me, but i could be wrong about it...\r\n        const a = other.data;\r\n        const b = this.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    multiply(other) {\r\n        this.data = this.multiplied(other).data;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = 2 * near / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 * near / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            tx, ty, tz, 1\r\n        ]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix \r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([\r\n            sx, 0, 0, 0,\r\n            0, sy, 0, 0,\r\n            0, 0, sz, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(data[0], data[1], data[2]);\r\n    }\r\n    multiplyVectors(other) {\r\n        // dumb way\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = other.getVector(i);\r\n            vec = this.multiplyVector(vec);\r\n            other.setVector(i, vec);\r\n        }\r\n        return other;\r\n        // smart way\r\n        // let matrix = new Vector3Array(other.count());\r\n        // // for every row\r\n        // for (var r = 0; r < other.count(); r++) {\r\n        //     // for every item in row\r\n        //     for (var c = 0; c < 3; ++c) {\r\n        //         let item = 0.0;\r\n        //         for (var j = 0; j < 4; ++j) {\r\n        //             item += other.get(r, c) * this.get(j, c);\r\n        //         }\r\n        //         matrix.set(r, c, item);\r\n        //     }\r\n        // }\r\n        // other.data = matrix.data;\r\n        return other;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/matrix.ts\n");

/***/ }),

/***/ "./src/math/ray.ts":
/*!*************************!*\
  !*** ./src/math/ray.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ray\": () => /* binding */ Ray\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n// author:  Jos Feenstra\r\n// purpose: infinite Ray used for projection and similar actions\r\n// notes:   found some nice examples at https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld004.htm\r\n\r\nclass Ray {\r\n    // i do this to force intent : from points, or from normal. Both vector3, so otherwise confusing\r\n    constructor(origin, normal) {\r\n        this.origin = origin;\r\n        this.normal = normal.normalize();\r\n    }\r\n    static fromNormal(origin, normal) {\r\n        return new Ray(origin, normal);\r\n    }\r\n    static fromPoints(origin, through) {\r\n        return new Ray(origin, through.subbed(origin).normalize());\r\n    }\r\n    at(t) {\r\n        return this.origin.added(this.normal.scaled(t));\r\n    }\r\n    xPlane(plane) {\r\n        // ray : pt = rOrigin + t * rNormal\r\n        // plane : a, b, c, d -> pNormal(a, b, c) , d\r\n        // plane : P . N + d = 0;\r\n        // substitute for p: \r\n        // t = -(rOrigin . N + d) / (V . N)\r\n        let ray = this; // to be clear\r\n        return -(ray.origin.dot(plane.normal) + plane.d) / (ray.normal.dot(plane.normal));\r\n    }\r\n    toLine(length) {\r\n        let toPoint = this.at(length);\r\n        return _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromLines([this.origin, toPoint]);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL21hdGgvcmF5LnRzPzFhODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3QkFBd0I7QUFDeEIsZ0VBQWdFO0FBQ2hFLDZIQUE2SDtBQUc5RTtBQUt4QyxNQUFNLEdBQUc7SUFJWixnR0FBZ0c7SUFDaEcsWUFBb0IsTUFBZSxFQUFFLE1BQWU7UUFDaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUdELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBZSxFQUFFLE1BQWU7UUFDOUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUdELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBZSxFQUFFLE9BQWdCO1FBQy9DLE9BQU8sSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBR0QsRUFBRSxDQUFDLENBQVM7UUFDUixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUdELE1BQU0sQ0FBQyxLQUFZO1FBRWYsbUNBQW1DO1FBQ25DLDZDQUE2QztRQUM3Qyx5QkFBeUI7UUFDekIscUJBQXFCO1FBQ3JCLG1DQUFtQztRQUVuQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxjQUFjO1FBQzlCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBR0QsTUFBTSxDQUFDLE1BQWM7UUFDakIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLGlFQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9tYXRoL3JheS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBpbmZpbml0ZSBSYXkgdXNlZCBmb3IgcHJvamVjdGlvbiBhbmQgc2ltaWxhciBhY3Rpb25zXHJcbi8vIG5vdGVzOiAgIGZvdW5kIHNvbWUgbmljZSBleGFtcGxlcyBhdCBodHRwczovL3d3dy5jcy5wcmluY2V0b24uZWR1L2NvdXJzZXMvYXJjaGl2ZS9mYWxsMDAvY3M0MjYvbGVjdHVyZXMvcmF5Y2FzdC9zbGQwMDQuaHRtXHJcblxyXG5cclxuaW1wb3J0IHsgTGluZUFycmF5IH0gZnJvbSBcIi4uL21lc2gvbGluZS1hcnJheVwiO1xyXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuLi9nZW8vcGxhbmVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuL3ZlY3RvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSYXkge1xyXG4gICAgb3JpZ2luOiBWZWN0b3IzO1xyXG4gICAgbm9ybWFsOiBWZWN0b3IzO1xyXG5cclxuICAgIC8vIGkgZG8gdGhpcyB0byBmb3JjZSBpbnRlbnQgOiBmcm9tIHBvaW50cywgb3IgZnJvbSBub3JtYWwuIEJvdGggdmVjdG9yMywgc28gb3RoZXJ3aXNlIGNvbmZ1c2luZ1xyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihvcmlnaW46IFZlY3RvcjMsIG5vcm1hbDogVmVjdG9yMykge1xyXG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xyXG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsLm5vcm1hbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgZnJvbU5vcm1hbChvcmlnaW46IFZlY3RvcjMsIG5vcm1hbDogVmVjdG9yMykgOiBSYXkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmF5KG9yaWdpbiwgbm9ybWFsKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGZyb21Qb2ludHMob3JpZ2luOiBWZWN0b3IzLCB0aHJvdWdoOiBWZWN0b3IzKSA6IFJheSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYXkob3JpZ2luLCB0aHJvdWdoLnN1YmJlZChvcmlnaW4pLm5vcm1hbGl6ZSgpKTtcclxuICAgIH0gXHJcbiAgICBcclxuXHJcbiAgICBhdCh0OiBudW1iZXIpIDogVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmFkZGVkKHRoaXMubm9ybWFsLnNjYWxlZCh0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICB4UGxhbmUocGxhbmU6IFBsYW5lKSA6IG51bWJlciB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gcmF5IDogcHQgPSByT3JpZ2luICsgdCAqIHJOb3JtYWxcclxuICAgICAgICAvLyBwbGFuZSA6IGEsIGIsIGMsIGQgLT4gcE5vcm1hbChhLCBiLCBjKSAsIGRcclxuICAgICAgICAvLyBwbGFuZSA6IFAgLiBOICsgZCA9IDA7XHJcbiAgICAgICAgLy8gc3Vic3RpdHV0ZSBmb3IgcDogXHJcbiAgICAgICAgLy8gdCA9IC0ock9yaWdpbiAuIE4gKyBkKSAvIChWIC4gTilcclxuICAgICAgICBcclxuICAgICAgICBsZXQgcmF5ID0gdGhpczsgLy8gdG8gYmUgY2xlYXJcclxuICAgICAgICByZXR1cm4gLShyYXkub3JpZ2luLmRvdChwbGFuZS5ub3JtYWwpICsgcGxhbmUuZCkgLyAocmF5Lm5vcm1hbC5kb3QocGxhbmUubm9ybWFsKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHRvTGluZShsZW5ndGg6IG51bWJlcikgOiBMaW5lQXJyYXkge1xyXG4gICAgICAgIGxldCB0b1BvaW50ID0gdGhpcy5hdChsZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiBMaW5lQXJyYXkuZnJvbUxpbmVzKFt0aGlzLm9yaWdpbiwgdG9Qb2ludF0pO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/math/ray.ts\n");

/***/ }),

/***/ "./src/math/statistics.ts":
/*!********************************!*\
  !*** ./src/math/statistics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stat\": () => /* binding */ Stat\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    statistics.ts\r\n// author:  Jos Feenstra\r\n// purpose: functionality and documentation of variance, \r\n//          covariance, eigen vectors, least squares, and other \r\n//          statistical operations.\r\n// source:  been a while since I did this, \r\n//          https://datascienceplus.com/understanding-the-covariance-matrix/ \r\n//          https://wiki.pathmind.com/eigenvector\r\n//          used to make sure the basics are correct :).\r\n// notes:   Whats the difference between a Principal Component and an Eigen vector? \r\n//          \"Because eigenvectors trace the principal lines of force, and the axes of greatest variance and covariance illustrate where the data is most susceptible to change.\"\r\n\r\nclass Stat {\r\n    // calculate sum\r\n    static sum(x) {\r\n        let sum = 0;\r\n        for (let i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n        return sum;\r\n    }\r\n    // calculate average\r\n    static mean(x) {\r\n        return this.sum(x) / x.length;\r\n    }\r\n    // calculate variance\r\n    static variance(x) {\r\n        //σ^2x = (1/n−1) * n∑i=1 (x[i] – xAvr)^2\r\n        let n = x.length;\r\n        let avr = this.mean(x);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += Math.pow((x[i] - avr), 2);\r\n        }\r\n        return sum / (n - 1);\r\n    }\r\n    // calculate the standard deviation\r\n    static deviation(x) {\r\n        return Math.pow(this.variance(x), 0.5);\r\n    }\r\n    // calculate covariance\r\n    static covariance(x, y) {\r\n        if (x.length != y.length)\r\n            throw \"this is not how covariance works...\";\r\n        let n = x.length;\r\n        let xAvr = this.mean(x);\r\n        let yAvr = this.mean(y);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += (x[i] - xAvr) * (y[i] - yAvr);\r\n        }\r\n        return sum / (n - 1); // losing one degree of freedom\r\n    }\r\n    // calculate variance / covariance matrix\r\n    static cov(matrix) {\r\n        let size = matrix._width;\r\n        let cov = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        let columns = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            columns[i] = matrix.getColumn(i);\r\n        }\r\n        // matrix is symmertical, so only run through one half\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = i; j < size; j++) {\r\n                let value = this.covariance(columns[i], columns[j]);\r\n                cov.set(i, j, value);\r\n                cov.set(j, i, value);\r\n            }\r\n        }\r\n        return cov;\r\n    }\r\n    static eig(A) {\r\n        let results = this.svd(A);\r\n        return [results[1], results[2]];\r\n    }\r\n    /**\r\n     * Single Value Decomposition.\r\n     * Can be used for Eigen Value Decomposition\r\n     * from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970).\r\n     * Taken from numeric.js. not yet cleaned & optimized.\r\n     * https://en.wikipedia.org/wiki/Singular_value_decomposition\r\n     * @param  {FloatMatrix} A matrix to decompose, such as a covariance matrix\r\n     * @returns [U, ∑, V]\r\n     * U -> during EVD, these are the eigen vectors of A transposed, if im not mistaken\r\n     * ∑ -> during EVD, this are the eigen values\r\n     * V -> during EVD, the columns are eigen vectors\r\n     */\r\n    static svd(A) {\r\n        var prec = Math.pow(2, -52); // assumes double prec\r\n        var tolerance = 1.e-64 / prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n        var u = A.clone().toNative();\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n        if (m < n)\r\n            throw \"Need more rows than columns\";\r\n        var e = new Array(n);\r\n        var q = new Array(n);\r\n        for (i = 0; i < n; i++)\r\n            e[i] = q[i] = 0.0;\r\n        var v = rep([n, n], 0);\r\n        function pythag(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a * Math.sqrt(1.0 + (b * b / a / a));\r\n            else if (b == 0.0)\r\n                return a;\r\n            return b * Math.sqrt(1.0 + (a * a / b / b));\r\n        }\r\n        //rep function, [JF] : dont know what this does exactly...\r\n        function rep(s, v, k = 0) {\r\n            let n = s[k];\r\n            let ret = Array(n);\r\n            let i;\r\n            if (k === s.length - 1) {\r\n                for (i = n - 2; i >= 0; i -= 2) {\r\n                    ret[i + 1] = v;\r\n                    ret[i] = v;\r\n                }\r\n                if (i === -1) {\r\n                    ret[0] = v;\r\n                }\r\n                return ret;\r\n            }\r\n            for (i = n - 1; i >= 0; i--) {\r\n                ret[i] = rep(s, v, k + 1);\r\n            }\r\n            return ret;\r\n        }\r\n        //Householder's reduction to bidiagonal form\r\n        var f = 0.0;\r\n        var g = 0.0;\r\n        var h = 0.0;\r\n        var x = 0.0;\r\n        var y = 0.0;\r\n        var z = 0.0;\r\n        var s = 0.0;\r\n        for (i = 0; i < n; i++) {\r\n            e[i] = g;\r\n            s = 0.0;\r\n            l = i + 1;\r\n            for (j = i; j < m; j++)\r\n                s += (u[j][i] * u[j][i]);\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i] = f - g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = i; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n            }\r\n            q[i] = g;\r\n            s = 0.0;\r\n            for (j = l; j < n; j++)\r\n                s = s + u[i][j] * u[i][j];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i + 1];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i + 1] = f - g;\r\n                for (j = l; j < n; j++)\r\n                    e[j] = u[i][j] / h;\r\n                for (j = l; j < m; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += (u[j][k] * u[i][k]);\r\n                    for (k = l; k < n; k++)\r\n                        u[j][k] += s * e[k];\r\n                }\r\n            }\r\n            y = Math.abs(q[i]) + Math.abs(e[i]);\r\n            if (y > x)\r\n                x = y;\r\n        }\r\n        // accumulation of right hand gtransformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            if (g != 0.0) {\r\n                h = g * u[i][i + 1];\r\n                for (j = l; j < n; j++)\r\n                    v[j][i] = u[i][j] / h;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[i][k] * v[k][j];\r\n                    for (k = l; k < n; k++)\r\n                        v[k][j] += (s * v[k][i]);\r\n                }\r\n            }\r\n            for (j = l; j < n; j++) {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g = e[i];\r\n            l = i;\r\n        }\r\n        // accumulation of left hand transformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            l = i + 1;\r\n            g = q[i];\r\n            for (j = l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g != 0.0) {\r\n                h = u[i][i] * g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = u[j][i] / g;\r\n            }\r\n            else\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n        // diagonalization of the bidiagonal form\r\n        prec = prec * x;\r\n        for (k = n - 1; k != -1; k += -1) {\r\n            for (var iteration = 0; iteration < itmax; iteration++) { // test f splitting\r\n                var test_convergence = false;\r\n                for (l = k; l != -1; l += -1) {\r\n                    if (Math.abs(e[l]) <= prec) {\r\n                        test_convergence = true;\r\n                        break;\r\n                    }\r\n                    if (Math.abs(q[l - 1]) <= prec)\r\n                        break;\r\n                }\r\n                if (!test_convergence) { // cancellation of e[l] if l>0\r\n                    c = 0.0;\r\n                    s = 1.0;\r\n                    var l1 = l - 1;\r\n                    for (i = l; i < k + 1; i++) {\r\n                        f = s * e[i];\r\n                        e[i] = c * e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g = q[i];\r\n                        h = pythag(f, g);\r\n                        q[i] = h;\r\n                        c = g / h;\r\n                        s = -f / h;\r\n                        for (j = 0; j < m; j++) {\r\n                            y = u[j][l1];\r\n                            z = u[j][i];\r\n                            u[j][l1] = y * c + (z * s);\r\n                            u[j][i] = -y * s + (z * c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z = q[k];\r\n                if (l == k) { //convergence\r\n                    if (z < 0.0) { //q[k] is made non-negative\r\n                        q[k] = -z;\r\n                        for (j = 0; j < n; j++)\r\n                            v[j][k] = -v[j][k];\r\n                    }\r\n                    break; //break out of iteration loop and move on to next k value\r\n                }\r\n                if (iteration >= itmax - 1)\r\n                    throw 'Error: no convergence.';\r\n                // shift from bottom 2x2 minor\r\n                x = q[l];\r\n                y = q[k - 1];\r\n                g = e[k - 1];\r\n                h = e[k];\r\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\r\n                g = pythag(f, 1.0);\r\n                if (f < 0.0)\r\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\r\n                else\r\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\r\n                // next QR transformation\r\n                c = 1.0;\r\n                s = 1.0;\r\n                for (i = l + 1; i < k + 1; i++) {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s * g;\r\n                    g = c * g;\r\n                    z = pythag(f, h);\r\n                    e[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = x * c + g * s;\r\n                    g = -x * s + g * c;\r\n                    h = y * s;\r\n                    y = y * c;\r\n                    for (j = 0; j < n; j++) {\r\n                        x = v[j][i - 1];\r\n                        z = v[j][i];\r\n                        v[j][i - 1] = x * c + z * s;\r\n                        v[j][i] = -x * s + z * c;\r\n                    }\r\n                    z = pythag(f, h);\r\n                    q[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = c * g + s * y;\r\n                    x = -s * g + c * y;\r\n                    for (j = 0; j < m; j++) {\r\n                        y = u[j][i - 1];\r\n                        z = u[j][i];\r\n                        u[j][i - 1] = y * c + z * s;\r\n                        u[j][i] = -y * s + z * c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n        for (i = 0; i < q.length; i++)\r\n            if (q[i] < prec)\r\n                q[i] = 0;\r\n        //sort eigenvalues\t\r\n        var temp;\r\n        for (i = 0; i < n; i++) {\r\n            for (j = i - 1; j >= 0; j--) {\r\n                if (q[j] < q[i]) {\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k = 0; k < u.length; k++) {\r\n                        temp = u[k][i];\r\n                        u[k][i] = u[k][j];\r\n                        u[k][j] = temp;\r\n                    }\r\n                    for (k = 0; k < v.length; k++) {\r\n                        temp = v[k][i];\r\n                        v[k][i] = v[k][j];\r\n                        v[k][j] = temp;\r\n                    }\r\n                    i = j;\r\n                }\r\n            }\r\n        }\r\n        return [_data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(u),\r\n            new Float32Array(q),\r\n            _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(v),\r\n        ];\r\n    }\r\n    ;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/statistics.ts\n");

/***/ }),

/***/ "./src/math/vector.ts":
/*!****************************!*\
  !*** ./src/math/vector.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector3\": () => /* binding */ Vector3,\n/* harmony export */   \"Vector2\": () => /* binding */ Vector2,\n/* harmony export */   \"radToDeg\": () => /* binding */ radToDeg,\n/* harmony export */   \"degToRad\": () => /* binding */ degToRad\n/* harmony export */ });\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const */ \"./src/math/const.ts\");\n/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matrix */ \"./src/math/matrix.ts\");\n// author: \tJos Feenstra\r\n// inspiration from Three.js\r\n// note: \trecycle the class as much as possble, building a new class is expensive,\r\n// \t\t\tespecially in javascript\r\n// todo: \tBIJ NADER INZIEN: dont go the copy route. rewrite this in a more functional way creating new classes is expensive, but we really need immutable vectors. \r\n// \t\t\tthese types of consistent vectors are only useful in niche cases, and complitate a lot of common cases. \r\n\r\n\r\nclass Vector3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    static fromLerpWeights(p1, p2, tP1, tP2, t) {\r\n        if (Math.abs(t - tP1) < 0.00001)\r\n            return (p1);\r\n        if (Math.abs(t - tP2) < 0.00001)\r\n            return (p2);\r\n        if (Math.abs(tP1 - tP2) < 0.00001)\r\n            return (p1);\r\n        let mu = (t - tP1) / (tP2 - tP1);\r\n        return new Vector3(p1.x + mu * (p2.x - p1.x), p1.y + mu * (p2.y - p1.y), p1.z + mu * (p2.z - p1.z));\r\n    }\r\n    // #endregion\r\n    // #region defaults \r\n    static zero() {\r\n        return new Vector3(0, 0, 0);\r\n    }\r\n    ;\r\n    static unitX() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n    ;\r\n    static unitY() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n    ;\r\n    static unitZ() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n    ;\r\n    // #endregion\r\n    // #region basics\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    added(v) {\r\n        return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x,\r\n            this.y -= v.y,\r\n            this.z -= v.z;\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case (0): return this.x;\r\n            case (1): return this.y;\r\n            case (2): return this.z;\r\n            case (3): return 1;\r\n            default: throw \"nope\";\r\n        }\r\n    }\r\n    scaled(v) {\r\n        return new Vector3(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z;\r\n        return this;\r\n    }\r\n    multiplied(v) {\r\n        return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\r\n    }\r\n    divVector(v) {\r\n        return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\r\n    }\r\n    divided(value) {\r\n        return new Vector3(this.x / value, this.y / value, this.z / value);\r\n    }\r\n    div(value) {\r\n        this.x /= value,\r\n            this.y /= value,\r\n            this.z /= value;\r\n        return this;\r\n    }\r\n    minimumed(other) {\r\n        return new Vector3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));\r\n    }\r\n    maximumed(other) {\r\n        return new Vector3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));\r\n    }\r\n    clamped(min, max) {\r\n        return new Vector3(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\r\n    }\r\n    clampScalared(min, max) {\r\n        return new Vector3(clamp(this.x, min, max), clamp(this.y, min, max), clamp(this.z, min, max));\r\n    }\r\n    clampLengthed(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floored() {\r\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n    ceiled() {\r\n        return new Vector3(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\r\n    }\r\n    rounded() {\r\n        return new Vector3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    roundedToZero() {\r\n        return new Vector3((this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x), (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y), (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z));\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    negated() {\r\n        return new Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        return new Vector3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.divided(this.length() || 1);\r\n    }\r\n    isNormal() {\r\n        return Math.abs(this.length() - 1) < _const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x)\r\n            + Math.abs(this.y - v.y)\r\n            + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector3((other.x - this.x) * alpha, (other.y - this.y) * alpha, (other.z - this.z) * alpha);\r\n    }\r\n    // #endregion\r\n    // #region math specific \r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector \r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectedOnPlane(normal) {\r\n        // project a vector \r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.minimumed(_vector);\r\n    }\r\n    mirrored(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.minimumed(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n    rotated(axis, angle) {\r\n        let mat = _matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix4.newAxisRotation(axis, angle);\r\n        return mat.multiplyVector(this);\r\n    }\r\n}\r\nconst _vector = new Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    // static from2Pt(from: Vector2, to: Vector2) : Vector2 {\r\n    // \treturn new Vector2(\r\n    // \t\tfrom.x - to.x,\r\n    // \t\tfrom.y - to.y\r\n    // \t)\r\n    // }\r\n    static fromCircle(center, radius, theta) {\r\n        return new Vector2(center.x + radius * Math.sin(theta), center.y + radius * Math.cos(theta));\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    to3D() {\r\n        return new Vector3(this.x, this.y, 0);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    added(v) {\r\n        return new Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    scaled(v) {\r\n        return new Vector2(this.x * v, this.y * v);\r\n    }\r\n    divVector(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    dived(v) {\r\n        return new Vector2(this.x / v, this.y / v);\r\n    }\r\n    minimum(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    maximum(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    lengthSquared() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        let dx = this.x - v.x;\r\n        let dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector2(this.x + (other.x - this.x) * alpha, this.y + (other.y - this.y) * alpha);\r\n    }\r\n    // calculate the 'triangle sign' of three points. Can be used to determine clockwise & counter clockwise\r\n    sign(b, c) {\r\n        return ((this.x - c.x) * (b.y - c.y)) - ((b.x - c.x) * (this.y - c.y));\r\n    }\r\n    // use dot product to project this vector on the other vector\r\n    projectOnVector(other) {\r\n        const denominator = other.lengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n}\r\nfunction clamp(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nfunction radToDeg(r) {\r\n    return r * 180 / Math.PI;\r\n}\r\nfunction degToRad(d) {\r\n    return d * Math.PI / 180;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/vector.ts\n");

/***/ }),

/***/ "./src/mesh/line-array.ts":
/*!********************************!*\
  !*** ./src/mesh/line-array.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineArray\": () => /* binding */ LineArray,\n/* harmony export */   \"getDefaultIndices\": () => /* binding */ getDefaultIndices\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    line-render-data.ts\r\n// author:  Jos Feenstra\r\n// purpose: represents an object which can be fed directly to a linerenderer.\r\n//          use it to not continuously have to calculate these aspects if the underlying object is unchanged.\r\n\r\n\r\n\r\n// represents a collection of multiple lines. These could form 1 polyline, but this is not a requirement\r\nclass LineArray {\r\n    constructor(verts, ids) {\r\n        this.verts = verts;\r\n        if (ids == undefined) {\r\n            this.ids = getDefaultIndices(verts.count());\r\n        }\r\n        else {\r\n            this.ids = ids;\r\n        }\r\n    }\r\n    // this assumes even vectices are 'from' points, and odd vertices are 'to' points\r\n    static fromLines(verts) {\r\n        let data = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(verts);\r\n        return new LineArray(data);\r\n    }\r\n    // get all lines from a mesh\r\n    static fromMesh(mesh, uv = false) {\r\n        // 3 edges per face, 2 indices per edge\r\n        let count = mesh.links.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < mesh.links.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = mesh.links.get(i, 0);\r\n            data[iData + 1] = mesh.links.get(i, 1);\r\n            data[iData + 2] = mesh.links.get(i, 1);\r\n            data[iData + 3] = mesh.links.get(i, 2);\r\n            data[iData + 4] = mesh.links.get(i, 2);\r\n            data[iData + 5] = mesh.links.get(i, 0);\r\n        }\r\n        if (uv) {\r\n            return new LineArray(mesh.uvs, data);\r\n        }\r\n        else {\r\n            return new LineArray(mesh.verts, data);\r\n        }\r\n    }\r\n    // create lines as a grid centered at a plane \r\n    static fromGrid(plane, count, dis) {\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines from a plane\r\n    static fromPlane(plane) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINECOUNT;\r\n        let dis = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINEDISTANCE;\r\n        let disSmall = dis / 10;\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4 + 5 * 2);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // icon I  to show ihat\r\n        let iconLine1 = lines.count() - 10;\r\n        lines.setVector(iconLine1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, -disSmall, 0));\r\n        lines.setVector(iconLine1 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, disSmall, 0));\r\n        let iconLine2 = lines.count() - 8;\r\n        lines.setVector(iconLine2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, disSmall, 0));\r\n        lines.setVector(iconLine2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, -disSmall, 0));\r\n        // icon II to show jhat\r\n        let iconLine3 = lines.count() - 6;\r\n        lines.setVector(iconLine3, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, halfTotalSize + disSmall * 2.5, 0));\r\n        lines.setVector(iconLine3 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall * 4, 0));\r\n        let iconLine4 = lines.count() - 4;\r\n        lines.setVector(iconLine4, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall, 0));\r\n        lines.setVector(iconLine4 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-disSmall, halfTotalSize + disSmall * 4, 0));\r\n        // icon III to show khat / normal direction\r\n        let iconLine5 = lines.count() - 2;\r\n        lines.setVector(iconLine5, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        lines.setVector(iconLine5 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, dis));\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines representing a circle in 2d. use an optional matrix to \r\n    static fromCircle(c) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.CIRCLE_SEGMENTS;\r\n        // let count = 12;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            // radial fraction of a circle\r\n            let t = (i / count) * (Math.PI * 2);\r\n            verts.setVector(i, c.plane.pushToWorld(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(t) * c.radius, Math.sin(t) * c.radius, 0)));\r\n        }\r\n        return new LineArray(verts, getPairIndices(count));\r\n    }\r\n    // turn a spline into a polyline, and render it\r\n    static fromSpline() {\r\n        throw \"todo!\";\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(cube.getCorners());\r\n        return new LineArray(verts);\r\n    }\r\n    static fromJoin(lines) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let idsCount = 0;\r\n        let vertCount = 0;\r\n        for (let line of lines) {\r\n            idsCount += line.ids.length;\r\n            vertCount += line.verts.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(vertCount);\r\n        let ids = new Uint16Array(idsCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let lineset of lines) {\r\n            for (let i = 0; i < lineset.verts.count(); i++) {\r\n                verts.setRow(accVerts + i, lineset.verts.getRow(i));\r\n            }\r\n            for (let i = 0; i < lineset.ids.length; i++) {\r\n                ids[accFaces + i] = lineset.ids[i] + accVerts;\r\n            }\r\n            accVerts += lineset.verts.count();\r\n            accFaces += lineset.ids.length;\r\n        }\r\n        return new LineArray(verts, ids);\r\n    }\r\n}\r\n// just get an int sequence from 0 to length. \r\nfunction getDefaultIndices(count) {\r\n    let data = new Uint16Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i] = i;\r\n    }\r\n    return data;\r\n}\r\nfunction getPairIndices(count) {\r\n    // given count of 3 => return 0,1 | 1,2 | 2,0\r\n    let length = count * 2;\r\n    let data = new Uint16Array(length);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i * 2] = i;\r\n        data[i * 2 + 1] = (i + 1) % count;\r\n    }\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/line-array.ts\n");

/***/ }),

/***/ "./src/mesh/pure-mesh.ts":
/*!*******************************!*\
  !*** ./src/mesh/pure-mesh.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PureMesh\": () => /* binding */ PureMesh\n/* harmony export */ });\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n// Mesh.Ts\r\n// Purpose: obj class for dealing with that specific filetype, and meshes in general\r\n// Author: Jos Feenstra\r\n// import { createUnsignedBytesMatrixTexture } from \"@tensorflow/tfjs-backend-webgl/dist/gpgpu_util\";\r\n// import { browserLocalStorage } from \"@tensorflow/tfjs-core/dist/io/local_storage\";\r\n\r\n\r\n\r\n\r\n// TODO make distinctions between\r\n// - DisplayMesh (PureMesh + uvs, texture, normals, material, etc...)\r\n// a very pure idea of a mesh : Vertices + links between vertices. \r\n// Could be anything with these properties.\r\nclass PureMesh {\r\n    constructor(verts, links) {\r\n        this.verts = verts;\r\n        this.links = links;\r\n    }\r\n    static fromLists(verts, faces) {\r\n        return new PureMesh(_data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(verts), _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix.fromList(faces, 3));\r\n    }\r\n    static fromEmpty() {\r\n        return new PureMesh(new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(0), new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(0, 0));\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.links.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return new PureMesh(verts, links);\r\n    }\r\n    static fromRect(rect) {\r\n        let verts = rect.getCorners();\r\n        // we cant handle quads yet \r\n        let faces = [];\r\n        faces.push(...quadToTri(cubeFaces[0]));\r\n        let mesh = new _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMesh(4, 0, 0, 2);\r\n        mesh.verts.fillFromList(verts);\r\n        mesh.links.setData(faces);\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        mesh.setUvs(new Float32Array([\r\n            0.0, 0.0,\r\n            0.0, 1.0,\r\n            1.0, 0.0,\r\n            1.0, 1.0\r\n        ]));\r\n        return mesh;\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = cube.getCorners();\r\n        let faces = [];\r\n        for (let face of cubeFaces) {\r\n            faces.push(...quadToTri(face));\r\n        }\r\n        return this.fromLists(verts, faces);\r\n    }\r\n    static fromSphere(center, radius, numRings, numPerRing) {\r\n        // verts\r\n        let vertCount = numRings * numPerRing + 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.scale(radius).add(center));\r\n        };\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 1));\r\n        for (let ring = 0; ring < numRings; ring++) {\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let alpha = Math.PI * (ring + 1) / (numRings + 1);\r\n                let beta = 2 * Math.PI * perRing / numPerRing;\r\n                let x = Math.sin(alpha)\r\n                    * Math.cos(beta);\r\n                let y = Math.sin(alpha)\r\n                    * Math.sin(beta);\r\n                let z = Math.cos(alpha);\r\n                let index = 1 + ring * numPerRing + perRing;\r\n                setVert(index, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, y, z));\r\n            }\r\n        }\r\n        setVert(vertCount - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, -1));\r\n        // faces \r\n        let faceCount = numPerRing * (numRings) * 2;\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // faces top\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setFace(i, [\r\n                0,\r\n                (i + 1) % numPerRing + 1,\r\n                i + 1,\r\n            ]);\r\n        }\r\n        // faces middle\r\n        // we are at this cursor\r\n        // console.log(\"faces\", faceCount);\r\n        for (let ring = 0; ring < numRings - 1; ring++) {\r\n            let vertCursor = numPerRing * ring + 1;\r\n            let vertCursorBelow = vertCursor + numPerRing;\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let a = vertCursor + perRing;\r\n                let b = vertCursor + ((perRing + 1) % numPerRing);\r\n                let c = vertCursorBelow + perRing;\r\n                let d = vertCursorBelow + ((perRing + 1) % numPerRing);\r\n                let iFace = numPerRing + (numPerRing * ring * 2) + perRing * 2;\r\n                // console.log(iFace);\r\n                setFace(iFace, [a, b, c]);\r\n                setFace(iFace + 1, [c, b, d]);\r\n            }\r\n        }\r\n        // faces bottom \r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let iNext = ((i + 1) % numPerRing);\r\n            let last = vertCount - 1;\r\n            let iFace = faceCount - numPerRing + i;\r\n            let zero = vertCount - numPerRing - 1;\r\n            let vertI = zero + i;\r\n            let vertINext = zero + iNext;\r\n            // console.log(iFace);\r\n            // console.log(\"face\", last, vertINext, vertI);\r\n            setFace(iFace, [\r\n                last,\r\n                vertI,\r\n                vertINext,\r\n            ]);\r\n        }\r\n        return new PureMesh(verts, links);\r\n    }\r\n    static fromCone(center, radius, height, numPerRing) {\r\n        let numVerts = numPerRing + 2;\r\n        let numFaces = numPerRing * 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(numVerts);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.add(center));\r\n        };\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set verts\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setVert(i + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(Math.PI * 2 * i / numPerRing), Math.sin(Math.PI * 2 * i / numPerRing), 0).scale(radius));\r\n        }\r\n        setVert(numVerts - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, height));\r\n        // set faces \r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = numVerts - 1;\r\n            let c = 1 + i;\r\n            let d = 1 + ((i + 1) % numPerRing);\r\n            setFace(i * 2, [a, c, d]);\r\n            setFace(i * 2 + 1, [c, b, d]);\r\n        }\r\n        return new PureMesh(verts, links);\r\n    }\r\n    // TODO fix this later\r\n    toDisplayMesh() {\r\n        let mesh = new _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMesh(this.verts.count(), 0, 0, this.links.count());\r\n        mesh.verts.data = this.verts.data;\r\n        mesh.links.data = this.links.data;\r\n        return mesh;\r\n    }\r\n}\r\n// ================ Help ==================\r\n// 0 ------- 1\r\n// | \\     / |\r\n// |  4---5  |\r\n// |  |   |  |\r\n// |  6---7  |\r\n// | /     \\ |\r\n// 2 ------- 3\r\nconst cubeFaces = [\r\n    [0, 1, 3, 2],\r\n    [4, 0, 2, 6],\r\n    [1, 0, 4, 5],\r\n    [1, 5, 7, 3],\r\n    [2, 3, 7, 6],\r\n    [5, 4, 6, 7],\r\n];\r\nfunction quadToTri(abcd) {\r\n    return [\r\n        abcd[0], abcd[1], abcd[2],\r\n        abcd[0], abcd[2], abcd[3]\r\n    ];\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/pure-mesh.ts\n");

/***/ }),

/***/ "./src/mesh/render-mesh.ts":
/*!*********************************!*\
  !*** ./src/mesh/render-mesh.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RenderMeshKind\": () => /* binding */ RenderMeshKind,\n/* harmony export */   \"NormalKind\": () => /* binding */ NormalKind,\n/* harmony export */   \"RenderMesh\": () => /* binding */ RenderMesh,\n/* harmony export */   \"meshFromObj\": () => /* binding */ meshFromObj\n/* harmony export */ });\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n// Name: render-mesh.ts \r\n// Author: Jos Feenstra \r\n// Purpose: \r\n// a mesh representation with the sole purpose of to be renderer. \r\n// - fixed length attributes \r\n// - can represent:\r\n//   - pointcloud (links = null)\r\n//   - graph (links.width = 2)\r\n//   - triangles (links.width = 3)\r\n//   - quads (links.width = 4. will need to be converted to triangles)\r\n\r\n\r\nvar RenderMeshKind;\r\n(function (RenderMeshKind) {\r\n    RenderMeshKind[RenderMeshKind[\"Invalid\"] = 0] = \"Invalid\";\r\n    RenderMeshKind[RenderMeshKind[\"Points\"] = 1] = \"Points\";\r\n    RenderMeshKind[RenderMeshKind[\"Lines\"] = 2] = \"Lines\";\r\n    RenderMeshKind[RenderMeshKind[\"Triangles\"] = 3] = \"Triangles\";\r\n    RenderMeshKind[RenderMeshKind[\"Quads\"] = 4] = \"Quads\";\r\n})(RenderMeshKind || (RenderMeshKind = {}));\r\nvar NormalKind;\r\n(function (NormalKind) {\r\n    NormalKind[NormalKind[\"None\"] = 0] = \"None\";\r\n    NormalKind[NormalKind[\"Vertex\"] = 1] = \"Vertex\";\r\n    NormalKind[NormalKind[\"Face\"] = 2] = \"Face\";\r\n    NormalKind[NormalKind[\"MultiVertex\"] = 3] = \"MultiVertex\";\r\n})(NormalKind || (NormalKind = {}));\r\nclass RenderMesh {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        var _a;\r\n        this.verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(normCount);\r\n        this.uvs = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector2Array(uvCount);\r\n        this.links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        (_a = this.links) === null || _a === void 0 ? void 0 : _a.fill(-1);\r\n        this.texture = texture;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the \r\n        // Array class. \r\n        let mesh = new RenderMesh(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        mesh.verts.fillWith(verts);\r\n        mesh.norms.fillWith(norms);\r\n        mesh.uvs.fillWith(uvs);\r\n        mesh.links.fillWith(faces);\r\n        return mesh;\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            if (mesh.links)\r\n                faceCount += mesh.links.count();\r\n        }\r\n        let joined = new RenderMesh(vertCount, 0, 0, faceCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                joined.verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            if (!mesh.links)\r\n                continue;\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                joined.links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return joined;\r\n    }\r\n    // getters & selectors \r\n    getAdjacentFaces(v) {\r\n        let faces = [];\r\n        let count = this.links.count();\r\n        for (let i = 0; i < count; i++) {\r\n            if (this.links.getRow(i).includes(v)) {\r\n                faces.push(i);\r\n            }\r\n        }\r\n        return faces;\r\n    }\r\n    getFaceVertices(f) {\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.links._width);\r\n        this.links.getRow(f).forEach((v, i) => {\r\n            verts.setVector(i, (this.verts.getVector(v)));\r\n        });\r\n        return verts;\r\n    }\r\n    getKind() {\r\n        if (this.links._width == RenderMeshKind.Points) {\r\n            return RenderMeshKind.Points;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Lines) {\r\n            return RenderMeshKind.Lines;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Triangles) {\r\n            return RenderMeshKind.Triangles;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Quads) {\r\n            return RenderMeshKind.Quads;\r\n        }\r\n        else {\r\n            return RenderMeshKind.Invalid;\r\n        }\r\n    }\r\n    getNormalType() {\r\n        let count = this.norms.count();\r\n        if (count == this.verts.count()) {\r\n            return NormalKind.Vertex;\r\n        }\r\n        else if (count == this.links.count()) {\r\n            return NormalKind.Face;\r\n        }\r\n        else if (count == this.links.data.length) {\r\n            return NormalKind.MultiVertex;\r\n        }\r\n        else {\r\n            return NormalKind.None;\r\n        }\r\n    }\r\n    // setters \r\n    setTexture(texture) {\r\n        this.texture = texture;\r\n        // recalculate things if needed\r\n    }\r\n    setUvs(uvs) {\r\n        if (uvs instanceof Float32Array) {\r\n            this.uvs.data = uvs;\r\n        }\r\n        else {\r\n            this.uvs = uvs;\r\n        }\r\n        // recalculate if needed\r\n    }\r\n    // convert\r\n    exportToObj(path) {\r\n        throw \"todo\";\r\n    }\r\n    // normals\r\n    calculateFaceNormals() {\r\n        // calculate a normal per face\r\n        if (this.getKind() != RenderMeshKind.Triangles) {\r\n            console.error(\"can only calculate normals from triangular meshes\");\r\n            this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(0);\r\n            return;\r\n        }\r\n        let faceCount = this.links.count();\r\n        this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(faceCount);\r\n        for (let f = 0; f < faceCount; f++) {\r\n            let verts = this.getFaceVertices(f).toList();\r\n            let normal = verts[2].subbed(verts[0]).cross(verts[1].subbed(verts[0])).normalize();\r\n            this.norms.setVector(f, normal);\r\n        }\r\n    }\r\n    calculateVertexNormals() {\r\n        this.calculateFaceNormals();\r\n        let vertNormals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.verts.count());\r\n        this.verts.forEach((v, i) => {\r\n            let adjFaces = this.getAdjacentFaces(i);\r\n            let adjNormals = this.norms.takeRows(adjFaces);\r\n            vertNormals.setVector(i, adjNormals.average());\r\n        });\r\n        this.norms = vertNormals;\r\n    }\r\n}\r\n;\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how \r\n    // many vertices or faces well get. \r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float \r\n    let faces = []; // 9 long ints, u16's should suffice. \r\n    // note : this is very inefficient, but it'll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split('\\n');\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === '' || line.startsWith('#')) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case 'v':\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'vn':\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'vt':\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'f':\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn('unhandled keyword:', keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    // console.log(\"number of vertices: \" + verts.length / 3);\r\n    // console.log(\"number of faces: \" + faces.length / 3);\r\n    // console.log(\"number of uvs: \" + uvs.length / 2);\r\n    // console.log(\"number of norms: \" + norms.length / 3);\r\n    let mesh = RenderMesh.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face. \r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split('/');\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw \"invalid face found when processing\";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal        \r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/render-mesh.ts\n");

/***/ }),

/***/ "./src/mesh/topo-mesh.ts":
/*!*******************************!*\
  !*** ./src/mesh/topo-mesh.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TopoMesh\": () => /* binding */ TopoMesh\n/* harmony export */ });\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _geo_triangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geo/triangle */ \"./src/geo/triangle.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n// a mesh with topological information\r\nclass TopoMesh extends _render_mesh__WEBPACK_IMPORTED_MODULE_4__.RenderMesh {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__.IntMatrix(this.links.count(), 3);\r\n    }\r\n    static copyFromMesh(mesh) {\r\n        let topoMesh = new TopoMesh(mesh.verts.count(), mesh.norms.count(), mesh.uvs.count(), mesh.links.count());\r\n        topoMesh.verts = mesh.verts.clone();\r\n        topoMesh.norms = mesh.norms.clone();\r\n        topoMesh.uvs = mesh.uvs.clone();\r\n        topoMesh.links = mesh.links.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        // this method fills this.neighborMap after data is loaded\r\n        // \r\n        let edges = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        let pairs = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        // 1 | per triangle\r\n        this.links.forEachRow((f, faceIndex) => {\r\n            let faceEdges = [\r\n                [f[0], f[1]],\r\n                [f[1], f[2]],\r\n                [f[2], f[0]]\r\n            ];\r\n            faceEdges.forEach(e => {\r\n                // if (4, 1), orientation is True | if (1, 4), orientation is False\r\n                let orientation = e[0] > e[1];\r\n                // use this min max construction to only store one edge per triangle pair\r\n                // let edge: [number, number] = e.sort();\r\n                let edge = new Int32Array([Math.min(...e), Math.max(...e)]);\r\n                // console.log(edge);\r\n                if (!edges.has(edge)) {\r\n                    // orientation, first tr ID, second tr ID\r\n                    edges.set(edge, [orientation, faceIndex, -1]);\r\n                }\r\n                else {\r\n                    // an edge match is made!\r\n                    // console.log(\"matched!\");\r\n                    let other = edges.get(edge);\r\n                    let nbOrientation = other[0];\r\n                    let nbIndex = other[1];\r\n                    other[2] = faceIndex;\r\n                    edges.set(edge, other); // edge is put away again, if an edge map is ever needed.\r\n                    // assign neighbours\r\n                    this.setNb(faceIndex, edge, nbIndex);\r\n                    this.setNb(nbIndex, edge, faceIndex);\r\n                    // use this info to fill self.pairs\r\n                    // if orientation != other orientation, edge is 'good' -> False\r\n                    // else -> True, one of the neighbour triangles needs to be flipped\r\n                    let pair = [nbIndex, faceIndex];\r\n                    pair.sort();\r\n                    // pair = (Math.min(...pair), Math.max(...pair))\r\n                    if (orientation != nbOrientation)\r\n                        pairs.set(pair, false);\r\n                    else\r\n                        pairs.set(pair, true);\r\n                }\r\n            });\r\n        });\r\n        // Done. Give feedback\r\n        let count = 0;\r\n        // for pair in pairs.items():\r\n        //     if not pair: count +=1;\r\n        console.log(\"number of 'wrong' face neighbours: \", count);\r\n        return;\r\n    }\r\n    /**\r\n     * Get the triangle based on a UV point somewhere on the mesh.\r\n     * Returns -1 if the point is not on the mesh TODO OR IF THE PATH HAS HOLES IN IT TODO FIX THIS!\r\n     * @param  {Vector2} point\r\n     * @returns triangleIndex, or -1 if failure\r\n     */\r\n    walkUV(point) {\r\n        // start where we last stopped\r\n        let faceIndex = this.lastTouched;\r\n        // make sure we never take more steps than triangles in the triangulation.\r\n        // this would mean something went wrong\r\n        let count = this.links.count();\r\n        for (let _ = 0; _ < count; _++) {\r\n            // i dont know how, but if we accidentally landed outside of the mesh\r\n            if (faceIndex == -1) {\r\n                return -1;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                let j = (i + 1) % 3;\r\n                let face = this.links.getRow(faceIndex);\r\n                let edge = [face[i], face[j]];\r\n                let b = this.uvs.getVector(edge[0]);\r\n                let c = this.uvs.getVector(edge[1]);\r\n                let sign = point.sign(b, c);\r\n                if (sign < 0) {\r\n                    faceIndex = this.getNb(faceIndex, edge);\r\n                    // if its ouside, return -1\r\n                    if (faceIndex == -1)\r\n                        return -1;\r\n                    // else: go there immidiately\r\n                    this.lastTouched = faceIndex;\r\n                    break;\r\n                }\r\n                // if this ran 3 times, the point must be within the triangle\r\n                if (i == 2)\r\n                    return faceIndex;\r\n            }\r\n        }\r\n        // something went wrong\r\n        return -1;\r\n    }\r\n    // find the faces closest to the point \r\n    // -1 if the mesh does not contain triangles\r\n    closestFaces(point) {\r\n        let closestVertexId = this.verts.closestId(point);\r\n        // get all face ids containing closestVertex, along with their centers\r\n        let closestFaces = [];\r\n        //let centers: Vector3[] = []\r\n        this.links.forEachRow((tr, i) => {\r\n            if (tr.includes(closestVertexId)) {\r\n                closestFaces.push(i);\r\n                //let center = Vector3Array.fromList(this.getFacePoints(i, false)).average();\r\n                //centers.push(center);\r\n            }\r\n        });\r\n        // select the triangle with the closest baricenter\r\n        return closestFaces;\r\n    }\r\n    elevate(p) {\r\n        // 'elevate' a point in UV space to vertex space using a barycentric remap   \r\n        // figure out where this point is located on the mesh\r\n        let face = this.walkUV(p);\r\n        if (face == -1) {\r\n            console.warn(\"got a point not on triangle...\");\r\n            return new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0);\r\n        }\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr2.toBarycentric(p);\r\n        return tr3.fromBarycentric(bari);\r\n    }\r\n    closestFace(p) {\r\n        // NOTE this doesnt really work all that well...\r\n        let faceIds = this.closestFaces(p);\r\n        let closestPoints = new _data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector3Array(faceIds.length);\r\n        faceIds.forEach((id, i) => {\r\n            let tr = this.getTriangle3(id);\r\n            let cp = tr.closestPoint(p);\r\n            closestPoints.setVector(i, cp);\r\n        });\r\n        // find the closest closest point \r\n        let id = closestPoints.closestId(p);\r\n        return faceIds[id];\r\n    }\r\n    // 'flatten' a point in vertex space to uv space using a barycentric remap\r\n    // NOTE : this is not exactly a 'project to closest triangle', something like that wouldnt always work\r\n    flatten(p, face) {\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr3.toBarycentric(p);\r\n        return tr2.fromBarycentric(bari);\r\n    }\r\n    // combo\r\n    flattenClosestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        return this.flatten(p, face);\r\n    }\r\n    closestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        let triangle = this.getTriangle3(face);\r\n        let bari = triangle.toBarycentric(p);\r\n        return triangle.fromBarycentric(bari);\r\n    }\r\n    getTriangle2(id) {\r\n        let p = this.getFacePoints(id, true);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle2(p[0], p[1], p[2]);\r\n    }\r\n    getTriangle3(id) {\r\n        let p = this.getFacePoints(id, false);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle3(p[0], p[1], p[2]);\r\n    }\r\n    setNb(faceIndex, commonEdge, nbIndex) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.links.get(faceIndex, j))) {\r\n                this.neighborMap.set(faceIndex, j, nbIndex);\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"these are not actually neighbors!\";\r\n    }\r\n    getNb(faceIndex, commonEdge) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.links.get(faceIndex, j))) {\r\n                return this.neighborMap.get(faceIndex, j);\r\n            }\r\n        }\r\n        console.log(this.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"common edge does not match triangle index!\";\r\n    }\r\n    getFacePoints(tr, uv) {\r\n        let pointIds = this.links.getRow(tr);\r\n        if (uv) {\r\n            return [\r\n                this.uvs.getVector(pointIds[0]),\r\n                this.uvs.getVector(pointIds[1]),\r\n                this.uvs.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n        else {\r\n            return [\r\n                this.verts.getVector(pointIds[0]),\r\n                this.verts.getVector(pointIds[1]),\r\n                this.verts.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/topo-mesh.ts\n");

/***/ }),

/***/ "./src/render/camera.ts":
/*!******************************!*\
  !*** ./src/render/camera.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Camera\": () => /* binding */ Camera\n/* harmony export */ });\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_ray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/ray */ \"./src/math/ray.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding \r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1, canMove = false) {\r\n        this.angleAlpha = 0; // rotation x \r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2.zero();\r\n        // camera matrix properties\r\n        this.fov = 20. * Math.PI / 100.;\r\n        this.zFar = 10000.;\r\n        this.zNear = 0.1;\r\n        // other consts\r\n        this.speed = 1;\r\n        this.worldPlane = _geo_plane__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.canMove = canMove;\r\n        this.pos = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -z_offset);\r\n        this.updateMatrices(canvas);\r\n    }\r\n    update(state) {\r\n        this.updateControls(state);\r\n        this.updateMatrices(state.canvas);\r\n        this.updateClick(state);\r\n        if (state.IsKeyPressed(\"p\")) {\r\n            console.log(this.pos);\r\n            console.log(this.offset);\r\n            console.log(\"speed is now: \" + this.speed);\r\n        }\r\n    }\r\n    updateMatrices(canvas) {\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(canvas);\r\n        this.totalMatrix = this.worldMatrix.multiplied(this.projectMatrix);\r\n    }\r\n    lookat(position, target) {\r\n        // set matrices to the thing\r\n        let matrix = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newLookAt(position, target, this.worldPlane.khat);\r\n    }\r\n    updateClick(state) {\r\n        // todo\r\n    }\r\n    updateControls(state) {\r\n        let deltaScroll = state.scrollValue * 1.2;\r\n        this.offset.z = this.z_offset - deltaScroll;\r\n        if (state.IsKeyPressed(\"Shift\")) {\r\n            this.speed *= 2;\r\n        }\r\n        if (state.IsKeyPressed(\"Control\")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n        }\r\n        // deal with mouse\r\n        let prevPos = this.mousePos.clone();\r\n        this.mousePos = state.mousePos.clone();\r\n        let delta = prevPos.clone().sub(this.mousePos);\r\n        this.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        if (state.mouseRightDown) {\r\n            this.angleAlpha = _math_math__WEBPACK_IMPORTED_MODULE_1__.GMath.clamp(this.angleAlpha + delta.y * 0.01, 0, Math.PI);\r\n            this.angleBeta += delta.x * -0.01;\r\n        }\r\n        function relativeUnitY(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitY());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitX());\r\n        }\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n        if (state.IsKeyDown(\"s\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"w\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"a\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"d\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"q\"))\r\n            this.pos.z += 0.01 * this.speed;\r\n        if (state.IsKeyDown(\"e\"))\r\n            this.pos.z -= 0.01 * this.speed;\r\n    }\r\n    getCameraPoint() {\r\n        return this.worldMatrix.inverse().multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n    }\r\n    getMouseWorldRay(canvasWidth, canvasHeight) {\r\n        // get a ray from origin through mousepos \r\n        // mouse unit screen position: \r\n        //       -------------- -0.5\r\n        //       |            |\r\n        //       |      .(0,0)|\r\n        //       |            | \r\n        //       -------------- 0.5\r\n        //     -0.72        0.72     \r\n        //    (0.72 = 0.5 * aspect)\r\n        // \r\n        let size = 0.5; // size indicator of the fustrum\r\n        let mp = this.mousePos;\r\n        let aspect = canvasWidth / canvasHeight;\r\n        let mouseUnitX = (-size + (mp.x / canvasWidth)) * aspect;\r\n        let mouseUnitY = -size + (mp.y / canvasHeight);\r\n        let f = size / Math.tan(this.fov / 2); // focal length \r\n        let invWorld = this.worldMatrix.inverse();\r\n        let origin = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n        // TODO instead of doing this, just extract the x, y, and z columns of invWorld \r\n        let iDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 0, 0));\r\n        let jDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 1, 0));\r\n        let kDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -1));\r\n        let ihat = iDestiny.sub(origin).normalize();\r\n        let jhat = jDestiny.sub(origin).normalize();\r\n        let khat = kDestiny.sub(origin).normalize();\r\n        let screenPoint = origin\r\n            .added(khat.scaled(f))\r\n            .add(ihat.scaled(mouseUnitX))\r\n            .add(jhat.scaled(-mouseUnitY));\r\n        return _math_ray__WEBPACK_IMPORTED_MODULE_3__.Ray.fromPoints(origin, screenPoint);\r\n    }\r\n    getWorldMatrix() {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        // translate so z means 'up'\r\n        let yzFlip = new _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n        // translated to fit screen\r\n        let position = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newXRotation(angleA);\r\n        let z_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angleB);\r\n        let rotation = z_rotation.multiply(x_rotation);\r\n        // let transform = mOffset.multiply(rotation).multiply(position);\r\n        let transform = position.multiply(rotation).multiply(mOffset);\r\n        return transform;\r\n    }\r\n    getProjectionMatrix(canvas) {\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // let z_plane = -1. / Math.tan(pi / 8.);        \r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newPerspective(this.fov, aspect, this.zNear, this.zFar);\r\n        return projection;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/camera.ts\n");

/***/ }),

/***/ "./src/render/dot-renderer3.ts":
/*!*************************************!*\
  !*** ./src/render/dot-renderer3.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotRenderer3\": () => /* binding */ DotRenderer3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\n\r\nclass DotRenderer3 extends _renderer__WEBPACK_IMPORTED_MODULE_1__.Renderer {\r\n    constructor(gl, radius = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n        uniform float u_size;\r\n\r\n        attribute vec3 a_vertex;\r\n\r\n        void main() {\r\n            // Set the size of a rendered point.\r\n            gl_PointSize = u_size;\r\n\r\n            // Transform the location of the vertex.\r\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\r\n        }\r\n\r\n        `;\r\n        let fragmentSourceSquare = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        // vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        let fragmentSourceRound = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            if (distance(center, gl_PointCoord) > 0.5) {\r\n               discard;\r\n            }\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_size = gl.getUniformLocation(this.program, \"u_size\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        this.color = color;\r\n        this.size = radius;\r\n        this.count = 0;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set(vectors, speed) {\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        // convert all possible entries to a general entry\r\n        let array = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(vectors);\r\n        // from some other thing\r\n        this.count = array.count();\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, array._width, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, array.data, super.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, this.count);\r\n    }\r\n    setAndRender(gl, matrix, vectors) {\r\n        this.set(vectors, _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3JlbmRlci9kb3QtcmVuZGVyZXIzLnRzP2IwY2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZUFBZTtBQUcwRTtBQUd4QztBQUUxQyxNQUFNLFlBQWEsU0FBUSwrQ0FBUTtJQWN0QyxZQUFZLEVBQXlCLEVBQ2pDLFNBQWdCLENBQUMsRUFDakIsUUFBa0IsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFDM0IsU0FBaUIsSUFBSTtRQUVyQix1RUFBdUU7UUFDdkUsdUVBQXVFO1FBQ3ZFLHdEQUF3RDtRQUN4RCwyQkFBMkI7UUFDM0IsSUFBSSxZQUFZLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWtCMUIsQ0FBQztRQUNGLElBQUksb0JBQW9CLEdBQVc7Ozs7Ozs7Ozs7U0FVbEMsQ0FBQztRQUVGLElBQUksbUJBQW1CLEdBQVc7Ozs7Ozs7Ozs7Ozs7U0FhakMsQ0FBQztRQUVGLGdCQUFnQjtRQUNoQixJQUFJLE1BQU0sRUFBRTtZQUNSLEtBQUssQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixDQUFDLENBQUM7U0FDakQ7YUFBTTtZQUNILEtBQUssQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixDQUFDLENBQUM7U0FDaEQ7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUUsQ0FBQztRQUUvRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FB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LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gam9zIGZlZW5zdHJhXHJcblxyXG5pbXBvcnQgeyBGbG9hdE1hdHJpeCB9IGZyb20gXCIuLi9kYXRhL2Zsb2F0LW1hdHJpeFwiO1xyXG5pbXBvcnQgeyBnZXRHZW5lcmFsRmxvYXRNYXRyaXgsIFZlY3RvcjJBcnJheSwgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBEcmF3U3BlZWQsIFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb3RSZW5kZXJlcjMgZXh0ZW5kcyBSZW5kZXJlciB7XHJcblxyXG4gICAgLy8gYXR0cmlidXRlICYgdW5pZm9ybSBsb2NhdGlvbnNcclxuICAgIGFfcG9zaXRpb246IG51bWJlcjtcclxuICAgIGFfcG9zaXRpb25fYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcclxuXHJcbiAgICB1X3RyYW5zZm9ybTogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcbiAgICB1X2NvbG9yOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcclxuICAgIHVfc2l6ZTogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcblxyXG4gICAgY29sb3I6IG51bWJlcltdO1xyXG4gICAgc2l6ZTogbnVtYmVyO1xyXG4gICAgY291bnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBcclxuICAgICAgICByYWRpdXM6IG51bWJlciA9NSwgXHJcbiAgICAgICAgY29sb3I6IG51bWJlcltdID0gWzEsMSwxLDFdLCBcclxuICAgICAgICBzcXVhcmU6IGJvb2xlYW49IHRydWUgKSB7XHJcblxyXG4gICAgICAgIC8vIG5vdGU6IEkgbGlrZSB2ZXJ0ZXggJiBmcmFnbWVudHMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHNjcmlwdCBpdHNlbGYuXHJcbiAgICAgICAgLy8gd2hlbiB5b3UgY2hhbmdlIHZlcnRleCBvciBmcmFnbWVudCwgdGhpcyBjbGFzcyBoYXMgdG8gZGVhbCB3aXRoIGl0LiBcclxuICAgICAgICAvLyBwdXR0aW5nIHRoZW0gc29tZXdoZXJlIGVsc2UgZG9lc250IG1ha2Ugc2Vuc2UgdG8gbWUsIFxyXG4gICAgICAgIC8vIHRoZXkgYXJlIGNvdXBsZWQgMSB0byAxLlxyXG4gICAgICAgIGxldCB2ZXJ0ZXhTb3VyY2U6IHN0cmluZyA9IGBcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XHJcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcblxyXG4gICAgICAgIHVuaWZvcm0gbWF0NCB1X3RyYW5zZm9ybTtcclxuICAgICAgICB1bmlmb3JtIHZlYzQgdV9jb2xvcjtcclxuICAgICAgICB1bmlmb3JtIGZsb2F0IHVfc2l6ZTtcclxuXHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXg7XHJcblxyXG4gICAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgICAgLy8gU2V0IHRoZSBzaXplIG9mIGEgcmVuZGVyZWQgcG9pbnQuXHJcbiAgICAgICAgICAgIGdsX1BvaW50U2l6ZSA9IHVfc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyYW5zZm9ybSB0aGUgbG9jYXRpb24gb2YgdGhlIHZlcnRleC5cclxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X3RyYW5zZm9ybSAqIHZlYzQoYV92ZXJ0ZXgsIDEuMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBgO1xyXG4gICAgICAgIGxldCBmcmFnbWVudFNvdXJjZVNxdWFyZTogc3RyaW5nID0gYFxyXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHJcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XHJcbiAgICAgICAgLy8gdmVjMiBjZW50ZXIgPSB2ZWMyKDAuNSwgMC41KTtcclxuXHJcbiAgICAgICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB1X2NvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICBsZXQgZnJhZ21lbnRTb3VyY2VSb3VuZDogc3RyaW5nID0gYFxyXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHJcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XHJcbiAgICAgICAgdmVjMiBjZW50ZXIgPSB2ZWMyKDAuNSwgMC41KTtcclxuXHJcbiAgICAgICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UoY2VudGVyLCBnbF9Qb2ludENvb3JkKSA+IDAuNSkge1xyXG4gICAgICAgICAgICAgICBkaXNjYXJkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIC8vIHNldHVwIHByb2dyYW1cclxuICAgICAgICBpZiAoc3F1YXJlKSB7ICAgIFxyXG4gICAgICAgICAgICBzdXBlcihnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZVNxdWFyZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3VwZXIoZ2wsIHZlcnRleFNvdXJjZSwgZnJhZ21lbnRTb3VyY2VSb3VuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVfdHJhbnNmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X3RyYW5zZm9ybVwiKSE7XHJcbiAgICAgICAgdGhpcy51X3NpemUgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcInVfc2l6ZVwiKSE7XHJcbiAgICAgICAgdGhpcy51X2NvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X2NvbG9yXCIpITtcclxuXHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHJhZGl1cztcclxuICAgICAgICB0aGlzLmNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgLy8gQmluZCBpdCB0byBBUlJBWV9CVUZGRVIgKHRoaW5rIG9mIGl0IGFzIEFSUkFZX0JVRkZFUiA9IHBvc2l0aW9uQnVmZmVyKVxyXG4gICAgICAgIC8vIGxvb2sgdXAgd2hlcmUgdGhlIHZlcnRleCBkYXRhIG5lZWRzIHRvIGdvLlxyXG4gICAgICAgIHRoaXMuYV9wb3NpdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJhX3ZlcnRleFwiKTtcclxuICAgICAgICB0aGlzLmFfcG9zaXRpb25fYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCkhO1xyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTsgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHNldCh2ZWN0b3JzOiBWZWN0b3IyQXJyYXkgfCBWZWN0b3IzQXJyYXkgfCBWZWN0b3IyW10gfCBWZWN0b3IzW10sIHNwZWVkOiBEcmF3U3BlZWQpIHtcclxuICAgICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuXHJcbiAgICAgICAgLy8gY29udmVydCBhbGwgcG9zc2libGUgZW50cmllcyB0byBhIGdlbmVyYWwgZW50cnlcclxuICAgICAgICBsZXQgYXJyYXkgPSBnZXRHZW5lcmFsRmxvYXRNYXRyaXgodmVjdG9ycyk7XHJcblxyXG4gICAgICAgIC8vIGZyb20gc29tZSBvdGhlciB0aGluZ1xyXG4gICAgICAgIHRoaXMuY291bnQgPSBhcnJheS5jb3VudCgpO1xyXG5cclxuICAgICAgICAvLyAvLyBCaW5kIHRoZSBwb3NpdGlvbiBidWZmZXIuXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uLCBhcnJheS5fd2lkdGgsICBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBhcnJheS5kYXRhLCBzdXBlci5jb252ZXJ0RHJhd1NwZWVkKHNwZWVkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCkge1xyXG5cclxuICAgICAgICAvLyBUZWxsIGl0IHRvIHVzZSBvdXIgcHJvZ3JhbSAocGFpciBvZiBzaGFkZXJzKVxyXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVuaWZvcm1zXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobWF0cml4LmRhdGEpO1xyXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51X3RyYW5zZm9ybSwgZmFsc2UsIG1hdHJpeC5kYXRhKTtcclxuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy51X3NpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICAgICAgZ2wudW5pZm9ybTRmKHRoaXMudV9jb2xvciwgdGhpcy5jb2xvclswXSwgdGhpcy5jb2xvclsxXSwgdGhpcy5jb2xvclsyXSwgdGhpcy5jb2xvclszXSk7XHJcblxyXG4gICAgICAgIC8vIC8vIEJpbmQgdGhlIHBvc2l0aW9uIGJ1ZmZlci5cclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlcik7XHJcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBEcmF3IHRoZSBwb2ludC5cclxuICAgICAgICBnbC5kcmF3QXJyYXlzKCBnbC5QT0lOVFMsIDAsIHRoaXMuY291bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFuZFJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IE1hdHJpeDQsIHZlY3RvcnM6IFZlY3RvcjJBcnJheSB8IFZlY3RvcjNBcnJheSB8IFZlY3RvcjJbXSB8IFZlY3RvcjNbXSkge1xyXG4gICAgICAgIHRoaXMuc2V0KHZlY3RvcnMsIERyYXdTcGVlZC5EeW5hbWljRHJhdyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/render/dot-renderer3.ts\n");

/***/ }),

/***/ "./src/render/line-renderer.ts":
/*!*************************************!*\
  !*** ./src/render/line-renderer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineRenderer\": () => /* binding */ LineRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\nclass LineRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n\r\n        void main () {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n    }\r\n    set(gl, data, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = data.ids.length;\r\n        this.vertCount = data.verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data.verts.data, drawspeed);\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data.ids.buffer, drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(gl, matrix, data) {\r\n        this.set(gl, data, _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3JlbmRlci9saW5lLXJlbmRlcmVyLnRzP2M1ZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBbUM7QUFDbkMsd0JBQXdCO0FBQ3hCLDJDQUEyQztBQVNNO0FBRTFDLE1BQU0sWUFBYSxTQUFRLCtDQUFRO0lBU3RDLFlBQVksRUFBeUIsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUM7UUFFdEQsdUVBQXVFO1FBQ3ZFLHVFQUF1RTtRQUN2RSx3REFBd0Q7UUFDeEQsMkJBQTJCO1FBQzNCLE1BQU0sRUFBRSxHQUFHOzs7Ozs7Ozs7OztTQVdWLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRzs7Ozs7Ozs7O1NBU1YsQ0FBQztRQUVGLG9CQUFvQjtRQUNwQixLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFFL0QscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUcsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUcsQ0FBQztRQUV2QyxpQ0FBaUM7UUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsRUFBRSxD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QUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9yZW5kZXIvbGluZS1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIHNpbXBsZS1saW5lLXJlbmRlcmVyLnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBXZWJHTCBiYXNlZCByZW5kZXJpbmcgb2YgbGluZXMuXHJcblxyXG5pbXBvcnQgeyBGbG9hdE1hdHJpeCB9IGZyb20gXCIuLi9kYXRhL2Zsb2F0LW1hdHJpeFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyQXJyYXksIFZlY3RvcjNBcnJheSB9IGZyb20gXCIuLi9kYXRhL3ZlY3Rvci1hcnJheVwiO1xyXG5pbXBvcnQgeyBSZW5kZXJNZXNoIH0gZnJvbSBcIi4uL21lc2gvcmVuZGVyLW1lc2hcIjtcclxuaW1wb3J0IHsgUG9seWxpbmUgfSBmcm9tIFwiLi4vZ2VvL3BvbHlsaW5lXCI7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBMaW5lQXJyYXkgfSBmcm9tIFwiLi4vbWVzaC9saW5lLWFycmF5XCI7XHJcbmltcG9ydCB7IERyYXdTcGVlZCwgUmVuZGVyZXIgfSBmcm9tIFwiLi9yZW5kZXJlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcclxuXHJcbiAgICBhX3Bvc2l0aW9uOiBudW1iZXI7XHJcbiAgICBhX3Bvc2l0aW9uX2J1ZmZlcjogV2ViR0xCdWZmZXI7XHJcbiAgICBpbmRleF9idWZmZXI6IFdlYkdMQnVmZmVyO1xyXG4gICAgdV90cmFuc2Zvcm06IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xyXG4gICAgdV9jb2xvcjogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcbiAgICBjb3VudDogbnVtYmVyO1xyXG4gICAgdmVydENvdW50OiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb2xvciA9IFsxLDAsMCwwLjVdKSB7XHJcblxyXG4gICAgICAgIC8vIG5vdGU6IEkgbGlrZSB2ZXJ0ZXggJiBmcmFnbWVudHMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHNjcmlwdCBpdHNlbGYuXHJcbiAgICAgICAgLy8gd2hlbiB5b3UgY2hhbmdlIHZlcnRleCBvciBmcmFnbWVudCwgdGhpcyBjbGFzcyBoYXMgdG8gZGVhbCB3aXRoIGl0LiBcclxuICAgICAgICAvLyBwdXR0aW5nIHRoZW0gc29tZXdoZXJlIGVsc2UgZG9lc250IG1ha2Ugc2Vuc2UgdG8gbWUsIFxyXG4gICAgICAgIC8vIHRoZXkgYXJlIGNvdXBsZWQgMSB0byAxLlxyXG4gICAgICAgIGNvbnN0IHZzID0gYFxyXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzQgYV9wb3NpdGlvbjtcclxuICAgICAgICB1bmlmb3JtIG1hdDQgdV90cmFuc2Zvcm07XHJcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XHJcblxyXG4gICAgICAgIHZvaWQgbWFpbigpIHtcclxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X3RyYW5zZm9ybSAqIGFfcG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIGNvbnN0IGZzID0gYFxyXG4gICAgICAgIHByZWNpc2lvbiBtZWRpdW1wIGludDtcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHJcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHVfY29sb3I7XHJcblxyXG4gICAgICAgIHZvaWQgbWFpbiAoKSB7XHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIC8vIHNldHVwIHByb2dyYW0gICAgXHJcbiAgICAgICAgc3VwZXIoZ2wsIHZzLCBmcyk7XHJcbiAgICAgICAgdGhpcy51X3RyYW5zZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV90cmFuc2Zvcm1cIikhO1xyXG4gICAgICAgIHRoaXMudV9jb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIFwidV9jb2xvclwiKSE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gd2UgbmVlZCAyIGJ1ZmZlcnMgXHJcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XHJcbiAgXHJcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITtcclxuICAgICAgICB0aGlzLmluZGV4X2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITsgICAgXHJcblxyXG4gICAgICAgIC8vIHNldCB1bmlmb3JtcyB3aGljaCB3b250IGNoYW5nZVxyXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuICAgICAgICBnbC51bmlmb3JtNGYodGhpcy51X2NvbG9yLCBjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdLCBjb2xvclszXSk7XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy52ZXJ0Q291bnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBkYXRhOiBMaW5lQXJyYXksIHNwZWVkID0gRHJhd1NwZWVkLlN0YXRpY0RyYXcpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzYXZlIGhvdyBtYW55IGZhY2VzIG5lZWQgdG8gYmUgZHJhd25cclxuICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IGRhdGEuaWRzLmxlbmd0aFxyXG4gICAgICAgIHRoaXMudmVydENvdW50ID0gZGF0YS52ZXJ0cy5fd2lkdGg7XHJcbiAgICAgICAgbGV0IGRyYXdzcGVlZCA9IHRoaXMuY29udmVydERyYXdTcGVlZChzcGVlZCk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRpY2VzICBcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlcik7XHJcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uKTtcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV9wb3NpdGlvbiwgdGhpcy52ZXJ0Q291bnQsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGRhdGEudmVydHMuZGF0YSwgZHJhd3NwZWVkKTtcclxuXHJcbiAgICAgICAgLy8gaW5kaWNlcyBcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGV4X2J1ZmZlcik7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZGF0YS5pZHMuYnVmZmVyLCBkcmF3c3BlZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IE1hdHJpeDQpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUZWxsIGl0IHRvIHVzZSBvdXIgcHJvZ3JhbSAocGFpciBvZiBzaGFkZXJzKVxyXG4gICAgICAgIC8vIFBPSU5URVJTIE1VU1QgQUxTTyBCRSBTRVQsIERPIEVWRVJZVEhJTkcgRVhDRVBUIEdMLkJVRkZFUkRBVEFcclxuICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uKTtcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlcik7XHJcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmFfcG9zaXRpb24sIHRoaXMudmVydENvdW50LCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApOyBcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmluZGV4X2J1ZmZlcik7XHJcblxyXG4gICAgICAgIC8vIHNldCB1bmlmb3Jtc1xyXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51X3RyYW5zZm9ybSwgZmFsc2UsIG1hdHJpeC5kYXRhKTtcclxuXHJcbiAgICAgICAgLy8gRHJhdyB0aGUgcG9pbnQuXHJcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLkxJTkVTLCB0aGlzLmNvdW50LCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QW5kUmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCwgZGF0YTogTGluZUFycmF5KSB7XHJcbiAgICAgICAgdGhpcy5zZXQoZ2wsIGRhdGEsIERyYXdTcGVlZC5EeW5hbWljRHJhdyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/render/line-renderer.ts\n");

/***/ }),

/***/ "./src/render/mesh-debug-renderer.ts":
/*!*******************************************!*\
  !*** ./src/render/mesh-debug-renderer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshDebugRenderer\": () => /* binding */ MeshDebugRenderer\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _line_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simple-mesh-renderer */ \"./src/render/simple-mesh-renderer.ts\");\n/* harmony import */ var _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mesh-normals-renderer */ \"./src/render/mesh-normals-renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\nclass MeshDebugRenderer {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 0.25]) {\r\n        this.faceRend = new _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__.SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new _line_renderer__WEBPACK_IMPORTED_MODULE_2__.LineRenderer(gl, edgeColor);\r\n        this.normRend = new _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__.NormalRenderer(gl);\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, mesh) {\r\n        this.faceRend.setMesh(gl, mesh);\r\n        this.lineRend.set(gl, _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromMesh(mesh), _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.StaticDraw);\r\n        this.normRend.set(gl, mesh, _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.StaticDraw);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        this.faceRend.render(gl, matrix);\r\n        this.lineRend.render(gl, matrix);\r\n        this.normRend.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3JlbmRlci9tZXNoLWRlYnVnLXJlbmRlcmVyLnRzP2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4Qiw0Q0FBNEM7QUFHRztBQUlFO0FBQ0Y7QUFDYTtBQUNIO0FBRWxELE1BQU0saUJBQWlCO0lBTTFCLFlBQVksRUFBeUIsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUM7UUFDckYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHFFQUFrQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksd0RBQVksQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGtFQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUF5QixFQUFFLE1BQWUsRUFBRSxJQUFnQjtRQUNyRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsR0FBRyxDQUFDLEVBQXlCLEVBQUUsSUFBZ0I7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxnRUFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSwyREFBb0IsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsMkRBQW9CLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsK0JBQStCO0lBQy9CLE1BQU0sQ0FBQyxFQUF5QixFQUFFLE1BQWU7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlci9tZXNoLWRlYnVnLXJlbmRlcmVyLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgbWVzaC1yZW5kZXJlci50c1xyXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcclxuLy8gcHVycG9zZTogV2ViR0wgYmFzZWQgcmVuZGVyaW5nIG9mIGEgbWVzaC5cclxuXHJcbmltcG9ydCB7IEludE1hdHJpeCB9IGZyb20gXCIuLi9kYXRhL2ludC1tYXRyaXhcIjtcclxuaW1wb3J0IHsgTGluZUFycmF5IH0gZnJvbSBcIi4uL21lc2gvbGluZS1hcnJheVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcclxuaW1wb3J0IHsgUmVuZGVyTWVzaCB9IGZyb20gXCIuLi9tZXNoL3JlbmRlci1tZXNoXCI7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgRHJhd1NwZWVkLCBSZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IExpbmVSZW5kZXJlciB9IGZyb20gXCIuL2xpbmUtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgU2ltcGxlTWVzaFJlbmRlcmVyIH0gZnJvbSBcIi4vc2ltcGxlLW1lc2gtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgTm9ybWFsUmVuZGVyZXIgfSBmcm9tIFwiLi9tZXNoLW5vcm1hbHMtcmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNoRGVidWdSZW5kZXJlciB7XHJcblxyXG4gICAgZmFjZVJlbmQ6IFNpbXBsZU1lc2hSZW5kZXJlcjtcclxuICAgIGxpbmVSZW5kOiBMaW5lUmVuZGVyZXI7XHJcbiAgICBub3JtUmVuZDogTm9ybWFsUmVuZGVyZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgZmFjZUNvbG9yID0gWzEsMCwwLDAuMjVdLCBlZGdlQ29sb3IgPSBbMSwwLDAsMC4yNV0pIHtcclxuICAgICAgICB0aGlzLmZhY2VSZW5kID0gbmV3IFNpbXBsZU1lc2hSZW5kZXJlcihnbCwgZmFjZUNvbG9yKTtcclxuICAgICAgICB0aGlzLmxpbmVSZW5kID0gbmV3IExpbmVSZW5kZXJlcihnbCwgZWRnZUNvbG9yKTtcclxuICAgICAgICB0aGlzLm5vcm1SZW5kID0gbmV3IE5vcm1hbFJlbmRlcmVyKGdsKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBbmRSZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBNYXRyaXg0LCBtZXNoOiBSZW5kZXJNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5zZXQoZ2wsIG1lc2gpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtZXNoOiBSZW5kZXJNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5mYWNlUmVuZC5zZXRNZXNoKGdsLCBtZXNoKTtcclxuICAgICAgICB0aGlzLmxpbmVSZW5kLnNldChnbCwgTGluZUFycmF5LmZyb21NZXNoKG1lc2gpLCBEcmF3U3BlZWQuU3RhdGljRHJhdyk7XHJcbiAgICAgICAgdGhpcy5ub3JtUmVuZC5zZXQoZ2wsIG1lc2gsIERyYXdTcGVlZC5TdGF0aWNEcmF3KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZW5kZXIgMSBpbWFnZSB0byB0aGUgc2NyZWVuXHJcbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBNYXRyaXg0KSB7XHJcbiAgICAgICAgdGhpcy5mYWNlUmVuZC5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5saW5lUmVuZC5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5ub3JtUmVuZC5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/render/mesh-debug-renderer.ts\n");

/***/ }),

/***/ "./src/render/mesh-normals-renderer.ts":
/*!*********************************************!*\
  !*** ./src/render/mesh-normals-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NormalRenderer\": () => /* binding */ NormalRenderer\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\n\r\n\r\n\r\nclass NormalRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_4__.Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_vertex;\r\n        attribute vec4 a_vertex_color;\r\n\r\n        uniform mat4 u_transform;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_vertex;\r\n            v_color = a_vertex_color;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main () {\r\n            gl_FragColor = v_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_color = gl.getAttribLocation(this.program, \"a_vertex_color\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_color_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n        this.scale = 0.4;\r\n    }\r\n    // take a general render mesh, and extract normals\r\n    set(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_4__.DrawSpeed.StaticDraw) {\r\n        // save how many verts need to be drawn\r\n        gl.useProgram(this.program);\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        this.vertCount = 3;\r\n        let lineverts;\r\n        let normals;\r\n        // different buffer fills based upon normal kind\r\n        let normalKind = mesh.getNormalType();\r\n        if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Face) {\r\n            let faceCount = mesh.links.count();\r\n            this.count = faceCount * 2;\r\n            lineverts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            normals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            for (let f = 0; f < faceCount; f++) {\r\n                let center = mesh.getFaceVertices(f).average();\r\n                let normal = mesh.norms.getVector(f);\r\n                let i1 = f * 2;\r\n                let i2 = f * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1).div(2));\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n        }\r\n        else if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Vertex) {\r\n            console.warn(\"TODO\");\r\n            return;\r\n        }\r\n        else {\r\n            // console.log(\"no normals\");\r\n            this.count = 0;\r\n            return;\r\n        }\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, lineverts.data, drawspeed);\r\n        // normals\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, normals.data, drawspeed);\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (0,_mesh_line_array__WEBPACK_IMPORTED_MODULE_3__.getDefaultIndices)(this.count), drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/mesh-normals-renderer.ts\n");

/***/ }),

/***/ "./src/render/renderer.ts":
/*!********************************!*\
  !*** ./src/render/renderer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DrawSpeed\": () => /* binding */ DrawSpeed,\n/* harmony export */   \"Renderer\": () => /* binding */ Renderer\n/* harmony export */ });\n// webgl-helpers.ts\r\n// \r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this \r\nvar nextTextureId = 0;\r\nvar rendercallsperframe = 0;\r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed[\"StaticDraw\"] = 0] = \"StaticDraw\";\r\n    DrawSpeed[DrawSpeed[\"DynamicDraw\"] = 1] = \"DynamicDraw\"; // if you plan on using the 'set' method every frame \r\n})(DrawSpeed || (DrawSpeed = {}));\r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = Renderer.createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    buffer(...vars) {\r\n        rendercallsperframe += 1;\r\n    }\r\n    render(...vars) {\r\n        rendercallsperframe += 1;\r\n    }\r\n    static getNextTextureID() {\r\n        let id = nextTextureId;\r\n        nextTextureId += 1;\r\n        return id;\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth ||\r\n            gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n    static initWebglContext(canvas) {\r\n        let possiblyGl = canvas.getContext(\"webgl\");\r\n        if (possiblyGl == undefined) {\r\n            console.log(\"webgl unavailable...\");\r\n        }\r\n        let gl = possiblyGl;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clearDepth(1.);\r\n        return gl;\r\n    }\r\n    static compileShader(gl, shaderSource, shaderType) {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!success) {\r\n            throw \"could not compile shader:\" + shaderSource + gl.getShaderInfoLog(shader);\r\n        }\r\n        return shader;\r\n    }\r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!success) {\r\n            throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n        }\r\n        return program;\r\n    }\r\n    ;\r\n    static createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n        let vertexShader = Renderer.compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n        let fragmentShader = Renderer.compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n        return Renderer.createProgram(gl, vertexShader, fragmentShader);\r\n    }\r\n}\r\nRenderer.rendercallsperframe = 0;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/renderer.ts\n");

/***/ }),

/***/ "./src/render/simple-mesh-renderer.ts":
/*!********************************************!*\
  !*** ./src/render/simple-mesh-renderer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimpleMeshRenderer\": () => /* binding */ SimpleMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass SimpleMeshRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n\r\n        void main () {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // we need 2 buffers \r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    setMesh(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        return this.set(gl, mesh.verts, mesh.links, speed);\r\n    }\r\n    set(gl, verts, faces, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = faces.data.length;\r\n        // vertices \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        this.size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces.data), this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/simple-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/render/texture-mesh-renderer.ts":
/*!*********************************************!*\
  !*** ./src/render/texture-mesh-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextureMeshRenderer\": () => /* binding */ TextureMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass TextureMeshRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl) {\r\n        const vs = `\r\n        // precision mediump int;\r\n        // precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        attribute vec2 a_texcoord;\r\n\r\n        uniform mat4 u_transform;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n            v_texcoord = a_texcoord;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump float;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        uniform sampler2D u_texture;\r\n\r\n        void main() {\r\n            gl_FragColor = texture2D(u_texture, v_texcoord);\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms \r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_texture = gl.getUniformLocation(this.program, \"u_texture\");\r\n        // init three buffers: verts | uvs | links\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_texcoord = gl.getAttribLocation(this.program, \"a_texcoord\");\r\n        this.a_texcoord_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // init texture\r\n        this.texture_id = _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer.getNextTextureID();\r\n        this.texture = gl.createTexture();\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh, _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        if (!mesh.texture) {\r\n            console.warn(\"Mesh does not contain a texture!\");\r\n            return;\r\n        }\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.links.data.length;\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // buffer 2 \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs.data, this.convertDrawSpeed(speed));\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mesh.links.data), this.convertDrawSpeed(speed));\r\n        // texture \r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture);\r\n        // alternative texture -> Fill the texture with a 1x1 blue pixel.\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 128, 128, 255]));\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture.data);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // console.log(\"rendering..\");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // set texture \r\n        gl.uniform1i(this.u_texture, this.texture_id);\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_texcoord);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/texture-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/sfered/eye-finder-app.ts":
/*!**************************************!*\
  !*** ./src/sfered/eye-finder-app.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EyeFinderApp\": () => /* binding */ EyeFinderApp\n/* harmony export */ });\n/* harmony import */ var _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/pure-mesh */ \"./src/mesh/pure-mesh.ts\");\n/* harmony import */ var _scan_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scan-data */ \"./src/sfered/scan-data.ts\");\n/* harmony import */ var _system_domwrappers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../system/domwrappers */ \"./src/system/domwrappers.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _app_app__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../app/app */ \"./src/app/app.ts\");\n/* harmony import */ var _eye_finder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./eye-finder */ \"./src/sfered/eye-finder.ts\");\n/* harmony import */ var _geo_rectangle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../geo/rectangle */ \"./src/geo/rectangle.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _geo_circle3__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../geo/circle3 */ \"./src/geo/circle3.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _render_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../render/texture-mesh-renderer */ \"./src/render/texture-mesh-renderer.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../mesh/topo-mesh */ \"./src/mesh/topo-mesh.ts\");\n/* harmony import */ var _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../render/mesh-debug-renderer */ \"./src/render/mesh-debug-renderer.ts\");\n/* harmony import */ var _geo_cube__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../geo/cube */ \"./src/geo/cube.ts\");\n// name:    debug-app\r\n// author:  Jos Feenstra\r\n// purpose: environment to test eyefinder functionalities\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst settings = __webpack_require__(/*! ../sfered/settings.json */ \"./src/sfered/settings.json\"); // note DIFFERENCE BETWEEN \"\" AND ''. '' WORKS, \"\" NOT. \r\n// note : sadly, this doesnt quite work. \r\n// TODO : figure out some serialize sceme, aka: spitting out obj data in json format. \r\n// const DEBUG_LANDMARKS: any = require('../../data/scan/facelandmarks.json'); // note DIFFERENCE BETWEEN \"\" AND ''. '' WORKS, \"\" NOT. \r\n// const DEBUG_JPG: any = require('../../data/scan/head3d.jpg'); // note DIFFERENCE BETWEEN \"\" AND ''. '' WORKS, \"\" NOT. \r\n// const DEBUG_OBJ: any = require('../../data/scan/head3d.obj'); // note DIFFERENCE BETWEEN \"\" AND ''. '' WORKS, \"\" NOT. \r\n// const DEBUG_FRONT_IMAGE: any = require('../../data/scan/image.obj'); // note DIFFERENCE BETWEEN \"\" AND ''. '' WORKS, \"\" NOT. \r\n// console.log(DEBUG_JPG);\r\nclass EyeFinderApp extends _app_app__WEBPACK_IMPORTED_MODULE_9__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots2 = [];\r\n        this.whiteDots = [];\r\n        this.redDots = [];\r\n        this.images = [];\r\n        this.lines = [];\r\n        this.lineRenderables = [];\r\n        this.renderables = [];\r\n        this.debugRenderables = [];\r\n        let canvas = gl.canvas;\r\n        this.eyefinder = new _eye_finder__WEBPACK_IMPORTED_MODULE_10__.EyeFinder(this);\r\n        // setup render stuff \r\n        this.blueDotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_7__.DotRenderer3(gl, 6, [0, 0, 1, 1], false);\r\n        this.redDotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_7__.DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.whiteDotRenderer = new _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_7__.DotRenderer3(gl, 5, [0.8, 0.8, 0.8, 1], false);\r\n        this.whiteLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_8__.LineRenderer(gl, [0.9, 0.9, 0.9, 0.9]);\r\n        this.blueLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_8__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.redLineRenderer = new _render_line_renderer__WEBPACK_IMPORTED_MODULE_8__.LineRenderer(gl, [1, 0, 0, 0.5]);\r\n        this.faceRenderer = new _render_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_15__.TextureMeshRenderer(gl);\r\n        this.imageRenderer = new _render_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_15__.TextureMeshRenderer(gl);\r\n        this.debugMeshRenderer = new _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_18__.MeshDebugRenderer(gl, [0, 1, 1, 0.8], [0, 1, 1, 1]);\r\n        let zoom = 1;\r\n        this.camera = new _render_camera__WEBPACK_IMPORTED_MODULE_6__.Camera(canvas, zoom, true);\r\n        this.camera.angleAlpha = 0.25 * Math.PI;\r\n        this.camera.angleBeta = 0.25 * Math.PI;\r\n        (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_2__.addDropFileEventListeners)(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        let lines = _mesh_line_array__WEBPACK_IMPORTED_MODULE_12__.LineArray.fromCircle(new _geo_circle3__WEBPACK_IMPORTED_MODULE_13__.Circle3(_geo_plane__WEBPACK_IMPORTED_MODULE_14__.Plane.WorldXY(), 0.5));\r\n        this.lineRenderables.push(lines);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        this.lineRenderables.forEach((renderable) => {\r\n            this.redLineRenderer.setAndRender(gl, matrix, renderable);\r\n        });\r\n        if (this.mesh == undefined)\r\n            this.redDotRenderer.setAndRender(gl, matrix, _data_vector_array__WEBPACK_IMPORTED_MODULE_3__.Vector3Array.fromList([new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, 0, 0), new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(1, 1, 1)]));\r\n        else {\r\n            let mesh = this.mesh;\r\n            let landmarks = this.landmarks;\r\n            // show the mesh\r\n            this.faceRenderer.render(gl, matrix);\r\n            this.blueLineRenderer.render(gl, matrix);\r\n            // this.blueLineRenderer.setAndRender(gl, matrix, LineArray.fromMesh(mesh, false))\r\n            if (landmarks)\r\n                this.redDotRenderer.setAndRender(gl, matrix, landmarks);\r\n            this.blueDotRenderer.setAndRender(gl, matrix, mesh.uvs);\r\n            // debug data from eyefinder process\r\n            this.redDotRenderer.setAndRender(gl, matrix, this.dots2);\r\n            this.whiteDotRenderer.setAndRender(gl, matrix, this.whiteDots);\r\n            this.redDotRenderer.setAndRender(gl, matrix, this.redDots);\r\n            this.whiteLineRenderer.setAndRender(gl, matrix, _mesh_line_array__WEBPACK_IMPORTED_MODULE_12__.LineArray.fromLines(this.lines));\r\n            this.redLineRenderer.render(gl, matrix);\r\n            // render meshes with textures\r\n            this.renderables.forEach((mesh) => {\r\n                this.imageRenderer.setAndRender(gl, matrix, mesh);\r\n            });\r\n            // render textureless meshes \r\n            this.debugRenderables.forEach((mesh) => {\r\n                this.debugMeshRenderer.setAndRender(gl, matrix, mesh);\r\n            });\r\n            // render some dots \r\n            if (this.dots) {\r\n                //\r\n                this.redDotRenderer.setAndRender(gl, matrix, this.dots);\r\n            }\r\n        }\r\n    }\r\n    bufferImageMeshes() {\r\n        // i was having trouble rendering images... this is a workaround:\r\n        // convert the this.images[] list into the this.imageMeshes list. then render that with the normal renderer\r\n        let size = 256;\r\n        let accHeight = 0;\r\n        this.images.forEach((image, i) => {\r\n            let height = image.height;\r\n            let width = image.width;\r\n            let rec = new _geo_rectangle__WEBPACK_IMPORTED_MODULE_11__.Rectangle3(_geo_plane__WEBPACK_IMPORTED_MODULE_14__.Plane.fromPVV(new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, 0, 0), new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(1, 0, 0), new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, 1, 0)), _math_domain__WEBPACK_IMPORTED_MODULE_4__.Domain2.fromBounds(10, 10 + width, accHeight, accHeight + height));\r\n            let mesh = _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromRect(rec);\r\n            mesh.setTexture(image.resize(size, size).toImageData()); // note: webgl can only work with 2^x * 512 images\r\n            this.renderables.push(mesh);\r\n            accHeight += height + 10;\r\n        });\r\n    }\r\n    addNextcloudData(data) {\r\n        // start the eyefinder\r\n        this.renderables = [];\r\n        let r = this.eyefinder.findPupilsFromNextcloud(data);\r\n        if (r) {\r\n            console.log(\"eyepoints found\");\r\n            // difference between edited eyepoints in dataset, and this newly found point:\r\n            let eyepointL = r[0];\r\n            let eyepointR = r[1];\r\n            let topo = _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_17__.TopoMesh.copyFromMesh(data.mesh);\r\n            let guesspointL = topo.closestPoint(data.eyePointsEdited.getVector(0));\r\n            let guesspointR = topo.closestPoint(data.eyePointsEdited.getVector(1));\r\n            console.log(\"accuracy left: \", eyepointL.disTo(guesspointL).toPrecision(5));\r\n            console.log(\"accuracy right: \", eyepointR.disTo(guesspointR).toPrecision(5));\r\n            // create spheres at the center points \r\n            let radius = 0.5;\r\n            let detail = 10;\r\n            let spheres = _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromJoin([\r\n                _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromSphere(eyepointL, radius, detail, detail),\r\n                _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromSphere(eyepointR, radius, detail, detail),\r\n                _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCube(_geo_cube__WEBPACK_IMPORTED_MODULE_19__.Cube.fromRadius(guesspointL, radius)),\r\n                _mesh_pure_mesh__WEBPACK_IMPORTED_MODULE_0__.PureMesh.fromCube(_geo_cube__WEBPACK_IMPORTED_MODULE_19__.Cube.fromRadius(guesspointR, radius)),\r\n            ]);\r\n            this.debugRenderables.push(spheres.toDisplayMesh());\r\n        }\r\n        else {\r\n            console.log(\"eyepoints couldnt be found...\");\r\n        }\r\n        this.bufferImageMeshes();\r\n        let mesh = data.mesh;\r\n        this.faceRenderer.set(this.gl, mesh);\r\n        this.blueLineRenderer.set(this.gl, _mesh_line_array__WEBPACK_IMPORTED_MODULE_12__.LineArray.fromMesh(mesh), _render_renderer__WEBPACK_IMPORTED_MODULE_16__.DrawSpeed.StaticDraw);\r\n        this.mesh = mesh;\r\n        let center = this.mesh.verts.average();\r\n        this.camera.pos.copy(center);\r\n    }\r\n    addBellusData(bsd) {\r\n        // start the eyefinder\r\n        let r = this.eyefinder.findPupilsFromBellus(bsd);\r\n        if (r) {\r\n            console.log(\"eyepoints found\");\r\n        }\r\n        else {\r\n            console.log(\"eyepoints couldnt be found...\");\r\n        }\r\n        this.bufferImageMeshes();\r\n        // this.camera.pos = left.clone();\r\n        // this.camera.offset.x = 100;\r\n        // put the data into the render buffers.\r\n        let mesh = bsd.mesh;\r\n        this.faceRenderer.set(this.gl, mesh);\r\n        this.blueLineRenderer.set(this.gl, _mesh_line_array__WEBPACK_IMPORTED_MODULE_12__.LineArray.fromMesh(mesh), _render_renderer__WEBPACK_IMPORTED_MODULE_16__.DrawSpeed.StaticDraw);\r\n        // this.redLineRenderer.set(this.gl, mesh.uvs.data, mesh.getLineIds(), 2);\r\n        this.mesh = bsd.mesh;\r\n        this.landmarks = bsd.landmarks;\r\n    }\r\n    testBaricentricElevation(bsd) {\r\n        let topo = _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_17__.TopoMesh.copyFromMesh(bsd.mesh);\r\n        let count = 100;\r\n        let center = new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector2(0.5, 0.5);\r\n        for (let i = 0; i < count; i++) {\r\n            let theta = (i / count) * 2 * Math.PI;\r\n            let test = _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector2.fromCircle(center, 0.05, theta);\r\n            this.whiteDots.push(test.to3D());\r\n            let face = topo.walkUV(test);\r\n            if (face == -1) {\r\n                console.warn(\"got a point not on triangle...\");\r\n                return new _math_vector__WEBPACK_IMPORTED_MODULE_5__.Vector3(0, 0, 0);\r\n            }\r\n            let tr3 = topo.getTriangle3(face);\r\n            let tr2 = topo.getTriangle2(face);\r\n            let triangle2points = tr2.points().to3D().toList();\r\n            // console.log(triangle2points);\r\n            this.whiteDots.push(test.to3D());\r\n            let bari = tr2.toBarycentric(test);\r\n            let test3d = tr3.fromBarycentric(bari);\r\n            this.whiteDots.push(test3d);\r\n        }\r\n    }\r\n}\r\nvar Format;\r\n(function (Format) {\r\n    Format[Format[\"None\"] = 0] = \"None\";\r\n    Format[Format[\"Bellus\"] = 1] = \"Bellus\";\r\n    Format[Format[\"NextCloudDataset\"] = 2] = \"NextCloudDataset\"; // the 140 or so scans on nextcloud \r\n})(Format || (Format = {}));\r\nfunction getFormat(files) {\r\n    for (let i = 0; i < files.length; i++) {\r\n        let file = files.item(i);\r\n        if (file.name == \"facelandmarks.json\") {\r\n            return Format.Bellus;\r\n        }\r\n        if (file.name == \"scaninfo.txt\") {\r\n            return Format.NextCloudDataset;\r\n        }\r\n    }\r\n    return Format.None;\r\n}\r\nfunction processFiles(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let format = getFormat(files);\r\n        switch (format) {\r\n            case Format.Bellus:\r\n                console.log(\"found a bellus-style dataset! processing...\");\r\n                _scan_data__WEBPACK_IMPORTED_MODULE_1__.BellusScanData.fromFileList(files, settings).then((bsd) => this.addBellusData(bsd));\r\n                break;\r\n            case Format.NextCloudDataset:\r\n                console.log(\"found a scan from the nextcloud format! processing...\");\r\n                _scan_data__WEBPACK_IMPORTED_MODULE_1__.NextcloudScanData.fromFileList(files, settings).then((data) => this.addNextcloudData(data));\r\n                break;\r\n            case Format.None:\r\n                console.log(\"couldnt read the files you gave me...\");\r\n                break;\r\n        }\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3NmZXJlZC9leWUtZmluZGVyLWFwcC50cz9hM2NkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEIseURBQXlEOzs7Ozs7Ozs7O0FBR1o7QUFFbUI7QUFDb0I7QUFDaEM7QUFDWDtBQUNTO0FBQ1I7QUFDYTtBQUNBO0FBRXRCO0FBQ1E7QUFFaUI7QUFDWDtBQUNOO0FBQ0o7QUFDaUM7QUFDdkI7QUFDRjtBQUVxQjtBQUMvQjtBQUVuQyxNQUFNLFFBQVEsR0FBRyxtQkFBTyxDQUFDLDJEQUF5QixDQUFDLENBQUMsQ0FBQyx3REFBd0Q7QUFFN0cseUNBQXlDO0FBQ3pDLHNGQUFzRjtBQUV0Rix1SUFBdUk7QUFDdkkseUhBQXlIO0FBQ3pILHlIQUF5SDtBQUN6SCxnSUFBZ0k7QUFFaEksMEJBQTBCO0FBR25CLE1BQU0sWUFBYSxTQUFRLHlDQUFHO0lBd0NqQyxZQUFZLEVBQXlCO1FBRWpDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQS9CZCxVQUFLLEdBQWMsRUFBRSxDQUFDO1FBQ3RCLGNBQVMsR0FBYyxFQUFFLENBQUM7UUFDMUIsWUFBTyxHQUFjLEVBQUUsQ0FBQztRQUN4QixXQUFNLEdBQWdCLEVBQUUsQ0FBQztRQUV6QixVQUFLLEdBQWMsRUFBRSxDQUFDO1FBQ3RCLG9CQUFlLEdBQWdCLEVBQUUsQ0FBQztRQUVsQyxnQkFBVyxHQUFpQixFQUFFLENBQUM7UUFDL0IscUJBQWdCLEdBQWlCLEVBQUUsQ0FBQztRQXVCaEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTJCLENBQUM7UUFFNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLG1EQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSwrREFBWSxDQUFDLEVBQUUsRUFB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LDZDQUE2QyxDQUFDO2dCQUMxRCxtRUFBMkIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUM3QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FDbkMsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxNQUFNLENBQUMsZ0JBQWdCO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLHVEQUF1RCxDQUFDO2dCQUNwRSxzRUFBOEIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNoRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUN4QyxDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLE1BQU0sQ0FBQyxJQUFJO2dCQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUM7Z0JBQ3BELE1BQU07U0FDYjtJQUNMLENBQUM7Q0FBQSIsImZpbGUiOiIuL3NyYy9zZmVyZWQvZXllLWZpbmRlci1hcHAudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBkZWJ1Zy1hcHBcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IGVudmlyb25tZW50IHRvIHRlc3QgZXllZmluZGVyIGZ1bmN0aW9uYWxpdGllc1xyXG5cclxuaW1wb3J0IHsgUmVuZGVyTWVzaCwgbWVzaEZyb21PYmogfSBmcm9tIFwiLi4vbWVzaC9yZW5kZXItbWVzaFwiO1xyXG5pbXBvcnQgeyBQdXJlTWVzaCB9IGZyb20gXCIuLi9tZXNoL3B1cmUtbWVzaFwiO1xyXG5pbXBvcnQgeyBHZW9uSW1hZ2UgfSBmcm9tIFwiLi4vaW1nL0ltYWdlXCI7XHJcbmltcG9ydCB7IEJlbGx1c1NjYW5EYXRhLCBOZXh0Y2xvdWRTY2FuRGF0YSB9IGZyb20gXCIuL3NjYW4tZGF0YVwiO1xyXG5pbXBvcnQgeyBhZGREcm9wRmlsZUV2ZW50TGlzdGVuZXJzLCBsb2FkVGV4dEZyb21GaWxlIH0gZnJvbSBcIi4uL3N5c3RlbS9kb213cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcclxuaW1wb3J0IHsgRG9tYWluMiB9IGZyb20gXCIuLi9tYXRoL2RvbWFpblwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuLi9yZW5kZXIvY2FtZXJhXCI7XHJcbmltcG9ydCB7IERvdFJlbmRlcmVyMyB9IGZyb20gXCIuLi9yZW5kZXIvZG90LXJlbmRlcmVyM1wiO1xyXG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2xpbmUtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcC9hcHBcIjtcclxuaW1wb3J0IHsgRXllRmluZGVyIH0gZnJvbSBcIi4vZXllLWZpbmRlclwiO1xyXG5pbXBvcnQgeyBNYXRyaXgzLCBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZTIsIFJlY3RhbmdsZTMgfSBmcm9tIFwiLi4vZ2VvL3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBMaW5lQXJyYXkgfSBmcm9tIFwiLi4vbWVzaC9saW5lLWFycmF5XCI7XHJcbmltcG9ydCB7IENpcmNsZTMgfSBmcm9tIFwiLi4vZ2VvL2NpcmNsZTNcIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vZ2VvL3BsYW5lXCI7XHJcbmltcG9ydCB7IFRleHR1cmVNZXNoUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3RleHR1cmUtbWVzaC1yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBEcmF3U3BlZWQgfSBmcm9tIFwiLi4vcmVuZGVyL3JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IFRvcG9NZXNoIH0gZnJvbSBcIi4uL21lc2gvdG9wby1tZXNoXCI7XHJcbmltcG9ydCB7IFNpbXBsZU1lc2hSZW5kZXJlciB9IGZyb20gXCIuLi9yZW5kZXIvc2ltcGxlLW1lc2gtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgTWVzaERlYnVnUmVuZGVyZXIgfSBmcm9tIFwiLi4vcmVuZGVyL21lc2gtZGVidWctcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgQ3ViZSB9IGZyb20gXCIuLi9nZW8vY3ViZVwiO1xyXG5cclxuY29uc3Qgc2V0dGluZ3MgPSByZXF1aXJlKCcuLi9zZmVyZWQvc2V0dGluZ3MuanNvbicpOyAvLyBub3RlIERJRkZFUkVOQ0UgQkVUV0VFTiBcIlwiIEFORCAnJy4gJycgV09SS1MsIFwiXCIgTk9ULiBcclxuXHJcbi8vIG5vdGUgOiBzYWRseSwgdGhpcyBkb2VzbnQgcXVpdGUgd29yay4gXHJcbi8vIFRPRE8gOiBmaWd1cmUgb3V0IHNvbWUgc2VyaWFsaXplIHNjZW1lLCBha2E6IHNwaXR0aW5nIG91dCBvYmogZGF0YSBpbiBqc29uIGZvcm1hdC4gXHJcblxyXG4vLyBjb25zdCBERUJVR19MQU5ETUFSS1M6IGFueSA9IHJlcXVpcmUoJy4uLy4uL2RhdGEvc2Nhbi9mYWNlbGFuZG1hcmtzLmpzb24nKTsgLy8gbm90ZSBESUZGRVJFTkNFIEJFVFdFRU4gXCJcIiBBTkQgJycuICcnIFdPUktTLCBcIlwiIE5PVC4gXHJcbi8vIGNvbnN0IERFQlVHX0pQRzogYW55ID0gcmVxdWlyZSgnLi4vLi4vZGF0YS9zY2FuL2hlYWQzZC5qcGcnKTsgLy8gbm90ZSBESUZGRVJFTkNFIEJFVFdFRU4gXCJcIiBBTkQgJycuICcnIFdPUktTLCBcIlwiIE5PVC4gXHJcbi8vIGNvbnN0IERFQlVHX09CSjogYW55ID0gcmVxdWlyZSgnLi4vLi4vZGF0YS9zY2FuL2hlYWQzZC5vYmonKTsgLy8gbm90ZSBESUZGRVJFTkNFIEJFVFdFRU4gXCJcIiBBTkQgJycuICcnIFdPUktTLCBcIlwiIE5PVC4gXHJcbi8vIGNvbnN0IERFQlVHX0ZST05UX0lNQUdFOiBhbnkgPSByZXF1aXJlKCcuLi8uLi9kYXRhL3NjYW4vaW1hZ2Uub2JqJyk7IC8vIG5vdGUgRElGRkVSRU5DRSBCRVRXRUVOIFwiXCIgQU5EICcnLiAnJyBXT1JLUywgXCJcIiBOT1QuIFxyXG5cclxuLy8gY29uc29sZS5sb2coREVCVUdfSlBHKTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRXllRmluZGVyQXBwIGV4dGVuZHMgQXBwIHtcclxuXHJcbiAgICAvLyBkYXRhIFxyXG4gICAgbWVzaD86IFJlbmRlck1lc2g7XHJcbiAgICBsYW5kbWFya3M/OiBWZWN0b3IzQXJyYXk7XHJcblxyXG4gICAgLy8gcHJvY2Vzc1xyXG4gICAgZXllZmluZGVyOiBFeWVGaW5kZXI7XHJcblxyXG4gICAgLy8gZGVidWcgZGF0YSBcclxuICAgIGRvdHM/OiBWZWN0b3IzQXJyYXk7XHJcbiAgICBkb3RzMjogVmVjdG9yMltdID0gW107XHJcbiAgICB3aGl0ZURvdHM6IFZlY3RvcjNbXSA9IFtdO1xyXG4gICAgcmVkRG90czogVmVjdG9yM1tdID0gW107XHJcbiAgICBpbWFnZXM6IEdlb25JbWFnZVtdID0gW107XHJcbiAgICBtZXNoTGluZUlkcz86IFVpbnQxNkFycmF5O1xyXG4gICAgbGluZXM6IFZlY3RvcjNbXSA9IFtdO1xyXG4gICAgbGluZVJlbmRlcmFibGVzOiBMaW5lQXJyYXlbXSA9IFtdO1xyXG5cclxuICAgIHJlbmRlcmFibGVzOiBSZW5kZXJNZXNoW10gPSBbXTtcclxuICAgIGRlYnVnUmVuZGVyYWJsZXM6IFJlbmRlck1lc2hbXSA9IFtdO1xyXG5cclxuICAgIC8vIHJlbmRlcmluZyBcclxuICAgIGJsdWVEb3RSZW5kZXJlcjogRG90UmVuZGVyZXIzO1xyXG4gICAgcmVkRG90UmVuZGVyZXI6IERvdFJlbmRlcmVyMztcclxuICAgIHdoaXRlRG90UmVuZGVyZXI6IERvdFJlbmRlcmVyMztcclxuXHJcbiAgICB3aGl0ZUxpbmVSZW5kZXJlcjogTGluZVJlbmRlcmVyO1xyXG4gICAgcmVkTGluZVJlbmRlcmVyOiBMaW5lUmVuZGVyZXI7XHJcbiAgICBibHVlTGluZVJlbmRlcmVyOiBMaW5lUmVuZGVyZXI7XHJcblxyXG4gICAgZmFjZVJlbmRlcmVyOiBUZXh0dXJlTWVzaFJlbmRlcmVyO1xyXG4gICAgaW1hZ2VSZW5kZXJlcjogVGV4dHVyZU1lc2hSZW5kZXJlcjtcclxuICAgIGRlYnVnTWVzaFJlbmRlcmVyOiBNZXNoRGVidWdSZW5kZXJlcjtcclxuXHJcbiAgICBjYW1lcmE6IENhbWVyYTtcclxuICAgIFxyXG5cclxuICAgIFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGdsLmNhbnZhcyBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuXHJcbiAgICAgICAgdGhpcy5leWVmaW5kZXIgPSBuZXcgRXllRmluZGVyKHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBzZXR1cCByZW5kZXIgc3R1ZmYgXHJcbiAgICAgICAgdGhpcy5ibHVlRG90UmVuZGVyZXIgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCA2LCBbMCwwLDEsMV0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlZERvdFJlbmRlcmVyID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgNCwgWzEsMCwwLDFdLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy53aGl0ZURvdFJlbmRlcmVyID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgNSwgWzAuOCwwLjgsMC44LDFdLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMud2hpdGVMaW5lUmVuZGVyZXIgPSBuZXcgTGluZVJlbmRlcmVyKGdsLCBbMC45LDAuOSwwLjksMC45XSk7XHJcbiAgICAgICAgdGhpcy5ibHVlTGluZVJlbmRlcmVyID0gbmV3IExpbmVSZW5kZXJlcihnbCwgWzAsMCwxLDAuNV0pO1xyXG4gICAgICAgIHRoaXMucmVkTGluZVJlbmRlcmVyID0gbmV3IExpbmVSZW5kZXJlcihnbCwgWzEsMCwwLDAuNV0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZmFjZVJlbmRlcmVyID0gbmV3IFRleHR1cmVNZXNoUmVuZGVyZXIoZ2wpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VSZW5kZXJlciA9IG5ldyBUZXh0dXJlTWVzaFJlbmRlcmVyKGdsKTtcclxuICAgICAgICB0aGlzLmRlYnVnTWVzaFJlbmRlcmVyID0gbmV3IE1lc2hEZWJ1Z1JlbmRlcmVyKGdsLCBbMCwxLDEsMC44XSwgWzAsMSwxLDFdKVxyXG5cclxuICAgICAgICBsZXQgem9vbSA9IDE7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKGNhbnZhcywgem9vbSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEuYW5nbGVBbHBoYSA9IDAuMjUgKiBNYXRoLlBJO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLmFuZ2xlQmV0YSA9IDAuMjUgKiBNYXRoLlBJO1xyXG5cclxuICAgICAgICBhZGREcm9wRmlsZUV2ZW50TGlzdGVuZXJzKGNhbnZhcywgcHJvY2Vzc0ZpbGVzLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBsZXQgbGluZXMgPSBMaW5lQXJyYXkuZnJvbUNpcmNsZShuZXcgQ2lyY2xlMyhQbGFuZS5Xb3JsZFhZKCksIDAuNSkpO1xyXG4gICAgICAgIHRoaXMubGluZVJlbmRlcmFibGVzLnB1c2gobGluZXMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtb3ZlIHRoZSBjYW1lcmEgd2l0aCB0aGUgbW91c2VcclxuICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGUoc3RhdGUpOyBcclxuICAgIH1cclxuXHJcblxyXG4gICAgZHJhdyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcblxyXG4gICAgICAgIC8vIGdldCB0by1zY3JlZW4gbWF0cml4XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIGxldCBtYXRyaXggPSB0aGlzLmNhbWVyYS50b3RhbE1hdHJpeDtcclxuXHJcbiAgICAgICAgdGhpcy5saW5lUmVuZGVyYWJsZXMuZm9yRWFjaCgocmVuZGVyYWJsZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlZExpbmVSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgcmVuZGVyYWJsZSk7XHJcbiAgICAgICAgfSlcclxuICAgICBcclxuICAgICAgICBpZiAodGhpcy5tZXNoID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5yZWREb3RSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgVmVjdG9yM0FycmF5LmZyb21MaXN0KFtuZXcgVmVjdG9yMygwLDAsMCksIG5ldyBWZWN0b3IzKDEsMSwxKV0pKTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IG1lc2ggPSB0aGlzLm1lc2g7XHJcbiAgICAgICAgICAgIGxldCBsYW5kbWFya3MgPSB0aGlzLmxhbmRtYXJrcztcclxuXHJcbiAgICAgICAgICAgIC8vIHNob3cgdGhlIG1lc2hcclxuICAgICAgICAgICAgdGhpcy5mYWNlUmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgICAgICAgICB0aGlzLmJsdWVMaW5lUmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmJsdWVMaW5lUmVuZGVyZXIuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIExpbmVBcnJheS5mcm9tTWVzaChtZXNoLCBmYWxzZSkpXHJcbiAgICAgICAgICAgIGlmIChsYW5kbWFya3MpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZERvdFJlbmRlcmVyLnNldEFuZFJlbmRlcihnbCwgbWF0cml4LCBsYW5kbWFya3MpO1xyXG4gICAgICAgICAgICB0aGlzLmJsdWVEb3RSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgbWVzaC51dnMpOyAgIFxyXG5cclxuICAgICAgICAgICAgLy8gZGVidWcgZGF0YSBmcm9tIGV5ZWZpbmRlciBwcm9jZXNzXHJcbiAgICAgICAgICAgIHRoaXMucmVkRG90UmVuZGVyZXIuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIHRoaXMuZG90czIpO1xyXG4gICAgICAgICAgICB0aGlzLndoaXRlRG90UmVuZGVyZXIuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIHRoaXMud2hpdGVEb3RzKTtcclxuICAgICAgICAgICAgdGhpcy5yZWREb3RSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgdGhpcy5yZWREb3RzKTtcclxuICAgICAgICAgICAgdGhpcy53aGl0ZUxpbmVSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgTGluZUFycmF5LmZyb21MaW5lcyh0aGlzLmxpbmVzKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZExpbmVSZW5kZXJlci5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcblxyXG4gICAgICAgICAgICAvLyByZW5kZXIgbWVzaGVzIHdpdGggdGV4dHVyZXNcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJhYmxlcy5mb3JFYWNoKChtZXNoKSA9PntcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VSZW5kZXJlci5zZXRBbmRSZW5kZXIoZ2wsIG1hdHJpeCwgbWVzaCk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvLyByZW5kZXIgdGV4dHVyZWxlc3MgbWVzaGVzIFxyXG4gICAgICAgICAgICB0aGlzLmRlYnVnUmVuZGVyYWJsZXMuZm9yRWFjaCgobWVzaCkgPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnTWVzaFJlbmRlcmVyLnNldEFuZFJlbmRlcihnbCwgbWF0cml4LCBtZXNoKTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vIHJlbmRlciBzb21lIGRvdHMgXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRvdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZERvdFJlbmRlcmVyLnNldEFuZFJlbmRlcihnbCwgbWF0cml4LCB0aGlzLmRvdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgYnVmZmVySW1hZ2VNZXNoZXMoKSB7XHJcbiAgICAgICAgLy8gaSB3YXMgaGF2aW5nIHRyb3VibGUgcmVuZGVyaW5nIGltYWdlcy4uLiB0aGlzIGlzIGEgd29ya2Fyb3VuZDpcclxuICAgICAgICAvLyBjb252ZXJ0IHRoZSB0aGlzLmltYWdlc1tdIGxpc3QgaW50byB0aGUgdGhpcy5pbWFnZU1lc2hlcyBsaXN0LiB0aGVuIHJlbmRlciB0aGF0IHdpdGggdGhlIG5vcm1hbCByZW5kZXJlclxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBzaXplID0gMjU2O1xyXG4gICAgICAgIGxldCBhY2NIZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzLmZvckVhY2goKGltYWdlLCBpKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICAgICAgICBsZXQgd2lkdGggPSBpbWFnZS53aWR0aDsgXHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjID0gbmV3IFJlY3RhbmdsZTMoXHJcbiAgICAgICAgICAgICAgICBQbGFuZS5mcm9tUFZWKG5ldyBWZWN0b3IzKDAsMCwwKSwgbmV3IFZlY3RvcjMoMSwwLDApLCBuZXcgVmVjdG9yMygwLDEsMCkpLFxyXG4gICAgICAgICAgICAgICAgRG9tYWluMi5mcm9tQm91bmRzKDEwLDEwK3dpZHRoLCBhY2NIZWlnaHQsIGFjY0hlaWdodCArIGhlaWdodCkpO1xyXG4gICAgICAgICAgICBsZXQgbWVzaCA9IFB1cmVNZXNoLmZyb21SZWN0KHJlYyk7XHJcbiAgICAgICAgICAgIG1lc2guc2V0VGV4dHVyZShpbWFnZS5yZXNpemUoc2l6ZSwgc2l6ZSkudG9JbWFnZURhdGEoKSk7IC8vIG5vdGU6IHdlYmdsIGNhbiBvbmx5IHdvcmsgd2l0aCAyXnggKiA1MTIgaW1hZ2VzXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyYWJsZXMucHVzaChtZXNoKTtcclxuXHJcbiAgICAgICAgICAgIGFjY0hlaWdodCArPSBoZWlnaHQgKyAxMDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYWRkTmV4dGNsb3VkRGF0YShkYXRhOiBOZXh0Y2xvdWRTY2FuRGF0YSkge1xyXG5cclxuICAgICAgICAvLyBzdGFydCB0aGUgZXllZmluZGVyXHJcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlcyA9IFtdO1xyXG4gICAgICAgIGxldCByID0gdGhpcy5leWVmaW5kZXIuZmluZFB1cGlsc0Zyb21OZXh0Y2xvdWQoZGF0YSk7XHJcbiAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJleWVwb2ludHMgZm91bmRcIiEpICBcclxuXHJcbiAgICAgICAgICAgIC8vIGRpZmZlcmVuY2UgYmV0d2VlbiBlZGl0ZWQgZXllcG9pbnRzIGluIGRhdGFzZXQsIGFuZCB0aGlzIG5ld2x5IGZvdW5kIHBvaW50OlxyXG4gICAgICAgICAgICBsZXQgZXllcG9pbnRMID0gclswXTtcclxuICAgICAgICAgICAgbGV0IGV5ZXBvaW50UiA9IHJbMV07XHJcblxyXG4gICAgICAgICAgICBsZXQgdG9wbyA9IFRvcG9NZXNoLmNvcHlGcm9tTWVzaChkYXRhLm1lc2gpO1xyXG4gICAgICAgICAgICBsZXQgZ3Vlc3Nwb2ludEwgPSB0b3BvLmNsb3Nlc3RQb2ludChkYXRhLmV5ZVBvaW50c0VkaXRlZC5nZXRWZWN0b3IoMCkpO1xyXG4gICAgICAgICAgICBsZXQgZ3Vlc3Nwb2ludFIgPSB0b3BvLmNsb3Nlc3RQb2ludChkYXRhLmV5ZVBvaW50c0VkaXRlZC5nZXRWZWN0b3IoMSkpO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhY2N1cmFjeSBsZWZ0OiBcIiwgZXllcG9pbnRMLmRpc1RvKGd1ZXNzcG9pbnRMKS50b1ByZWNpc2lvbig1KSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWNjdXJhY3kgcmlnaHQ6IFwiLCBleWVwb2ludFIuZGlzVG8oZ3Vlc3Nwb2ludFIpLnRvUHJlY2lzaW9uKDUpKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBzcGhlcmVzIGF0IHRoZSBjZW50ZXIgcG9pbnRzIFxyXG4gICAgICAgICAgICBsZXQgcmFkaXVzID0gMC41O1xyXG4gICAgICAgICAgICBsZXQgZGV0YWlsID0gMTA7XHJcbiAgICAgICAgICAgIGxldCBzcGhlcmVzID0gUHVyZU1lc2guZnJvbUpvaW4oW1xyXG4gICAgICAgICAgICAgICAgUHVyZU1lc2guZnJvbVNwaGVyZShleWVwb2ludEwsIHJhZGl1cywgZGV0YWlsLCBkZXRhaWwpLFxyXG4gICAgICAgICAgICAgICAgUHVyZU1lc2guZnJvbVNwaGVyZShleWVwb2ludFIsIHJhZGl1cywgZGV0YWlsLCBkZXRhaWwpLFxyXG4gICAgICAgICAgICAgICAgUHVyZU1lc2guZnJvbUN1YmUoQ3ViZS5mcm9tUmFkaXVzKGd1ZXNzcG9pbnRMLCByYWRpdXMpKSxcclxuICAgICAgICAgICAgICAgIFB1cmVNZXNoLmZyb21DdWJlKEN1YmUuZnJvbVJhZGl1cyhndWVzc3BvaW50UiwgcmFkaXVzKSksXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnUmVuZGVyYWJsZXMucHVzaChzcGhlcmVzLnRvRGlzcGxheU1lc2goKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJleWVwb2ludHMgY291bGRudCBiZSBmb3VuZC4uLlwiKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJ1ZmZlckltYWdlTWVzaGVzKCk7XHJcblxyXG4gICAgICAgIGxldCBtZXNoID0gZGF0YS5tZXNoOyAgICAgICAgXHJcbiAgICAgICAgdGhpcy5mYWNlUmVuZGVyZXIuc2V0KHRoaXMuZ2wsIG1lc2gpO1xyXG4gICAgICAgIHRoaXMuYmx1ZUxpbmVSZW5kZXJlci5zZXQodGhpcy5nbCwgTGluZUFycmF5LmZyb21NZXNoKG1lc2gpLCBEcmF3U3BlZWQuU3RhdGljRHJhdyk7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaDtcclxuXHJcbiAgICAgICAgbGV0IGNlbnRlciA9IHRoaXMubWVzaC52ZXJ0cy5hdmVyYWdlKCk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zLmNvcHkoY2VudGVyKTsgIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhZGRCZWxsdXNEYXRhKGJzZDogQmVsbHVzU2NhbkRhdGEpIHtcclxuXHJcbiAgICAgICAgLy8gc3RhcnQgdGhlIGV5ZWZpbmRlclxyXG4gICAgICAgIGxldCByID0gdGhpcy5leWVmaW5kZXIuZmluZFB1cGlsc0Zyb21CZWxsdXMoYnNkKTtcclxuICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImV5ZXBvaW50cyBmb3VuZFwiKTsgICAgIFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXllcG9pbnRzIGNvdWxkbnQgYmUgZm91bmQuLi5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1ZmZlckltYWdlTWVzaGVzKCk7XHJcbiAgICAgICAgLy8gdGhpcy5jYW1lcmEucG9zID0gbGVmdC5jbG9uZSgpO1xyXG4gICAgICAgIC8vIHRoaXMuY2FtZXJhLm9mZnNldC54ID0gMTAwO1xyXG5cclxuICAgICAgICAvLyBwdXQgdGhlIGRhdGEgaW50byB0aGUgcmVuZGVyIGJ1ZmZlcnMuXHJcbiAgICAgICAgbGV0IG1lc2ggPSBic2QubWVzaDtcclxuXHJcbiAgICAgICAgdGhpcy5mYWNlUmVuZGVyZXIuc2V0KHRoaXMuZ2wsIG1lc2gpO1xyXG4gICAgICAgIHRoaXMuYmx1ZUxpbmVSZW5kZXJlci5zZXQodGhpcy5nbCwgTGluZUFycmF5LmZyb21NZXNoKG1lc2gpLCBEcmF3U3BlZWQuU3RhdGljRHJhdyk7XHJcbiAgICAgICAgLy8gdGhpcy5yZWRMaW5lUmVuZGVyZXIuc2V0KHRoaXMuZ2wsIG1lc2gudXZzLmRhdGEsIG1lc2guZ2V0TGluZUlkcygpLCAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoID0gYnNkLm1lc2g7XHJcbiAgICAgICAgdGhpcy5sYW5kbWFya3MgPSBic2QubGFuZG1hcmtzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0ZXN0QmFyaWNlbnRyaWNFbGV2YXRpb24oYnNkOiBCZWxsdXNTY2FuRGF0YSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0b3BvID0gVG9wb01lc2guY29weUZyb21NZXNoKGJzZC5tZXNoKTtcclxuICAgICAgICBsZXQgY291bnQgPSAxMDA7XHJcbiAgICAgICAgbGV0IGNlbnRlciA9IG5ldyBWZWN0b3IyKDAuNSwgMC41KTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdGhldGEgPSAgKGkgLyBjb3VudCkgKiAyICogTWF0aC5QSTtcclxuICAgICAgICAgICAgbGV0IHRlc3QgPSBWZWN0b3IyLmZyb21DaXJjbGUoY2VudGVyLCAwLjA1LCB0aGV0YSk7XHJcbiAgICAgICAgICAgIHRoaXMud2hpdGVEb3RzLnB1c2godGVzdC50bzNEKCkpOyAgICBcclxuXHJcbiAgICAgICAgICAgIGxldCBmYWNlID0gdG9wby53YWxrVVYodGVzdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChmYWNlID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJnb3QgYSBwb2ludCBub3Qgb24gdHJpYW5nbGUuLi5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMCwwLDApO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCB0cjMgPSB0b3BvLmdldFRyaWFuZ2xlMyhmYWNlKTtcclxuICAgICAgICAgICAgbGV0IHRyMiA9IHRvcG8uZ2V0VHJpYW5nbGUyKGZhY2UpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlMnBvaW50cyA9IHRyMi5wb2ludHMoKS50bzNEKCkudG9MaXN0KCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRyaWFuZ2xlMnBvaW50cyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndoaXRlRG90cy5wdXNoKHRlc3QudG8zRCgpKTsgICAgXHJcblxyXG4gICAgICAgICAgICBsZXQgYmFyaSA9IHRyMi50b0JhcnljZW50cmljKHRlc3QpO1xyXG4gICAgICAgICAgICBsZXQgdGVzdDNkID0gdHIzLmZyb21CYXJ5Y2VudHJpYyhiYXJpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2hpdGVEb3RzLnB1c2godGVzdDNkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuZW51bSBGb3JtYXQge1xyXG4gICAgTm9uZSxcclxuICAgIEJlbGx1cywgLy8gdGhlIHNwZWNpYWwgZGF0YXNldCBnYXRoZXJlZCBhdCBhbiBlYXJsaWVyIHN0ZXBcclxuICAgIE5leHRDbG91ZERhdGFzZXQgLy8gdGhlIDE0MCBvciBzbyBzY2FucyBvbiBuZXh0Y2xvdWQgXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRGb3JtYXQoZmlsZXM6IEZpbGVMaXN0KSA6IEZvcm1hdCB7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMCA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBmaWxlID0gZmlsZXMuaXRlbShpKSE7XHJcbiAgICAgICAgaWYgKGZpbGUubmFtZSA9PSBcImZhY2VsYW5kbWFya3MuanNvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBGb3JtYXQuQmVsbHVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmlsZS5uYW1lID09IFwic2NhbmluZm8udHh0XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEZvcm1hdC5OZXh0Q2xvdWREYXRhc2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBGb3JtYXQuTm9uZTtcclxufVxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NGaWxlcyh0aGlzOiBFeWVGaW5kZXJBcHAsIGZpbGVzOiBGaWxlTGlzdCkge1xyXG5cclxuICAgIGxldCBmb3JtYXQgPSBnZXRGb3JtYXQoZmlsZXMpO1xyXG4gICAgc3dpdGNoKGZvcm1hdCkge1xyXG4gICAgICAgIGNhc2UgRm9ybWF0LkJlbGx1czogXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmQgYSBiZWxsdXMtc3R5bGUgZGF0YXNldCEgcHJvY2Vzc2luZy4uLlwiKVxyXG4gICAgICAgICAgICBCZWxsdXNTY2FuRGF0YS5mcm9tRmlsZUxpc3QoZmlsZXMsIHNldHRpbmdzKS50aGVuKFxyXG4gICAgICAgICAgICAgICAgKGJzZCkgPT4gdGhpcy5hZGRCZWxsdXNEYXRhKGJzZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGb3JtYXQuTmV4dENsb3VkRGF0YXNldDogXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmQgYSBzY2FuIGZyb20gdGhlIG5leHRjbG91ZCBmb3JtYXQhIHByb2Nlc3NpbmcuLi5cIilcclxuICAgICAgICAgICAgTmV4dGNsb3VkU2NhbkRhdGEuZnJvbUZpbGVMaXN0KGZpbGVzLCBzZXR0aW5ncykudGhlbihcclxuICAgICAgICAgICAgICAgIChkYXRhKSA9PiB0aGlzLmFkZE5leHRjbG91ZERhdGEoZGF0YSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGb3JtYXQuTm9uZTogXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY291bGRudCByZWFkIHRoZSBmaWxlcyB5b3UgZ2F2ZSBtZS4uLlwiKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sfered/eye-finder-app.ts\n");

/***/ }),

/***/ "./src/sfered/eye-finder.ts":
/*!**********************************!*\
  !*** ./src/sfered/eye-finder.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EyeFinder\": () => /* binding */ EyeFinder\n/* harmony export */ });\n/* harmony import */ var _img_Image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../img/Image */ \"./src/img/Image.ts\");\n/* harmony import */ var _img_kernels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../img/kernels */ \"./src/img/kernels.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mesh/topo-mesh */ \"./src/mesh/topo-mesh.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _ransac__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ransac */ \"./src/sfered/ransac.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _geo_circle3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geo/circle3 */ \"./src/geo/circle3.ts\");\n// name:    eye-finder.ts\r\n// author:  Jos Feenstra\r\n// purpose: Keeper of the full pupil-point.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass EyeFinder {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    findPupilsFromNextcloud(data) {\r\n        console.log(\"finding eyes from nextcloud set...\");\r\n        let topo = _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_5__.TopoMesh.copyFromMesh(data.mesh);\r\n        let image = _img_Image__WEBPACK_IMPORTED_MODULE_0__.GeonImage.fromImageData(data.texture);\r\n        let [winLeft, winRight] = this.getEyeWindowsNextcloud(data, topo);\r\n        return this.findPupils(image, topo, data.settings, winLeft, winRight);\r\n    }\r\n    findPupilsFromBellus(bsd) {\r\n        console.log(\"finding eyes from bellus...\");\r\n        // get the window with which the eyes can be extracted\r\n        let topo = _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_5__.TopoMesh.copyFromMesh(bsd.mesh);\r\n        let image = _img_Image__WEBPACK_IMPORTED_MODULE_0__.GeonImage.fromImageData(bsd.texture);\r\n        let [winLeft, winRight] = this.getEyeWindows(bsd);\r\n        return this.findPupils(image, topo, bsd.settings, winLeft, winRight);\r\n    }\r\n    // some stupid wrapping\r\n    findPupils(image, topo, settings, winLeft, winRight) {\r\n        // left side\r\n        let ransacSettings = settings.process_ransac;\r\n        let leftPupilPoint = this.findPupilFromEye(image, topo, winLeft, ransacSettings);\r\n        // right side\r\n        let rightPupilPoint = this.findPupilFromEye(image, topo, winRight, ransacSettings);\r\n        if (leftPupilPoint && rightPupilPoint) {\r\n            return [leftPupilPoint, rightPupilPoint];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    findPupilFromEye(image, mesh, window, ransacSettings) {\r\n        var _a, _b, _c, _d;\r\n        // step 1: get points (vectors) which symbolize pixels in contrasting areas of the image (the iris).\r\n        let eyeImg = image.trimWithDomain(window);\r\n        let contrastEyeImg = this.contrastDetection(eyeImg);\r\n        let cps = this.pixelsToPoints(contrastEyeImg, 50);\r\n        if (cps.count() < 0) {\r\n            return;\r\n        }\r\n        let scaleVec = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2(1 / image.width, 1 / image.height);\r\n        // convert these points to the same space as the uv points of the mesh\r\n        cps.forEach((p) => {\r\n            // move from eyetrim to original image space\r\n            p.add(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2(window.x.t0, window.y.t0));\r\n            // move from pixel space to normalized uv space\r\n            p.mul(scaleVec);\r\n            // flip and move according to uv parameters\r\n            p.mul(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2(1, -1));\r\n            p.add(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2(0, 1));\r\n        });\r\n        // step 2: elevate from uv space to vertex space of the mesh\r\n        let cpsElevated = cps.to3D().map((p, i) => {\r\n            return mesh.elevate(p.to2D());\r\n        });\r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.whiteDots.push(...cpsElevated.toList());\r\n        // step 3: fit a plane through the points, and project to this plane\r\n        let plane = _geo_plane__WEBPACK_IMPORTED_MODULE_6__.Plane.fromLeastSquares(cpsElevated);\r\n        cpsElevated.forEach((p) => plane.pullToPlane(p));\r\n        let cpsFixed = cpsElevated.to2D();\r\n        // step 4: ransac! \r\n        let rss = ransacSettings;\r\n        let r = (0,_ransac__WEBPACK_IMPORTED_MODULE_7__.RansacCircle2d)(cpsFixed, rss.iterations, rss.radius, rss.tolerance, rss.seed, rss.min_score, rss.max_radius_deviation);\r\n        let eyepoint;\r\n        let bestCircle;\r\n        if (!r) {\r\n            console.error(\"couldnt find eyepoint...\");\r\n            return;\r\n        }\r\n        else {\r\n            let [bestCircle, values] = r;\r\n            eyepoint = plane.pushToWorld(bestCircle.center.to3D());\r\n            (_b = this.app) === null || _b === void 0 ? void 0 : _b.lineRenderables.push(_mesh_line_array__WEBPACK_IMPORTED_MODULE_8__.LineArray.fromCircle(_geo_circle3__WEBPACK_IMPORTED_MODULE_9__.Circle3.fromCircle2(bestCircle, plane)));\r\n        }\r\n        // debug\r\n        cpsElevated.forEach((p) => {\r\n            p.z = 0;\r\n            return plane.pushToWorld(p);\r\n        });\r\n        (_c = this.app) === null || _c === void 0 ? void 0 : _c.lineRenderables.push(_mesh_line_array__WEBPACK_IMPORTED_MODULE_8__.LineArray.fromPlane(plane));\r\n        (_d = this.app) === null || _d === void 0 ? void 0 : _d.redDots.push(eyepoint);\r\n        return eyepoint;\r\n    }\r\n    contrastDetection(image) {\r\n        // console.log(\"processing image with size: \", image.width, image.height);\r\n        var _a;\r\n        let grey = image.toGreyscale();\r\n        let blurred = grey.applyKernel(_img_kernels__WEBPACK_IMPORTED_MODULE_1__.Kernels.Gauss5);\r\n        let left = blurred.applyKernel(_img_kernels__WEBPACK_IMPORTED_MODULE_1__.Kernels.SobelLeft);\r\n        let right = blurred.applyKernel(_img_kernels__WEBPACK_IMPORTED_MODULE_1__.Kernels.SobelRight);\r\n        let sum = this.SobelSum(left, right);\r\n        let [min, max] = sum.getMinMax();\r\n        // console.log(\"minmax: \", min, max);\r\n        let upper = max * 0.7;\r\n        let lower = upper * 0.3;\r\n        let thres = sum.applyThreshold(lower, upper);\r\n        // debug \r\n        // console.log(\"adding images:\")\r\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.images.push(blurred.toRGBA(), sum.toRGBA(), thres.toRGBA());\r\n        return thres;\r\n    }\r\n    SobelSum(hor, ver) {\r\n        let width = hor.width; // assume the same as ver\r\n        let height = hor.height; // assume the same as ver\r\n        let ps = hor.pixelSize;\r\n        let sum = new _img_Image__WEBPACK_IMPORTED_MODULE_0__.GeonImage(width, height, ps);\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // assume grey value\r\n                let one = hor.get(x, y)[0];\r\n                let two = ver.get(x, y)[0];\r\n                let value = Math.round(Math.pow((Math.pow(one, 2) + Math.pow(two, 2)), 0.5));\r\n                sum.set(x, y, [value, value, value, 255]);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    getEyeWindowsNextcloud(data, mesh) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        let bb_o = data.settings.process.bounding_box_offset;\r\n        console.log(bb_o);\r\n        let eyeGuessLeft = data.eyePointsEdited.getVector(0);\r\n        let eyeGuessRight = data.eyePointsEdited.getVector(1);\r\n        console.log(\"groundTruthLeft, groundTruthRight\");\r\n        console.log(eyeGuessLeft, eyeGuessRight);\r\n        (_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.whiteDots) === null || _b === void 0 ? void 0 : _b.push(eyeGuessLeft);\r\n        (_d = (_c = this.app) === null || _c === void 0 ? void 0 : _c.whiteDots) === null || _d === void 0 ? void 0 : _d.push(eyeGuessRight);\r\n        let eyeLandmarksLeft = mesh.flattenClosestPoint(eyeGuessLeft);\r\n        let eyeLandmarksRight = mesh.flattenClosestPoint(eyeGuessRight);\r\n        (_f = (_e = this.app) === null || _e === void 0 ? void 0 : _e.whiteDots) === null || _f === void 0 ? void 0 : _f.push(eyeLandmarksLeft.to3D());\r\n        (_h = (_g = this.app) === null || _g === void 0 ? void 0 : _g.whiteDots) === null || _h === void 0 ? void 0 : _h.push(eyeLandmarksRight.to3D());\r\n        // to texture pixel space \r\n        let mat = data.getTextureToUVMatrix().inverse();\r\n        console.log(mat);\r\n        // let mat = data.getTextureToUVMatrix().inverse();\r\n        let leftPixel = mat.multiplyVector(eyeLandmarksLeft.to3D()).to2D();\r\n        let rightPixel = mat.multiplyVector(eyeLandmarksRight.to3D()).to2D();\r\n        console.log(\"in pixelspace: \");\r\n        console.log(leftPixel, rightPixel);\r\n        let window = [-70, 70, -70, 70];\r\n        let rightWindow = _math_domain__WEBPACK_IMPORTED_MODULE_3__.Domain2.fromInclude(_data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector2Array.fromList([leftPixel])).offset(window);\r\n        let leftWindow = _math_domain__WEBPACK_IMPORTED_MODULE_3__.Domain2.fromInclude(_data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector2Array.fromList([rightPixel])).offset(window);\r\n        return [rightWindow, leftWindow];\r\n    }\r\n    getEyeWindows(bsd) {\r\n        let pr = bsd.settings.process.point_ranges;\r\n        let bb_o = bsd.settings.process.bounding_box_offset;\r\n        let eyeLandmarksLeft = bsd.landmarks.takeRows(pr.left_eye_set);\r\n        let eyeLandmarksRight = bsd.landmarks.takeRows(pr.right_eye_set);\r\n        let rightWindow = _math_domain__WEBPACK_IMPORTED_MODULE_3__.Domain2.fromInclude(eyeLandmarksLeft).offset(bb_o.ly);\r\n        let leftWindow = _math_domain__WEBPACK_IMPORTED_MODULE_3__.Domain2.fromInclude(eyeLandmarksRight).offset(bb_o.ry);\r\n        return [rightWindow, leftWindow];\r\n    }\r\n    pixelsToPoints(image, threshold) {\r\n        let points = [];\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let value = image.get(x, y)[0];\r\n                if (value > threshold) {\r\n                    points.push(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2(x, y));\r\n                }\r\n            }\r\n        }\r\n        return _data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector2Array.fromList(points);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sfered/eye-finder.ts\n");

/***/ }),

/***/ "./src/sfered/ransac.ts":
/*!******************************!*\
  !*** ./src/sfered/ransac.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RansacCircle2d\": () => /* binding */ RansacCircle2d,\n/* harmony export */   \"RansacEliplse2d\": () => /* binding */ RansacEliplse2d\n/* harmony export */ });\n/* harmony import */ var _geo_circle2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geo/circle2 */ \"./src/geo/circle2.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\nfunction RansacCircle2d(points, iterations, radius, tolerance, seed, min_score, max_radius_deviation) {\r\n    //  Extract circle parameters from points in 2D space.\r\n    //  IN\r\n    //      - points : np.array[n, 2] -> sample points\r\n    //      - iterations : int -> how many times to repeat\r\n    //      - radius : float -> radius to create circles from\r\n    //      - tolerance : float -> point counts if within tolerance distance\r\n    //      - seed for randomization : int -> for random picking\r\n    //      - min_score : int -> if high_score is below min_score, its invalid\r\n    //      - num_scores : int -> if higher than one: use an average of the top x highscores for a more acurate result\r\n    //  OUT\r\n    //      - best circle, null if none passed the minimum score ('failsave')\r\n    //      - number of matches\r\n    //  Algorithm:\r\n    //  - iterate for MAX_TRIES times\r\n    //  - Pick 2 random 'points'\r\n    //  - Construct two circles with 'radius'\r\n    //  - per circle, per point in 'points'\r\n    //    - if distance to circle < 'tolerance'\r\n    //      - add 1 to score\r\n    //  - return the high score circle\r\n    //  TODO ideeen:\r\n    //  - varreer kleine beetjes in de radius?\r\n    //  - high score : top 5 gemiddelde <- might not be useful: results already amazing\r\n    //  - embrace ovaal vorm \r\n    // seed\r\n    // TODO SEED\r\n    //np.random.seed(seed)\r\n    console.log(points);\r\n    // TODO do-over of high score system\r\n    let high_score = 0;\r\n    let high_score_center = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(0, 0);\r\n    let high_score_radius = 0.0;\r\n    let high_score_ids = [];\r\n    let num_points = points.count();\r\n    for (let i = 0; i < iterations; i++) {\r\n        // randomize the radius a bit\r\n        let this_radius = radius + (Math.random() - 0.5) * max_radius_deviation;\r\n        // choose two, and create a circle with it\r\n        let id1 = randInt(0, num_points);\r\n        let id2 = randInt(0, num_points);\r\n        let centers = _geo_circle2__WEBPACK_IMPORTED_MODULE_0__.Circle2.centersFromPPR(points.getVector(id1), points.getVector(id2), this_radius);\r\n        // print(\"found some centers: \", centers)\r\n        for (let center of centers) {\r\n            // figure out the score\r\n            let includedIds = idsWithinCircle(points, center, radius, tolerance);\r\n            let score = includedIds.length;\r\n            // save if high score\r\n            if (score > high_score) {\r\n                high_score = score;\r\n                high_score_radius = this_radius;\r\n                high_score_center = center;\r\n                high_score_ids = includedIds;\r\n            }\r\n        }\r\n    }\r\n    // feedback\r\n    console.log(\"best score\", high_score);\r\n    if (high_score < min_score) {\r\n        console.log(\"this is smaller than the minimum score: ransac failed.\");\r\n        return undefined;\r\n    }\r\n    // construct the best circle, and return it\r\n    let best_circle = new _geo_circle2__WEBPACK_IMPORTED_MODULE_0__.Circle2(high_score_center, high_score_radius);\r\n    return [best_circle, high_score_ids];\r\n}\r\nfunction RansacEliplse2d(points, iterations, radius, elipseDeviation, tolerance, seed, minScore, maxRadiusDeviation) {\r\n    //  Extract circle parameters from points in 2D space.\r\n    //  IN\r\n    //      - points : np.array[n, 2] -> sample points\r\n    //      - iterations : int -> how many times to repeat\r\n    //      - radius : float -> radius to create circles from\r\n    //      - tolerance : float -> point counts if within tolerance distance\r\n    //      - seed for randomization : int -> for random picking\r\n    //      - min_score : int -> if high_score is below min_score, its invalid\r\n    //      - num_scores : int -> if higher than one: use an average of the top x highscores for a more acurate result\r\n    //  OUT\r\n    //      - best circle, null if none passed the minimum score ('failsave')\r\n    //      - number of matches\r\n    //  Algorithm:\r\n    //  - iterate for MAX_TRIES times\r\n    //  - Pick 2 random 'points'\r\n    //  - Construct two circles with 'radius'\r\n    //  - per circle, per point in 'points'\r\n    //    - if distance to circle < 'tolerance'\r\n    //      - add 1 to score\r\n    //  - return the high score circle\r\n    //  TODO ideeen:\r\n    //  - high score : top 5 gemiddelde <- might not be useful: results already amazing\r\n    //  - embrace ovaal vorm \r\n    // seed\r\n    // TODO SEED\r\n    //np.random.seed(seed)\r\n    console.log(points);\r\n    // TODO do-over of high score system\r\n    let high_score = 0;\r\n    let high_score_center = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(0, 0);\r\n    let high_score_radius = 0.0;\r\n    let high_score_ids = [];\r\n    let num_points = points.count();\r\n    for (let i = 0; i < iterations; i++) {\r\n        // randomize the radius a bit\r\n        let this_radius = radius + (Math.random() - 0.5) * maxRadiusDeviation;\r\n        // choose two, and create a circle with it\r\n        let id1 = randInt(0, num_points);\r\n        let id2 = randInt(0, num_points);\r\n        let centers = _geo_circle2__WEBPACK_IMPORTED_MODULE_0__.Circle2.centersFromPPR(points.getVector(id1), points.getVector(id2), this_radius);\r\n        // print(\"found some centers: \", centers)\r\n        for (let center of centers) {\r\n            // figure out the score\r\n            let includedIds = idsWithinCircle(points, center, radius, tolerance);\r\n            let score = includedIds.length;\r\n            // save if high score\r\n            if (score > high_score) {\r\n                high_score = score;\r\n                high_score_radius = this_radius;\r\n                high_score_center = center;\r\n                high_score_ids = includedIds;\r\n            }\r\n        }\r\n    }\r\n    // feedback\r\n    console.log(\"best score\", high_score);\r\n    if (high_score < minScore) {\r\n        console.log(\"this is smaller than the minimum score: ransac failed.\");\r\n        return undefined;\r\n    }\r\n    // construct the best circle, and return it\r\n    let best_circle = new _geo_circle2__WEBPACK_IMPORTED_MODULE_0__.Circle2(high_score_center, high_score_radius);\r\n    return [best_circle, high_score_ids];\r\n}\r\nfunction idsWithinCircle(pts, center, radius, tolerance) {\r\n    let indices = [];\r\n    pts.forEach((p, i) => {\r\n        let distance = p.disTo(center);\r\n        if (Math.abs(distance - radius) < tolerance) {\r\n            indices.push(i);\r\n        }\r\n    });\r\n    return indices;\r\n}\r\n/**\r\n * @param  {number} lower=0, including\r\n * @param  {number} upper=1, excluding\r\n */\r\nfunction randInt(lower, upper) {\r\n    return Math.floor(lower + (Math.random() * (upper - lower)));\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sfered/ransac.ts\n");

/***/ }),

/***/ "./src/sfered/scan-data.ts":
/*!*********************************!*\
  !*** ./src/sfered/scan-data.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BellusScanData\": () => /* binding */ BellusScanData,\n/* harmony export */   \"NextcloudScanData\": () => /* binding */ NextcloudScanData\n/* harmony export */ });\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _system_domwrappers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../system/domwrappers */ \"./src/system/domwrappers.ts\");\n/* harmony import */ var _img_Image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../img/Image */ \"./src/img/Image.ts\");\n// BellusData.ts \r\n// \r\n// author: Jos Feenstra\r\n// purpose : \r\n// - wrapper around all data gathered from Bellus3D.\r\n// - do all file -> object convertions here.         \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass BellusScanData {\r\n    constructor(landmarkData, texture, mesh, front, settings) {\r\n        this.landmarkData = landmarkData;\r\n        this.texture = texture;\r\n        this.mesh = mesh;\r\n        this.front = front;\r\n        this.settings = settings;\r\n        this.landmarks = this.getLandmarks2f();\r\n        // this.landmarks3 = this.getLandmarks3f(); // NOTE - we will not use the bellus 3d landmarks. \r\n        // they are located within a uncypherable space\r\n    }\r\n    static fromFileList(files, settings) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // assign the correct files.\r\n            let jsonFile;\r\n            let textureFile;\r\n            let objFile;\r\n            let frontFile;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let file = files.item(i);\r\n                let name = file.name;\r\n                console.log(`processing ${name}...`);\r\n                switch (name) {\r\n                    case 'facelandmarks.json':\r\n                        jsonFile = file;\r\n                        break;\r\n                    case 'head3d.jpg':\r\n                        textureFile = file;\r\n                        break;\r\n                    case 'head3d.obj':\r\n                        objFile = file;\r\n                        break;\r\n                    case 'image.jpg':\r\n                        frontFile = file;\r\n                        break;\r\n                }\r\n            }\r\n            return yield new Promise(function (resolve, reject) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    if (jsonFile == undefined ||\r\n                        textureFile == undefined ||\r\n                        objFile == undefined ||\r\n                        frontFile == undefined) {\r\n                        alert(\"give me exactly one .json, one .ojb, and one .jpg file please!\");\r\n                        reject();\r\n                    }\r\n                    else {\r\n                        console.log(\"converting files to usable objects...\");\r\n                        let json = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadJSONFromFile)(jsonFile);\r\n                        let texture = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadImageFromFile)(textureFile);\r\n                        let objtext = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadTextFromFile)(objFile);\r\n                        let mesh = (0,_mesh_render_mesh__WEBPACK_IMPORTED_MODULE_0__.meshFromObj)(objtext);\r\n                        let front = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadImageFromFile)(frontFile);\r\n                        // flip texture horizontally\r\n                        let gi = _img_Image__WEBPACK_IMPORTED_MODULE_4__.GeonImage.fromImageData(texture);\r\n                        gi = gi.flipVer();\r\n                        mesh.setTexture(gi.toImageData());\r\n                        console.log(\"done! bellus scan loaded.\");\r\n                        resolve(new BellusScanData(json, texture, mesh, front, settings));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    fromTextureToUVSpace(vectors) {\r\n        let [scaleY, scaleX] = this.getLandmarksImageSize();\r\n        console.log(\"scaling landmarks down by \" + scaleX + \", \" + scaleY);\r\n        let tf1 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newScaler(1 / scaleX, -1 / scaleY, 0);\r\n        let tf2 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(0, 1, 0);\r\n        let tf = tf1.multiply(tf2);\r\n        return vectors.clone().transform(tf);\r\n    }\r\n    getLandmarksImageSize() {\r\n        // image sizes as registered in the 'facelandmarks' json.\r\n        let data = this.landmarkData.ImageSize;\r\n        return [data[0], data[1]];\r\n    }\r\n    getLandmarks2f() {\r\n        // 2d landmarks as registered in the 'facelandmarks' json\r\n        let data = this.landmarkData.Point2f;\r\n        let size = data.cols;\r\n        let landmarks = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(data.data.length / 2);\r\n        landmarks.fillWith(data.data, 2);\r\n        return landmarks;\r\n    }\r\n}\r\nclass NextcloudScanData {\r\n    // data to be found in the json\r\n    constructor(landmarkData, texture, mesh, settings, json) {\r\n        this.landmarkData = landmarkData;\r\n        this.texture = texture;\r\n        this.mesh = mesh;\r\n        this.settings = settings;\r\n        this.json = json;\r\n        this.readJson(json);\r\n    }\r\n    readJson(json) {\r\n        this.eyePoints = _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromNative(json.pupil_pts);\r\n        this.eyePointsEdited = _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromNative(json.pupil_pts_edited);\r\n    }\r\n    static fromFileList(files, settings) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            1;\r\n            // assign the correct files.\r\n            let textFile;\r\n            let textureFile;\r\n            let objFile;\r\n            let materialFile;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let file = files.item(i);\r\n                let name = file.name;\r\n                console.log(`processing ${name}...`);\r\n                switch (name) {\r\n                    case 'scaninfo.txt':\r\n                        textFile = file;\r\n                        break;\r\n                    case 'head3d.jpg':\r\n                        textureFile = file;\r\n                        break;\r\n                    case 'head3d.obj':\r\n                        objFile = file;\r\n                        break;\r\n                    case 'head3d.obj.mtl':\r\n                        materialFile = file;\r\n                        break;\r\n                }\r\n            }\r\n            return yield new Promise(function (resolve, reject) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    if (textFile == undefined ||\r\n                        textureFile == undefined ||\r\n                        objFile == undefined ||\r\n                        materialFile == undefined) {\r\n                        alert(\"give me at least one .txt, one .obj, one .mtl and one .jpg file please!\");\r\n                        reject();\r\n                    }\r\n                    else {\r\n                        console.log(\"converting files to usable objects...\");\r\n                        // read json bit\r\n                        let jsonbit = \"\";\r\n                        let text = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadTextFromFile)(textFile);\r\n                        let lines = text.split('\\n');\r\n                        for (let i = 0; i < lines.length; i++) {\r\n                            let parts = lines[i].split(';');\r\n                            if (parts.length != 2)\r\n                                continue;\r\n                            if (parts[0] == 'FACEPOINTJSON') {\r\n                                jsonbit = parts[1];\r\n                            }\r\n                        }\r\n                        if (jsonbit == \"\") {\r\n                            alert(\"I found a text file, but it does not contain FACEPOINTJSON key, or a valid embedded json\");\r\n                            reject();\r\n                        }\r\n                        let json = JSON.parse(jsonbit);\r\n                        console.log(\"found the following json:\");\r\n                        console.log(json);\r\n                        // read the rest\r\n                        let texture = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadImageFromFile)(textureFile);\r\n                        let objtext = yield (0,_system_domwrappers__WEBPACK_IMPORTED_MODULE_3__.loadTextFromFile)(objFile);\r\n                        let mesh = (0,_mesh_render_mesh__WEBPACK_IMPORTED_MODULE_0__.meshFromObj)(objtext);\r\n                        // flip texture horizontally -> this is needed for some inexplicable reason\r\n                        // and put the flipped version in the mesh\r\n                        let gi = _img_Image__WEBPACK_IMPORTED_MODULE_4__.GeonImage.fromImageData(texture);\r\n                        gi = gi.flipVer();\r\n                        mesh.setTexture(gi.toImageData());\r\n                        // feedback\r\n                        console.log(\"done! bellus scan loaded.\");\r\n                        // return\r\n                        resolve(new NextcloudScanData(json, texture, mesh, settings, json));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getTextureToUVMatrix() {\r\n        let [scaleY, scaleX] = [this.texture.height, this.texture.width];\r\n        let tf1 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newScaler(1 / scaleX, -1 / scaleY, 1);\r\n        let tf2 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(0, 1, 0);\r\n        return tf1.multiply(tf2);\r\n    }\r\n    fromTextureToUVSpace(vectors) {\r\n        let [scaleY, scaleX] = this.getLandmarksImageSize();\r\n        console.log(\"scaling landmarks down by \" + scaleX + \", \" + scaleY);\r\n        let tf1 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newScaler(1 / scaleX, -1 / scaleY, 1);\r\n        let tf2 = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(0, 1, 0);\r\n        let tf = tf1.multiply(tf2);\r\n        return vectors.clone().transform(tf);\r\n    }\r\n    getLandmarksImageSize() {\r\n        // image sizes as registered in the 'facelandmarks' json.\r\n        let data = this.landmarkData.ImageSize;\r\n        return [data[0], data[1]];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3NmZXJlZC9zY2FuLWRhdGEudHM/YTg0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsaUJBQWlCO0FBQ2pCLEdBQUc7QUFDSCx1QkFBdUI7QUFDdkIsYUFBYTtBQUNiLG9EQUFvRDtBQUNwRCxxREFBcUQ7Ozs7Ozs7Ozs7QUFFUztBQUNJO0FBRXpCO0FBRXFEO0FBQ3JEO0FBRWxDLE1BQU0sY0FBYztJQVd2QixZQUFZLFlBQWlCLEVBQUUsT0FBa0IsRUFBRSxJQUFnQixFQUFFLEtBQWdCLEVBQUUsUUFBYTtRQUVoRyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUV6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QywrRkFBK0Y7UUFDL0YsK0NBQStDO0lBQ25ELENBQUM7SUFHRCxNQUFNLENBQU8sWUFBWSxDQUFDLEtBQWUsRUFBRSxRQUFhOztZQUVwRCw0QkFBNEI7WUFDNUIsSUFBSSxRQUEwQixDQUFDO1lBQy9CLElBQUksV0FBNkIsQ0FBQztZQUNsQyxJQUFJLE9BQXlCLENBQUM7WUFDOUIsSUFBSSxTQUEyQixDQUFDO1lBRWhDLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLElBQUksR0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDO2dCQUNoQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNyQixP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QU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUdPLHFCQUFxQjtRQUV6Qix5REFBeUQ7UUFDekQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvc2ZlcmVkL3NjYW4tZGF0YS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEJlbGx1c0RhdGEudHMgXHJcbi8vIFxyXG4vLyBhdXRob3I6IEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlIDogXHJcbi8vIC0gd3JhcHBlciBhcm91bmQgYWxsIGRhdGEgZ2F0aGVyZWQgZnJvbSBCZWxsdXMzRC5cclxuLy8gLSBkbyBhbGwgZmlsZSAtPiBvYmplY3QgY29udmVydGlvbnMgaGVyZS4gICAgICAgICBcclxuXHJcbmltcG9ydCB7IFJlbmRlck1lc2gsIG1lc2hGcm9tT2JqIH0gZnJvbSBcIi4uL21lc2gvcmVuZGVyLW1lc2hcIjtcclxuaW1wb3J0IHsgVmVjdG9yMkFycmF5LCBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcclxuaW1wb3J0IHsgRG9tYWluLCBEb21haW4yIH0gZnJvbSBcIi4uL21hdGgvZG9tYWluXCI7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2VGcm9tRmlsZSwgbG9hZEpTT05Gcm9tRmlsZSwgbG9hZFRleHRGcm9tRmlsZSB9IGZyb20gXCIuLi9zeXN0ZW0vZG9td3JhcHBlcnNcIjtcclxuaW1wb3J0IHsgR2VvbkltYWdlIH0gZnJvbSBcIi4uL2ltZy9JbWFnZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJlbGx1c1NjYW5EYXRhIHtcclxuXHJcbiAgICBsYW5kbWFya0RhdGE6IGFueTsgLy8ganNvblxyXG4gICAgdGV4dHVyZTogSW1hZ2VEYXRhOyBcclxuICAgIG1lc2g6IFJlbmRlck1lc2g7XHJcbiAgICBmcm9udDogSW1hZ2VEYXRhOyBcclxuICAgIHNldHRpbmdzOiBhbnk7IC8vIGxvY2FsIHNldHRpbmdzIGZpbGUuIFdlIHdhbnQgdGhpcyB0byBleHRyYWN0IHRoZSByaWdodCByZWdpb25zLlxyXG5cclxuICAgIGxhbmRtYXJrczogVmVjdG9yM0FycmF5O1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsYW5kbWFya0RhdGE6IGFueSwgdGV4dHVyZTogSW1hZ2VEYXRhLCBtZXNoOiBSZW5kZXJNZXNoLCBmcm9udDogSW1hZ2VEYXRhLCBzZXR0aW5nczogYW55KSB7XHJcblxyXG4gICAgICAgIHRoaXMubGFuZG1hcmtEYXRhID0gbGFuZG1hcmtEYXRhO1xyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaDtcclxuICAgICAgICB0aGlzLmZyb250ID0gZnJvbnQ7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG5cclxuICAgICAgICB0aGlzLmxhbmRtYXJrcyA9IHRoaXMuZ2V0TGFuZG1hcmtzMmYoKTtcclxuICAgICAgICAvLyB0aGlzLmxhbmRtYXJrczMgPSB0aGlzLmdldExhbmRtYXJrczNmKCk7IC8vIE5PVEUgLSB3ZSB3aWxsIG5vdCB1c2UgdGhlIGJlbGx1cyAzZCBsYW5kbWFya3MuIFxyXG4gICAgICAgIC8vIHRoZXkgYXJlIGxvY2F0ZWQgd2l0aGluIGEgdW5jeXBoZXJhYmxlIHNwYWNlXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBmcm9tRmlsZUxpc3QoZmlsZXM6IEZpbGVMaXN0LCBzZXR0aW5nczogYW55KSA6IFByb21pc2U8QmVsbHVzU2NhbkRhdGE+IHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBhc3NpZ24gdGhlIGNvcnJlY3QgZmlsZXMuXHJcbiAgICAgICAgbGV0IGpzb25GaWxlOiBGaWxlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCB0ZXh0dXJlRmlsZTogRmlsZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgb2JqRmlsZTogRmlsZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgZnJvbnRGaWxlOiBGaWxlIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBmaWxlOiBGaWxlID0gZmlsZXMuaXRlbShpKSE7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gZmlsZS5uYW1lO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgcHJvY2Vzc2luZyAke25hbWV9Li4uYCk7XHJcbiAgICAgICAgICAgIHN3aXRjaChuYW1lKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmYWNlbGFuZG1hcmtzLmpzb24nOiBcclxuICAgICAgICAgICAgICAgICAgICBqc29uRmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdoZWFkM2QuanBnJzogXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZUZpbGUgPSBmaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaGVhZDNkLm9iaic6IFxyXG4gICAgICAgICAgICAgICAgICAgIG9iakZpbGUgPSBmaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlLmpwZyc6IFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb250RmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKGFzeW5jIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGpzb25GaWxlID09IHVuZGVmaW5lZCAgICB8fCBcclxuICAgICAgICAgICAgICAgIHRleHR1cmVGaWxlID09IHVuZGVmaW5lZCB8fCBcclxuICAgICAgICAgICAgICAgIG9iakZpbGUgPT0gdW5kZWZpbmVkIHx8IFxyXG4gICAgICAgICAgICAgICAgZnJvbnRGaWxlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJnaXZlIG1lIGV4YWN0bHkgb25lIC5qc29uLCBvbmUgLm9qYiwgYW5kIG9uZSAuanBnIGZpbGUgcGxlYXNlIVwiKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb252ZXJ0aW5nIGZpbGVzIHRvIHVzYWJsZSBvYmplY3RzLi4uXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQganNvbiA9IGF3YWl0IGxvYWRKU09ORnJvbUZpbGUoanNvbkZpbGUpOyBcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlID0gYXdhaXQgbG9hZEltYWdlRnJvbUZpbGUodGV4dHVyZUZpbGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9ianRleHQgPSBhd2FpdCBsb2FkVGV4dEZyb21GaWxlKG9iakZpbGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lc2ggPSBtZXNoRnJvbU9iaihvYmp0ZXh0KTtcclxuICAgICAgICAgICAgICAgIGxldCBmcm9udCA9IGF3YWl0IGxvYWRJbWFnZUZyb21GaWxlKGZyb250RmlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZmxpcCB0ZXh0dXJlIGhvcml6b250YWxseVxyXG4gICAgICAgICAgICAgICAgbGV0IGdpID0gR2VvbkltYWdlLmZyb21JbWFnZURhdGEodGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICBnaSA9IGdpLmZsaXBWZXIoKTtcclxuICAgICAgICAgICAgICAgIG1lc2guc2V0VGV4dHVyZShnaS50b0ltYWdlRGF0YSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRvbmUhIGJlbGx1cyBzY2FuIGxvYWRlZC5cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQmVsbHVzU2NhbkRhdGEoanNvbiwgdGV4dHVyZSwgbWVzaCwgZnJvbnQsIHNldHRpbmdzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnJvbVRleHR1cmVUb1VWU3BhY2UodmVjdG9yczogVmVjdG9yM0FycmF5KSA6IFZlY3RvcjNBcnJheSB7XHJcblxyXG4gICAgICAgIGxldCBbc2NhbGVZLCBzY2FsZVhdID0gdGhpcy5nZXRMYW5kbWFya3NJbWFnZVNpemUoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInNjYWxpbmcgbGFuZG1hcmtzIGRvd24gYnkgXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0ZjEgPSBNYXRyaXg0Lm5ld1NjYWxlcigxL3NjYWxlWCwgLTEvc2NhbGVZLCAwKVxyXG4gICAgICAgIGxldCB0ZjIgPSBNYXRyaXg0Lm5ld1RyYW5zbGF0aW9uKDAsMSwwKVxyXG4gICAgICAgIGxldCB0ZiA9IHRmMS5tdWx0aXBseSh0ZjIpO1xyXG4gICAgICAgIHJldHVybiB2ZWN0b3JzLmNsb25lKCkudHJhbnNmb3JtKHRmKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRMYW5kbWFya3NJbWFnZVNpemUoKSA6IFtudW1iZXIsIG51bWJlcl0ge1xyXG5cclxuICAgICAgICAvLyBpbWFnZSBzaXplcyBhcyByZWdpc3RlcmVkIGluIHRoZSAnZmFjZWxhbmRtYXJrcycganNvbi5cclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMubGFuZG1hcmtEYXRhLkltYWdlU2l6ZTtcclxuICAgICAgICByZXR1cm4gW2RhdGFbMF0sIGRhdGFbMV1dO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldExhbmRtYXJrczJmKCkgOiBWZWN0b3IzQXJyYXkge1xyXG5cclxuICAgICAgICAvLyAyZCBsYW5kbWFya3MgYXMgcmVnaXN0ZXJlZCBpbiB0aGUgJ2ZhY2VsYW5kbWFya3MnIGpzb25cclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMubGFuZG1hcmtEYXRhLlBvaW50MmY7XHJcbiAgICAgICAgbGV0IHNpemUgPSBkYXRhLmNvbHM7XHJcbiAgICAgICAgbGV0IGxhbmRtYXJrcyA9IG5ldyBWZWN0b3IzQXJyYXkoZGF0YS5kYXRhLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgIGxhbmRtYXJrcy5maWxsV2l0aChkYXRhLmRhdGEsIDIpO1xyXG4gICAgICAgIHJldHVybiBsYW5kbWFya3M7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBnZXRMYW5kbWFya3MzZigpIDogVmVjdG9yM0FycmF5IHtcclxuXHJcbiAgICAvLyAgICAgLy8gMmQgbGFuZG1hcmtzIGFzIHJlZ2lzdGVyZWQgaW4gdGhlICdmYWNlbGFuZG1hcmtzJyBqc29uXHJcbiAgICAvLyAgICAgbGV0IGRhdGEgPSB0aGlzLmxhbmRtYXJrRGF0YS5Qb2ludDNmO1xyXG4gICAgLy8gICAgIGxldCBzaXplID0gZGF0YS5jb2xzO1xyXG4gICAgLy8gICAgIGxldCBhcnIgPSBuZXcgVmVjdG9yM0FycmF5KHNpemUpO1xyXG4gICAgLy8gICAgIGFyci5maWxsV2l0aChkYXRhLmRhdGEpO1xyXG5cclxuICAgIC8vICAgICByZXR1cm4gYXJyO1xyXG4gICAgLy8gfSAgXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOZXh0Y2xvdWRTY2FuRGF0YSB7XHJcblxyXG4gICAgbGFuZG1hcmtEYXRhOiBhbnk7IC8vIGpzb25cclxuICAgIHRleHR1cmU6IEltYWdlRGF0YTsgXHJcbiAgICBtZXNoOiBSZW5kZXJNZXNoO1xyXG4gICAgc2V0dGluZ3M6IGFueTsgLy8gbG9jYWwgc2V0dGluZ3MgZmlsZS4gV2Ugd2FudCB0aGlzIHRvIGV4dHJhY3QgdGhlIHJpZ2h0IHJlZ2lvbnMuXHJcbiAgICBqc29uOiBhbnk7XHJcbiAgICBleWVQb2ludHNFZGl0ZWQhOiBWZWN0b3IzQXJyYXk7XHJcbiAgICBleWVQb2ludHMhOiBWZWN0b3IzQXJyYXk7XHJcblxyXG4gICAgLy8gZGF0YSB0byBiZSBmb3VuZCBpbiB0aGUganNvblxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsYW5kbWFya0RhdGE6IGFueSwgdGV4dHVyZTogSW1hZ2VEYXRhLCBtZXNoOiBSZW5kZXJNZXNoLCBzZXR0aW5nczogYW55LCBqc29uOiBhbnkpIHtcclxuXHJcbiAgICAgICAgdGhpcy5sYW5kbWFya0RhdGEgPSBsYW5kbWFya0RhdGE7XHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcclxuICAgICAgICB0aGlzLm1lc2ggPSBtZXNoO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLmpzb24gPSBqc29uO1xyXG5cclxuICAgICAgICB0aGlzLnJlYWRKc29uKGpzb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZEpzb24oanNvbjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5leWVQb2ludHMgPSBWZWN0b3IzQXJyYXkuZnJvbU5hdGl2ZShqc29uLnB1cGlsX3B0cyk7XHJcbiAgICAgICAgdGhpcy5leWVQb2ludHNFZGl0ZWQgPSBWZWN0b3IzQXJyYXkuZnJvbU5hdGl2ZShqc29uLnB1cGlsX3B0c19lZGl0ZWQpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZnJvbUZpbGVMaXN0KGZpbGVzOiBGaWxlTGlzdCwgc2V0dGluZ3M6IGFueSkgOiBQcm9taXNlPE5leHRjbG91ZFNjYW5EYXRhPiB7XHJcbiAgICAgICAgMVxyXG4gICAgICAgIC8vIGFzc2lnbiB0aGUgY29ycmVjdCBmaWxlcy5cclxuICAgICAgICBsZXQgdGV4dEZpbGU6IEZpbGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHRleHR1cmVGaWxlOiBGaWxlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBvYmpGaWxlOiBGaWxlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBtYXRlcmlhbEZpbGU6IEZpbGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgIFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGZpbGU6IEZpbGUgPSBmaWxlcy5pdGVtKGkpITtcclxuICAgICAgICAgICAgbGV0IG5hbWUgPSBmaWxlLm5hbWU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBwcm9jZXNzaW5nICR7bmFtZX0uLi5gKTtcclxuICAgICAgICAgICAgc3dpdGNoKG5hbWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NjYW5pbmZvLnR4dCc6IFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRGaWxlID0gZmlsZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWQzZC5qcGcnOiBcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdoZWFkM2Qub2JqJzogXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqRmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaGVhZDNkLm9iai5tdGwnOiBcclxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEZpbGUgPSBmaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoYXN5bmMgZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGV4dEZpbGUgPT0gdW5kZWZpbmVkICAgIHx8IFxyXG4gICAgICAgICAgICAgICAgdGV4dHVyZUZpbGUgPT0gdW5kZWZpbmVkIHx8IFxyXG4gICAgICAgICAgICAgICAgb2JqRmlsZSA9PSB1bmRlZmluZWQgfHwgXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbEZpbGUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChcImdpdmUgbWUgYXQgbGVhc3Qgb25lIC50eHQsIG9uZSAub2JqLCBvbmUgLm10bCBhbmQgb25lIC5qcGcgZmlsZSBwbGVhc2UhXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbnZlcnRpbmcgZmlsZXMgdG8gdXNhYmxlIG9iamVjdHMuLi5cIik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIHJlYWQganNvbiBiaXRcclxuICAgICAgICAgICAgICAgIGxldCBqc29uYml0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gYXdhaXQgbG9hZFRleHRGcm9tRmlsZSh0ZXh0RmlsZSk7IFxyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gbGluZXNbaV0uc3BsaXQoJzsnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9IDIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0c1swXSA9PSAnRkFDRVBPSU5USlNPTicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAganNvbmJpdCA9IHBhcnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqc29uYml0ID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkkgZm91bmQgYSB0ZXh0IGZpbGUsIGJ1dCBpdCBkb2VzIG5vdCBjb250YWluIEZBQ0VQT0lOVEpTT04ga2V5LCBvciBhIHZhbGlkIGVtYmVkZGVkIGpzb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7IFxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgIGxldCBqc29uOiBKU09OID0gSlNPTi5wYXJzZShqc29uYml0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZvdW5kIHRoZSBmb2xsb3dpbmcganNvbjpcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhqc29uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZWFkIHRoZSByZXN0XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZSA9IGF3YWl0IGxvYWRJbWFnZUZyb21GaWxlKHRleHR1cmVGaWxlKTtcclxuICAgICAgICAgICAgICAgIGxldCBvYmp0ZXh0ID0gYXdhaXQgbG9hZFRleHRGcm9tRmlsZShvYmpGaWxlKTtcclxuICAgICAgICAgICAgICAgIGxldCBtZXNoID0gbWVzaEZyb21PYmoob2JqdGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZmxpcCB0ZXh0dXJlIGhvcml6b250YWxseSAtPiB0aGlzIGlzIG5lZWRlZCBmb3Igc29tZSBpbmV4cGxpY2FibGUgcmVhc29uXHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgcHV0IHRoZSBmbGlwcGVkIHZlcnNpb24gaW4gdGhlIG1lc2hcclxuICAgICAgICAgICAgICAgIGxldCBnaSA9IEdlb25JbWFnZS5mcm9tSW1hZ2VEYXRhKHRleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgZ2kgPSBnaS5mbGlwVmVyKCk7XHJcbiAgICAgICAgICAgICAgICBtZXNoLnNldFRleHR1cmUoZ2kudG9JbWFnZURhdGEoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZmVlZGJhY2tcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZG9uZSEgYmVsbHVzIHNjYW4gbG9hZGVkLlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IE5leHRjbG91ZFNjYW5EYXRhKGpzb24sIHRleHR1cmUsIG1lc2gsIHNldHRpbmdzLCBqc29uKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0dXJlVG9VVk1hdHJpeCgpIDogTWF0cml4NCB7XHJcbiAgICAgICAgbGV0IFtzY2FsZVksIHNjYWxlWF0gPSBbdGhpcy50ZXh0dXJlLmhlaWdodCwgdGhpcy50ZXh0dXJlLndpZHRoXTtcclxuICAgICAgICBsZXQgdGYxID0gTWF0cml4NC5uZXdTY2FsZXIoMS9zY2FsZVgsIC0xL3NjYWxlWSwgMSlcclxuICAgICAgICBsZXQgdGYyID0gTWF0cml4NC5uZXdUcmFuc2xhdGlvbigwLDEsMClcclxuICAgICAgICByZXR1cm4gIHRmMS5tdWx0aXBseSh0ZjIpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmcm9tVGV4dHVyZVRvVVZTcGFjZSh2ZWN0b3JzOiBWZWN0b3IzQXJyYXkpIDogVmVjdG9yM0FycmF5IHtcclxuXHJcbiAgICAgICAgbGV0IFtzY2FsZVksIHNjYWxlWF0gPSB0aGlzLmdldExhbmRtYXJrc0ltYWdlU2l6ZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2NhbGluZyBsYW5kbWFya3MgZG93biBieSBcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSk7XHJcblxyXG4gICAgICAgIGxldCB0ZjEgPSBNYXRyaXg0Lm5ld1NjYWxlcigxL3NjYWxlWCwgLTEvc2NhbGVZLCAxKVxyXG4gICAgICAgIGxldCB0ZjIgPSBNYXRyaXg0Lm5ld1RyYW5zbGF0aW9uKDAsMSwwKVxyXG4gICAgICAgIGxldCB0ZiA9IHRmMS5tdWx0aXBseSh0ZjIpO1xyXG4gICAgICAgIHJldHVybiB2ZWN0b3JzLmNsb25lKCkudHJhbnNmb3JtKHRmKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRMYW5kbWFya3NJbWFnZVNpemUoKSA6IFtudW1iZXIsIG51bWJlcl0ge1xyXG5cclxuICAgICAgICAvLyBpbWFnZSBzaXplcyBhcyByZWdpc3RlcmVkIGluIHRoZSAnZmFjZWxhbmRtYXJrcycganNvbi5cclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMubGFuZG1hcmtEYXRhLkltYWdlU2l6ZTtcclxuICAgICAgICByZXR1cm4gW2RhdGFbMF0sIGRhdGFbMV1dO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sfered/scan-data.ts\n");

/***/ }),

/***/ "./src/system/domwrappers.ts":
/*!***********************************!*\
  !*** ./src/system/domwrappers.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addDropFileEventListeners\": () => /* binding */ addDropFileEventListeners,\n/* harmony export */   \"loadTextFromFile\": () => /* binding */ loadTextFromFile,\n/* harmony export */   \"loadJSONFromFile\": () => /* binding */ loadJSONFromFile,\n/* harmony export */   \"loadImageFromFile\": () => /* binding */ loadImageFromFile\n/* harmony export */ });\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log(\"setting up drag events...\");\r\n    canvas.addEventListener('dragenter', function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"entering entering...\");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener('dragover', function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"over drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener('dragleave', function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"leaving drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener('drop', function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then(imageData => resolve(imageData), error => reject(error));\r\n    });\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement('img');\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement('canvas');\r\n    ;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/domwrappers.ts\n");

/***/ }),

/***/ "./src/system/fpsCounter.ts":
/*!**********************************!*\
  !*** ./src/system/fpsCounter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FpsCounter\": () => /* binding */ FpsCounter\n/* harmony export */ });\nclass FpsCounter {\r\n    constructor() {\r\n        this.fps = 0;\r\n        this.updateEveryXTicks = 100;\r\n        this.elapsed = 0;\r\n        this.frames = 0;\r\n    }\r\n    update(state) {\r\n        this.frames += 1;\r\n        this.elapsed += state.tick;\r\n        if (this.elapsed > this.updateEveryXTicks) {\r\n            this.setFps();\r\n            this.elapsed = 0;\r\n            this.frames = 0;\r\n        }\r\n    }\r\n    setFps() {\r\n        this.fps = Math.round(this.frames / this.elapsed * 1000);\r\n    }\r\n    getFps() {\r\n        return this.fps;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZmVyZWQtbGFuZG1hcmtzLy4vc3JjL3N5c3RlbS9mcHNDb3VudGVyLnRzPzY3OGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVPLE1BQU0sVUFBVTtJQU9uQjtRQUxBLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFDUixzQkFBaUIsR0FBRyxHQUFHLENBQUM7UUFDeEIsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFdBQU0sR0FBRyxDQUFDLENBQUM7SUFJWCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWlCO1FBQ3BCLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9zeXN0ZW0vZnBzQ291bnRlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi9pbnB1dC1zdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZwc0NvdW50ZXIge1xyXG5cclxuICAgIGZwcyA9IDA7XHJcbiAgICB1cGRhdGVFdmVyeVhUaWNrcyA9IDEwMDtcclxuICAgIGVsYXBzZWQgPSAwO1xyXG4gICAgZnJhbWVzID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICB0aGlzLmZyYW1lcyArPSAxO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZCArPSBzdGF0ZS50aWNrO1xyXG4gICAgICAgIGlmICh0aGlzLmVsYXBzZWQgPiB0aGlzLnVwZGF0ZUV2ZXJ5WFRpY2tzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RnBzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBzZXRGcHMoKSB7XHJcbiAgICAgICAgdGhpcy5mcHMgPSBNYXRoLnJvdW5kKHRoaXMuZnJhbWVzIC8gdGhpcy5lbGFwc2VkICogMTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RnBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZwczsgICBcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/system/fpsCounter.ts\n");

/***/ }),

/***/ "./src/system/input-state.ts":
/*!***********************************!*\
  !*** ./src/system/input-state.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InputState\": () => /* binding */ InputState\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key[\"A\"] = 0] = \"A\";\r\n    Key[Key[\"B\"] = 1] = \"B\";\r\n    Key[Key[\"C\"] = 2] = \"C\";\r\n    Key[Key[\"D\"] = 3] = \"D\";\r\n    Key[Key[\"E\"] = 4] = \"E\";\r\n    Key[Key[\"F\"] = 5] = \"F\";\r\n    Key[Key[\"G\"] = 6] = \"G\";\r\n    Key[Key[\"H\"] = 7] = \"H\";\r\n    Key[Key[\"I\"] = 8] = \"I\";\r\n    Key[Key[\"J\"] = 9] = \"J\";\r\n    Key[Key[\"K\"] = 10] = \"K\";\r\n    Key[Key[\"L\"] = 11] = \"L\";\r\n    Key[Key[\"M\"] = 12] = \"M\";\r\n    Key[Key[\"N\"] = 13] = \"N\";\r\n    Key[Key[\"O\"] = 14] = \"O\";\r\n    Key[Key[\"P\"] = 15] = \"P\";\r\n    Key[Key[\"Q\"] = 16] = \"Q\";\r\n    Key[Key[\"R\"] = 17] = \"R\";\r\n    Key[Key[\"S\"] = 18] = \"S\";\r\n    Key[Key[\"T\"] = 19] = \"T\";\r\n    Key[Key[\"U\"] = 20] = \"U\";\r\n    Key[Key[\"V\"] = 21] = \"V\";\r\n    Key[Key[\"W\"] = 22] = \"W\";\r\n    Key[Key[\"X\"] = 23] = \"X\";\r\n    Key[Key[\"Y\"] = 24] = \"Y\";\r\n    Key[Key[\"Z\"] = 25] = \"Z\";\r\n    Key[Key[\"Up\"] = 26] = \"Up\";\r\n    Key[Key[\"Down\"] = 27] = \"Down\";\r\n    Key[Key[\"Left\"] = 28] = \"Left\";\r\n    Key[Key[\"Right\"] = 29] = \"Right\";\r\n    Key[Key[\"Space\"] = 30] = \"Space\";\r\n    Key[Key[\"Control\"] = 31] = \"Control\";\r\n    Key[Key[\"Alt\"] = 32] = \"Alt\";\r\n    Key[Key[\"Shift\"] = 33] = \"Shift\";\r\n    Key[Key[\"Enter\"] = 34] = \"Enter\";\r\n    Key[Key[\"Esc\"] = 35] = \"Esc\";\r\n    Key[Key[\"N1\"] = 36] = \"N1\";\r\n    Key[Key[\"N2\"] = 37] = \"N2\";\r\n    Key[Key[\"N3\"] = 38] = \"N3\";\r\n    Key[Key[\"N4\"] = 39] = \"N4\";\r\n    Key[Key[\"N5\"] = 40] = \"N5\";\r\n    Key[Key[\"N6\"] = 41] = \"N6\";\r\n    Key[Key[\"N7\"] = 42] = \"N7\";\r\n    Key[Key[\"N8\"] = 43] = \"N8\";\r\n    Key[Key[\"N9\"] = 44] = \"N9\";\r\n    Key[Key[\"N0\"] = 45] = \"N0\";\r\n    Key[Key[\"Plus\"] = 46] = \"Plus\";\r\n    Key[Key[\"Minus\"] = 47] = \"Minus\";\r\n    Key[Key[\"Backspace\"] = 48] = \"Backspace\";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case (Key.A): return 1;\r\n        case (Key.B): return 2;\r\n        case (Key.C): return 3;\r\n        case (Key.D): return 4;\r\n        case (Key.E): return 5;\r\n        case (Key.F): return 6;\r\n        default: return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseDelta = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // link\r\n        this.canvas = canvas;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"mousedown\", this.setMouseDown.bind(this));\r\n        canvas.addEventListener(\"mouseup\", this.setMouseUp.bind(this));\r\n        canvas.addEventListener(\"contextmenu\", (e) => { e.preventDefault(); e.stopPropagation(); });\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"wheel\", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener(\"touchmove\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchstart\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchend\", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener(\"keydown\", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener(\"keypressed\", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener(\"keyup\", this.onKeyUp.bind(this));\r\n        // final   \r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = (this.newTime - this.oldTime);\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n        this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n        this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log(\"we be scrollin' now...\")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.clientX, e.clientY);\r\n        ;\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/input-state.ts\n");

/***/ }),

/***/ "./src/system/ui.ts":
/*!**************************!*\
  !*** ./src/system/ui.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UI\": () => /* binding */ UI,\n/* harmony export */   \"SliderParameter\": () => /* binding */ SliderParameter\n/* harmony export */ });\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n// name:    ui.js\r\n// author:  Jos Feenstra\r\n// purpose: lets create the UI using html & dom api, because why the hell not\r\n\r\nclass UI {\r\n    constructor(frame) {\r\n        this.globalContext = frame;\r\n        this.currentContext = frame;\r\n    }\r\n    addContext(appName) {\r\n        this.currentContext = this.globalContext;\r\n        let appDiv = this.addDiv(appName);\r\n        this.currentContext = appDiv;\r\n    }\r\n    setContext(appName) {\r\n        this.globalContext.getElementsByClassName(appName);\r\n    }\r\n    removeContext(appName) {\r\n        this.setContext(appName);\r\n        let count = this.currentContext.childElementCount;\r\n        for (let i = count - 1; i >= 0; i -= 1) {\r\n            this.currentContext.removeChild(this.currentContext.children.item(i));\r\n        }\r\n        let temp = this.currentContext;\r\n        this.currentContext = this.globalContext;\r\n        this.currentContext.removeChild(temp);\r\n    }\r\n    addDiv(classname, items = []) {\r\n        let div = this.addElement(\"div\", classname);\r\n        items.forEach(item => {\r\n            div.appendChild(item);\r\n        });\r\n        return div;\r\n    }\r\n    addBooleanSlider(param, onInput = () => { }) {\r\n        let checkbox = this.addElement(\"input\", \"checkbox-slider-control\");\r\n        checkbox.type = \"checkbox\";\r\n        checkbox.addEventListener('change', () => {\r\n            let state = checkbox.checked;\r\n            param.set(state ? 1 : 0);\r\n            onInput(checkbox.valueAsNumber);\r\n            text1.innerText = param.name;\r\n        });\r\n        checkbox.checked = param.get() == 1;\r\n        let text1 = this.addElement(\"p\", \"slider-text\");\r\n        text1.innerText = param.name;\r\n        this.addDiv(\"slider\", [\r\n            text1,\r\n            checkbox,\r\n        ]);\r\n        return checkbox;\r\n    }\r\n    addSlider(param, onInput = () => { }) {\r\n        let slider = this.addRangeInput(param, onInput);\r\n        let text1 = this.addElement(\"p\", \"slider-text\");\r\n        text1.innerText = param.name;\r\n        let text2 = this.addElement(\"p\", \"slider-value\");\r\n        text2.innerText = slider.value;\r\n        this.addDiv(\"slider\", [\r\n            text1,\r\n            text2,\r\n            slider,\r\n        ]);\r\n        slider.oninput = () => {\r\n            param.set(slider.valueAsNumber);\r\n            onInput(slider.valueAsNumber);\r\n            text1.innerText = param.name;\r\n            text2.innerText = slider.value;\r\n        };\r\n        return slider;\r\n    }\r\n    addRangeInput(param, onInput = () => { }) {\r\n        // a slider looks like this : <input type=\"range\" min=\"1\" max=\"100\" step=\"1\" value=\"50\">\r\n        let slider = this.addElement(\"input\", \"slider-control\");\r\n        slider.type = \"range\";\r\n        slider.min = param.min.toString();\r\n        slider.max = param.max.toString();\r\n        slider.valueAsNumber = param.state;\r\n        slider.step = param.step.toString();\r\n        return slider;\r\n    }\r\n    addText() {\r\n        this.addElement(\"\");\r\n    }\r\n    addEnum(keys, values, onchange) {\r\n        // <select>\r\n        //  <option>Cappuccino</option>\r\n        //  <option>Mocha</option>\r\n        // </select>\r\n        if (keys.length != values.length) {\r\n            console.error(\"need same amount of keys & values\");\r\n        }\r\n        let count = keys.length;\r\n        let e = this.addElement(\"select\", \"enum-selector\");\r\n        for (let i = 0; i < count; i++) {\r\n            let o = this.addElement(\"option\", \"enum-item\");\r\n            o.innerText = keys[i];\r\n            e.appendChild(o);\r\n        }\r\n        console.log(e);\r\n        e.addEventListener(\"change\", (e) => {\r\n            let target = e.target;\r\n            let i = keys.indexOf(target.value);\r\n            onchange(values[i]);\r\n        });\r\n        return e;\r\n    }\r\n    addElement(element, className = \"\") {\r\n        let el = document.createElement(element);\r\n        el.className = className;\r\n        this.currentContext.appendChild(el);\r\n        return el;\r\n    }\r\n}\r\n// a slider parameter\r\nclass SliderParameter {\r\n    constructor(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        this.name = name;\r\n        this.state = state;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n    }\r\n    get() {\r\n        return this.state;\r\n    }\r\n    set(state) {\r\n        // TODO ROUND TO NEAREST STEP\r\n        this.state = _math_math__WEBPACK_IMPORTED_MODULE_0__.GMath.clamp(state, this.min, this.max);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/ui.ts\n");

/***/ }),

/***/ "./src/sfered/settings.json":
/*!**********************************!*\
  !*** ./src/sfered/settings.json ***!
  \**********************************/
/***/ ((module) => {

module.exports = JSON.parse("{\"process\":{\"n_bellus_points\":77,\"point_ranges\":{\"left_eye_set\":[30,31,32,33,34,35,36,37,38],\"right_eye_set\":[40,41,42,43,44,45,46,47,39],\"left_ear_set\":[0,1,2],\"right_ear_set\":[12,11,10]},\"bounding_box_offset\":{\"remark\":\"left_right_up_down. means: offset indefinetly\",\"ly\":[-10,10,-15,15],\"ry\":[-10,10,-15,15],\"la\":[1200,-10,150,150],\"ra\":[-10,1200,150,150]},\"filtering\":{\"blur_first\":1,\"gaus_k_size\":9,\"median_kernel_size\":7,\"canny_thresh_lower\":50,\"canny_thresh_upper\":150,\"histeq_clip_limit\":3,\"histeq_cell_size\":[8,8]}},\"process_ransac\":{\"seed\":3474647,\"iterations\":10000,\"radius\":5.55,\"max_radius_deviation\":0.2,\"tolerance\":0.35,\"min_score\":10,\"max_deviation_from_guess(i think is is not used anymore)\":6,\"remark\":\"this stuff here is raw data\",\"radius_iris\":5.5,\"radius_eye\":12.25},\"process_ears\":{},\"process_brows\":{},\"output\":{\"remark\":\"use this to determine the keys of the output json\",\"file_name\":\"results.json\",\"pupil_pt_left\":\"pupil_pt_left\",\"pupil_pt_right\":\"pupil_pt_right\",\"pupil_pt_flat_left\":\"pupil_pt_flat_left\",\"pupil_pt_flat_right\":\"pupil_pt_flat_right\",\"all_dlib_points\":\"all_dlib_points\",\"ear_pt_left\":\"ear_pt_left\",\"ear_pt_right\":\"ear_pt_right\",\"brow_pts_left\":\"brow_pts_left\",\"brow_pts_right\":\"brow_pts_right\"},\"debug\":{\"remark\":\"use output_test_points to export all points generated in inbetween steps\",\"write_debug_points\":true,\"silent\":false,\"plot\":false}}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;