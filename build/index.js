/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./demo/apps/dot-app3.ts":
/*!*******************************!*\
  !*** ./demo/apps/dot-app3.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotApp3\": () => /* binding */ DotApp3\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// dot-app3.ts\r\n// \r\n// author : Jos Feenstra\r\n// purpose : test with Renderers, Domains & Vectors\r\n\r\nclass DotApp3 extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots = [];\r\n        this.dirs = [];\r\n        let canvas = gl.canvas;\r\n        let n = 1;\r\n        this.bounds = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-n, n, -n, n, -n, n);\r\n        this.whiteDotRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [1, 1, 1, 1], false);\r\n        this.redDotRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 10, [1, 0, 0, 1], false);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n    }\r\n    start() {\r\n        this.spawnSome(100, 0.001);\r\n    }\r\n    spawnSome(count, normrange) {\r\n        const normSpace = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-normrange, normrange, -normrange, normrange, -normrange, normrange);\r\n        for (let i = 0; i < count; i++) {\r\n            this.dots.push(this.bounds.elevate(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.fromRandom()));\r\n            this.dirs.push(normSpace.elevate(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3.fromRandom()));\r\n        }\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        if (state.mouseLeftPressed) {\r\n            this.spawnSome(100, 0.001);\r\n        }\r\n        // update the position of all dots\r\n        for (let i = 0; i < this.dots.length; i++) {\r\n            // this gives us a pointer apparantly\r\n            let dot = this.dots[i];\r\n            let dir = this.dirs[i];\r\n            // bounce of the edges\r\n            if (!this.bounds.x.includes(dot.x))\r\n                dir.x = -dir.x;\r\n            if (!this.bounds.y.includes(dot.y))\r\n                dir.y = -dir.y;\r\n            if (!this.bounds.z.includes(dot.z))\r\n                dir.z = -dir.z;\r\n            // update position\r\n            dot.add(dir);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the corners of the box with the red renderer,\r\n        // and the dots themselves with the white renderer\r\n        this.redDotRend.setAndRender(gl, matrix, this.bounds.corners(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newIdentity()));\r\n        this.whiteDotRend.setAndRender(gl, matrix, this.dots);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vYXBwcy9kb3QtYXBwMy50cz8wNzYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsY0FBYztBQUNkLEdBQUc7QUFDSCx3QkFBd0I7QUFDeEIsbURBQW1EO0FBRThDO0FBRTFGLE1BQU0sT0FBUSxTQUFRLHlDQUFHO0lBVTVCLFlBQVksRUFBeUI7UUFDakMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBVGQsU0FBSSxHQUFjLEVBQUUsQ0FBQztRQUNyQixTQUFJLEdBQWMsRUFBRSxDQUFDO1FBVWpCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUEyQixDQUFDO1FBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsd0RBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksa0RBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGtEQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUI7UUFFdEMsTUFBTSxTQUFTLEdBQUcsd0RBQWtCLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUxRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBRTdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLHdEQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsd0RBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWlCO1FBRXBCLGlDQUFpQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELGtDQUFrQztRQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFeEMscUNBQXFDO1lBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV2QixzQkFBc0I7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbEIsa0JBQWtCO1lBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRUQsSUFBSSxDQUFDLEVBQXlCO1FBRTFCLHVCQUF1QjtRQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUVyQyx1REFBdUQ7UUFDdkQsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMseURBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vZGVtby9hcHBzL2RvdC1hcHAzLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZG90LWFwcDMudHNcclxuLy8gXHJcbi8vIGF1dGhvciA6IEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlIDogdGVzdCB3aXRoIFJlbmRlcmVycywgRG9tYWlucyAmIFZlY3RvcnNcclxuXHJcbmltcG9ydCB7IERvbWFpbjMsIERvdFJlbmRlcmVyMywgQ2FtZXJhLCBWZWN0b3IzLCBJbnB1dFN0YXRlLCBNYXRyaXg0LCBBcHAgfSBmcm9tIFwiLi4vLi4vc3JjL2xpYlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERvdEFwcDMgZXh0ZW5kcyBBcHAge1xyXG5cclxuICAgIGRvdHM6IFZlY3RvcjNbXSA9IFtdO1xyXG4gICAgZGlyczogVmVjdG9yM1tdID0gW107XHJcblxyXG4gICAgYm91bmRzOiBEb21haW4zO1xyXG4gICAgd2hpdGVEb3RSZW5kOiBEb3RSZW5kZXJlcjM7XHJcbiAgICByZWREb3RSZW5kOiBEb3RSZW5kZXJlcjM7XHJcbiAgICBjYW1lcmE6IENhbWVyYTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgc3VwZXIoZ2wpO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIGxldCBuID0gMTtcclxuICAgICAgICB0aGlzLmJvdW5kcyA9IERvbWFpbjMuZnJvbUJvdW5kcygtbiwgbiwgLW4sIG4sIC1uLCBuKTtcclxuICAgICAgICB0aGlzLndoaXRlRG90UmVuZCA9IG5ldyBEb3RSZW5kZXJlcjMoZ2wsIDEwLCBbMSwxLDEsMV0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlZERvdFJlbmQgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCAxMCwgWzEsMCwwLDFdLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5zcGF3blNvbWUoMTAwLCAwLjAwMSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Bhd25Tb21lKGNvdW50OiBudW1iZXIsIG5vcm1yYW5nZTogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG5vcm1TcGFjZSA9IERvbWFpbjMuZnJvbUJvdW5kcygtbm9ybXJhbmdlLCBub3JtcmFuZ2UsIC1ub3JtcmFuZ2UsIG5vcm1yYW5nZSwgLW5vcm1yYW5nZSwgbm9ybXJhbmdlKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAgOyBpIDwgY291bnQ7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kb3RzLnB1c2godGhpcy5ib3VuZHMuZWxldmF0ZShWZWN0b3IzLmZyb21SYW5kb20oKSkpO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnMucHVzaChub3JtU3BhY2UuZWxldmF0ZShWZWN0b3IzLmZyb21SYW5kb20oKSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtb3ZlIHRoZSBjYW1lcmEgd2l0aCB0aGUgbW91c2VcclxuICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGUoc3RhdGUpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdGUubW91c2VMZWZ0UHJlc3NlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNwYXduU29tZSgxMDAsIDAuMDAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgYWxsIGRvdHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLmRvdHMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMgZ2l2ZXMgdXMgYSBwb2ludGVyIGFwcGFyYW50bHlcclxuICAgICAgICAgICAgbGV0IGRvdCA9IHRoaXMuZG90c1tpXTtcclxuICAgICAgICAgICAgbGV0IGRpciA9IHRoaXMuZGlyc1tpXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJvdW5jZSBvZiB0aGUgZWRnZXNcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5kcy54LmluY2x1ZGVzKGRvdC54KSlcclxuICAgICAgICAgICAgICAgIGRpci54ID0gLWRpci54XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ib3VuZHMueS5pbmNsdWRlcyhkb3QueSkpXHJcbiAgICAgICAgICAgICAgICBkaXIueSA9IC1kaXIueVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYm91bmRzLnouaW5jbHVkZXMoZG90LnopKVxyXG4gICAgICAgICAgICAgICAgZGlyLnogPSAtZGlyLnpcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvblxyXG4gICAgICAgICAgICBkb3QuYWRkKGRpcik7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuXHJcbiAgICAgICAgLy8gZ2V0IHRvLXNjcmVlbiBtYXRyaXhcclxuICAgICAgICBjb25zdCBjYW52YXMgPSBnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICAgICAgbGV0IG1hdHJpeCA9IHRoaXMuY2FtZXJhLnRvdGFsTWF0cml4O1xyXG5cclxuICAgICAgICAvLyByZW5kZXIgdGhlIGNvcm5lcnMgb2YgdGhlIGJveCB3aXRoIHRoZSByZWQgcmVuZGVyZXIsXHJcbiAgICAgICAgLy8gYW5kIHRoZSBkb3RzIHRoZW1zZWx2ZXMgd2l0aCB0aGUgd2hpdGUgcmVuZGVyZXJcclxuICAgICAgICB0aGlzLnJlZERvdFJlbmQuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIHRoaXMuYm91bmRzLmNvcm5lcnMoTWF0cml4NC5uZXdJZGVudGl0eSgpKSk7XHJcbiAgICAgICAgdGhpcy53aGl0ZURvdFJlbmQuc2V0QW5kUmVuZGVyKGdsLCBtYXRyaXgsIHRoaXMuZG90cyk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./demo/apps/dot-app3.ts\n");

/***/ }),

/***/ "./demo/apps/geometry-app.ts":
/*!***********************************!*\
  !*** ./demo/apps/geometry-app.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeometryApp\": () => /* binding */ GeometryApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    geometry-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: a 3d voxel environment to toy around in. Uses several features of geon\r\n\r\nclass GeometryApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.dots = [];\r\n        this.geo = [];\r\n        this.mapGeo = [];\r\n        // logic data \r\n        this.size = 50;\r\n        this.cellSize = 1;\r\n        this.pov = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"pov\", 80, 10, 100, 1);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(gl.canvas, 10, true);\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [1, 0, 0, 1], false);\r\n        this.whiteLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [1, 1, 1, 1]);\r\n        this.greyLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.2, 0, 1, 0.5]);\r\n        this.redLineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.8, 0, 0, 1]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n        this.transMeshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [1, 1, 1, 0.10], [1, 1, 1, 0.10]);\r\n    }\r\n    // called after init\r\n    start() {\r\n        this.map = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.IntCube(this.size, this.size, this.size);\r\n        this.map.fill(0);\r\n        // add random blocks in the world\r\n        this.map.map((value, index) => {\r\n            if (Math.random() > 0.99) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        });\r\n        // let perlin = new Perlin();\r\n        // this.map.map((value, i) => {\r\n        //     let c = this.map.getCoords(i);\r\n        //     let scale = 0.05;\r\n        //     let noise = perlin.noise(c.x * scale, c.y * scale, c.z * scale);\r\n        //     if (i < 10) {\r\n        //         console.log(c);\r\n        //         console.log(noise);\r\n        //     }\r\n        //     if (noise > 0.60) {\r\n        //         return 1;\r\n        //     } else {\r\n        //         return value;\r\n        //     }\r\n        // })\r\n        // console.log(\"done setting\")\r\n        // after change, buffer \r\n        this.bufferMap();\r\n        // console.log(\"done\")\r\n        this.gridLarge = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane, this.size, this.cellSize);\r\n        this.gridSmall = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane, (this.size * 10) - 1, this.cellSize / 10);\r\n        // this.whiteLineRenderer.set(this.gl, this.gridLarge, DrawSpeed.StaticDraw);\r\n        // this.greyLineRenderer.set(this.gl, this.gridSmall, DrawSpeed.StaticDraw);\r\n    }\r\n    ui(ui) {\r\n        ui.addParameter(this.pov);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n        this.updateCursor(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        // render the grid\r\n        // this.greyLineRenderer.render(gl, matrix);\r\n        // this.whiteLineRenderer.render(gl, matrix);\r\n        // this.redLineRenderer.setAndRender(gl, matrix, this.cursorVisual!);\r\n        // render the map\r\n        // TODO create MeshArray\r\n        this.meshRenderer.render(gl, this.camera);\r\n        // render other things\r\n        for (let geo of this.geo) {\r\n            this.transMeshRenderer.setAndRender(gl, matrix, geo);\r\n        }\r\n    }\r\n    addPreviewCube(point) {\r\n        let cubeCenter = this.mapToWorld(point);\r\n        let cube = this.createCube(cubeCenter);\r\n        this.geo.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCube(cube).toDisplayMesh());\r\n    }\r\n    flushPreviewCubes() {\r\n        this.geo = [];\r\n    }\r\n    updateCursor(state) {\r\n        // render mouse to world line \r\n        let mouseRay = this.camera.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        // snap to world\r\n        // let cursor = mouseRay.at(mouseRay.xPlane(this.plane));\r\n        // let mapCursor = this.worldToMap(cursor);\r\n        // let coord = this.mapToWorld(mapCursor);\r\n        // place circle at cursor\r\n        // let plane = this.plane.clone();\r\n        // plane.matrix = plane.matrix.multiply(Matrix4.newTranslation(cursor.x, cursor.y, cursor.z));\r\n        // this.cursorVisual = LineArray.fromCircle(new Circle3(plane, 0.1));\r\n        // figure out which cube we are pointing to\r\n        this.flushPreviewCubes();\r\n        let [cubeID, cubeIDprevious] = this.voxelRaycast(mouseRay, 40);\r\n        if (cubeID == -1) {\r\n            // nothing else to do\r\n            return;\r\n        }\r\n        let cubeCursor = this.map.getCoords(cubeIDprevious);\r\n        this.addPreviewCube(cubeCursor);\r\n        // render cube at this position\r\n        // this.geo.push(Mesh.fromCube(cube));  \r\n        // click\r\n        if (state.mouseLeftPressed) {\r\n            console.log(\"click\");\r\n            if (state.IsKeyDown(\" \")) {\r\n                if (this.map.data[cubeID] == 0)\r\n                    return;\r\n                this.map.data[cubeID] = 0;\r\n                this.bufferMap();\r\n            }\r\n            else if (this.map.data[cubeIDprevious] != 1) {\r\n                this.map.data[cubeIDprevious] = 1;\r\n                this.bufferMap();\r\n            }\r\n        }\r\n    }\r\n    // return the ID of the \r\n    // A Fast Voxel Traversal Algorithm for Ray Tracing\r\n    // Amanatides, Woo\r\n    // Dept. of Computer Science\r\n    voxelRaycast(ray, range) {\r\n        let startPoint = this.worldToMap(ray.origin);\r\n        let voxelCenter = this.mapToWorld(startPoint);\r\n        // integers\r\n        let x = startPoint.x;\r\n        let y = startPoint.y;\r\n        let z = startPoint.z;\r\n        let xprev = x;\r\n        let yprev = y;\r\n        let zprev = z;\r\n        let stepX = ray.normal.x > 0 ? 1 : -1;\r\n        let stepY = ray.normal.y > 0 ? 1 : -1;\r\n        let stepZ = ray.normal.z > 0 ? 1 : -1;\r\n        // floats\r\n        let voxelsize = this.cellSize;\r\n        let deltax = voxelsize / Math.abs(ray.normal.x);\r\n        let deltay = voxelsize / Math.abs(ray.normal.y);\r\n        let deltaz = voxelsize / Math.abs(ray.normal.z);\r\n        // intit tx, ty, and tz, at their first intersection with corresponding plane\r\n        voxelCenter.add(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(voxelsize / 2 * stepX, voxelsize / 2 * stepY, voxelsize / 2 * stepZ));\r\n        let move = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(voxelCenter.x, voxelCenter.y, voxelCenter.z);\r\n        let xy = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        xy._matrix.multiply(move);\r\n        let yz = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldYZ();\r\n        yz._matrix.multiply(move);\r\n        let xz = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXZ();\r\n        xz._matrix.multiply(move);\r\n        let tx = ray.xPlane(yz);\r\n        let ty = ray.xPlane(xz);\r\n        let tz = ray.xPlane(xy);\r\n        if (tx < 0 || ty < 0 || tz < 0) {\r\n            console.log(\"something critical went wrong!\");\r\n            return [-1, -1];\r\n        }\r\n        // debug ray\r\n        // let lineSets: LineArray[] = [ray.toLine(100), LineArray.fromPlane(xy), LineArray.fromPlane(yz), LineArray.fromPlane(xz)];\r\n        // this.whiteLineRenderer.set(this.gl, LineArray.fromJoin(lineSets), DrawSpeed.StaticDraw);\r\n        // console.log(\"voxel raycast initialized with:\");\r\n        // console.log(\"deltas: \", deltax, deltay, deltaz);\r\n        // console.log(\"t's: \", tx, ty, tz);\r\n        // start iterating\r\n        // console.log(\"cast away!\");\r\n        // this.addPreviewCube(new Vector3(x,y,z));\r\n        // console.log(x,y,z);\r\n        for (let i = 0; i < range; i++) {\r\n            // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n            // if hit, return previous\r\n            let value = this.map.tryGet(x, y, z);\r\n            if (value == 1) {\r\n                // console.log(\"found a cube after \" + i + \"steps...\");\r\n                // this.addPreviewCube(new Vector3(xprev,yprev,zprev));\r\n                return [this.map.getIndex(x, y, z), this.map.getIndex(xprev, yprev, zprev)];\r\n            }\r\n            else {\r\n                xprev = x;\r\n                yprev = y;\r\n                zprev = z;\r\n            }\r\n            // to the next cube!\r\n            if (tx < ty && tx < tz) {\r\n                // x \r\n                tx += deltax;\r\n                x += stepX;\r\n            }\r\n            else if (ty < tz) {\r\n                // y\r\n                ty += deltay;\r\n                y += stepY;\r\n            }\r\n            else {\r\n                // z\r\n                tz += deltaz;\r\n                z += stepZ;\r\n            }\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    // flush this.meshRenderer\r\n    // turn this.map into this.mapGeo\r\n    bufferMap() {\r\n        let mapGeo = [];\r\n        this.map.iter((entry, index) => {\r\n            if (entry == 1) {\r\n                let mapCoord = this.map.getCoords(index);\r\n                let coord = this.mapToWorld(mapCoord);\r\n                let cube = this.createCube(coord);\r\n                mapGeo.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCube(cube));\r\n            }\r\n        });\r\n        let m = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(mapGeo).toDisplayMesh();\r\n        m.calculateFaceNormals();\r\n        this.meshRenderer.set(this.gl, m);\r\n    }\r\n    worldToMap(coord) {\r\n        let halfsize = (this.size / 2) + (this.cellSize / 2);\r\n        return coord.added(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(halfsize, halfsize, halfsize)).floored();\r\n    }\r\n    mapToWorld(point) {\r\n        let halfsize = this.size / 2;\r\n        return point.added(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-halfsize, -halfsize, -halfsize));\r\n    }\r\n    createCube(center) {\r\n        let hs = this.cellSize / 2;\r\n        let move = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(center.x, center.y, center.z);\r\n        let cube = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Cube(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY().transform(move), _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromBounds(-hs, hs, -hs, hs, -hs, hs));\r\n        return cube;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/geometry-app.ts\n");

/***/ }),

/***/ "./demo/apps/icosahedron-app.ts":
/*!**************************************!*\
  !*** ./demo/apps/icosahedron-app.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IcosahedronApp\": () => /* binding */ IcosahedronApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test statistic functionalties\r\n\r\nclass IcosahedronApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.radius = 0.1; // radius!: Parameter;\r\n        this.detail = 6; // detail!: Parameter;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 8, true);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n    }\r\n    getIcosahedron() {\r\n        let graph = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Graph();\r\n        // use golden ratio\r\n        let a = 1;\r\n        let phi = (1 + Math.pow(5, 0.5)) / 2;\r\n        let b = a * phi;\r\n        // build vertices\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-a, -b, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(a, -b, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-a, b, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(a, b, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, -a, -b));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, a, -b));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, -a, b));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, a, b));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-b, 0, -a));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-b, 0, a));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(b, 0, -a));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(b, 0, a));\r\n        // build edges\r\n        let addEdge = (a, b) => {\r\n            let norm = graph.getVertex(a).added(graph.getVertex(b)).scale(0.5);\r\n            graph.addEdge(a, b, norm);\r\n        };\r\n        for (let i = 0; i < 12; i += 4) {\r\n            addEdge(i + 0, i + 1);\r\n            addEdge(i + 2, i + 3);\r\n            let inext = (i + 4) % 12;\r\n            addEdge(i + 0, inext + 2);\r\n            addEdge(i + 0, inext + 0);\r\n            addEdge(i + 1, inext + 2);\r\n            addEdge(i + 1, inext + 0);\r\n            addEdge(i + 2, inext + 3);\r\n            addEdge(i + 2, inext + 1);\r\n            addEdge(i + 3, inext + 3);\r\n            addEdge(i + 3, inext + 1);\r\n        }\r\n        return graph;\r\n    }\r\n    demo() {\r\n        let graph = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Graph();\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0)); // 0\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, 0)); // 1\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, 0, 0));\r\n        graph.addVert(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, -1, 0));\r\n        let normal = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1);\r\n        graph.addEdge(0, 1, normal);\r\n        graph.addEdge(0, 2, normal);\r\n        graph.addEdge(0, 3, normal);\r\n        graph.addEdge(0, 4, normal);\r\n        graph.addEdge(1, 2, normal);\r\n        return graph;\r\n    }\r\n    ui(ui) {\r\n        this.rotate = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"rotate\", 1, 0, 1, 1);\r\n        this.inner = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"inner\", 1, 0, 1, 1);\r\n        // this.radius = new Parameter(\"radius\", 0.1, 0, 0.5, 0.01)\r\n        // this.detail = new Parameter(\"detail\", 6, 3, 20, 1)\r\n        let reset = () => {\r\n            // this.rotate.set(0);\r\n            this.start();\r\n        };\r\n        ui.addBooleanParameter(this.rotate);\r\n        ui.addBooleanParameter(this.inner, reset);\r\n        // ui.addParameter(this.radius, reset);\r\n        // ui.addParameter(this.detail, reset);\r\n        // ui.addButton(() => {this.start()})\r\n    }\r\n    start() {\r\n        this.graph = this.getIcosahedron();\r\n        // this.graph.print();\r\n        this.mesh = graphToMultiMesh(this.graph, this.radius, this.detail, this.inner.get() == 1);\r\n        this.meshRend.set(this.gl, this.mesh);\r\n        // console.log(\"all loops: \", this.graph.allLoops());\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        if (!state.mouseRightDown && this.rotate.get() == 1) {\r\n            let alpha = 0.0002 * state.tick;\r\n            let rot = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(alpha)\r\n                .multiply(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(alpha));\r\n            this.mesh.transform(rot);\r\n            this.meshRend.set(this.gl, this.mesh, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        this.meshRend.render(gl, this.camera);\r\n    }\r\n}\r\nfunction graphToMultiMesh(graph, radius, detail, inner) {\r\n    let meshes = [];\r\n    graph.allVerts().forEach((v) => {\r\n        meshes.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromSphere(v, radius * 2, detail, detail * 2));\r\n    });\r\n    let edges = graph.allEdges();\r\n    for (let i = 0; i < edges.length; i += 2) {\r\n        let from = graph.getVertex(edges[i]);\r\n        let to = graph.getVertex(edges[i + 1]);\r\n        let mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCylinder(from, to, radius, detail);\r\n        meshes.push(mesh);\r\n    }\r\n    if (inner) {\r\n        meshes.push(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromGraph(graph));\r\n    }\r\n    let rmesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin(meshes).toDisplayMesh();\r\n    rmesh.calculateFaceNormals();\r\n    return rmesh;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/icosahedron-app.ts\n");

/***/ }),

/***/ "./demo/apps/mesh-inspector-app.ts":
/*!*****************************************!*\
  !*** ./demo/apps/mesh-inspector-app.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshInspectorApp\": () => /* binding */ MeshInspectorApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    shapes-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test creation of basic mesh shapes. Test UI\r\n\r\nclass MeshInspectorApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        // setup render env\r\n        super(gl);\r\n        // geo data\r\n        this.plane = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.geo = [];\r\n        // logic data \r\n        this.size = 10;\r\n        this.cellSize = 0.5;\r\n        this.distance = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"distance\", 3.0, 0, 4.0, 0.01);\r\n        this.radius = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"radius\", 1.0, 0, 4.0, 0.01);\r\n        this.detail = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"detail\", 5, 0, 100, 1);\r\n        this.renderNormals = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"render normals\", 1, 0, 1, 0); // boolean Param\r\n        this.shademethod = 0; // TODO enum Param\r\n        let canvas = gl.canvas;\r\n        // TODO abstract this to scene\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n        this.camera.z_offset = -10;\r\n        this.camera.angleAlpha = 0.4;\r\n        this.camera.angleBeta = 0.5;\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [0, 1, 0, 1]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.MeshDebugRenderer(gl, [0.6, 0, 0, 1], [1, 0, 0, 1]);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0.3, 0.3, 0.3, 1]);\r\n        this.shadedMeshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n    }\r\n    ui(ui) {\r\n        // TODO : think of a system that ties parameter & slider together fully\r\n        ui.addParameter(this.radius, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addParameter(this.distance, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addParameter(this.detail, (value) => {\r\n            this.start();\r\n        });\r\n        ui.addBooleanParameter(this.renderNormals, (b) => {\r\n            this.start();\r\n        });\r\n        // render methods\r\n        ui.addEnum([\"debug\", \"shaded\"], [0, 1], (val) => {\r\n            this.shademethod = val;\r\n            this.start();\r\n        });\r\n    }\r\n    start() {\r\n        let grid = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromGrid(this.plane.clone().moveTo(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -this.radius.get())), 100, 2);\r\n        let spherePerRing = this.detail.get() * 2;\r\n        let rad = this.radius.get();\r\n        let dis = this.distance.get();\r\n        let det = this.detail.get();\r\n        let mesh = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromJoin([\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromSphere(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(dis, 0, 0), this.radius.get(), this.detail.get(), spherePerRing),\r\n            // PureMesh.fromCube(new Cube(this.plane, Domain3.fromRadius(this.radius.get()))),\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCone(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(-dis, 0, -this.radius.get()), this.radius.get(), this.radius.get() * 2, spherePerRing),\r\n            _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCylinder(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -rad), new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, rad), rad, det),\r\n        ]);\r\n        let dmesh = mesh.toDisplayMesh();\r\n        if (this.renderNormals.get() == 1) {\r\n            dmesh.calculateFaceNormals();\r\n        }\r\n        console.log(new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Parameter(\"shadeMethod\", 0, 0, 2, 0.5).getNPermutations());\r\n        // let mesh = Mesh.fromCube(new Cube(this.plane, Domain3.fromRadius(1)));\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        // TODO abstract this to scene \r\n        if (this.shademethod == 0) {\r\n            this.meshRenderer.set(this.gl, dmesh);\r\n        }\r\n        else {\r\n            this.shadedMeshRenderer.set(this.gl, dmesh);\r\n        }\r\n        this.lineRenderer.set(this.gl, grid);\r\n        // this.dotRenderer.set(mesh.verts, DrawSpeed.StaticDraw);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // TODO abstract this to 'scene'\r\n        let matrix = this.camera.totalMatrix;\r\n        this.dotRenderer.render(gl, matrix);\r\n        if (this.shademethod == 0) {\r\n            this.meshRenderer.render(gl, matrix);\r\n        }\r\n        else if (this.shademethod == 1) {\r\n            this.shadedMeshRenderer.render(gl, this.camera);\r\n        }\r\n        this.lineRenderer.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vYXBwcy9tZXNoLWluc3BlY3Rvci1hcHAudHM/M2YzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsdURBQXVEO0FBRWdJO0FBR2hMLE1BQU0sZ0JBQWlCLFNBQVEseUNBQUc7SUF5QnJDLFlBQVksRUFBeUI7UUFFakMsbUJBQW1CO1FBQ25CLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQW5CZCxXQUFXO1FBQ1gsVUFBSyxHQUFVLG1EQUFhLEVBQUUsQ0FBQztRQUUvQixRQUFHLEdBQWlCLEVBQUUsQ0FBQztRQUV2QixjQUFjO1FBQ2QsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFFZixhQUFRLEdBQUcsSUFBSSwrQ0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxXQUFNLEdBQUcsSUFBSSwrQ0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRCxXQUFNLEdBQUcsSUFBSSwrQ0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUvQyxrQkFBYSxHQUFHLElBQUksK0NBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtRQUM3RSxnQkFBVyxHQUFHLENBQUMsRUFBQyxrQkFBa0I7UUFNOUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQTJCLENBQUM7UUFFNUMsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGtEQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHVEQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksa0RBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHdEQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFHRCxFQUFFLENBQUMsRUFBTTtRQUVMLHVFQUF1RTtRQUV2RSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUM7UUFFRixpQkFBaUI7UUFDakIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxLQUFLO1FBRUQsSUFBSSxJQUFJLEdBQUcsd0RBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSw2Q0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkcsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM1QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFNUIsSUFBSSxJQUFJLEdBQUcsbURBQWEsQ0FBQztZQUNyQixxREFBZSxDQUFDLElBQUksNkNBQU8sQ0FBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxhQUFhLENBQUM7WUFDMUYsa0ZBQWtGO1lBQ2xGLG1EQUFhLENBQUMsSUFBSSw2Q0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLGFBQWEsQ0FBQztZQUNoSCx1REFBaUIsQ0FDYixJQUFJLDZDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUN2QixJQUFJLDZDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRyxHQUFHLENBQUMsRUFDdkIsR0FBRyxFQUNILEdBQUcsQ0FBQztTQUNYLENBQUMsQ0FBQztRQUNILElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVqQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQy9CLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQ2hDO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLCtDQUFTLENBQUMsYUFBYSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFdEUseUVBQXlFO1FBRXpFLDJCQUEyQjtRQUMzQiwyQkFBMkI7UUFFM0IsK0JBQStCO1FBQy9CLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN6QzthQUFNO1lBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyQywwREFBMEQ7SUFDOUQsQ0FBQztJQUdELE1BQU0sQ0FBQyxLQUFpQjtRQUVwQixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFOUIsQ0FBQztJQUdELElBQUksQ0FBQyxFQUF5QjtRQUMxQixnQ0FBZ0M7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBR3BDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3hDO2FBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vZGVtby9hcHBzL21lc2gtaW5zcGVjdG9yLWFwcC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIHNoYXBlcy1hcHAudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IHRlc3QgY3JlYXRpb24gb2YgYmFzaWMgbWVzaCBzaGFwZXMuIFRlc3QgVUlcclxuXHJcbmltcG9ydCB7IEFwcCwgQ2FtZXJhLCBEb3RSZW5kZXJlcjMsIExpbmVSZW5kZXJlciwgTWVzaERlYnVnUmVuZGVyZXIsIFNoYWRlZE1lc2hSZW5kZXJlciwgUGxhbmUsIExpbmVBcnJheSwgUmVuZGVyTWVzaCwgUGFyYW1ldGVyLCBVSSwgVmVjdG9yMywgTWVzaCwgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi8uLi9zcmMvbGliXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE1lc2hJbnNwZWN0b3JBcHAgZXh0ZW5kcyBBcHAge1xyXG5cclxuICAgIC8vIHJlbmRlcmluZm9cclxuICAgIGNhbWVyYTogQ2FtZXJhO1xyXG4gICAgZG90UmVuZGVyZXI6IERvdFJlbmRlcmVyMztcclxuICAgIGxpbmVSZW5kZXJlcjogTGluZVJlbmRlcmVyO1xyXG4gICAgbWVzaFJlbmRlcmVyOiBNZXNoRGVidWdSZW5kZXJlcjtcclxuICAgIHNoYWRlZE1lc2hSZW5kZXJlcjogU2hhZGVkTWVzaFJlbmRlcmVyO1xyXG5cclxuICAgIC8vIGdlbyBkYXRhXHJcbiAgICBwbGFuZTogUGxhbmUgPSBQbGFuZS5Xb3JsZFhZKCk7XHJcbiAgICBncmlkPzogTGluZUFycmF5O1xyXG4gICAgZ2VvOiBSZW5kZXJNZXNoW10gPSBbXTtcclxuXHJcbiAgICAvLyBsb2dpYyBkYXRhIFxyXG4gICAgc2l6ZSA9IDEwO1xyXG4gICAgY2VsbFNpemUgPSAwLjU7XHJcblxyXG4gICAgZGlzdGFuY2UgPSBuZXcgUGFyYW1ldGVyKFwiZGlzdGFuY2VcIiwgMy4wLCAwLCA0LjAsIDAuMDEpO1xyXG4gICAgcmFkaXVzID0gbmV3IFBhcmFtZXRlcihcInJhZGl1c1wiLCAxLjAsIDAsIDQuMCwgMC4wMSk7XHJcbiAgICBkZXRhaWwgPSBuZXcgUGFyYW1ldGVyKFwiZGV0YWlsXCIsIDUsIDAsIDEwMCwgMSk7XHJcblxyXG4gICAgcmVuZGVyTm9ybWFscyA9IG5ldyBQYXJhbWV0ZXIoXCJyZW5kZXIgbm9ybWFsc1wiLCAxLCAwLCAxLCAwKTsgLy8gYm9vbGVhbiBQYXJhbVxyXG4gICAgc2hhZGVtZXRob2QgPSAwIC8vIFRPRE8gZW51bSBQYXJhbVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzZXR1cCByZW5kZXIgZW52XHJcbiAgICAgICAgc3VwZXIoZ2wpO1xyXG4gICAgICAgIGxldCBjYW52YXMgPSBnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8vIFRPRE8gYWJzdHJhY3QgdGhpcyB0byBzY2VuZVxyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnpfb2Zmc2V0ID0gLTEwO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLmFuZ2xlQWxwaGEgPSAwLjQ7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEuYW5nbGVCZXRhID0gMC41O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZG90UmVuZGVyZXIgPSBuZXcgRG90UmVuZGVyZXIzKGdsLCA0LCBbMCwxLDAsMV0pO1xyXG4gICAgICAgIHRoaXMubWVzaFJlbmRlcmVyID0gbmV3IE1lc2hEZWJ1Z1JlbmRlcmVyKGdsLCBbMC42LDAsMCwxXSwgWzEsMCwwLDFdKTtcclxuICAgICAgICB0aGlzLmxpbmVSZW5kZXJlciA9IG5ldyBMaW5lUmVuZGVyZXIoZ2wsIFswLjMsMC4zLDAuMywxXSk7XHJcbiAgICAgICAgdGhpcy5zaGFkZWRNZXNoUmVuZGVyZXIgPSBuZXcgU2hhZGVkTWVzaFJlbmRlcmVyKGdsKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdWkodWk6IFVJKSB7XHJcblxyXG4gICAgICAgIC8vIFRPRE8gOiB0aGluayBvZiBhIHN5c3RlbSB0aGF0IHRpZXMgcGFyYW1ldGVyICYgc2xpZGVyIHRvZ2V0aGVyIGZ1bGx5XHJcbiAgICAgICAgXHJcbiAgICAgICAgdWkuYWRkUGFyYW1ldGVyKHRoaXMucmFkaXVzLCAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB1aS5hZGRQYXJhbWV0ZXIodGhpcy5kaXN0YW5jZSwgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdWkuYWRkUGFyYW1ldGVyKHRoaXMuZGV0YWlsLCAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB1aS5hZGRCb29sZWFuUGFyYW1ldGVyKHRoaXMucmVuZGVyTm9ybWFscywgKGIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIHJlbmRlciBtZXRob2RzXHJcbiAgICAgICAgdWkuYWRkRW51bShbXCJkZWJ1Z1wiLCBcInNoYWRlZFwiXSwgWzAsMV0sICh2YWwpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zaGFkZW1ldGhvZCA9IHZhbDtcclxuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZ3JpZCA9IExpbmVBcnJheS5mcm9tR3JpZCh0aGlzLnBsYW5lLmNsb25lKCkubW92ZVRvKG5ldyBWZWN0b3IzKDAsMCwgLXRoaXMucmFkaXVzLmdldCgpKSksIDEwMCwgMik7XHJcbiAgICAgICAgbGV0IHNwaGVyZVBlclJpbmcgPSB0aGlzLmRldGFpbC5nZXQoKSAqIDI7XHJcblxyXG4gICAgICAgIGxldCByYWQgPSB0aGlzLnJhZGl1cy5nZXQoKTtcclxuICAgICAgICBsZXQgZGlzID0gdGhpcy5kaXN0YW5jZS5nZXQoKTtcclxuICAgICAgICBsZXQgZGV0ID0gdGhpcy5kZXRhaWwuZ2V0KCk7XHJcblxyXG4gICAgICAgIGxldCBtZXNoID0gTWVzaC5mcm9tSm9pbihbXHJcbiAgICAgICAgICAgIE1lc2guZnJvbVNwaGVyZShuZXcgVmVjdG9yMyhkaXMsMCwwKSwgdGhpcy5yYWRpdXMuZ2V0KCksIHRoaXMuZGV0YWlsLmdldCgpLCBzcGhlcmVQZXJSaW5nKSxcclxuICAgICAgICAgICAgLy8gUHVyZU1lc2guZnJvbUN1YmUobmV3IEN1YmUodGhpcy5wbGFuZSwgRG9tYWluMy5mcm9tUmFkaXVzKHRoaXMucmFkaXVzLmdldCgpKSkpLFxyXG4gICAgICAgICAgICBNZXNoLmZyb21Db25lKG5ldyBWZWN0b3IzKC1kaXMsIDAsIC10aGlzLnJhZGl1cy5nZXQoKSksIHRoaXMucmFkaXVzLmdldCgpLCB0aGlzLnJhZGl1cy5nZXQoKSAqIDIsIHNwaGVyZVBlclJpbmcpLFxyXG4gICAgICAgICAgICBNZXNoLmZyb21DeWxpbmRlcihcclxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IzKDAsIDAsIC1yYWQpLCBcclxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IzKDAsIDAsICByYWQpLFxyXG4gICAgICAgICAgICAgICAgcmFkLFxyXG4gICAgICAgICAgICAgICAgZGV0KSxcclxuICAgICAgICBdKTtcclxuICAgICAgICBsZXQgZG1lc2ggPSBtZXNoLnRvRGlzcGxheU1lc2goKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyTm9ybWFscy5nZXQoKSA9PSAxKSB7XHJcbiAgICAgICAgICAgIGRtZXNoLmNhbGN1bGF0ZUZhY2VOb3JtYWxzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhuZXcgUGFyYW1ldGVyKFwic2hhZGVNZXRob2RcIiwwLDAsMiwwLjUpLmdldE5QZXJtdXRhdGlvbnMoKSlcclxuXHJcbiAgICAgICAgLy8gbGV0IG1lc2ggPSBNZXNoLmZyb21DdWJlKG5ldyBDdWJlKHRoaXMucGxhbmUsIERvbWFpbjMuZnJvbVJhZGl1cygxKSkpO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtZXNoLnZlcnRzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtZXNoLmxpbmtzKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETyBhYnN0cmFjdCB0aGlzIHRvIHNjZW5lIFxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRlbWV0aG9kID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNoUmVuZGVyZXIuc2V0KHRoaXMuZ2wsIGRtZXNoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNoYWRlZE1lc2hSZW5kZXJlci5zZXQodGhpcy5nbCwgZG1lc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmxpbmVSZW5kZXJlci5zZXQodGhpcy5nbCwgZ3JpZCk7XHJcbiAgICAgICAgLy8gdGhpcy5kb3RSZW5kZXJlci5zZXQobWVzaC52ZXJ0cywgRHJhd1NwZWVkLlN0YXRpY0RyYXcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtb3ZlIHRoZSBjYW1lcmEgd2l0aCB0aGUgbW91c2VcclxuICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGUoc3RhdGUpOyBcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIGRyYXcoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIC8vIFRPRE8gYWJzdHJhY3QgdGhpcyB0byAnc2NlbmUnXHJcbiAgICAgICAgbGV0IG1hdHJpeCA9IHRoaXMuY2FtZXJhLnRvdGFsTWF0cml4O1xyXG4gICAgICAgIHRoaXMuZG90UmVuZGVyZXIucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZGVtZXRob2QgPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc2hSZW5kZXJlci5yZW5kZXIoZ2wsIG1hdHJpeCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNoYWRlbWV0aG9kID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5zaGFkZWRNZXNoUmVuZGVyZXIucmVuZGVyKGdsLCB0aGlzLmNhbWVyYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubGluZVJlbmRlcmVyLnJlbmRlcihnbCwgbWF0cml4KTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./demo/apps/mesh-inspector-app.ts\n");

/***/ }),

/***/ "./demo/apps/obj-loader-app.ts":
/*!*************************************!*\
  !*** ./demo/apps/obj-loader-app.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ObjLoaderApp\": () => /* binding */ ObjLoaderApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: drag an obj to the canvas, and view it on the web\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass ObjLoaderApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        let canvas = gl.canvas;\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n        (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.addDropFileEventListeners)(canvas, processFiles.bind(this));\r\n    }\r\n    start() {\r\n        // nothing\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n        if (this.obj == undefined)\r\n            this.dotRenderer.setAndRender(gl, matrix, _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList([new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0), new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1)]));\r\n        else {\r\n            this.dotRenderer.setAndRender(gl, matrix, this.obj.verts);\r\n            // this.meshRenderer.render(gl, matrix);\r\n            this.lineRenderer.render(gl, matrix);\r\n        }\r\n    }\r\n}\r\nfunction processFiles(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // assume its 1 file, the obj file.\r\n        let file = files[0];\r\n        // see if we can build an correct obj from the files\r\n        let objtext = yield (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.loadTextFromFile)(file);\r\n        this.obj = (0,_src_lib__WEBPACK_IMPORTED_MODULE_0__.meshFromObj)(objtext);\r\n        this.renderable = _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromMesh(this.obj);\r\n        // scale down if too big.\r\n        // NOTE: this could also be done using matrices. Figure that out!\r\n        console.log(\"scaling...\");\r\n        let bounds = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromInclude(this.obj.verts);\r\n        let factor = 1 / bounds.size().largestValue();\r\n        // TODO : one line these types of operations? \r\n        // they will be quite common i think...\r\n        let count = this.obj.verts.count();\r\n        for (let i = 0; i < count; i++) {\r\n            let vec = this.obj.verts.getVector(i);\r\n            vec.scale(factor);\r\n            this.obj.verts.setVector(i, vec);\r\n        }\r\n        // let objBounds = Domain3.fromInclude(this.obj.verts);\r\n        // console.log(objBounds);\r\n        // let factor = 100;\r\n        // let smaller = Domain3.fromRadii(\r\n        //     objBounds.x.size() / factor,\r\n        //     objBounds.y.size() / factor,\r\n        //     objBounds.z.size() / factor,\r\n        // );\r\n        // this.obj.verts = objBounds.remapAll(this.obj.verts, smaller);\r\n        console.log(\"done!\");\r\n        // put the data into the render buffers.\r\n        // this.meshRenderer.set(this.gl, this.obj.verts, this.obj.faces);\r\n        this.lineRenderer.set(this.gl, this.renderable, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw);\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/apps/obj-loader-app.ts\n");

/***/ }),

/***/ "./demo/apps/stat-app.ts":
/*!*******************************!*\
  !*** ./demo/apps/stat-app.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StatApp\": () => /* binding */ StatApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test statistic functionalties\r\n\r\nclass StatApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.dots = [];\r\n        let canvas = gl.canvas;\r\n        this.dotRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.DotRenderer3(gl, 4, [0, 0, 1, 1], false);\r\n        this.lineRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.LineRenderer(gl, [0, 0, 1, 0.5]);\r\n        this.meshRenderer = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.SimpleMeshRenderer(gl, [0, 0, 1, 0.25]);\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n    }\r\n    start() {\r\n        // test things\r\n        let a = _src_lib__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative([\r\n            [22., 10., 2., 3., 7.],\r\n            [14., 7., 10., 0., 8.],\r\n            [-1., 13., -1., -11., 3.],\r\n            [-3., -2., 13., -2., 4.],\r\n            [9., 8., 1., -2., 4.],\r\n            [9., 1., -7., 5., -1.],\r\n            [2., -6., 6., 5., 1.],\r\n            [4., 5., 0., -2., 2.]\r\n        ]);\r\n        let data = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Stat.svd(a);\r\n        console.log(data);\r\n        console.log(Math.sqrt(1248.), 20., Math.sqrt(384.), 0., 0.);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    draw(gl) {\r\n        // get to-screen matrix\r\n        const canvas = gl.canvas;\r\n        let matrix = this.camera.totalMatrix;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vYXBwcy9zdGF0LWFwcC50cz84M2E4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQTZCO0FBQzdCLHdCQUF3QjtBQUN4Qix5Q0FBeUM7QUFFa0g7QUFJcEosTUFBTSxPQUFRLFNBQVEseUNBQUc7SUFZNUIsWUFBWSxFQUF5QjtRQUVqQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFMZCxTQUFJLEdBQWMsRUFBRSxDQUFDO1FBT2pCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUEyQixDQUFDO1FBRTVDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxrREFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksa0RBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSx3REFBa0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0Q0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxLQUFLO1FBQ0QsY0FBYztRQUNkLElBQUksQ0FBQyxHQUFHLDREQUFzQixDQUFDO1lBQzNCLENBQUMsR0FBRyxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN0QixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdEIsQ0FBQyxDQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN0QixDQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN0QixDQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUcsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RCLENBQUUsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3RCLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxHQUFHLDhDQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBaUI7UUFFcEIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBeUI7UUFFMUIsdUJBQXVCO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUEyQixDQUFDO1FBQzlDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBSXpDLENBQUM7Q0FDSiIsImZpbGUiOiIuL2RlbW8vYXBwcy9zdGF0LWFwcC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIG9iai1sb2FkZXItYXBwLnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiB0ZXN0IHN0YXRpc3RpYyBmdW5jdGlvbmFsdGllc1xyXG5cclxuaW1wb3J0IHsgQXBwLCBEb3RSZW5kZXJlcjMsIExpbmVSZW5kZXJlciwgU2ltcGxlTWVzaFJlbmRlcmVyLCBDYW1lcmEsIFJlbmRlck1lc2gsIFZlY3RvcjMsIExpbmVBcnJheSwgRmxvYXRNYXRyaXgsIFN0YXQsIElucHV0U3RhdGUgfSBmcm9tIFwiLi4vLi4vc3JjL2xpYlwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdEFwcCBleHRlbmRzIEFwcCB7XHJcblxyXG4gICAgZG90UmVuZGVyZXI6IERvdFJlbmRlcmVyMztcclxuICAgIGxpbmVSZW5kZXJlcjogTGluZVJlbmRlcmVyO1xyXG4gICAgbWVzaFJlbmRlcmVyOiBTaW1wbGVNZXNoUmVuZGVyZXI7XHJcblxyXG4gICAgY2FtZXJhOiBDYW1lcmE7XHJcblxyXG4gICAgb2JqPzogUmVuZGVyTWVzaDtcclxuICAgIGRvdHM6IFZlY3RvcjNbXSA9IFtdO1xyXG4gICAgcmVuZGVyYWJsZT86IExpbmVBcnJheTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3VwZXIoZ2wpO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuICAgICAgICB0aGlzLmRvdFJlbmRlcmVyID0gbmV3IERvdFJlbmRlcmVyMyhnbCwgNCwgWzAsMCwxLDFdLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5saW5lUmVuZGVyZXIgPSBuZXcgTGluZVJlbmRlcmVyKGdsLCBbMCwwLDEsMC41XSk7XHJcbiAgICAgICAgdGhpcy5tZXNoUmVuZGVyZXIgPSBuZXcgU2ltcGxlTWVzaFJlbmRlcmVyKGdsLCBbMCwwLDEsMC4yNV0pO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIC8vIHRlc3QgdGhpbmdzXHJcbiAgICAgICAgbGV0IGEgPSBGbG9hdE1hdHJpeC5mcm9tTmF0aXZlKFtcclxuICAgICAgICAgICAgWzIyLiwxMC4sIDIuLCAgMy4sIDcuXSxcclxuICAgICAgICAgICAgWzE0LiwgNy4sMTAuLCAgMC4sIDguXSxcclxuICAgICAgICAgICAgWy0xLiwxMy4sLTEuLC0xMS4sIDMuXSxcclxuICAgICAgICAgICAgWy0zLiwtMi4sMTMuLCAtMi4sIDQuXSxcclxuICAgICAgICAgICAgWyA5LiwgOC4sIDEuLCAtMi4sIDQuXSxcclxuICAgICAgICAgICAgWyA5LiwgMS4sLTcuLCAgNS4sLTEuXSxcclxuICAgICAgICAgICAgWyAyLiwtNi4sIDYuLCAgNS4sIDEuXSxcclxuICAgICAgICAgICAgWyA0LiwgNS4sIDAuLCAtMi4sIDIuXVxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgICAgICBsZXQgZGF0YSA9IFN0YXQuc3ZkKGEpOyBcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhNYXRoLnNxcnQoMTI0OC4pLDIwLixNYXRoLnNxcnQoMzg0LiksMC4sMC4pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShzdGF0ZTogSW5wdXRTdGF0ZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIG1vdmUgdGhlIGNhbWVyYSB3aXRoIHRoZSBtb3VzZVxyXG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZShzdGF0ZSk7IFxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG5cclxuICAgICAgICAvLyBnZXQgdG8tc2NyZWVuIG1hdHJpeFxyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGdsLmNhbnZhcyBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgICAgICBsZXQgbWF0cml4ID0gdGhpcy5jYW1lcmEudG90YWxNYXRyaXg7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./demo/apps/stat-app.ts\n");

/***/ }),

/***/ "./demo/apps/subdivide-app.ts":
/*!************************************!*\
  !*** ./demo/apps/subdivide-app.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SubdivideApp\": () => /* binding */ SubdivideApp\n/* harmony export */ });\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/lib */ \"./src/lib.ts\");\n// name:    obj-loader-app.ts\r\n// author:  Jos Feenstra\r\n// purpose: test statistic functionalties\r\n\r\nclass SubdivideApp extends _src_lib__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl) {\r\n        super(gl);\r\n        this.radius = 0.1; // radius!: Parameter;\r\n        this.detail = 6; // detail!: Parameter;\r\n        let canvas = gl.canvas;\r\n        this.camera = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas, 8, true);\r\n        this.meshRend = new _src_lib__WEBPACK_IMPORTED_MODULE_0__.ShadedMeshRenderer(gl);\r\n    }\r\n    ui(ui) {\r\n    }\r\n    start() {\r\n        this.graph = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromCube(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Cube.new(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY(), _src_lib__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromRadius(1))).toGraph();\r\n        this.graph.print();\r\n        this.mesh = this.graph.toMesh().toDisplayMesh();\r\n        this.meshRend.set(this.gl, this.mesh);\r\n        // console.log(\"all loops: \", this.graph.allLoops());\r\n    }\r\n    update(state) {\r\n        this.camera.update(state);\r\n        if (!state.mouseRightDown && this.rotate.get() == 1) {\r\n            let alpha = 0.0002 * state.tick;\r\n            let rot = _src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(alpha)\r\n                .multiply(_src_lib__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(alpha));\r\n            this.mesh.transform(rot);\r\n            this.meshRend.set(this.gl, this.mesh, _src_lib__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        }\r\n    }\r\n    draw(gl) {\r\n        this.camera.updateMatrices(gl.canvas);\r\n        this.meshRend.render(gl, this.camera);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vYXBwcy9zdWJkaXZpZGUtYXBwLnRzP2VjMTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBNkI7QUFDN0Isd0JBQXdCO0FBQ3hCLHlDQUF5QztBQUU4SDtBQUloSyxNQUFNLFlBQWEsU0FBUSx5Q0FBRztJQWFqQyxZQUFZLEVBQXlCO1FBRWpDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQVJkLFdBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxzQkFBc0I7UUFDcEMsV0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHNCQUFzQjtRQVE5QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBMkIsQ0FBQztRQUM1QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksNENBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSx3REFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsRUFBRSxDQUFDLEVBQU07SUFFVCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsbURBQWEsQ0FBQyw4Q0FBUSxDQUFDLG1EQUFhLEVBQUUsRUFBRSx3REFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkYsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMscURBQXFEO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBaUI7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDakQsSUFBSSxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDaEMsSUFBSSxHQUFHLEdBQUcsMERBQW9CLENBQUMsS0FBSyxDQUFDO2lCQUNoQyxRQUFRLENBQUMsMERBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsMkRBQXFCLENBQUMsQ0FBQztTQUNoRTtJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBeUI7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLE1BQTJCLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSiIsImZpbGUiOiIuL2RlbW8vYXBwcy9zdWJkaXZpZGUtYXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgb2JqLWxvYWRlci1hcHAudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IHRlc3Qgc3RhdGlzdGljIGZ1bmN0aW9uYWx0aWVzXHJcblxyXG5pbXBvcnQgeyBBcHAsIENhbWVyYSwgU2hhZGVkTWVzaFJlbmRlcmVyLCBQYXJhbWV0ZXIsIEdyYXBoLCBSZW5kZXJNZXNoLCBWZWN0b3IzLCBVSSwgSW5wdXRTdGF0ZSwgTWF0cml4NCwgRHJhd1NwZWVkLCBNZXNoLCBDdWJlLCBQbGFuZSwgRG9tYWluMyB9IGZyb20gXCIuLi8uLi9zcmMvbGliXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdWJkaXZpZGVBcHAgZXh0ZW5kcyBBcHAge1xyXG5cclxuICAgIGNhbWVyYTogQ2FtZXJhO1xyXG4gICAgbWVzaFJlbmQ6IFNoYWRlZE1lc2hSZW5kZXJlcjtcclxuICAgIFxyXG4gICAgcm90YXRlITogUGFyYW1ldGVyO1xyXG4gICAgaW5uZXIhOiBQYXJhbWV0ZXI7XHJcbiAgICByYWRpdXMgPSAwLjE7IC8vIHJhZGl1cyE6IFBhcmFtZXRlcjtcclxuICAgIGRldGFpbCA9IDY7IC8vIGRldGFpbCE6IFBhcmFtZXRlcjtcclxuXHJcbiAgICBncmFwaCE6IEdyYXBoO1xyXG4gICAgbWVzaCE6IFJlbmRlck1lc2g7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN1cGVyKGdsKTtcclxuICAgICAgICBsZXQgY2FudmFzID0gZ2wuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMsIDgsIHRydWUpO1xyXG4gICAgICAgIHRoaXMubWVzaFJlbmQgPSBuZXcgU2hhZGVkTWVzaFJlbmRlcmVyKGdsKTtcclxuICAgIH1cclxuXHJcbiAgICB1aSh1aTogVUkpIHtcclxuXHJcbiAgICB9XHJcbiAgICAgICAgXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLmdyYXBoID0gTWVzaC5mcm9tQ3ViZShDdWJlLm5ldyhQbGFuZS5Xb3JsZFhZKCksIERvbWFpbjMuZnJvbVJhZGl1cygxKSkpLnRvR3JhcGgoKTtcclxuICAgICAgICB0aGlzLmdyYXBoLnByaW50KCk7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gdGhpcy5ncmFwaC50b01lc2goKS50b0Rpc3BsYXlNZXNoKCk7XHJcbiAgICAgICAgdGhpcy5tZXNoUmVuZC5zZXQodGhpcy5nbCwgdGhpcy5tZXNoKTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJhbGwgbG9vcHM6IFwiLCB0aGlzLmdyYXBoLmFsbExvb3BzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShzdGF0ZTogSW5wdXRTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZShzdGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICghc3RhdGUubW91c2VSaWdodERvd24gJiYgdGhpcy5yb3RhdGUuZ2V0KCkgPT0gMSkge1xyXG4gICAgICAgICAgICBsZXQgYWxwaGEgPSAwLjAwMDIgKiBzdGF0ZS50aWNrO1xyXG4gICAgICAgICAgICBsZXQgcm90ID0gTWF0cml4NC5uZXdYUm90YXRpb24oYWxwaGEpXHJcbiAgICAgICAgICAgICAgICAubXVsdGlwbHkoTWF0cml4NC5uZXdZUm90YXRpb24oYWxwaGEpKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNoIS50cmFuc2Zvcm0ocm90KTtcclxuICAgICAgICAgICAgdGhpcy5tZXNoUmVuZC5zZXQodGhpcy5nbCwgdGhpcy5tZXNoLCBEcmF3U3BlZWQuRHluYW1pY0RyYXcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGVNYXRyaWNlcyhnbC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMubWVzaFJlbmQucmVuZGVyKGdsLCB0aGlzLmNhbWVyYSk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./demo/apps/subdivide-app.ts\n");

/***/ }),

/***/ "./demo/index.ts":
/*!***********************!*\
  !*** ./demo/index.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_render_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _apps_dot_app3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apps/dot-app3 */ \"./demo/apps/dot-app3.ts\");\n/* harmony import */ var _apps_obj_loader_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./apps/obj-loader-app */ \"./demo/apps/obj-loader-app.ts\");\n/* harmony import */ var _src_system_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/system/core */ \"./src/system/core.ts\");\n/* harmony import */ var _apps_stat_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./apps/stat-app */ \"./demo/apps/stat-app.ts\");\n/* harmony import */ var _apps_geometry_app__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./apps/geometry-app */ \"./demo/apps/geometry-app.ts\");\n/* harmony import */ var _apps_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./apps/mesh-inspector-app */ \"./demo/apps/mesh-inspector-app.ts\");\n/* harmony import */ var _src_app_swap_app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/app/swap-app */ \"./src/app/swap-app.ts\");\n/* harmony import */ var _apps_icosahedron_app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./apps/icosahedron-app */ \"./demo/apps/icosahedron-app.ts\");\n/* harmony import */ var _apps_subdivide_app__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./apps/subdivide-app */ \"./demo/apps/subdivide-app.ts\");\n// Name:    index.ts\r\n// Author:  Jos Feenstra\r\n// Purpose: Entry point\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar core;\r\nfunction main() {\r\n    // get references of all items on the canvas\r\n    let canvas = document.getElementById(\"canvas\");\r\n    let video = document.getElementById(\"camera\");\r\n    let ui = document.getElementById(\"interface\");\r\n    let cameraOn = document.getElementById(\"camera-on\");\r\n    let cameraStop = document.getElementById(\"camera-off\");\r\n    let buttonPredict = document.getElementById(\"predict\");\r\n    // init core \r\n    let gl = _src_render_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer.initWebglContext(canvas);\r\n    core = new _src_system_core__WEBPACK_IMPORTED_MODULE_3__.Core(canvas, gl, ui);\r\n    // init swap app\r\n    let appCollection = [\r\n        _apps_subdivide_app__WEBPACK_IMPORTED_MODULE_9__.SubdivideApp,\r\n        _apps_icosahedron_app__WEBPACK_IMPORTED_MODULE_8__.IcosahedronApp,\r\n        _apps_mesh_inspector_app__WEBPACK_IMPORTED_MODULE_6__.MeshInspectorApp,\r\n        _apps_geometry_app__WEBPACK_IMPORTED_MODULE_5__.GeometryApp,\r\n        _apps_obj_loader_app__WEBPACK_IMPORTED_MODULE_2__.ObjLoaderApp,\r\n        _apps_dot_app3__WEBPACK_IMPORTED_MODULE_1__.DotApp3,\r\n        _apps_stat_app__WEBPACK_IMPORTED_MODULE_4__.StatApp,\r\n    ];\r\n    let swapApp = new _src_app_swap_app__WEBPACK_IMPORTED_MODULE_7__.SwapApp(gl, core, appCollection);\r\n    core.addApp(swapApp);\r\n    swapApp.swap(0);\r\n    // a specific app dealing with webcams & other things\r\n    // addWebcamAppWhenReady(core, canvas, video);\r\n    // infinite loop\r\n    function loop() {\r\n        if (core.STOP) {\r\n            // TODO : notify the User that we have stopped running...\r\n            return;\r\n        }\r\n        core.update();\r\n        core.draw();\r\n        requestAnimationFrame(loop);\r\n    }\r\n    requestAnimationFrame(loop);\r\n}\r\nwindow.addEventListener(\"load\", function () {\r\n    main();\r\n}, false);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL2RlbW8vaW5kZXgudHM/ZTQ0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBSzJCO0FBQ1I7QUFDVztBQUNYO0FBQ0E7QUFDUTtBQUVXO0FBQ2Y7QUFDVTtBQUNKO0FBRXBELElBQUksSUFBVSxDQUFDO0FBRWYsU0FBUyxJQUFJO0lBRVQsNENBQTRDO0lBQzVDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0lBQ3JFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixDQUFDO0lBQ25FLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFvQixDQUFDO0lBQ2pFLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUF1QixDQUFDO0lBQzFFLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUF1QixDQUFDO0lBQzdFLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUF1QixDQUFDO0lBRTdFLGFBQWE7SUFDYixJQUFJLEVBQUUsR0FBRywyRUFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxJQUFJLEdBQUcsSUFBSSxrREFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFaEMsZ0JBQWdCO0lBQ2hCLElBQUksYUFBYSxHQUFHO1FBQ2hCLDZEQUFZO1FBQ1osaUVBQWM7UUFDZCxzRUFBZ0I7UUFDaEIsMkRBQVc7UUFDWCw4REFBWTtRQUNaLG1EQUFPO1FBQ1AsbURBQU87S0FDVjtJQUVELElBQUksT0FBTyxHQUFHLElBQUksc0RBQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoQixxREFBcUQ7SUFDckQsOENBQThDO0lBRTlDLGdCQUFnQjtJQUNoQixTQUFTLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCx5REFBeUQ7WUFDekQsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1oscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNELHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0lBQzVCLElBQUksRUFBRSxDQUFDO0FBQ1gsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDIiwiZmlsZSI6Ii4vZGVtby9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5hbWU6ICAgIGluZGV4LnRzXHJcbi8vIEF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBQdXJwb3NlOiBFbnRyeSBwb2ludFxyXG5cclxuLy8gaW1wb3J0IHthZGRXZWJjYW1BcHBXaGVuUmVhZHksIFdlYmNhbUFwcH0gZnJvbSBcIi4vYXBwcy93ZWJjYW0tYXBwXCI7XHJcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi4vc3JjL3N5c3RlbS9pbnB1dC1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vc3JjL2FwcC9hcHBcIjtcclxuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tIFwiLi4vc3JjL3JlbmRlci9yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBEb3RBcHAzIH0gZnJvbSBcIi4vYXBwcy9kb3QtYXBwM1wiO1xyXG5pbXBvcnQgeyBPYmpMb2FkZXJBcHAgfSBmcm9tIFwiLi9hcHBzL29iai1sb2FkZXItYXBwXCI7XHJcbmltcG9ydCB7IENvcmUgfSBmcm9tIFwiLi4vc3JjL3N5c3RlbS9jb3JlXCI7XHJcbmltcG9ydCB7IFN0YXRBcHAgfSBmcm9tIFwiLi9hcHBzL3N0YXQtYXBwXCI7XHJcbmltcG9ydCB7IEdlb21ldHJ5QXBwIH0gZnJvbSBcIi4vYXBwcy9nZW9tZXRyeS1hcHBcIjtcclxuaW1wb3J0IHsgTWFyY2hpbmdDdWJlQXBwIH0gZnJvbSBcIi4vYXBwcy9tYXJjaGluZy1jdWJlLWFwcFwiO1xyXG5pbXBvcnQgeyBNZXNoSW5zcGVjdG9yQXBwIH0gZnJvbSBcIi4vYXBwcy9tZXNoLWluc3BlY3Rvci1hcHBcIjtcclxuaW1wb3J0IHsgU3dhcEFwcCB9IGZyb20gXCIuLi9zcmMvYXBwL3N3YXAtYXBwXCI7XHJcbmltcG9ydCB7IEljb3NhaGVkcm9uQXBwIH0gZnJvbSBcIi4vYXBwcy9pY29zYWhlZHJvbi1hcHBcIjtcclxuaW1wb3J0IHsgU3ViZGl2aWRlQXBwIH0gZnJvbSBcIi4vYXBwcy9zdWJkaXZpZGUtYXBwXCI7XHJcblxyXG52YXIgY29yZTogQ29yZTtcclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcblxyXG4gICAgLy8gZ2V0IHJlZmVyZW5jZXMgb2YgYWxsIGl0ZW1zIG9uIHRoZSBjYW52YXNcclxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSEgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBsZXQgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKSEgYXMgSFRNTFZpZGVvRWxlbWVudDtcclxuICAgIGxldCB1aSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW50ZXJmYWNlXCIpICBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIGxldCBjYW1lcmFPbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhLW9uXCIpISBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIGxldCBjYW1lcmFTdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmEtb2ZmXCIpISBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIGxldCBidXR0b25QcmVkaWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmVkaWN0XCIpISBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIFxyXG4gICAgLy8gaW5pdCBjb3JlIFxyXG4gICAgbGV0IGdsID0gUmVuZGVyZXIuaW5pdFdlYmdsQ29udGV4dChjYW52YXMpO1xyXG4gICAgY29yZSA9IG5ldyBDb3JlKGNhbnZhcywgZ2wsIHVpKTtcclxuXHJcbiAgICAvLyBpbml0IHN3YXAgYXBwXHJcbiAgICBsZXQgYXBwQ29sbGVjdGlvbiA9IFtcclxuICAgICAgICBTdWJkaXZpZGVBcHAsXHJcbiAgICAgICAgSWNvc2FoZWRyb25BcHAsXHJcbiAgICAgICAgTWVzaEluc3BlY3RvckFwcCxcclxuICAgICAgICBHZW9tZXRyeUFwcCxcclxuICAgICAgICBPYmpMb2FkZXJBcHAsXHJcbiAgICAgICAgRG90QXBwMyxcclxuICAgICAgICBTdGF0QXBwLFxyXG4gICAgXVxyXG5cclxuICAgIGxldCBzd2FwQXBwID0gbmV3IFN3YXBBcHAoZ2wsIGNvcmUsIGFwcENvbGxlY3Rpb24pO1xyXG4gICAgY29yZS5hZGRBcHAoc3dhcEFwcCk7XHJcbiAgICBzd2FwQXBwLnN3YXAoMCk7XHJcblxyXG4gICAgLy8gYSBzcGVjaWZpYyBhcHAgZGVhbGluZyB3aXRoIHdlYmNhbXMgJiBvdGhlciB0aGluZ3NcclxuICAgIC8vIGFkZFdlYmNhbUFwcFdoZW5SZWFkeShjb3JlLCBjYW52YXMsIHZpZGVvKTtcclxuXHJcbiAgICAvLyBpbmZpbml0ZSBsb29wXHJcbiAgICBmdW5jdGlvbiBsb29wKCkge1xyXG4gICAgICAgIGlmIChjb3JlLlNUT1ApIHtcclxuICAgICAgICAgICAgLy8gVE9ETyA6IG5vdGlmeSB0aGUgVXNlciB0aGF0IHdlIGhhdmUgc3RvcHBlZCBydW5uaW5nLi4uXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29yZS51cGRhdGUoKTtcclxuICAgICAgICBjb3JlLmRyYXcoKTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbn1cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgbWFpbigpO1xyXG59LCBmYWxzZSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./demo/index.ts\n");

/***/ }),

/***/ "./src/algorithms/marching-cubes.ts":
/*!******************************************!*\
  !*** ./src/algorithms/marching-cubes.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/mesh */ \"./src/mesh/mesh.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    marching-cubes.ts\r\n// author:  Jos Feenstra\r\n// purpose: a marching cubes implementation useful for converting scalar discrete fields to contours\r\n\r\n\r\n// based upon: \r\n// http://paulbourke.net/geometry/polygonise/\r\n// Polygonising a scalar field\r\n// Also known as: \"3D Contouring\", \"Marching Cubes\", \"Surface Reconstruction\"\r\n// Written by Paul Bourke\r\n// May 1994 \r\n// \r\n//\r\n// The cube model used: \r\n//\r\n//     (4) ------ 4 ------ (5)\r\n//     /|                  /|\r\n//    7 |                 5 |\r\n//   /  |                /  |\r\n// (7) ------ 6 ------ (6)  |\r\n//  |   8               |   9\r\n//  |   |               |   |\r\n//  |   |               |   |\r\n//  |  (0) ------ 0 ------ (1)\r\n//  11 /               10  /\r\n//  | 3                 | 1\r\n//  |/                  |/\r\n// (3) ------ 2 ------ (2)\r\n/*\r\n   Given a grid cell and an isolevel, calculate the triangular\r\n   facets required to represent the isosurface through the cell.\r\n   Return the number of triangular facets, the array \"triangles\"\r\n   will be loaded up with the vertices at most 5 triangular facets.\r\n    0 will be returned if the grid cell is either totally above\r\n   of totally below the isolevel.\r\n*/\r\n// typedef struct {\r\n//     XYZ p[3];\r\n//  } TRIANGLE;\r\n//  typedef struct {\r\n//     XYZ p[8];\r\n//     double val[8];\r\n//  } GRIDCELL;\r\nclass Gridcell {\r\n    constructor() {\r\n        this.points = []; // 8\r\n        this.corner = []; // 8\r\n    }\r\n}\r\nclass Triangle {\r\n    constructor() {\r\n        this.xyz = []; // 3\r\n    }\r\n}\r\nconst edgeTable = [\r\n    0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,\r\n    0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\r\n    0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,\r\n    0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\r\n    0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,\r\n    0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\r\n    0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,\r\n    0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\r\n    0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,\r\n    0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\r\n    0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,\r\n    0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\r\n    0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,\r\n    0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\r\n    0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,\r\n    0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\r\n    0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,\r\n    0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\r\n    0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,\r\n    0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\r\n    0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,\r\n    0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\r\n    0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,\r\n    0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,\r\n    0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,\r\n    0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,\r\n    0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,\r\n    0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,\r\n    0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,\r\n    0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,\r\n    0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,\r\n    0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0\r\n];\r\nconst triTable = [\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],\r\n    [3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],\r\n    [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],\r\n    [9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],\r\n    [10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],\r\n    [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],\r\n    [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],\r\n    [2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],\r\n    [11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],\r\n    [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],\r\n    [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],\r\n    [11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],\r\n    [6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],\r\n    [6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],\r\n    [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],\r\n    [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],\r\n    [3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],\r\n    [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],\r\n    [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],\r\n    [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],\r\n    [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],\r\n    [10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],\r\n    [0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],\r\n    [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],\r\n    [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],\r\n    [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],\r\n    [3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],\r\n    [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],\r\n    [10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],\r\n    [7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],\r\n    [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],\r\n    [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],\r\n    [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],\r\n    [0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],\r\n    [7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],\r\n    [7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],\r\n    [10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],\r\n    [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],\r\n    [7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],\r\n    [6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],\r\n    [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],\r\n    [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],\r\n    [8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],\r\n    [1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],\r\n    [10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],\r\n    [10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],\r\n    [9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],\r\n    [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],\r\n    [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],\r\n    [7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],\r\n    [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],\r\n    [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],\r\n    [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],\r\n    [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],\r\n    [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],\r\n    [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],\r\n    [6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],\r\n    [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],\r\n    [6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],\r\n    [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],\r\n    [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],\r\n    [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],\r\n    [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],\r\n    [9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],\r\n    [1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],\r\n    [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],\r\n    [0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],\r\n    [11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],\r\n    [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],\r\n    [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],\r\n    [2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],\r\n    [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],\r\n    [1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],\r\n    [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],\r\n    [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],\r\n    [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],\r\n    [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],\r\n    [9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],\r\n    [5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],\r\n    [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],\r\n    [9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],\r\n    [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],\r\n    [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],\r\n    [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],\r\n    [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],\r\n    [11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],\r\n    [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],\r\n    [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],\r\n    [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],\r\n    [1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],\r\n    [4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],\r\n    [0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],\r\n    [1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n];\r\nfunction polygonise(corners, values, level) {\r\n    let triangles = null;\r\n    // get the marching cube index based on corners\r\n    let cubeindex = 0;\r\n    if (values[0] < level)\r\n        cubeindex |= 1;\r\n    if (values[1] < level)\r\n        cubeindex |= 2;\r\n    if (values[2] < level)\r\n        cubeindex |= 4;\r\n    if (values[3] < level)\r\n        cubeindex |= 8;\r\n    if (values[4] < level)\r\n        cubeindex |= 16;\r\n    if (values[5] < level)\r\n        cubeindex |= 32;\r\n    if (values[6] < level)\r\n        cubeindex |= 64;\r\n    if (values[7] < level)\r\n        cubeindex |= 128;\r\n    /* Cube is entirely in/out of the surface */\r\n    let vertlist = []; // 12\r\n    if (edgeTable[cubeindex] == 0)\r\n        return _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromEmpty();\r\n    /* Find the vertices where the surface intersects the cube */\r\n    if (edgeTable[cubeindex] & 1)\r\n        vertlist[0] = lerp(level, corners[0], corners[1], values[0], values[1]);\r\n    if (edgeTable[cubeindex] & 2)\r\n        vertlist[1] = lerp(level, corners[1], corners[2], values[1], values[2]);\r\n    if (edgeTable[cubeindex] & 4)\r\n        vertlist[2] = lerp(level, corners[2], corners[3], values[2], values[3]);\r\n    if (edgeTable[cubeindex] & 8)\r\n        vertlist[3] = lerp(level, corners[3], corners[0], values[3], values[0]);\r\n    if (edgeTable[cubeindex] & 16)\r\n        vertlist[4] = lerp(level, corners[4], corners[5], values[4], values[5]);\r\n    if (edgeTable[cubeindex] & 32)\r\n        vertlist[5] = lerp(level, corners[5], corners[6], values[5], values[6]);\r\n    if (edgeTable[cubeindex] & 64)\r\n        vertlist[6] = lerp(level, corners[6], corners[7], values[6], values[7]);\r\n    if (edgeTable[cubeindex] & 128)\r\n        vertlist[7] = lerp(level, corners[7], corners[4], values[7], values[4]);\r\n    if (edgeTable[cubeindex] & 256)\r\n        vertlist[8] = lerp(level, corners[0], corners[4], values[0], values[4]);\r\n    if (edgeTable[cubeindex] & 512)\r\n        vertlist[9] = lerp(level, corners[1], corners[5], values[1], values[5]);\r\n    if (edgeTable[cubeindex] & 1024)\r\n        vertlist[10] = lerp(level, corners[2], corners[6], values[2], values[6]);\r\n    if (edgeTable[cubeindex] & 2048)\r\n        vertlist[11] = lerp(level, corners[3], corners[7], values[3], values[7]);\r\n    // create triangles\r\n    // ntriang = 0;\r\n    // for (let i = 0; triTable[cubeindex][i]!=-1; i+=3) {\r\n    //     triangles[ntriang].p[0] = vertlist[triTable[cubeindex][i  ]];\r\n    //     triangles[ntriang].p[1] = vertlist[triTable[cubeindex][i+1]];\r\n    //     triangles[ntriang].p[2] = vertlist[triTable[cubeindex][i+2]];\r\n    //     ntriang++;\r\n    // }\r\n    // return(ntriang);\r\n    return _mesh_mesh__WEBPACK_IMPORTED_MODULE_0__.Mesh.fromEmpty();\r\n}\r\n/*\r\n   Linearly interpolate the position where an isosurface cuts\r\n   an edge between two vertices, each with their own scalar value\r\n*/\r\nfunction lerp(level, p1, p2, valp1, valp2) {\r\n    return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.fromLerpWeights(p1, p2, valp1, valp2, level);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/algorithms/marching-cubes.ts\n");

/***/ }),

/***/ "./src/algorithms/perlin-noise.ts":
/*!****************************************!*\
  !*** ./src/algorithms/perlin-noise.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Perlin\": () => /* binding */ Perlin\n/* harmony export */ });\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n// name:        perlin-noise.ts\r\n// author:      Jos Feenstra\r\n// purpose:     Generate Perin Noise\r\n\r\n// a javascript implementation of:\r\n// Ref : https://adrianb.io/2014/08/09/perlinnoise.html\r\nclass Perlin {\r\n    constructor() {\r\n        this.permutation = [151, 160, 137, 91, 90, 15,\r\n            131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n            190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n            88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n            77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n            102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n            135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n            5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n            129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n            251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n            49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n            138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n        ];\r\n        this.repeat = 0;\r\n        this.repeat = 0;\r\n        this.p = new Array(512);\r\n        for (let x = 0; x < 512; x++) {\r\n            this.p[x] = this.permutation[x % 256];\r\n        }\r\n    }\r\n    grad(hash, x, y, z) {\r\n        switch (hash & 0xF) {\r\n            case 0x0: return x + y;\r\n            case 0x1: return -x + y;\r\n            case 0x2: return x - y;\r\n            case 0x3: return -x - y;\r\n            case 0x4: return x + z;\r\n            case 0x5: return -x + z;\r\n            case 0x6: return x - z;\r\n            case 0x7: return -x - z;\r\n            case 0x8: return y + z;\r\n            case 0x9: return -y + z;\r\n            case 0xA: return y - z;\r\n            case 0xB: return -y - z;\r\n            case 0xC: return y + x;\r\n            case 0xD: return -y + z;\r\n            case 0xE: return y - x;\r\n            case 0xF: return -y - z;\r\n            default: return 0; // never happens\r\n        }\r\n    }\r\n    inc(num) {\r\n        num++;\r\n        if (this.repeat > 0)\r\n            num %= this.repeat;\r\n        return num;\r\n    }\r\n    noise(x, y, z) {\r\n        // If we have any repeat on, change the coordinates to their \"local\" repetitions\r\n        if (this.repeat > 0) {\r\n            x = x % this.repeat;\r\n            y = y % this.repeat;\r\n            z = z % this.repeat;\r\n        }\r\n        let xi = Math.floor(x) & 255; // Calculate the \"unit cube\" that the point asked will be located in\r\n        let yi = Math.floor(y) & 255; // The left bound is ( |_x_|,|_y_|,|_z_| ) and the right bound is that\r\n        let zi = Math.floor(z) & 255; // plus 1.  Next we calculate the location (from 0.0 to 1.0) in that cube.\r\n        let xf = x - Math.floor(x);\r\n        let yf = y - Math.floor(y);\r\n        let zf = z - Math.floor(z);\r\n        let p = this.p;\r\n        let aaa = p[p[p[xi] + yi] + zi];\r\n        let aba = p[p[p[xi] + this.inc(yi)] + zi];\r\n        let aab = p[p[p[xi] + yi] + this.inc(zi)];\r\n        let abb = p[p[p[xi] + this.inc(yi)] + this.inc(zi)];\r\n        let baa = p[p[p[this.inc(xi)] + yi] + zi];\r\n        let bba = p[p[p[this.inc(xi)] + this.inc(yi)] + zi];\r\n        let bab = p[p[p[this.inc(xi)] + yi] + this.inc(zi)];\r\n        let bbb = p[p[p[this.inc(xi)] + this.inc(yi)] + this.inc(zi)];\r\n        let u = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(xf);\r\n        let v = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(yf);\r\n        let w = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.fade(zf);\r\n        let x1, x2, y1, y2;\r\n        x1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aaa, xf, yf, zf), // The gradient function calculates the dot product between a pseudorandom\r\n        this.grad(baa, xf - 1, yf, zf), // gradient vector and the vector from the input coordinate to the 8\r\n        u); // surrounding points in its unit cube.\r\n        x2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aba, xf, yf - 1, zf), // This is all then lerped together as a sort of weighted average based on the faded (u,v,w)\r\n        this.grad(bba, xf - 1, yf - 1, zf), // values we made earlier.\r\n        u);\r\n        y1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(x1, x2, v);\r\n        x1 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(aab, xf, yf, zf - 1), this.grad(bab, xf - 1, yf, zf - 1), u);\r\n        x2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(this.grad(abb, xf, yf - 1, zf - 1), this.grad(bbb, xf - 1, yf - 1, zf - 1), u);\r\n        y2 = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(x1, x2, v);\r\n        return (_math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.lerp(y1, y2, w) + 1) / 2;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/algorithms/perlin-noise.ts\n");

/***/ }),

/***/ "./src/app/app.ts":
/*!************************!*\
  !*** ./src/app/app.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"App\": () => /* binding */ App\n/* harmony export */ });\nclass App {\r\n    constructor(gl) {\r\n        // unique constructor    \r\n        this.gl = gl;\r\n        this.name = this.constructor.name;\r\n    }\r\n    ui(ui) {\r\n        // setup for UI\r\n    }\r\n    start() {\r\n        // additional setup of state\r\n    }\r\n    update(state) {\r\n        // updating state\r\n    }\r\n    draw(gl) {\r\n        // drawing state\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9hcHAvYXBwLnRzPzVkYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdPLE1BQU0sR0FBRztJQUtaLFlBQVksRUFBeUI7UUFDakMseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBRUQsRUFBRSxDQUFDLEVBQU07UUFDTCxlQUFlO0lBQ25CLENBQUM7SUFFRCxLQUFLO1FBQ0QsNEJBQTRCO0lBQ2hDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBaUI7UUFDcEIsaUJBQWlCO0lBQ3JCLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBeUI7UUFDMUIsZ0JBQWdCO0lBQ3BCLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9hcHAvYXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIlxyXG5pbXBvcnQgeyBVSSB9IGZyb20gXCIuLi9zeXN0ZW0vdWlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHAge1xyXG5cclxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIC8vIHVuaXF1ZSBjb25zdHJ1Y3RvciAgICBcclxuICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHVpKHVpOiBVSSkge1xyXG4gICAgICAgIC8vIHNldHVwIGZvciBVSVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIC8vIGFkZGl0aW9uYWwgc2V0dXAgb2Ygc3RhdGVcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICAvLyB1cGRhdGluZyBzdGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIC8vIGRyYXdpbmcgc3RhdGVcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/app/app.ts\n");

/***/ }),

/***/ "./src/app/swap-app.ts":
/*!*****************************!*\
  !*** ./src/app/swap-app.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SwapApp\": () => /* binding */ SwapApp\n/* harmony export */ });\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app */ \"./src/app/app.ts\");\n// name:    swap-app\r\n// author:  Jos Feenstra\r\n// purpose: swap between different apps.\r\n//          - factory for initiazing these apps\r\n//          - making sure core deletes old apps\r\n\r\nclass SwapApp extends _app__WEBPACK_IMPORTED_MODULE_0__.App {\r\n    constructor(gl, core, possibleApps) {\r\n        super(gl);\r\n        this.currentAppIndex = -1;\r\n        this.core = core;\r\n        this.possibleApps = possibleApps;\r\n    }\r\n    ui(ui) {\r\n        let names = [];\r\n        let ids = [];\r\n        let count = this.possibleApps.length;\r\n        for (let i = 0; i < count; i++) {\r\n            names.push(this.possibleApps[i].name.replace(\"App\", \"\"));\r\n            ids.push(i);\r\n        }\r\n        ui.addEnum(names, ids, (i) => {\r\n            this.swap(i);\r\n        });\r\n    }\r\n    swap(index) {\r\n        // todo do some range checking\r\n        let AppType = this.possibleApps[index];\r\n        if (this.currentAppIndex > -1) {\r\n            let PreviousType = this.possibleApps[this.currentAppIndex];\r\n            console.log(\"removing\", PreviousType.name);\r\n            this.core.removeApp(PreviousType.name);\r\n        }\r\n        console.log(\"constructing\", AppType.name);\r\n        this.currentAppIndex = index;\r\n        let app = new AppType(this.gl);\r\n        this.core.addApp(app);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9hcHAvc3dhcC1hcHAudHM/Y2JiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsd0NBQXdDO0FBQ3hDLCtDQUErQztBQUMvQywrQ0FBK0M7QUFJbkI7QUFFckIsTUFBTSxPQUFRLFNBQVEscUNBQUc7SUFNNUIsWUFBWSxFQUF5QixFQUFFLElBQVUsRUFBRSxZQUFtQjtRQUVsRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFKZCxvQkFBZSxHQUFXLENBQUMsQ0FBQyxDQUFDO1FBS3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxFQUFFLENBQUMsRUFBTTtRQUVMLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUN6QixJQUFJLEdBQUcsR0FBYSxFQUFFLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6RCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFhO1FBQ2QsOEJBQThCO1FBRTlCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQzNCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvYXBwL3N3YXAtYXBwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbmFtZTogICAgc3dhcC1hcHBcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IHN3YXAgYmV0d2VlbiBkaWZmZXJlbnQgYXBwcy5cclxuLy8gICAgICAgICAgLSBmYWN0b3J5IGZvciBpbml0aWF6aW5nIHRoZXNlIGFwcHNcclxuLy8gICAgICAgICAgLSBtYWtpbmcgc3VyZSBjb3JlIGRlbGV0ZXMgb2xkIGFwcHNcclxuXHJcbmltcG9ydCB7Q29yZX0gZnJvbSBcIi4uL3N5c3RlbS9jb3JlXCI7XHJcbmltcG9ydCB7VUl9IGZyb20gXCIuLi9zeXN0ZW0vdWlcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3dhcEFwcCBleHRlbmRzIEFwcCB7XHJcblxyXG4gICAgcG9zc2libGVBcHBzOiBhbnlbXTtcclxuICAgIGNvcmU6IENvcmU7XHJcbiAgICBjdXJyZW50QXBwSW5kZXg6IG51bWJlciA9IC0xO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGNvcmU6IENvcmUsIHBvc3NpYmxlQXBwczogYW55W10pIHtcclxuXHJcbiAgICAgICAgc3VwZXIoZ2wpO1xyXG4gICAgICAgIHRoaXMuY29yZSA9IGNvcmU7XHJcbiAgICAgICAgdGhpcy5wb3NzaWJsZUFwcHMgPSBwb3NzaWJsZUFwcHM7XHJcbiAgICB9XHJcblxyXG4gICAgdWkodWk6IFVJKSB7XHJcblxyXG4gICAgICAgIGxldCBuYW1lczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBsZXQgaWRzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMucG9zc2libGVBcHBzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5hbWVzLnB1c2godGhpcy5wb3NzaWJsZUFwcHNbaV0ubmFtZS5yZXBsYWNlKFwiQXBwXCIsIFwiXCIpKTtcclxuICAgICAgICAgICAgaWRzLnB1c2goaSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1aS5hZGRFbnVtKG5hbWVzLCBpZHMsIChpKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3dhcChpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzd2FwKGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICAvLyB0b2RvIGRvIHNvbWUgcmFuZ2UgY2hlY2tpbmdcclxuICAgIFxyXG4gICAgICAgIGxldCBBcHBUeXBlID0gdGhpcy5wb3NzaWJsZUFwcHNbaW5kZXhdO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRBcHBJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIGxldCBQcmV2aW91c1R5cGUgPSB0aGlzLnBvc3NpYmxlQXBwc1t0aGlzLmN1cnJlbnRBcHBJbmRleF07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZpbmdcIiwgUHJldmlvdXNUeXBlLm5hbWUpXHJcbiAgICAgICAgICAgIHRoaXMuY29yZS5yZW1vdmVBcHAoUHJldmlvdXNUeXBlLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbnN0cnVjdGluZ1wiLCBBcHBUeXBlLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEFwcEluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgIGxldCBhcHAgPSBuZXcgQXBwVHlwZSh0aGlzLmdsKTtcclxuICAgICAgICB0aGlzLmNvcmUuYWRkQXBwKGFwcCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/app/swap-app.ts\n");

/***/ }),

/***/ "./src/data/float-matrix.ts":
/*!**********************************!*\
  !*** ./src/data/float-matrix.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FloatMatrix\": () => /* binding */ FloatMatrix\n/* harmony export */ });\n// generic all-pupose matrix of floats\r\nclass FloatMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Float32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    clone() {\r\n        let clone = new FloatMatrix(this._height, this._width);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for FloatArray\"\r\n        let data = new Float32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    takeRows(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new FloatMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    // generalized multiplication\r\n    multiply(b) {\r\n        let a = this;\r\n        if (b._width !== a._height) {\r\n            throw new Error('Columns in A should be the same as the number of rows in B');\r\n        }\r\n        var product = new FloatMatrix(a._height, b._width);\r\n        for (var i = 0; i < product._height; i++) {\r\n            for (var j = 0; j < b._width; j++) {\r\n                for (var k = 0; k < a._width; k++) {\r\n                    product.set(i, j, product.get(i, j) + a.get(i, k) * b.get(k, j));\r\n                }\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let width = native[0].length;\r\n        let matrix = new FloatMatrix(height, width);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    toNative() {\r\n        let native = [];\r\n        for (var i = 0; i < this._height; i++) {\r\n            native[i] = [];\r\n            for (var j = 0; j < this._width; j++) {\r\n                native[i][j] = this.get(i, j);\r\n            }\r\n        }\r\n        return native;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/float-matrix.ts\n");

/***/ }),

/***/ "./src/data/hash-table.ts":
/*!********************************!*\
  !*** ./src/data/hash-table.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HashTable\": () => /* binding */ HashTable\n/* harmony export */ });\n// note: this wont always work, but it does in most cases\r\n// todo: implement proper hashtable\r\nclass HashTable {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    stringify(key) {\r\n        return key.toString();\r\n    }\r\n    set(key, value) {\r\n        return this.data.set(this.stringify(key), value);\r\n    }\r\n    has(key) {\r\n        return this.data.has(this.stringify(key));\r\n    }\r\n    get(key) {\r\n        return this.data.get(this.stringify(key));\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9kYXRhL2hhc2gtdGFibGUudHM/ZDdhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EseURBQXlEO0FBQ3pELG1DQUFtQztBQUM1QixNQUFNLFNBQVM7SUFJbEI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFhLENBQUM7SUFDckMsQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFRO1FBQ3RCLE9BQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUSxFQUFFLEtBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FFSiIsImZpbGUiOiIuL3NyYy9kYXRhL2hhc2gtdGFibGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy8gbm90ZTogdGhpcyB3b250IGFsd2F5cyB3b3JrLCBidXQgaXQgZG9lcyBpbiBtb3N0IGNhc2VzXHJcbi8vIHRvZG86IGltcGxlbWVudCBwcm9wZXIgaGFzaHRhYmxlXHJcbmV4cG9ydCBjbGFzcyBIYXNoVGFibGU8Vj4ge1xyXG5cclxuICAgIGRhdGE6IE1hcDxzdHJpbmcsIFY+XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IE1hcDxzdHJpbmcsIFY+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdHJpbmdpZnkoa2V5OiBhbnkpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KGtleTogYW55LCB2YWx1ZTogVikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc2V0KHRoaXMuc3RyaW5naWZ5KGtleSksIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXMoa2V5OiBhbnkpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oYXModGhpcy5zdHJpbmdpZnkoa2V5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KGtleTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5nZXQodGhpcy5zdHJpbmdpZnkoa2V5KSk7XHJcbiAgICB9XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/data/hash-table.ts\n");

/***/ }),

/***/ "./src/data/int-cube.ts":
/*!******************************!*\
  !*** ./src/data/int-cube.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntCube\": () => /* binding */ IntCube\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n// a Cube of voxels\r\nclass IntCube {\r\n    constructor(height, width, depth, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this._depth = depth;\r\n        let size = this._width * this._height * this._depth;\r\n        this.data = new Int32Array(size);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else {\r\n            this.setData(data);\r\n        }\r\n    }\r\n    size() {\r\n        return this._width * this._height * this._depth;\r\n    }\r\n    // shallow copy \r\n    clone() {\r\n        let clone = new IntCube(this._height, this._width, this._depth);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != this.size())\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    fill(value) {\r\n        let size = this.size();\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    inRange(i, j, k) {\r\n        return (!(i < 0 || j < 0 || k < 0 ||\r\n            i > this._width - 1 || j > this._height - 1 || k > this._depth - 1));\r\n    }\r\n    getIndex(i, j, k) {\r\n        return i * (this._height * this._depth) + j * this._depth + k;\r\n    }\r\n    getCoords(index) {\r\n        // javascript, dont you dare turn  'int / int' into a float...\r\n        let i = Math.floor(index / (this._height * this._depth)) % this._width;\r\n        let j = Math.floor(index / this._depth) % this._height;\r\n        let k = index % this._depth;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(i, j, k);\r\n    }\r\n    get(i, j, k) {\r\n        return this.data[this.getIndex(i, j, k)];\r\n    }\r\n    tryGet(i, j, k) {\r\n        if (this.inRange(i, j, k)) {\r\n            return this.data[this.getIndex(i, j, k)];\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    set(i, j, k, value) {\r\n        this.data[this.getIndex(i, j, k)] = value;\r\n    }\r\n    trySet(i, j, k, value) {\r\n        if (this.inRange(i, j, k)) {\r\n            this.data[this.getIndex(i, j, k)] = value;\r\n        }\r\n    }\r\n    iter(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    map(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-cube.ts\n");

/***/ }),

/***/ "./src/data/int-matrix.ts":
/*!********************************!*\
  !*** ./src/data/int-matrix.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IntMatrix\": () => /* binding */ IntMatrix\n/* harmony export */ });\n// generic all-pupose matrix of ints\r\nclass IntMatrix {\r\n    constructor(height, width, data = []) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this.data = new Int32Array(this._width * this._height);\r\n        if (data == [] || data.length == 0)\r\n            this.fill(0);\r\n        else\r\n            this.setData(data);\r\n    }\r\n    static fromList(list, width) {\r\n        let height = list.length / width;\r\n        let array = new IntMatrix(height, width);\r\n        for (let i = 0; i < list.length; i++) {\r\n            array.data[i] = list[i];\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new IntMatrix(this._height, this._width);\r\n        clone.data = this.data;\r\n        return clone;\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this._height * this._width))\r\n            throw \"data.length does not match width * height \" + data.length.toString();\r\n        this.data.set(data);\r\n    }\r\n    count() {\r\n        // number of entries / rows.\r\n        // when derrived classes ask for 'how many of x?' they usually mean this.\r\n        return this._height;\r\n    }\r\n    getDimensions() {\r\n        return [this._height, this._width];\r\n    }\r\n    inRange(i, j) {\r\n        return !(i < 0 || i > this._height - 1 || j < 0 || j > this._width - 1);\r\n    }\r\n    fill(value) {\r\n        let size = this._height * this._width;\r\n        for (let i = 0; i < size; i++) {\r\n            this.data[i] = value;\r\n        }\r\n    }\r\n    fillWith(data, valuesPerEntry = this._width) {\r\n        // values per entry can be used to setData which is not of the same shape.\r\n        let vpe = valuesPerEntry;\r\n        if (vpe > this._width)\r\n            throw \"values per entry is larger than this._width. This will spill over.\";\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < vpe; j++) {\r\n                this.set(i, j, data[i * vpe + j]);\r\n            }\r\n        }\r\n    }\r\n    get(i, j) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return 0;\r\n        }\r\n        return this.data[i * this._width + j];\r\n    }\r\n    getRow(i) {\r\n        // if (i < 0 || i > this.height) throw \"column is out of bounds for Array\"\r\n        let data = new Int32Array(this._width);\r\n        for (let j = 0; j < this._width; j++) {\r\n            data[j] = this.get(i, j);\r\n        }\r\n        return data;\r\n    }\r\n    getColumn(j) {\r\n        // if (j < 0 || j > this.width) throw \"column is out of bounds for Array\"\r\n        let data = new Int32Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            let index = i * this._width + j;\r\n            data[i] = this.data[index];\r\n        }\r\n        return data;\r\n    }\r\n    set(i, j, value) {\r\n        if (!this.inRange(i, j)) {\r\n            console.warn(\"out of range!\");\r\n            return;\r\n        }\r\n        this.data[i * this._width + j] = value;\r\n    }\r\n    setRow(rowIndex, row) {\r\n        // if (this.width != row.length) throw \"dimention of floatarray is not \" + row.length;\r\n        for (let j = 0; j < this._width; j++) {\r\n            this.set(rowIndex, j, row[j]);\r\n        }\r\n    }\r\n    takeRows(indices) {\r\n        // create a new array from a couple of rows\r\n        console.log(this._height, this._width);\r\n        const count = indices.length;\r\n        let array = new IntMatrix(count, this._width);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setRow(i, this.getRow(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    toUInt16Array() {\r\n        return new Uint16Array(this.data);\r\n    }\r\n    forEachValue(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = callbackfn(this.data[i], i);\r\n        }\r\n        return this;\r\n    }\r\n    forEachRow(callbackfn) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let row = this.getRow(i);\r\n            callbackfn(row, i);\r\n            this.setRow(i, row);\r\n        }\r\n        return this;\r\n    }\r\n    trueForAll(callbackfn) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (!callbackfn(this.data[i], i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/int-matrix.ts\n");

/***/ }),

/***/ "./src/data/linked-list.ts":
/*!*********************************!*\
  !*** ./src/data/linked-list.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinkedList\": () => /* binding */ LinkedList\n/* harmony export */ });\n//\r\n// note: taken from \r\n// https://medium.com/everything-javascript/implementing-a-hash-table-in-javascript-29aca1edfe2b\r\n// NOTE: Not used anymore, but i still find it interesting, so leave it here \r\nclass LinkedList {\r\n    constructor() {\r\n        this.head = null;\r\n    }\r\n    empty() {\r\n        if (this.head)\r\n            return false;\r\n        return true;\r\n    }\r\n    last() {\r\n        var cursor = this.head;\r\n        while (cursor.getNext()) {\r\n            cursor = cursor.getNext();\r\n        }\r\n        return cursor;\r\n    }\r\n    find(key) {\r\n        var cursor = this.head;\r\n        while (cursor) {\r\n            if (cursor.getKey() == key)\r\n                return cursor.value();\r\n            cursor = cursor.getNext();\r\n        }\r\n        return false;\r\n    }\r\n    insert(value, key) {\r\n        var node = new ListNode(value, key);\r\n        if (!this.head)\r\n            this.head = node;\r\n        else\r\n            this.last().next(node);\r\n    }\r\n    print() {\r\n        var cursor = this.head;\r\n        while (cursor) {\r\n            console.log(cursor.value() + \" \");\r\n            cursor = cursor.getNext();\r\n        }\r\n    }\r\n}\r\n//node\r\nclass ListNode {\r\n    constructor(value, key) {\r\n        this.nextNode = null;\r\n        this.key = key;\r\n        this.val = value;\r\n    }\r\n    getNext() {\r\n        return this.nextNode;\r\n    }\r\n    next(node) {\r\n        this.nextNode = node;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    value() {\r\n        return this.val;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9kYXRhL2xpbmtlZC1saXN0LnRzPzY3MjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLEVBQUU7QUFDRixvQkFBb0I7QUFDcEIsZ0dBQWdHO0FBQ2hHLDZFQUE2RTtBQUV0RSxNQUFNLFVBQVU7SUFBdkI7UUFDWSxTQUFJLEdBQVEsSUFBSSxDQUFDO0lBbUMzQixDQUFDO0lBakNDLEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksTUFBTSxHQUFhLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMzQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxJQUFJLENBQUMsR0FBVztRQUNkLElBQUksTUFBTSxHQUFhLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsT0FBTyxNQUFNLEVBQUU7WUFDYixJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHO2dCQUFFLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2xELE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDM0I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDRCxNQUFNLENBQUMsS0FBVSxFQUFFLEdBQVc7UUFDNUIsSUFBSSxJQUFJLEdBQWEsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztZQUM1QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxNQUFNLEdBQWEsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLE1BQU0sRUFBRTtZQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNO0FBQ04sTUFBTSxRQUFRO0lBS1osWUFBWSxLQUFVLEVBQUUsR0FBVztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ25CLENBQUM7SUFDRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUMsSUFBYztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBQ0QsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0NBQ0YiLCJmaWxlIjoiLi9zcmMvZGF0YS9saW5rZWQtbGlzdC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vXHJcbi8vIG5vdGU6IHRha2VuIGZyb20gXHJcbi8vIGh0dHBzOi8vbWVkaXVtLmNvbS9ldmVyeXRoaW5nLWphdmFzY3JpcHQvaW1wbGVtZW50aW5nLWEtaGFzaC10YWJsZS1pbi1qYXZhc2NyaXB0LTI5YWNhMWVkZmUyYlxyXG4vLyBOT1RFOiBOb3QgdXNlZCBhbnltb3JlLCBidXQgaSBzdGlsbCBmaW5kIGl0IGludGVyZXN0aW5nLCBzbyBsZWF2ZSBpdCBoZXJlIFxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmtlZExpc3Qge1xyXG4gICAgcHJpdmF0ZSBoZWFkOiBhbnkgPSBudWxsO1xyXG4gIFxyXG4gICAgZW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgIGlmICh0aGlzLmhlYWQpIHJldHVybiBmYWxzZTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBsYXN0KCk6IExpc3ROb2RlIHtcclxuICAgICAgdmFyIGN1cnNvcjogTGlzdE5vZGUgPSB0aGlzLmhlYWQ7XHJcbiAgICAgIHdoaWxlIChjdXJzb3IuZ2V0TmV4dCgpKSB7XHJcbiAgICAgICAgY3Vyc29yID0gY3Vyc29yLmdldE5leHQoKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gY3Vyc29yO1xyXG4gICAgfVxyXG4gICAgZmluZChrZXk6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgIHZhciBjdXJzb3I6IExpc3ROb2RlID0gdGhpcy5oZWFkO1xyXG4gICAgICB3aGlsZSAoY3Vyc29yKSB7XHJcbiAgICAgICAgaWYgKGN1cnNvci5nZXRLZXkoKSA9PSBrZXkpIHJldHVybiBjdXJzb3IudmFsdWUoKTtcclxuICAgICAgICBjdXJzb3IgPSBjdXJzb3IuZ2V0TmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGluc2VydCh2YWx1ZTogYW55LCBrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICB2YXIgbm9kZTogTGlzdE5vZGUgPSBuZXcgTGlzdE5vZGUodmFsdWUsIGtleSk7XHJcbiAgICAgIGlmICghdGhpcy5oZWFkKSB0aGlzLmhlYWQgPSBub2RlO1xyXG4gICAgICBlbHNlIHRoaXMubGFzdCgpLm5leHQobm9kZSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcmludCgpOiB2b2lkIHtcclxuICAgICAgdmFyIGN1cnNvcjogTGlzdE5vZGUgPSB0aGlzLmhlYWQ7XHJcbiAgICAgIHdoaWxlIChjdXJzb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhjdXJzb3IudmFsdWUoKSArIFwiIFwiKTtcclxuICAgICAgICBjdXJzb3IgPSBjdXJzb3IuZ2V0TmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vbm9kZVxyXG4gIGNsYXNzIExpc3ROb2RlIHtcclxuICAgIHByaXZhdGUgdmFsOiBhbnk7XHJcbiAgICBwcml2YXRlIGtleTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBuZXh0Tm9kZTogYW55O1xyXG4gIFxyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IGFueSwga2V5OiBzdHJpbmcpIHtcclxuICAgICAgdGhpcy5uZXh0Tm9kZSA9IG51bGw7XHJcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICB0aGlzLnZhbCA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0TmV4dCgpOiBMaXN0Tm9kZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm5leHROb2RlO1xyXG4gICAgfVxyXG4gICAgbmV4dChub2RlOiBMaXN0Tm9kZSkge1xyXG4gICAgICB0aGlzLm5leHROb2RlID0gbm9kZTtcclxuICAgIH1cclxuICAgIGdldEtleSgpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICB2YWx1ZSgpOiBhbnkge1xyXG4gICAgICByZXR1cm4gdGhpcy52YWw7XHJcbiAgICB9XHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/linked-list.ts\n");

/***/ }),

/***/ "./src/data/vector-array.ts":
/*!**********************************!*\
  !*** ./src/data/vector-array.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector2Array\": () => /* binding */ Vector2Array,\n/* harmony export */   \"Vector3Array\": () => /* binding */ Vector3Array,\n/* harmony export */   \"getGeneralFloatMatrix\": () => /* binding */ getGeneralFloatMatrix\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _float_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    array.ts\r\n// author:  Jos Feenstra\r\n// purpose: Small wrapper around Float32Array / FloatMatrix to add interoperability with Vector2 & Vector3, \r\n//          while remaining a datastructure thats easy to pass over to webgl\r\n// \r\n// NOTE:    all these small wrappers might not be good pratice, but I \r\n//          like to extract simple logic like this to not clutter the code too much\r\n\r\n\r\nclass Vector2Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 2);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector2Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 2] = vecs[i].x;\r\n            array.data[i * 2 + 1] = vecs[i].y;\r\n        }\r\n        return array;\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            callbackfn(vec, i);\r\n            this.setVector(i, vec);\r\n        }\r\n        return this;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.data[i * this._width + 0], this.data[i * this._width + 1]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    to3D() {\r\n        let array = new Vector3Array(this.count());\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let row = this.getRow(i);\r\n            array.setRow(i, [row[0], row[1], 0]);\r\n        }\r\n        return array;\r\n    }\r\n    clone() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n}\r\nclass Vector3Array extends _float_matrix__WEBPACK_IMPORTED_MODULE_1__.FloatMatrix {\r\n    constructor(count) {\r\n        super(count, 3);\r\n    }\r\n    static fromList(vecs) {\r\n        let length = vecs.length;\r\n        let array = new Vector3Array(length);\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            array.data[i * 3] = vecs[i].x;\r\n            array.data[i * 3 + 1] = vecs[i].y;\r\n            array.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n        return array;\r\n    }\r\n    static fromNative(native) {\r\n        // assume all subarrays have the same shape!!\r\n        let height = native.length;\r\n        let matrix = new Vector3Array(height);\r\n        for (var i = 0; i < native.length; i++) {\r\n            for (var j = 0; j < native[0].length; j++) {\r\n                matrix.set(i, j, native[i][j]);\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    fillFromList(vecs) {\r\n        for (let i = 0; i < vecs.length; i++) {\r\n            this.data[i * 3] = vecs[i].x;\r\n            this.data[i * 3 + 1] = vecs[i].y;\r\n            this.data[i * 3 + 2] = vecs[i].z;\r\n        }\r\n    }\r\n    forEach(callbackfn) {\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            vec = callbackfn(vec, i);\r\n            if (vec instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                this.setVector(i, vec);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    take(indices) {\r\n        // create a new floatarray\r\n        const count = indices.length;\r\n        let array = new Vector3Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            let getIndex = indices[i];\r\n            array.setVector(i, this.getVector(getIndex));\r\n        }\r\n        return array;\r\n    }\r\n    map(callbackfn) {\r\n        let clone = this.clone();\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = this.getVector(i);\r\n            let result = callbackfn(vec, i);\r\n            if (result instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3) {\r\n                clone.setVector(i, result);\r\n            }\r\n            else {\r\n                clone.setVector(i, vec);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    setVector(i, vec) {\r\n        this.data[i * this._width + 0] = vec.x;\r\n        this.data[i * this._width + 1] = vec.y;\r\n        this.data[i * this._width + 2] = vec.z;\r\n    }\r\n    getVector(i) {\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(this.data[i * this._width + 0], this.data[i * this._width + 1], this.data[i * this._width + 2]);\r\n    }\r\n    toList() {\r\n        let vecs = [];\r\n        for (let i = 0; i < this._height; i++) {\r\n            vecs.push(this.getVector(i));\r\n        }\r\n        return vecs;\r\n    }\r\n    transform(m) {\r\n        for (let i = 0; i < this._height; i++) {\r\n            let vec = this.getVector(i);\r\n            vec = m.multiplyVector(vec);\r\n            this.setVector(i, vec);\r\n        }\r\n        // this.data = m.MultiplyM(this).data;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        let clone = new Vector2Array(this._height);\r\n        for (let i = 0; i < this._height; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                clone.set(i, j, this.get(i, j));\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n    clone() {\r\n        let clone = new Vector3Array(this._height);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            clone.data[i] = this.data[i];\r\n        }\r\n        return clone;\r\n    }\r\n    mean() {\r\n        // the mean vector of a series of vectors\r\n        let sum = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.zero();\r\n        let count = this.count();\r\n        for (let i = 0; i < count; i++) {\r\n            sum.x += this.data[i * 3];\r\n            sum.y += this.data[i * 3 + 1];\r\n            sum.z += this.data[i * 3 + 2];\r\n        }\r\n        return sum.scale(1 / count);\r\n    }\r\n    average() {\r\n        return this.mean();\r\n    }\r\n    closestId(point) {\r\n        let lowScore = Infinity;\r\n        let id = -1;\r\n        this.forEach((v, i) => {\r\n            let disSquared = point.disToSquared(v);\r\n            if (disSquared < lowScore) {\r\n                lowScore = disSquared;\r\n                id = i;\r\n            }\r\n        });\r\n        return id;\r\n    }\r\n    closestIds(point, n) {\r\n        // O(m*n)... TODO implement quicksort \r\n        let ids = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let lowScore = Infinity;\r\n            let id = -1;\r\n            this.forEach((v, i) => {\r\n                if (ids.includes(id))\r\n                    return;\r\n                let disSquared = point.disToSquared(v);\r\n                if (disSquared < lowScore) {\r\n                    lowScore = disSquared;\r\n                    id = i;\r\n                }\r\n            });\r\n            ids.push(id);\r\n        }\r\n        return ids;\r\n    }\r\n}\r\n// TODO : to FloatMatrix\r\nfunction getGeneralFloatMatrix(vectors) {\r\n    if (vectors instanceof Vector2Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors instanceof Vector3Array) {\r\n        return vectors;\r\n    }\r\n    else if (vectors[0] instanceof _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2) {\r\n        return Vector2Array.fromList(vectors);\r\n    }\r\n    else {\r\n        return Vector3Array.fromList(vectors);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/vector-array.ts\n");

/***/ }),

/***/ "./src/geo/circle2.ts":
/*!****************************!*\
  !*** ./src/geo/circle2.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle2\": () => /* binding */ Circle2\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\nclass Circle2 {\r\n    constructor(center, radius) {\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    // thank you mr Mitteldorf for making me remember how basic math works\r\n    // http://mathforum.org/library/drmath/view/53027.html\r\n    // calculate the centers of two circles, defined by two points and a radius\r\n    static centersFromPPR(a, b, radius) {\r\n        // throw new Error(\"Method not implemented.\");\r\n        // get in between length and halfway point\r\n        let normal = b.clone().sub(a);\r\n        let dis = normal.length();\r\n        let middle = a.clone().add(b).scale(1 / 2);\r\n        // scalar length on mirror line (pythagoras)\r\n        let value = Math.pow(radius, 2) - Math.pow((dis / 2), 2);\r\n        if (value < -_math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // no sollution\r\n            return [];\r\n        }\r\n        else if (value < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n            // center roughly in the middle, so just return the middle\r\n            return [middle];\r\n        }\r\n        else {\r\n            // two circles possible:\r\n            let disToCenter = Math.pow((value), 0.5);\r\n            let normY = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(normal.y, -normal.x).normalize();\r\n            // move the middle point up and down\r\n            return [\r\n                middle.clone().add(normY.clone().scale(disToCenter)),\r\n                middle.clone().add(normY.clone().scale(-disToCenter)),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY2lyY2xlMi50cz8wYzFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUNHO0FBRWxDLE1BQU0sT0FBTztJQUtoQixZQUFZLE1BQWUsRUFBRSxNQUFjO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxzRUFBc0U7SUFDdEUsc0RBQXNEO0lBQ3RELDJFQUEyRTtJQUMzRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsTUFBYztRQUN4RCw4Q0FBOEM7UUFFOUMsMENBQTBDO1FBQzFDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6Qyw0Q0FBNEM7UUFDNUMsSUFBSSxLQUFLLEdBQUcsZUFBTSxFQUFFLENBQUMsSUFBRyxVQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xDLElBQUksS0FBSyxHQUFHLENBQUMsd0RBQWUsRUFBRTtZQUMxQixlQUFlO1lBQ2YsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNLElBQUksS0FBSyxHQUFHLHdEQUFlLEVBQUU7WUFDaEMsMERBQTBEO1lBQzFELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQjthQUFNO1lBQ0gsd0JBQXdCO1lBQ3hCLElBQUksV0FBVyxHQUFHLFVBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRztZQUM5QixJQUFJLEtBQUssR0FBRyxJQUFJLGlEQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUV6RCxvQ0FBb0M7WUFDcEMsT0FBTztnQkFDSCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hELENBQUM7U0FDTDtJQUNMLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9nZW8vY2lyY2xlMi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0IH0gZnJvbSBcIi4uL21hdGgvY29uc3RcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZTIge1xyXG5cclxuICAgIGNlbnRlcjogVmVjdG9yMjtcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNlbnRlcjogVmVjdG9yMiwgcmFkaXVzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjtcclxuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gdGhhbmsgeW91IG1yIE1pdHRlbGRvcmYgZm9yIG1ha2luZyBtZSByZW1lbWJlciBob3cgYmFzaWMgbWF0aCB3b3Jrc1xyXG4gICAgLy8gaHR0cDovL21hdGhmb3J1bS5vcmcvbGlicmFyeS9kcm1hdGgvdmlldy81MzAyNy5odG1sXHJcbiAgICAvLyBjYWxjdWxhdGUgdGhlIGNlbnRlcnMgb2YgdHdvIGNpcmNsZXMsIGRlZmluZWQgYnkgdHdvIHBvaW50cyBhbmQgYSByYWRpdXNcclxuICAgIHN0YXRpYyBjZW50ZXJzRnJvbVBQUihhOiBWZWN0b3IyLCBiOiBWZWN0b3IyLCByYWRpdXM6IG51bWJlcikgOiBWZWN0b3IyW10ge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG5cclxuICAgICAgICAvLyBnZXQgaW4gYmV0d2VlbiBsZW5ndGggYW5kIGhhbGZ3YXkgcG9pbnRcclxuICAgICAgICBsZXQgbm9ybWFsID0gYi5jbG9uZSgpLnN1YihhKTtcclxuICAgICAgICBsZXQgZGlzID0gbm9ybWFsLmxlbmd0aCgpO1xyXG4gICAgICAgIGxldCBtaWRkbGUgPSBhLmNsb25lKCkuYWRkKGIpLnNjYWxlKDEvMik7XHJcblxyXG4gICAgICAgIC8vIHNjYWxhciBsZW5ndGggb24gbWlycm9yIGxpbmUgKHB5dGhhZ29yYXMpXHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmFkaXVzKioyIC0gKGRpcy8yKSoqMlxyXG4gICAgICAgIGlmICh2YWx1ZSA8IC1Db25zdC5UT0xFUkFOQ0UpIHtcclxuICAgICAgICAgICAgLy8gbm8gc29sbHV0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIDwgQ29uc3QuVE9MRVJBTkNFKSB7XHJcbiAgICAgICAgICAgIC8vIGNlbnRlciByb3VnaGx5IGluIHRoZSBtaWRkbGUsIHNvIGp1c3QgcmV0dXJuIHRoZSBtaWRkbGVcclxuICAgICAgICAgICAgcmV0dXJuIFttaWRkbGVdOyBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0d28gY2lyY2xlcyBwb3NzaWJsZTpcclxuICAgICAgICAgICAgbGV0IGRpc1RvQ2VudGVyID0gKHZhbHVlKSoqMC41XHJcbiAgICAgICAgICAgIGxldCBub3JtWSA9IG5ldyBWZWN0b3IyKG5vcm1hbC55LCAtbm9ybWFsLngpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gbW92ZSB0aGUgbWlkZGxlIHBvaW50IHVwIGFuZCBkb3duXHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICBtaWRkbGUuY2xvbmUoKS5hZGQobm9ybVkuY2xvbmUoKS5zY2FsZShkaXNUb0NlbnRlcikpLFxyXG4gICAgICAgICAgICAgICAgbWlkZGxlLmNsb25lKCkuYWRkKG5vcm1ZLmNsb25lKCkuc2NhbGUoLWRpc1RvQ2VudGVyKSksXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/circle2.ts\n");

/***/ }),

/***/ "./src/geo/circle3.ts":
/*!****************************!*\
  !*** ./src/geo/circle3.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle3\": () => /* binding */ Circle3\n/* harmony export */ });\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// purpose: represents a 3d circle\r\n\r\n\r\nclass Circle3 {\r\n    constructor(plane, radius) {\r\n        this.plane = plane;\r\n        this.radius = radius;\r\n    }\r\n    static fromCircle2(circle2, plane = _plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY()) {\r\n        // elevate center of circle, make it the center of a plane\r\n        let center3d = plane.pushToWorld(circle2.center.to3D());\r\n        plane = plane.clone();\r\n        plane.center = center3d;\r\n        return new Circle3(plane, circle2.radius);\r\n    }\r\n    includes(p) {\r\n        // test if the point falls in range of the circle, by regarding\r\n        // the circle as a torus\r\n        // CHANGE NOTE: i set this to zero, for testing\r\n        // vertical error\r\n        let [projPoint, yError] = this.plane.closestPoint(p);\r\n        yError = yError / 3;\r\n        // horizontal error: get the difference between point\r\n        let xError = this.plane.center.clone().disTo(projPoint) - this.radius;\r\n        // length of total error vector needs to be smaller than the given\r\n        // tolerance\r\n        return Math.pow(yError, 2) + Math.pow(xError, 2) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOL_SQUARED;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY2lyY2xlMy50cz9lZGNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGtDQUFrQztBQUVJO0FBSU47QUFJekIsTUFBTSxPQUFPO0lBS2hCLFlBQVksS0FBWSxFQUFFLE1BQWM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBZ0IsRUFBRSxLQUFLLEdBQUcsaURBQWEsRUFBRTtRQUV4RCwwREFBMEQ7UUFDMUQsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztRQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFFBQVEsQ0FBQyxDQUFVO1FBQ2YsK0RBQStEO1FBQy9ELHdCQUF3QjtRQUV4QiwrQ0FBK0M7UUFDL0MsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDO1FBRW5CLHFEQUFxRDtRQUNyRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV0RSxrRUFBa0U7UUFDbEUsWUFBWTtRQUNaLE9BQU8sZUFBTSxFQUFFLENBQUMsSUFBRyxlQUFNLEVBQUcsQ0FBQyxJQUFHLDBEQUFpQixDQUFDO0lBQ3RELENBQUM7Q0FJSiIsImZpbGUiOiIuL3NyYy9nZW8vY2lyY2xlMy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vLyBwdXJwb3NlOiByZXByZXNlbnRzIGEgM2QgY2lyY2xlXHJcblxyXG5pbXBvcnQgeyBDb25zdCB9IGZyb20gXCIuLi9tYXRoL2NvbnN0XCI7XHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDaXJjbGUyIH0gZnJvbSBcIi4vY2lyY2xlMlwiO1xyXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuL3BsYW5lXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDaXJjbGUzIHtcclxuXHJcbiAgICBwbGFuZTogUGxhbmU7XHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbGFuZTogUGxhbmUsIHJhZGl1czogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wbGFuZSA9IHBsYW5lO1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tQ2lyY2xlMihjaXJjbGUyOiBDaXJjbGUyLCBwbGFuZSA9IFBsYW5lLldvcmxkWFkoKSkge1xyXG5cclxuICAgICAgICAvLyBlbGV2YXRlIGNlbnRlciBvZiBjaXJjbGUsIG1ha2UgaXQgdGhlIGNlbnRlciBvZiBhIHBsYW5lXHJcbiAgICAgICAgbGV0IGNlbnRlcjNkID0gcGxhbmUucHVzaFRvV29ybGQoY2lyY2xlMi5jZW50ZXIudG8zRCgpKTtcclxuICAgICAgICBwbGFuZSA9IHBsYW5lLmNsb25lKCk7XHJcbiAgICAgICAgcGxhbmUuY2VudGVyID0gY2VudGVyM2Q7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGUzKHBsYW5lLCBjaXJjbGUyLnJhZGl1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5jbHVkZXMocDogVmVjdG9yMykgOiBib29sZWFuIHtcclxuICAgICAgICAvLyB0ZXN0IGlmIHRoZSBwb2ludCBmYWxscyBpbiByYW5nZSBvZiB0aGUgY2lyY2xlLCBieSByZWdhcmRpbmdcclxuICAgICAgICAvLyB0aGUgY2lyY2xlIGFzIGEgdG9ydXNcclxuXHJcbiAgICAgICAgLy8gQ0hBTkdFIE5PVEU6IGkgc2V0IHRoaXMgdG8gemVybywgZm9yIHRlc3RpbmdcclxuICAgICAgICAvLyB2ZXJ0aWNhbCBlcnJvclxyXG4gICAgICAgIGxldCBbcHJvalBvaW50LCB5RXJyb3JdID0gdGhpcy5wbGFuZS5jbG9zZXN0UG9pbnQocCk7XHJcbiAgICAgICAgeUVycm9yID0geUVycm9yIC8gM1xyXG4gICAgXHJcbiAgICAgICAgLy8gaG9yaXpvbnRhbCBlcnJvcjogZ2V0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gcG9pbnRcclxuICAgICAgICBsZXQgeEVycm9yID0gdGhpcy5wbGFuZS5jZW50ZXIuY2xvbmUoKS5kaXNUbyhwcm9qUG9pbnQpIC0gdGhpcy5yYWRpdXM7XHJcbiAgICBcclxuICAgICAgICAvLyBsZW5ndGggb2YgdG90YWwgZXJyb3IgdmVjdG9yIG5lZWRzIHRvIGJlIHNtYWxsZXIgdGhhbiB0aGUgZ2l2ZW5cclxuICAgICAgICAvLyB0b2xlcmFuY2VcclxuICAgICAgICByZXR1cm4geUVycm9yKioyICsgeEVycm9yICoqMiA8IENvbnN0LlRPTF9TUVVBUkVEO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/circle3.ts\n");

/***/ }),

/***/ "./src/geo/cube.ts":
/*!*************************!*\
  !*** ./src/geo/cube.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Cube\": () => /* binding */ Cube\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n// name:    cube.ts\r\n// author:  Jos Feenstra\r\n// purpose: Represents a cube in 3d space, in a certain pose. \r\n\r\n\r\nclass Cube {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    static new(plane, domain) {\r\n        return new Cube(plane, domain);\r\n    }\r\n    static fromRadius(point, radius) {\r\n        return new Cube(_plane__WEBPACK_IMPORTED_MODULE_1__.Plane.WorldXY().moveTo(point), _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain3.fromRadius(radius));\r\n    }\r\n    getCorners() {\r\n        return this.domain.corners(this.plane.matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vY3ViZS50cz8zMTJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1CQUFtQjtBQUNuQix3QkFBd0I7QUFDeEIsOERBQThEO0FBR3JCO0FBR1Q7QUFFekIsTUFBTSxJQUFJO0lBRWIsWUFDVyxLQUFZLEVBQ1osTUFBZTtRQURmLFVBQUssR0FBTCxLQUFLLENBQU87UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQUcsQ0FBQztJQUc5QixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQVksRUFBRSxNQUFlO1FBQ3BDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFHRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWMsRUFBRSxNQUFjO1FBQzVDLE9BQU8sSUFBSSxJQUFJLENBQ1gsaURBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFDN0IsNERBQWtCLENBQUMsTUFBTSxDQUFDLENBQzdCLENBQUM7SUFDTixDQUFDO0lBR0QsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvZ2VvL2N1YmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBjdWJlLnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBSZXByZXNlbnRzIGEgY3ViZSBpbiAzZCBzcGFjZSwgaW4gYSBjZXJ0YWluIHBvc2UuIFxyXG5cclxuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcbmltcG9ydCB7IERvbWFpbjMgfSBmcm9tIFwiLi4vbWF0aC9kb21haW5cIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBHZW8gfSBmcm9tIFwiLi9nZW9cIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi9wbGFuZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1YmUge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBwbGFuZTogUGxhbmUsIFxyXG4gICAgICAgIHB1YmxpYyBkb21haW46IERvbWFpbjMpIHt9XHJcblxyXG5cclxuICAgIHN0YXRpYyBuZXcocGxhbmU6IFBsYW5lLCBkb21haW46IERvbWFpbjMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEN1YmUocGxhbmUsIGRvbWFpbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBmcm9tUmFkaXVzKHBvaW50OiBWZWN0b3IzLCByYWRpdXM6IG51bWJlcik6IEN1YmUge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ3ViZShcclxuICAgICAgICAgICAgUGxhbmUuV29ybGRYWSgpLm1vdmVUbyhwb2ludCksXHJcbiAgICAgICAgICAgIERvbWFpbjMuZnJvbVJhZGl1cyhyYWRpdXMpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBnZXRDb3JuZXJzKCkgOiBWZWN0b3IzW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbWFpbi5jb3JuZXJzKHRoaXMucGxhbmUubWF0cml4KTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/cube.ts\n");

/***/ }),

/***/ "./src/geo/geo.ts":
/*!************************!*\
  !*** ./src/geo/geo.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Geo\": () => /* binding */ Geo\n/* harmony export */ });\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n// name:    geo.ts\r\n// author:  Jos Feenstra\r\n// purpose: base class of all 3d geometry\r\n// note:    TODO\r\n\r\n// i want traits....\r\nclass Geo {\r\n    constructor() {\r\n    }\r\n    clone() {\r\n    }\r\n    transform(m) {\r\n        return this;\r\n    }\r\n    rotateX(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newXRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateY(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newYRotation(radians);\r\n        // etc...\r\n    }\r\n    rotateZ(radians) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newZRotation(radians);\r\n        // etc...\r\n    }\r\n    rotate(radians, axis) {\r\n        let rotater = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newAxisRotation(axis, radians);\r\n        // etc...\r\n    }\r\n    move(m) {\r\n        let mover = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(m.x, m.y, m.z);\r\n        // etc... \r\n    }\r\n    scale(s) {\r\n        let scaler = _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newScaler(s.x, s.y, s.z);\r\n        // etc..\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vZ2VvLnRzPzgzMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCLHlDQUF5QztBQUN6QyxnQkFBZ0I7QUFFeUI7QUFHekMsb0JBQW9CO0FBQ2IsTUFBTSxHQUFHO0lBRVo7SUFFQSxDQUFDO0lBRUQsS0FBSztJQUVMLENBQUM7SUFFRCxTQUFTLENBQUMsQ0FBVTtRQUNoQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQWU7UUFDbkIsSUFBSSxPQUFPLEdBQUcsOERBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsU0FBUztJQUNiLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBZTtRQUNuQixJQUFJLE9BQU8sR0FBRyw4REFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxTQUFTO0lBQ2IsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFlO1FBQ25CLElBQUksT0FBTyxHQUFHLDhEQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLFNBQVM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQWUsRUFBRSxJQUFhO1FBQ2pDLElBQUksT0FBTyxHQUFHLGlFQUF1QixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNyRCxTQUFTO0lBQ2IsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFVO1FBQ1gsSUFBSSxLQUFLLEdBQUcsMkRBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxVQUFVO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxDQUFVO1FBRVosSUFBSSxNQUFNLEdBQUcsMkRBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxRQUFRO0lBQ1osQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9nZW8udHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBnZW8udHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IGJhc2UgY2xhc3Mgb2YgYWxsIDNkIGdlb21ldHJ5XHJcbi8vIG5vdGU6ICAgIFRPRE9cclxuXHJcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiOyAgICBcclxuXHJcbi8vIGkgd2FudCB0cmFpdHMuLi4uXHJcbmV4cG9ydCBjbGFzcyBHZW8ge1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybShtOiBNYXRyaXg0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcm90YXRlWChyYWRpYW5zOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcm90YXRlciA9IE1hdHJpeDQubmV3WFJvdGF0aW9uKHJhZGlhbnMpO1xyXG4gICAgICAgIC8vIGV0Yy4uLlxyXG4gICAgfVxyXG5cclxuICAgIHJvdGF0ZVkocmFkaWFuczogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHJvdGF0ZXIgPSBNYXRyaXg0Lm5ld1lSb3RhdGlvbihyYWRpYW5zKTtcclxuICAgICAgICAvLyBldGMuLi5cclxuICAgIH1cclxuXHJcbiAgICByb3RhdGVaKHJhZGlhbnM6IG51bWJlcikge1xyXG4gICAgICAgIGxldCByb3RhdGVyID0gTWF0cml4NC5uZXdaUm90YXRpb24ocmFkaWFucyk7XHJcbiAgICAgICAgLy8gZXRjLi4uXHJcbiAgICB9XHJcblxyXG4gICAgcm90YXRlKHJhZGlhbnM6IG51bWJlciwgYXhpczogVmVjdG9yMykge1xyXG4gICAgICAgIGxldCByb3RhdGVyID0gTWF0cml4NC5uZXdBeGlzUm90YXRpb24oYXhpcywgcmFkaWFucyk7XHJcbiAgICAgICAgLy8gZXRjLi4uXHJcbiAgICB9XHJcbiAgICBcclxuICAgIG1vdmUobTogVmVjdG9yMykge1xyXG4gICAgICAgIGxldCBtb3ZlciA9IE1hdHJpeDQubmV3U2NhbGVyKG0ueCwgbS55LCBtLnopO1xyXG4gICAgICAgIC8vIGV0Yy4uLiBcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZShzOiBWZWN0b3IzKSB7XHJcblxyXG4gICAgICAgIGxldCBzY2FsZXIgPSBNYXRyaXg0Lm5ld1NjYWxlcihzLngsIHMueSwgcy56KTtcclxuICAgICAgICAvLyBldGMuLlxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/geo.ts\n");

/***/ }),

/***/ "./src/geo/intersect.ts":
/*!******************************!*\
  !*** ./src/geo/intersect.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n\r\n/**\r\n * @returns -1 if no intersection, 0 of parallel or touching, 1 if intersection;\r\n */\r\nfunction lineXplane(l1, l2, p1, p2, p3) {\r\n    let test1 = signed_volume(p1, p2, p3, l1);\r\n    let test2 = signed_volume(p1, p2, p3, l2);\r\n    if (Math.abs(test1) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE || Math.abs(test2) < _math_const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE) {\r\n        return 0; // triangle touches plane with an edge\r\n    }\r\n    else if ((test1 < 0 && test2 > 0) || (test1 > 0 && test2 < 0)) {\r\n        return 1; // if 1 test pos and other negative -> line intersects plane! \r\n    }\r\n    else {\r\n        return -1; // no intersection\r\n    }\r\n}\r\n/**\r\n * Calculate if line and triangle intersect\r\n *\r\n * NOTE we could expand on the 'return 0' and explore if its touching a\r\n    vertex, line, or surface of triange\r\n * @returns 0  if line touches triangle\r\n            -1 if line misses  triangle\r\n             1  if line crosses triangle\r\n */\r\nfunction lineXtriangle(l1, l2, p1, p2, p3) {\r\n    // line points must be on opposite sides of the triangle\r\n    // return immidiately if -1: it means no intersection always\r\n    let test0 = lineXplane(l1, l2, p1, p2, p3);\r\n    if (test0 == -1)\r\n        return -1;\r\n    // plane tests\r\n    let test1 = lineXplane(p1, p2, l1, l2, p3);\r\n    if (test1 == -1)\r\n        return -1;\r\n    let test2 = lineXplane(p2, p3, l1, l2, p1);\r\n    if (test2 == -1)\r\n        return -1;\r\n    let test3 = lineXplane(p3, p1, l1, l2, p2);\r\n    if (test3 == -1)\r\n        return -1;\r\n    // debug\r\n    // print(\"points: \", l1, l2, p1, p2, p3)\r\n    // print('tests:', test0, test1, test2, test3)\r\n    // figure out if the line touches the triangle, or if it intersects\r\n    if ((test0 == 1) && (test1 == 1) && (test2 == 1) && (test3 == 1)) {\r\n        return 1;\r\n    }\r\n    else {\r\n        // TODO based upon the different tests, we could determine what is hit\r\n        return 0;\r\n    }\r\n}\r\nfunction signed_volume(a, b, c, d) {\r\n    // with vertices a,b,c,d: get signed volume\r\n    // remember: vectors always remain state. We dont want to alter the abcd vectors.\r\n    a = a.clone();\r\n    b = b.clone();\r\n    c = c.clone();\r\n    return (1 / 6) * a.clone().sub(d).dot(c.sub(d).cross(b.sub(d)));\r\n}\r\nfunction IsRoughly(test1, arg1) {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vaW50ZXJzZWN0LnRzPzE3N2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDcUM7QUFLckM7O0dBRUc7QUFDSCxTQUFTLFVBQVUsQ0FBQyxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVztJQUUvRSxJQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsSUFBSSxLQUFLLEdBQUcsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyx3REFBZSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsd0RBQWUsRUFBRTtRQUN4RSxPQUFPLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztLQUNuRDtTQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQzdELE9BQU8sQ0FBQyxFQUFDLDhEQUE4RDtLQUMxRTtTQUFNO1FBQ0gsT0FBTyxDQUFDLENBQUMsRUFBQyxrQkFBa0I7S0FDL0I7QUFDTCxDQUFDO0FBR0Q7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFTLGFBQWEsQ0FBQyxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVztJQUVsRix3REFBd0Q7SUFDeEQsNERBQTREO0lBQzVELElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFCLGNBQWM7SUFDZCxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUUxQixRQUFRO0lBQ1Isd0NBQXdDO0lBQ3hDLDhDQUE4QztJQUU5QyxtRUFBbUU7SUFDbkUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRTtRQUM5RCxPQUFPLENBQUM7S0FDWDtTQUFNO1FBQ0gsc0VBQXNFO1FBQ3RFLE9BQU8sQ0FBQztLQUNYO0FBQ0wsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVSxFQUFFLENBQVU7SUFDakUsMkNBQTJDO0lBQzNDLGlGQUFpRjtJQUNqRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxPQUFPLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFhLEVBQUUsSUFBWTtJQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDakQsQ0FBQyIsImZpbGUiOiIuL3NyYy9nZW8vaW50ZXJzZWN0LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCJcclxuaW1wb3J0IHsgQ29uc3QgfSBmcm9tIFwiLi4vbWF0aC9jb25zdFwiXHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIlxyXG5cclxuXHJcblxyXG4vKipcclxuICogQHJldHVybnMgLTEgaWYgbm8gaW50ZXJzZWN0aW9uLCAwIG9mIHBhcmFsbGVsIG9yIHRvdWNoaW5nLCAxIGlmIGludGVyc2VjdGlvbjtcclxuICovXHJcbmZ1bmN0aW9uIGxpbmVYcGxhbmUobDE6IFZlY3RvcjMsIGwyOiBWZWN0b3IzLCBwMTogVmVjdG9yMywgcDI6IFZlY3RvcjMsIHAzOiBWZWN0b3IzKSA6IG51bWJlciB7XHJcbiAgICBcclxuICAgIGxldCB0ZXN0MSA9IHNpZ25lZF92b2x1bWUocDEsIHAyLCBwMywgbDEpO1xyXG4gICAgbGV0IHRlc3QyID0gc2lnbmVkX3ZvbHVtZShwMSwgcDIsIHAzLCBsMik7XHJcbiAgICBpZiAoTWF0aC5hYnModGVzdDEpIDwgQ29uc3QuVE9MRVJBTkNFIHx8IE1hdGguYWJzKHRlc3QyKSA8IENvbnN0LlRPTEVSQU5DRSkge1xyXG4gICAgICAgIHJldHVybiAwOyAvLyB0cmlhbmdsZSB0b3VjaGVzIHBsYW5lIHdpdGggYW4gZWRnZVxyXG4gICAgfSBlbHNlIGlmICgodGVzdDEgPCAwICYmIHRlc3QyID4gMCkgfHwgKHRlc3QxID4gMCAmJiB0ZXN0MiA8IDApKSB7XHJcbiAgICAgICAgcmV0dXJuIDEgLy8gaWYgMSB0ZXN0IHBvcyBhbmQgb3RoZXIgbmVnYXRpdmUgLT4gbGluZSBpbnRlcnNlY3RzIHBsYW5lISBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIC0xIC8vIG5vIGludGVyc2VjdGlvblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBpZiBsaW5lIGFuZCB0cmlhbmdsZSBpbnRlcnNlY3RcclxuICogXHJcbiAqIE5PVEUgd2UgY291bGQgZXhwYW5kIG9uIHRoZSAncmV0dXJuIDAnIGFuZCBleHBsb3JlIGlmIGl0cyB0b3VjaGluZyBhXHJcbiAgICB2ZXJ0ZXgsIGxpbmUsIG9yIHN1cmZhY2Ugb2YgdHJpYW5nZVxyXG4gKiBAcmV0dXJucyAwICBpZiBsaW5lIHRvdWNoZXMgdHJpYW5nbGVcclxuICAgICAgICAgICAgLTEgaWYgbGluZSBtaXNzZXMgIHRyaWFuZ2xlXHJcbiAgICAgICAgICAgICAxICBpZiBsaW5lIGNyb3NzZXMgdHJpYW5nbGVcclxuICovXHJcbmZ1bmN0aW9uIGxpbmVYdHJpYW5nbGUobDE6IFZlY3RvcjMsIGwyOiBWZWN0b3IzLCBwMTogVmVjdG9yMywgcDI6IFZlY3RvcjMsIHAzOiBWZWN0b3IzKSB7XHJcbiAgICBcclxuICAgIC8vIGxpbmUgcG9pbnRzIG11c3QgYmUgb24gb3Bwb3NpdGUgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlXHJcbiAgICAvLyByZXR1cm4gaW1taWRpYXRlbHkgaWYgLTE6IGl0IG1lYW5zIG5vIGludGVyc2VjdGlvbiBhbHdheXNcclxuICAgIGxldCB0ZXN0MCA9IGxpbmVYcGxhbmUobDEsIGwyLCBwMSwgcDIsIHAzKVxyXG4gICAgaWYgKHRlc3QwID09IC0xKSByZXR1cm4gLTFcclxuXHJcbiAgICAvLyBwbGFuZSB0ZXN0c1xyXG4gICAgbGV0IHRlc3QxID0gbGluZVhwbGFuZShwMSwgcDIsIGwxLCBsMiwgcDMpXHJcbiAgICBpZiAodGVzdDEgPT0gLTEpIHJldHVybiAtMVxyXG4gICAgbGV0IHRlc3QyID0gbGluZVhwbGFuZShwMiwgcDMsIGwxLCBsMiwgcDEpXHJcbiAgICBpZiAodGVzdDIgPT0gLTEpIHJldHVybiAtMVxyXG4gICAgbGV0IHRlc3QzID0gbGluZVhwbGFuZShwMywgcDEsIGwxLCBsMiwgcDIpXHJcbiAgICBpZiAodGVzdDMgPT0gLTEpIHJldHVybiAtMVxyXG5cclxuICAgIC8vIGRlYnVnXHJcbiAgICAvLyBwcmludChcInBvaW50czogXCIsIGwxLCBsMiwgcDEsIHAyLCBwMylcclxuICAgIC8vIHByaW50KCd0ZXN0czonLCB0ZXN0MCwgdGVzdDEsIHRlc3QyLCB0ZXN0MylcclxuXHJcbiAgICAvLyBmaWd1cmUgb3V0IGlmIHRoZSBsaW5lIHRvdWNoZXMgdGhlIHRyaWFuZ2xlLCBvciBpZiBpdCBpbnRlcnNlY3RzXHJcbiAgICBpZiAoKHRlc3QwID09IDEpICYmICh0ZXN0MSA9PSAxKSAmJiAodGVzdDIgPT0gMSkgJiYgKHRlc3QzID09IDEpKSB7XHJcbiAgICAgICAgcmV0dXJuIDFcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVE9ETyBiYXNlZCB1cG9uIHRoZSBkaWZmZXJlbnQgdGVzdHMsIHdlIGNvdWxkIGRldGVybWluZSB3aGF0IGlzIGhpdFxyXG4gICAgICAgIHJldHVybiAwXHJcbiAgICB9ICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNpZ25lZF92b2x1bWUoYTogVmVjdG9yMywgYjogVmVjdG9yMywgYzogVmVjdG9yMywgZDogVmVjdG9yMykge1xyXG4gICAgLy8gd2l0aCB2ZXJ0aWNlcyBhLGIsYyxkOiBnZXQgc2lnbmVkIHZvbHVtZVxyXG4gICAgLy8gcmVtZW1iZXI6IHZlY3RvcnMgYWx3YXlzIHJlbWFpbiBzdGF0ZS4gV2UgZG9udCB3YW50IHRvIGFsdGVyIHRoZSBhYmNkIHZlY3RvcnMuXHJcbiAgICBhID0gYS5jbG9uZSgpO1xyXG4gICAgYiA9IGIuY2xvbmUoKTtcclxuICAgIGMgPSBjLmNsb25lKCk7XHJcbiAgICByZXR1cm4gKDEvNikgKiBhLmNsb25lKCkuc3ViKGQpLmRvdChjLnN1YihkKS5jcm9zcyhiLnN1YihkKSkpO1xyXG59XHJcbiAgICBcclxuZnVuY3Rpb24gSXNSb3VnaGx5KHRlc3QxOiBudW1iZXIsIGFyZzE6IG51bWJlcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gbm90IGltcGxlbWVudGVkLlwiKTtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/intersect.ts\n");

/***/ }),

/***/ "./src/geo/line.ts":
/*!*************************!*\
  !*** ./src/geo/line.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineCurve2\": () => /* binding */ LineCurve2\n/* harmony export */ });\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n\r\n\r\n// heavy weight Line class\r\nclass LineCurve2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.vector = to.subbed(this.from);\r\n        this.normal = this.vector.normalized();\r\n        this.bounds = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, this.vector.length());\r\n        this.length = this.vector.length();\r\n    }\r\n    at(t, bounded = true) {\r\n        if (bounded)\r\n            t = this.bounds.comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t / this.length);\r\n    }\r\n    atNormal(t, bounded = true) {\r\n        if (bounded)\r\n            t = new _math_domain__WEBPACK_IMPORTED_MODULE_0__.Domain(0, 1).comform(t);\r\n        return _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector2.fromLerp(this.from, this.to, t);\r\n    }\r\n    closestPoint(point, bounded = true) {\r\n        const d = this.vector.length();\r\n        if (d === 0)\r\n            return;\r\n        let lineToPoint = point.subbed(this.from);\r\n        let dot = lineToPoint.dot(this.vector);\r\n        return this.at(dot, bounded);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vbGluZS50cz9hYTg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNUO0FBRXhDLDBCQUEwQjtBQUNuQixNQUFNLFVBQVU7SUFVbkIsWUFBWSxJQUFhLEVBQUUsRUFBVztRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnREFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFHRCxFQUFFLENBQUMsQ0FBUyxFQUFFLE9BQU8sR0FBQyxJQUFJO1FBQ3RCLElBQUksT0FBTztZQUNQLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLDBEQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNoRSxDQUFDO0lBR0QsUUFBUSxDQUFDLENBQVMsRUFBRSxPQUFPLEdBQUMsSUFBSTtRQUM1QixJQUFJLE9BQU87WUFDUCxDQUFDLEdBQUcsSUFBSSxnREFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsT0FBTywwREFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUdELFlBQVksQ0FBQyxLQUFjLEVBQUUsT0FBTyxHQUFDLElBQUk7UUFFckMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ0QsT0FBTztRQUVYLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9saW5lLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tYWluLCBEb21haW4yIH0gZnJvbSBcIi4uL21hdGgvZG9tYWluXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIlxyXG5cclxuLy8gaGVhdnkgd2VpZ2h0IExpbmUgY2xhc3NcclxuZXhwb3J0IGNsYXNzIExpbmVDdXJ2ZTIge1xyXG5cclxuICAgIHJlYWRvbmx5IGZyb206IFZlY3RvcjI7XHJcbiAgICByZWFkb25seSB0bzogVmVjdG9yMjtcclxuICAgIHJlYWRvbmx5IHZlY3RvcjogVmVjdG9yMjtcclxuICAgIHJlYWRvbmx5IG5vcm1hbDogVmVjdG9yMjtcclxuICAgIHJlYWRvbmx5IGJvdW5kczogRG9tYWluO1xyXG4gICAgcmVhZG9ubHkgbGVuZ3RoOiBudW1iZXI7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICB0aGlzLnRvID0gdG87XHJcbiAgICAgICAgdGhpcy52ZWN0b3IgPSB0by5zdWJiZWQodGhpcy5mcm9tKTtcclxuICAgICAgICB0aGlzLm5vcm1hbCA9IHRoaXMudmVjdG9yLm5vcm1hbGl6ZWQoKTtcclxuICAgICAgICB0aGlzLmJvdW5kcyA9IG5ldyBEb21haW4oMCwgdGhpcy52ZWN0b3IubGVuZ3RoKCkpO1xyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy52ZWN0b3IubGVuZ3RoKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGF0KHQ6IG51bWJlciwgYm91bmRlZD10cnVlKSA6IFZlY3RvcjIge1xyXG4gICAgICAgIGlmIChib3VuZGVkKSBcclxuICAgICAgICAgICAgdCA9IHRoaXMuYm91bmRzLmNvbWZvcm0odCk7XHJcbiAgICAgICAgcmV0dXJuIFZlY3RvcjIuZnJvbUxlcnAodGhpcy5mcm9tLCB0aGlzLnRvLCB0IC8gdGhpcy5sZW5ndGgpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGF0Tm9ybWFsKHQ6IG51bWJlciwgYm91bmRlZD10cnVlKSA6IFZlY3RvcjIge1xyXG4gICAgICAgIGlmIChib3VuZGVkKVxyXG4gICAgICAgICAgICB0ID0gbmV3IERvbWFpbigwLDEpLmNvbWZvcm0odCk7XHJcbiAgICAgICAgcmV0dXJuIFZlY3RvcjIuZnJvbUxlcnAodGhpcy5mcm9tLCB0aGlzLnRvLCB0KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY2xvc2VzdFBvaW50KHBvaW50OiBWZWN0b3IyLCBib3VuZGVkPXRydWUpIDogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLnZlY3Rvci5sZW5ndGgoKTtcclxuXHRcdGlmIChkID09PSAwKSBcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgbGluZVRvUG9pbnQgPSBwb2ludC5zdWJiZWQodGhpcy5mcm9tKTtcclxuICAgICAgICBsZXQgZG90ID0gbGluZVRvUG9pbnQuZG90KHRoaXMudmVjdG9yKTtcclxuXHRcdHJldHVybiB0aGlzLmF0KGRvdCwgYm91bmRlZCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/line.ts\n");

/***/ }),

/***/ "./src/geo/plane.ts":
/*!**************************!*\
  !*** ./src/geo/plane.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plane\": () => /* binding */ Plane\n/* harmony export */ });\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/statistics */ \"./src/math/statistics.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n// name:    plane.ts\r\n// author:  Jos Feenstra\r\n// purpose: definition of a 3d plane. \r\n// todo:    turn Center, Ihat, Jhat, Khat construction to an actual matrix\r\n\r\n\r\n\r\n\r\nclass Plane {\r\n    // _inverse!: Matrix4; // NOTE: currently im not caching this. Might be needed.\r\n    // NOTE : d is not really needed anymore...\r\n    constructor(m) {\r\n        this._matrix = m;\r\n    }\r\n    static fromPN(center, normal) {\r\n        let cross = normal.cross(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX());\r\n        if (cross.length() < _math_const__WEBPACK_IMPORTED_MODULE_3__.Const.TOLERANCE) {\r\n            cross = normal.cross(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY());\r\n        }\r\n        let ihat = cross.normalize();\r\n        let jhat = normal.cross(ihat).normalize();\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, normal);\r\n        return new Plane(mat);\r\n    }\r\n    static fromPVV(a, v1, v2) {\r\n        // TODO check if we still need this -1 thing \r\n        let khat = v1.clone().cross(v2).normalize(); //.scale(-1);\r\n        let center = a.clone();\r\n        let ihat = v1.normalize();\r\n        let jhat = v1.clone().cross(khat);\r\n        let mat = Plane.planeMatrixFromVecs(center, ihat, jhat, khat);\r\n        return new Plane(mat);\r\n    }\r\n    static from3pt(a, b, c) {\r\n        let v1 = b.clone().sub(a);\r\n        let v2 = c.clone().sub(a);\r\n        return this.fromPVV(a, v1, v2);\r\n    }\r\n    static WorldXY() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY());\r\n    }\r\n    static WorldYZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitY(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static WorldXZ() {\r\n        return Plane.from3pt(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitX(), _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.unitZ());\r\n    }\r\n    static fromLeastSquares(pts) {\r\n        let mean = pts.mean();\r\n        let cov = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.cov(pts);\r\n        let [eigValues, eigVectors] = _math_statistics__WEBPACK_IMPORTED_MODULE_1__.Stat.eig(cov);\r\n        console.log(eigValues);\r\n        let biggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(0));\r\n        let secondBiggestEigenVector = _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(eigVectors.getColumn(1));\r\n        return Plane.fromPVV(mean, biggestEigenVector, secondBiggestEigenVector);\r\n    }\r\n    static fromXYLeastSquares(pts) {\r\n        // quite specific, but this was needed.\r\n        let mean = pts.mean();\r\n        return Plane.WorldXY().transform(_math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4.newTranslation(mean.x, mean.y, mean.z));\r\n    }\r\n    static planeMatrixFromVecs(c, i, j, k) {\r\n        return new _math_matrix__WEBPACK_IMPORTED_MODULE_0__.Matrix4([\r\n            i.x, i.y, i.z, 0,\r\n            j.x, j.y, j.z, 0,\r\n            k.x, k.y, k.z, 0,\r\n            c.x, c.y, c.z, 1,\r\n        ]);\r\n    }\r\n    get ihat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(0)); }\r\n    get jhat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(1)); }\r\n    get khat() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(2)); }\r\n    get center() { return _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.fromArray(this._matrix.getRow(3)); }\r\n    get matrix() { return this._matrix.clone(); }\r\n    get normal() { return this.khat; }\r\n    get d() { return this.closestPoint(_math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3.zero())[1]; }\r\n    set ihat(v) { this._matrix.setRow(0, [v.x, v.y, v.z, 0]); }\r\n    set jhat(v) { this._matrix.setRow(1, [v.x, v.y, v.z, 0]); }\r\n    set khat(v) { this._matrix.setRow(2, [v.x, v.y, v.z, 0]); }\r\n    set center(v) { this._matrix.setRow(3, [v.x, v.y, v.z, 1]); }\r\n    set matrix(m) { this._matrix = m; }\r\n    get inverse() { return this._matrix.inverse(); }\r\n    setPosition(vec) {\r\n        this.center = vec;\r\n    }\r\n    setNormal(vec) {\r\n        this.khat = vec;\r\n    }\r\n    clone() {\r\n        return new Plane(this._matrix.clone());\r\n    }\r\n    transform(m) {\r\n        this._matrix = this._matrix.multiply(m);\r\n        return this;\r\n    }\r\n    moveTo(origin) {\r\n        this.center = origin;\r\n        return this;\r\n    }\r\n    // NOTE: pulling is inefficient since i do not cache the inverse.\r\n    pullToPlane(p) {\r\n        return this.inverse.multiplyVector(p);\r\n    }\r\n    pushToWorld(p) {\r\n        return this.matrix.multiplyVector(p);\r\n    }\r\n    closestPoint(p) {\r\n        let pulled = this.pullToPlane(p);\r\n        let distance = pulled.z;\r\n        pulled.z = 0;\r\n        let vec = this.pushToWorld(pulled);\r\n        return [vec, distance];\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vcGxhbmUudHM/YmQ2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsc0NBQXNDO0FBQ3RDLDBFQUEwRTtBQUlqQztBQUNDO0FBQ1E7QUFDWjtBQUUvQixNQUFNLEtBQUs7SUFHZCwrRUFBK0U7SUFFL0UsMkNBQTJDO0lBQzNDLFlBQVksQ0FBVTtRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFlLEVBQUUsTUFBZTtRQUUxQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLHVEQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLHdEQUFlLEVBQUU7WUFDbEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsdURBQWEsRUFBRSxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0IsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUUxQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFVLEVBQUUsRUFBVyxFQUFFLEVBQVc7UUFFL0MsNkNBQTZDO1FBQzdDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxhQUFhO1FBRTFELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFO1FBQ3pCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVTtRQUM3QyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLHNEQUFZLEVBQUUsRUFBRSx1REFBYSxFQUFFLEVBQUUsdURBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLHNEQUFZLEVBQUUsRUFBRSx1REFBYSxFQUFFLEVBQUUsdURBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLHNEQUFZLEVBQUUsRUFBRSx1REFBYSxFQUFFLEVBQUUsdURBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFpQjtRQUVyQyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxHQUFHLEdBQUcsc0RBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxHQUFHLHNEQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2QixJQUFJLGtCQUFrQixHQUFHLDJEQUFpQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLHdCQUF3QixHQUFHLDJEQUFpQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBaUI7UUFDdkMsdUNBQXVDO1FBQ3ZDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0VBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVTtRQUVyRSxPQUFPLElBQUksaURBQU8sQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDbkIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQVcsSUFBSSxLQUFJLE9BQU8sMkRBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQztJQUNwRSxJQUFXLElBQUksS0FBSSxPQUFPLDJEQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUM7SUFDcEUsSUFBVyxJQUFJLEtBQUksT0FBTywyREFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDO0lBQ3BFLElBQVcsTUFBTSxLQUFJLE9BQU8sMkRBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQztJQUN0RSxJQUFXLE1BQU0sS0FBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUM7SUFFakQsSUFBVyxNQUFNLEtBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFDO0lBQ3RDLElBQVcsQ0FBQyxLQUFhLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzREFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQztJQUVyRSxJQUFXLElBQUksQ0FBQyxDQUFVLElBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQzVFLElBQVcsSUFBSSxDQUFDLENBQVUsSUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7SUFDNUUsSUFBVyxJQUFJLENBQUMsQ0FBVSxJQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUM1RSxJQUFXLE1BQU0sQ0FBQyxDQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQzVFLElBQVcsTUFBTSxDQUFDLENBQVUsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFDO0lBRWxELElBQVcsT0FBTyxLQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBQztJQUVwRCxXQUFXLENBQUMsR0FBWTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVk7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUs7UUFDRCxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsU0FBUyxDQUFDLENBQVU7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWU7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELGlFQUFpRTtJQUNqRSxXQUFXLENBQUMsQ0FBVTtRQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxXQUFXLENBQUMsQ0FBVTtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxZQUFZLENBQUMsQ0FBVTtRQUNuQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQWtCSiIsImZpbGUiOiIuL3NyYy9nZW8vcGxhbmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBwbGFuZS50c1xyXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcclxuLy8gcHVycG9zZTogZGVmaW5pdGlvbiBvZiBhIDNkIHBsYW5lLiBcclxuLy8gdG9kbzogICAgdHVybiBDZW50ZXIsIEloYXQsIEpoYXQsIEtoYXQgY29uc3RydWN0aW9uIHRvIGFuIGFjdHVhbCBtYXRyaXhcclxuXHJcbmltcG9ydCB7IFZlY3RvcjNBcnJheSB9IGZyb20gXCIuLi9kYXRhL3ZlY3Rvci1hcnJheVwiO1xyXG5pbXBvcnQgeyBHZW9uTWF0aCB9IGZyb20gXCIuLi9tYXRoL21hdGhcIjtcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xyXG5pbXBvcnQgeyBTdGF0IH0gZnJvbSBcIi4uL21hdGgvc3RhdGlzdGljc1wiO1xyXG5pbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENvbnN0IH0gZnJvbSBcIi4uL21hdGgvY29uc3RcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGFuZSB7XHJcbiAgICBcclxuICAgIF9tYXRyaXghOiBNYXRyaXg0O1xyXG4gICAgLy8gX2ludmVyc2UhOiBNYXRyaXg0OyAvLyBOT1RFOiBjdXJyZW50bHkgaW0gbm90IGNhY2hpbmcgdGhpcy4gTWlnaHQgYmUgbmVlZGVkLlxyXG5cclxuICAgIC8vIE5PVEUgOiBkIGlzIG5vdCByZWFsbHkgbmVlZGVkIGFueW1vcmUuLi5cclxuICAgIGNvbnN0cnVjdG9yKG06IE1hdHJpeDQpIHtcclxuICAgICAgICB0aGlzLl9tYXRyaXggPSBtO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tUE4oY2VudGVyOiBWZWN0b3IzLCBub3JtYWw6IFZlY3RvcjMpIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgY3Jvc3MgPSBub3JtYWwuY3Jvc3MoVmVjdG9yMy51bml0WCgpKTtcclxuICAgICAgICBpZiAoY3Jvc3MubGVuZ3RoKCkgPCBDb25zdC5UT0xFUkFOQ0UpIHtcclxuICAgICAgICAgICAgY3Jvc3MgPSBub3JtYWwuY3Jvc3MoVmVjdG9yMy51bml0WSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGloYXQgPSBjcm9zcy5ub3JtYWxpemUoKTtcclxuICAgICAgICBsZXQgamhhdCA9IG5vcm1hbC5jcm9zcyhpaGF0KS5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgbGV0IG1hdCA9IFBsYW5lLnBsYW5lTWF0cml4RnJvbVZlY3MoY2VudGVyLCBpaGF0LCBqaGF0LCBub3JtYWwpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUGxhbmUobWF0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVBWVihhOiBWZWN0b3IzLCB2MTogVmVjdG9yMywgdjI6IFZlY3RvcjMpIHtcclxuXHJcbiAgICAgICAgLy8gVE9ETyBjaGVjayBpZiB3ZSBzdGlsbCBuZWVkIHRoaXMgLTEgdGhpbmcgXHJcbiAgICAgICAgbGV0IGtoYXQgPSB2MS5jbG9uZSgpLmNyb3NzKHYyKS5ub3JtYWxpemUoKTsgLy8uc2NhbGUoLTEpO1xyXG5cclxuICAgICAgICBsZXQgY2VudGVyID0gYS5jbG9uZSgpO1xyXG4gICAgICAgIGxldCBpaGF0ID0gdjEubm9ybWFsaXplKClcclxuICAgICAgICBsZXQgamhhdCA9IHYxLmNsb25lKCkuY3Jvc3Moa2hhdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IG1hdCA9IFBsYW5lLnBsYW5lTWF0cml4RnJvbVZlY3MoY2VudGVyLCBpaGF0LCBqaGF0LCBraGF0KTtcclxuICAgICAgICByZXR1cm4gbmV3IFBsYW5lKG1hdClcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbTNwdChhOiBWZWN0b3IzLCBiOiBWZWN0b3IzLCBjOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgbGV0IHYxID0gYi5jbG9uZSgpLnN1YihhKTtcclxuICAgICAgICBsZXQgdjIgPSBjLmNsb25lKCkuc3ViKGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21QVlYoYSwgdjEsIHYyKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgV29ybGRYWSgpOiBQbGFuZSB7XHJcbiAgICAgICAgcmV0dXJuIFBsYW5lLmZyb20zcHQoVmVjdG9yMy56ZXJvKCksIFZlY3RvcjMudW5pdFgoKSwgVmVjdG9yMy51bml0WSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgV29ybGRZWigpOiBQbGFuZSB7XHJcbiAgICAgICAgcmV0dXJuIFBsYW5lLmZyb20zcHQoVmVjdG9yMy56ZXJvKCksIFZlY3RvcjMudW5pdFkoKSwgVmVjdG9yMy51bml0WigpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgV29ybGRYWigpOiBQbGFuZSB7XHJcbiAgICAgICAgcmV0dXJuIFBsYW5lLmZyb20zcHQoVmVjdG9yMy56ZXJvKCksIFZlY3RvcjMudW5pdFgoKSwgVmVjdG9yMy51bml0WigpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbUxlYXN0U3F1YXJlcyhwdHM6IFZlY3RvcjNBcnJheSkgOiBQbGFuZXtcclxuXHJcbiAgICAgICAgbGV0IG1lYW4gPSBwdHMubWVhbigpO1xyXG4gICAgICAgIGxldCBjb3YgPSBTdGF0LmNvdihwdHMpO1xyXG4gICAgICAgIGxldCBbZWlnVmFsdWVzLCBlaWdWZWN0b3JzXSA9IFN0YXQuZWlnKGNvdik7XHJcbiAgICAgICAgY29uc29sZS5sb2coZWlnVmFsdWVzKTtcclxuXHJcbiAgICAgICAgbGV0IGJpZ2dlc3RFaWdlblZlY3RvciA9IFZlY3RvcjMuZnJvbUFycmF5KGVpZ1ZlY3RvcnMuZ2V0Q29sdW1uKDApKTtcclxuICAgICAgICBsZXQgc2Vjb25kQmlnZ2VzdEVpZ2VuVmVjdG9yID0gVmVjdG9yMy5mcm9tQXJyYXkoZWlnVmVjdG9ycy5nZXRDb2x1bW4oMSkpXHJcblxyXG4gICAgICAgIHJldHVybiBQbGFuZS5mcm9tUFZWKG1lYW4sIGJpZ2dlc3RFaWdlblZlY3Rvciwgc2Vjb25kQmlnZ2VzdEVpZ2VuVmVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVhZTGVhc3RTcXVhcmVzKHB0czogVmVjdG9yM0FycmF5KSA6IFBsYW5lIHtcclxuICAgICAgICAvLyBxdWl0ZSBzcGVjaWZpYywgYnV0IHRoaXMgd2FzIG5lZWRlZC5cclxuICAgICAgICBsZXQgbWVhbiA9IHB0cy5tZWFuKCk7XHJcbiAgICAgICAgcmV0dXJuIFBsYW5lLldvcmxkWFkoKS50cmFuc2Zvcm0oTWF0cml4NC5uZXdUcmFuc2xhdGlvbihtZWFuLngsIG1lYW4ueSwgbWVhbi56KSk7ICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwbGFuZU1hdHJpeEZyb21WZWNzKGM6IFZlY3RvcjMsIGk6IFZlY3RvcjMsIGo6IFZlY3RvcjMsIGs6IFZlY3RvcjMpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KFtcclxuICAgICAgICAgICAgaS54LCBpLnksIGkueiwgMCxcclxuICAgICAgICAgICAgai54LCBqLnksIGoueiwgMCxcclxuICAgICAgICAgICAgay54LCBrLnksIGsueiwgMCxcclxuICAgICAgICAgICAgYy54LCBjLnksIGMueiwgMSxcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGloYXQoKSB7cmV0dXJuIFZlY3RvcjMuZnJvbUFycmF5KHRoaXMuX21hdHJpeC5nZXRSb3coMCkpfVxyXG4gICAgcHVibGljIGdldCBqaGF0KCkge3JldHVybiBWZWN0b3IzLmZyb21BcnJheSh0aGlzLl9tYXRyaXguZ2V0Um93KDEpKX1cclxuICAgIHB1YmxpYyBnZXQga2hhdCgpIHtyZXR1cm4gVmVjdG9yMy5mcm9tQXJyYXkodGhpcy5fbWF0cml4LmdldFJvdygyKSl9XHJcbiAgICBwdWJsaWMgZ2V0IGNlbnRlcigpIHtyZXR1cm4gVmVjdG9yMy5mcm9tQXJyYXkodGhpcy5fbWF0cml4LmdldFJvdygzKSl9XHJcbiAgICBwdWJsaWMgZ2V0IG1hdHJpeCgpIHtyZXR1cm4gdGhpcy5fbWF0cml4LmNsb25lKCl9XHJcblxyXG4gICAgcHVibGljIGdldCBub3JtYWwoKSB7cmV0dXJuIHRoaXMua2hhdH1cclxuICAgIHB1YmxpYyBnZXQgZCgpIDogbnVtYmVyIHtyZXR1cm4gdGhpcy5jbG9zZXN0UG9pbnQoVmVjdG9yMy56ZXJvKCkpWzFdfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaWhhdCh2OiBWZWN0b3IzKSAgIHsgdGhpcy5fbWF0cml4LnNldFJvdygwLCBbdi54LCB2LnksIHYueiwgMF0pO31cclxuICAgIHB1YmxpYyBzZXQgamhhdCh2OiBWZWN0b3IzKSAgIHsgdGhpcy5fbWF0cml4LnNldFJvdygxLCBbdi54LCB2LnksIHYueiwgMF0pO31cclxuICAgIHB1YmxpYyBzZXQga2hhdCh2OiBWZWN0b3IzKSAgIHsgdGhpcy5fbWF0cml4LnNldFJvdygyLCBbdi54LCB2LnksIHYueiwgMF0pO31cclxuICAgIHB1YmxpYyBzZXQgY2VudGVyKHY6IFZlY3RvcjMpIHsgdGhpcy5fbWF0cml4LnNldFJvdygzLCBbdi54LCB2LnksIHYueiwgMV0pO31cclxuICAgIHB1YmxpYyBzZXQgbWF0cml4KG06IE1hdHJpeDQpIHsgdGhpcy5fbWF0cml4ID0gbTt9XHJcblxyXG4gICAgcHVibGljIGdldCBpbnZlcnNlKCkge3JldHVybiB0aGlzLl9tYXRyaXguaW52ZXJzZSgpfVxyXG5cclxuICAgIHNldFBvc2l0aW9uKHZlYzogVmVjdG9yMykge1xyXG4gICAgICAgIHRoaXMuY2VudGVyID0gdmVjO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE5vcm1hbCh2ZWM6IFZlY3RvcjMpIHtcclxuICAgICAgICB0aGlzLmtoYXQgPSB2ZWM7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQbGFuZSh0aGlzLl9tYXRyaXguY2xvbmUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKG06IE1hdHJpeDQpIDogUGxhbmUge1xyXG4gICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseShtKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG8ob3JpZ2luOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBvcmlnaW47XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTk9URTogcHVsbGluZyBpcyBpbmVmZmljaWVudCBzaW5jZSBpIGRvIG5vdCBjYWNoZSB0aGUgaW52ZXJzZS5cclxuICAgIHB1bGxUb1BsYW5lKHA6IFZlY3RvcjMpIDogVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52ZXJzZS5tdWx0aXBseVZlY3RvcihwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXNoVG9Xb3JsZChwOiBWZWN0b3IzKSA6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdHJpeC5tdWx0aXBseVZlY3RvcihwKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZXN0UG9pbnQocDogVmVjdG9yMykgOiBbVmVjdG9yMywgbnVtYmVyXSB7XHJcbiAgICAgICAgbGV0IHB1bGxlZCA9IHRoaXMucHVsbFRvUGxhbmUocCk7XHJcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gcHVsbGVkLno7XHJcbiAgICAgICAgcHVsbGVkLnogPSAwO1xyXG4gICAgICAgIGxldCB2ZWMgPSB0aGlzLnB1c2hUb1dvcmxkKHB1bGxlZCk7XHJcbiAgICAgICAgcmV0dXJuIFt2ZWMsIGRpc3RhbmNlXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjbG9zZXN0UG9pbnQocDogVmVjdG9yMykgOiBbVmVjdG9yMywgbnVtYmVyXSB7XHJcbiAgICAvLyAgICAgLy8gcHJvamVjdCBhIHBvaW50IHRvIHRoZSBwbGFuZSB1c2luZyB0aGUgc2hvcnRlc3QgZGlzdGFuY2VcclxuICAgIC8vICAgICAvLyBOT1RFOiB0aGlzIG1ldGhvZCBpcyBhIHNvcnQgb2YgaGFsZiBpbnZlcnNlIG1hdHJpeCBhcHByb2FjaC4gXHJcbiAgICAvLyAgICAgLy8gICAgICAgdXNpbmcgdGhlIGludmVyc2Ugb2YgdGhlIHBsYW5lIG1hdHJpeCBtaWdodCBqdXN0IGJlIGVhc2llci5cclxuICAgIC8vICAgICBsZXQgW2EsYixjLGRdID0gdGhpcy5nZXRQbGFuZVBhcmFtcygpO1xyXG4gICAgLy8gICAgIGxldCBub3JtYWxpemVyID0gKChhKioyICsgYioqMiArIGMqKjIpKiowLjUpO1xyXG4gICAgLy8gICAgIGxldCBzaWduZWRfZGlzdGFuY2UgPSBhKnAueCArIGIqcC55ICsgYypwLnogKyBkIC8gbm9ybWFsaXplcjtcclxuXHJcbiAgICAvLyAgICAgbGV0IHZ4ID0gKGEgLyBub3JtYWxpemVyKSAqIC1zaWduZWRfZGlzdGFuY2U7XHJcbiAgICAvLyAgICAgbGV0IHZ5ID0gKGIgLyBub3JtYWxpemVyKSAqIC1zaWduZWRfZGlzdGFuY2U7XHJcbiAgICAvLyAgICAgbGV0IHZ6ID0gKGMgLyBub3JtYWxpemVyKSAqIC1zaWduZWRfZGlzdGFuY2U7XHJcblxyXG4gICAgLy8gICAgIGxldCB2ZWMgPSBwLmNsb25lKCkuYWRkKG5ldyBWZWN0b3IzKHZ4LCB2eSwgdnopKTtcclxuICAgIC8vICAgICByZXR1cm4gW3ZlYywgc2lnbmVkX2Rpc3RhbmNlXVxyXG4gICAgLy8gfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/geo/plane.ts\n");

/***/ }),

/***/ "./src/geo/polyline.ts":
/*!*****************************!*\
  !*** ./src/geo/polyline.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Polyline\": () => /* binding */ Polyline\n/* harmony export */ });\nclass Polyline {\r\n    constructor(verts) {\r\n        this.verts = [];\r\n        this.verts = verts;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vcG9seWxpbmUudHM/ZjBkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRU8sTUFBTSxRQUFRO0lBSWpCLFlBQVksS0FBZ0I7UUFGNUIsVUFBSyxHQUFjLEVBQUUsQ0FBQztRQUdsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0NBRUoiLCJmaWxlIjoiLi9zcmMvZ2VvL3BvbHlsaW5lLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvbHlsaW5lIHtcclxuXHJcbiAgICB2ZXJ0czogVmVjdG9yM1tdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IodmVydHM6IFZlY3RvcjNbXSkge1xyXG4gICAgICAgIHRoaXMudmVydHMgPSB2ZXJ0cztcclxuICAgIH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/geo/polyline.ts\n");

/***/ }),

/***/ "./src/geo/rectangle.ts":
/*!******************************!*\
  !*** ./src/geo/rectangle.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Rectangle2\": () => /* binding */ Rectangle2,\n/* harmony export */   \"Rectangle3\": () => /* binding */ Rectangle3\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\nclass Rectangle2 {\r\n    constructor(pose, domain) {\r\n        this.pose = pose;\r\n        this.domain = domain;\r\n    }\r\n    center() {\r\n        return this.pose.transformVector(new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0));\r\n    }\r\n    getVertices() {\r\n        let verts = [\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t0),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t0, this.domain.y.t1),\r\n            new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.domain.x.t1, this.domain.y.t1),\r\n        ];\r\n        verts.forEach((v) => this.pose.transformVector(v));\r\n        return verts;\r\n    }\r\n    to3D() {\r\n        let mat4 = this.pose.toMat4();\r\n        return new Rectangle3(new _plane__WEBPACK_IMPORTED_MODULE_1__.Plane(mat4), this.domain);\r\n    }\r\n}\r\nclass Rectangle3 {\r\n    constructor(plane, domain) {\r\n        this.plane = plane;\r\n        this.domain = domain;\r\n    }\r\n    getCorners() {\r\n        let corners = this.domain.corners();\r\n        let corners3 = corners.map((c) => this.plane.pushToWorld(c.to3D()));\r\n        return corners3;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9nZW8vcmVjdGFuZ2xlLnRzPzE0YjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUV5QztBQVdUO0FBRXpCLE1BQU0sVUFBVTtJQUtuQixZQUFZLElBQWEsRUFBRSxNQUFlO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLGlEQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELFdBQVc7UUFFUCxJQUFJLEtBQUssR0FBRztZQUNSLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLElBQUksaURBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ2xELENBQUM7UUFFRixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksVUFBVSxDQUFDLElBQUkseUNBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNKO0FBRU0sTUFBTSxVQUFVO0lBS25CLFlBQVksS0FBWSxFQUFFLE1BQWU7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEUsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL2dlby9yZWN0YW5nbGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21haW4yIH0gZnJvbSBcIi4uL21hdGgvZG9tYWluXCI7XHJcbmltcG9ydCB7IE1hdHJpeDMsIE1hdHJpeDQgfSBmcm9tIFwiLi4vbWF0aC9tYXRyaXhcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5cclxuLy8gYmFzaWMgMmQgcmVjdGFuZ2xlXHJcbi8vIGEgTWF0cml4MyBhbmQgRG9tYWluMiBpcyB1c2VkLiBcclxuLy8gdGhpcyB3YXksIGEgcmVjdGFuZ2xlIGNhbiBiZSByb3RhdGVkIGFyb3VuZCBhbiBhcmJpcnRhcnkgcG9pbnQgaXQgcmVnYXJkcyBhcyBpdHMgY2VudGVyLlxyXG4vLyBuYW1lOiAgICBjdWJlLnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBSZXByZXNlbnRzIGEgY3ViZSBpbiAzZCBzcGFjZSwgaW4gYSBjZXJ0YWluIHBvc2UuIFxyXG5cclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBHZW8gfSBmcm9tIFwiLi9nZW9cIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi9wbGFuZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlY3RhbmdsZTIge1xyXG5cclxuICAgIHBvc2U6IE1hdHJpeDM7XHJcbiAgICBkb21haW46IERvbWFpbjI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocG9zZTogTWF0cml4MywgZG9tYWluOiBEb21haW4yKSB7XHJcbiAgICAgICAgdGhpcy5wb3NlID0gcG9zZTtcclxuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBjZW50ZXIoKSA6IFZlY3RvcjIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2UudHJhbnNmb3JtVmVjdG9yKG5ldyBWZWN0b3IyKDAsIDApKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWZXJ0aWNlcygpIDogVmVjdG9yMltdIHtcclxuXHJcbiAgICAgICAgbGV0IHZlcnRzID0gW1xyXG4gICAgICAgICAgICBuZXcgVmVjdG9yMih0aGlzLmRvbWFpbi54LnQwLCB0aGlzLmRvbWFpbi55LnQwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcjIodGhpcy5kb21haW4ueC50MSwgdGhpcy5kb21haW4ueS50MCksXHJcbiAgICAgICAgICAgIG5ldyBWZWN0b3IyKHRoaXMuZG9tYWluLngudDAsIHRoaXMuZG9tYWluLnkudDEpLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yMih0aGlzLmRvbWFpbi54LnQxLCB0aGlzLmRvbWFpbi55LnQxKSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB2ZXJ0cy5mb3JFYWNoKCh2KSA9PiB0aGlzLnBvc2UudHJhbnNmb3JtVmVjdG9yKHYpKTtcclxuICAgICAgICByZXR1cm4gdmVydHM7XHJcbiAgICB9XHJcblxyXG4gICAgdG8zRCgpOiBSZWN0YW5nbGUzIHtcclxuICAgICAgICBsZXQgbWF0NCA9IHRoaXMucG9zZS50b01hdDQoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZTMobmV3IFBsYW5lKG1hdDQpLCB0aGlzLmRvbWFpbik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWN0YW5nbGUzIHtcclxuICAgIFxyXG4gICAgcGxhbmU6IFBsYW5lXHJcbiAgICBkb21haW46IERvbWFpbjJcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbGFuZTogUGxhbmUsIGRvbWFpbjogRG9tYWluMikge1xyXG4gICAgICAgIHRoaXMucGxhbmUgPSBwbGFuZTtcclxuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb3JuZXJzKCkgOiBWZWN0b3IzW10ge1xyXG4gICAgICAgIGxldCBjb3JuZXJzID0gdGhpcy5kb21haW4uY29ybmVycygpO1xyXG4gICAgICAgIGxldCBjb3JuZXJzMyA9IGNvcm5lcnMubWFwKChjKSA9PiB0aGlzLnBsYW5lLnB1c2hUb1dvcmxkKGMudG8zRCgpKSk7XHJcbiAgICAgICAgcmV0dXJuIGNvcm5lcnMzO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/geo/rectangle.ts\n");

/***/ }),

/***/ "./src/geo/triangle.ts":
/*!*****************************!*\
  !*** ./src/geo/triangle.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Triangle2\": () => /* binding */ Triangle2,\n/* harmony export */   \"Triangle3\": () => /* binding */ Triangle3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line */ \"./src/geo/line.ts\");\n/* harmony import */ var _plane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plane */ \"./src/geo/plane.ts\");\n\r\n\r\n\r\n\r\nclass Triangle2 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector2Array.fromList([this.a, this.b, this.c]);\r\n    }\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.scaled(bari.x);\r\n        let b = this.b.scaled(bari.y);\r\n        let c = this.c.scaled(bari.z);\r\n        return a.add(b).add(c);\r\n    }\r\n    closestPoint(point) {\r\n        // figure out roughly where the point is. \r\n        // note: \r\n        let ab = point.sign(this.a, this.b);\r\n        let bc = point.sign(this.b, this.c);\r\n        let ca = point.sign(this.c, this.a);\r\n        // if its fully within, return it!\r\n        if ((ab < 0 && bc < 0 && ca < 0) ||\r\n            (ab > 0 && bc > 0 && ca > 0)) {\r\n            console.log(\"fully inside!\");\r\n            return point;\r\n        }\r\n        else {\r\n            let abs = Math.abs(ab);\r\n            let bcs = Math.abs(bc);\r\n            let cas = Math.abs(ca);\r\n            if (abs < bcs && abs < cas) {\r\n                // ab\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.a, this.b).closestPoint(point);\r\n            }\r\n            else if (bcs < cas) {\r\n                // bc\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.b, this.c).closestPoint(point);\r\n            }\r\n            else {\r\n                // ca\r\n                return new _line__WEBPACK_IMPORTED_MODULE_2__.LineCurve2(this.c, this.a).closestPoint(point);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Triangle3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    getPlane() {\r\n        return _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.from3pt(this.a, this.b, this.c);\r\n    }\r\n    to2D(plane = _plane__WEBPACK_IMPORTED_MODULE_3__.Plane.WorldXY()) {\r\n        return new Triangle2(plane.pullToPlane(this.a).to2D(), plane.pullToPlane(this.b).to2D(), plane.pullToPlane(this.c).to2D());\r\n    }\r\n    closestPoint(point) {\r\n        let plane = this.getPlane();\r\n        let [cp, _] = plane.closestPoint(point);\r\n        let planeCP = plane.pullToPlane(cp);\r\n        let planeTriangle = this.to2D(plane);\r\n        return point;\r\n    }\r\n    // Transcribed from Christer Ericson's Real-Time Collision Detection:\r\n    // http://realtimecollisiondetection.net/\r\n    toBarycentric(point) {\r\n        let v0 = this.b.subbed(this.a);\r\n        let v1 = this.c.subbed(this.a);\r\n        let v2 = point.subbed(this.a);\r\n        let d00 = v0.dot(v0);\r\n        let d01 = v0.dot(v1);\r\n        let d11 = v1.dot(v1);\r\n        let d20 = v2.dot(v0);\r\n        let d21 = v2.dot(v1);\r\n        let denom = d00 * d11 - d01 * d01;\r\n        let v = (d11 * d20 - d01 * d21) / denom;\r\n        let w = (d00 * d21 - d01 * d20) / denom;\r\n        let u = 1.0 - v - w;\r\n        return new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(u, v, w);\r\n    }\r\n    fromBarycentric(bari) {\r\n        let a = this.a.clone().scale(bari.x);\r\n        let b = this.b.clone().scale(bari.y);\r\n        let c = this.c.clone().scale(bari.z);\r\n        return a.added(b).add(c);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geo/triangle.ts\n");

/***/ }),

/***/ "./src/img/Image.ts":
/*!**************************!*\
  !*** ./src/img/Image.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeonImage\": () => /* binding */ GeonImage\n/* harmony export */ });\n// image.ts\r\n// author: Jos Feenstra\r\n// purpose: wrapper around the ImageData class, \r\n// - in order to get more functionality out of it\r\n// \r\n// note: named GeonImage to not collide with Image classes.\r\n// TODO : x and y are not the same as i and j, and used inconsistently. fix this. \r\n// TODO : now that GEON is a package, we can use G.Image. the Geon suffix is not needed anymore is not needed anymore! \r\nconst acceptedKernels = [3, 5, 7, 9];\r\nclass GeonImage {\r\n    constructor(width, height, pixelSize = 4) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixelSize = pixelSize;\r\n        this.data = new Uint8ClampedArray(this.width * this.height * this.pixelSize);\r\n        this.data.fill(0);\r\n    }\r\n    static fromImageData(id) {\r\n        let image = new GeonImage(id.width, id.height);\r\n        image.setData(id.data);\r\n        return image;\r\n    }\r\n    toImageData() {\r\n        // imagedata requires pixelsize of 4.\r\n        if (this.pixelSize != 4)\r\n            throw \"pixelsize must be 4 for toImageData to work\";\r\n        return new ImageData(this.data, this.width, this.height);\r\n    }\r\n    setData(data) {\r\n        if (data.length != (this.height * this.width * this.pixelSize))\r\n            throw \"data.length does not match width * height \";\r\n        this.data = data;\r\n    }\r\n    clone() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        image.setData(this.data);\r\n        return image;\r\n    }\r\n    fill(pixel) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, pixel);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    fillEvery(filler) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.set(j, i, filler());\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    includes(x, y) {\r\n        return (x < this.width && x >= 0 && y < this.height && y >= 0);\r\n    }\r\n    set(i, j, pixel) {\r\n        this.data[4 * ((j * this.width + i))] = pixel[0];\r\n        this.data[4 * ((j * this.width + i)) + 1] = pixel[1];\r\n        this.data[4 * ((j * this.width + i)) + 2] = pixel[2];\r\n        this.data[4 * ((j * this.width + i)) + 3] = pixel[3];\r\n    }\r\n    get(i, j) {\r\n        return [\r\n            this.data[4 * (j * this.width + i)],\r\n            this.data[4 * (j * this.width + i) + 1],\r\n            this.data[4 * (j * this.width + i) + 2],\r\n            this.data[4 * (j * this.width + i) + 3]\r\n        ];\r\n    }\r\n    flipHor() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                let jMirror = this.width - 1 - j;\r\n                image.set(j, i, this.get(jMirror, i));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    flipVer() {\r\n        let image = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let i = 0; i < this.height; i++) {\r\n            let iMirror = this.height - 1 - i;\r\n            for (let j = 0; j < this.width; j++) {\r\n                image.set(j, i, this.get(j, iMirror));\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    applyKernel(kernel) {\r\n        // determine kernel size\r\n        let size = kernel.count();\r\n        let radius = (size / 2) - 0.5;\r\n        let image = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                let pixel = this.getWithKernel(i, j, kernel, radius);\r\n                image.set(i - radius, j - radius, pixel);\r\n            }\r\n        }\r\n        return image; // succes \r\n    }\r\n    getMinMax() {\r\n        // get the minimum and maximum pixel value\r\n        // assumes pixelsize = 1\r\n        let min = Infinity;\r\n        let max = 0;\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (this.data[i] < min) {\r\n                min = this.data[i];\r\n            }\r\n            else if (this.data[i] > max) {\r\n                max = this.data[i];\r\n            }\r\n        }\r\n        return [min, max];\r\n    }\r\n    applyThreshold(lower, upper) {\r\n        return this.apply((x, y) => {\r\n            let pixel = this.get(x, y);\r\n            if (pixel[0] < lower) {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            else if (pixel[0] > upper) {\r\n                return [255, 255, 255, 255];\r\n            }\r\n            else {\r\n                return pixel;\r\n            }\r\n        });\r\n    }\r\n    apply(filler) {\r\n        let copy = new GeonImage(this.width, this.height, this.pixelSize);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                copy.set(x, y, filler(x, y));\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    applyNMS() {\r\n        // determine kernel size\r\n        let size = 3;\r\n        let radius = (size / 2) - 0.5;\r\n        let copy = new GeonImage(this.width - radius * 2, this.height - radius * 2, this.pixelSize);\r\n        // old image space\r\n        for (let i = radius; i < this.width - radius; i++) {\r\n            for (let j = radius; j < this.height - radius; j++) {\r\n                // let pixel = this.getWithKernel(i, j, kernel, radius)\r\n                // copy.set(i-radius, j-radius, pixel);\r\n            }\r\n        }\r\n        // img.eachPixel(3, function(x, y, c, n) {\r\n        //     if (n[1][1] > n[0][1] && n[1][1] > n[2][1]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][2] && n[1][1] > n[2][0]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[1][0] && n[1][1] > n[1][2]) {\r\n        //         copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         copy.data[x][y] = 0;\r\n        //     }\r\n        //     if (n[1][1] > n[0][0] && n[1][1] > n[2][2]) {\r\n        //         return copy.data[x][y] = n[1][1];\r\n        //     } else {\r\n        //         return copy.data[x][y] = 0;\r\n        //     }\r\n        // });\r\n        return copy;\r\n    }\r\n    getWithKernel(i, j, kernel, radius) {\r\n        // kernel space\r\n        let sum = [0, 0, 0, 255];\r\n        let [dimx, dimy] = kernel.getDimensions();\r\n        for (let ki = 0; ki < dimx; ki++) {\r\n            for (let kj = 0; kj < dimy; kj++) {\r\n                let weight = kernel.get(ki, kj);\r\n                let pixel = this.get(i + ki - radius, j + kj - radius);\r\n                for (let i = 0; i < 3; i++) {\r\n                    sum[i] += pixel[i] * weight;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    setAplha(a) {\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                this.set(x, y, [pixel[0], pixel[1], pixel[2], a]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        // scale the image to a new width and height, using nearest neighbour\r\n        return this.resize(Math.round(this.width * scaleX), Math.round(this.height * scaleY));\r\n    }\r\n    resize(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        const x_factor = (1 / image.width) * old.width;\r\n        const y_factor = (1 / image.height) * old.height;\r\n        for (let y = 0; y < image.height; y++) {\r\n            for (let x = 0; x < image.width; x++) {\r\n                let pixel = old.get(Math.round(x * x_factor), Math.round(y * y_factor));\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    // add borders till this size is achieved\r\n    buffer(width, height) {\r\n        // resize the image to a new width and height, using nearest neighbour\r\n        const image = new GeonImage(width, height, this.pixelSize);\r\n        const old = this;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // console.log(x, y);\r\n                let pixel = old.includes(x, y) ? old.get(x, y) : [0, 0, 0, 255];\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        // for (let y = 0; y < height; y++) {\r\n        //     for (let x = 0; x < width; x++) {\r\n        //         image.set(x, y, [x,0,0,255]);\r\n        //     }\r\n        // }\r\n        // build some simple image instead to test\r\n        // for (let i = 0; i < image.data.length / 4; i++) {\r\n        //     image.data[i*4 + 0] = i % 255;\r\n        //     image.data[i*4 + 1] = 0;\r\n        //     image.data[i*4 + 2] = 0;\r\n        //     image.data[i*4 + 3] = 255;\r\n        // }\r\n        return image;\r\n    }\r\n    trimWithDomain(dom) {\r\n        const x1 = Math.round(dom.x.t0);\r\n        const x2 = Math.round(dom.x.t1);\r\n        const y1 = Math.round(dom.y.t0);\r\n        const y2 = Math.round(dom.y.t1);\r\n        return this.trim(x1, y1, x2, y2);\r\n    }\r\n    trim(x1, y1, x2, y2) {\r\n        // return a hardcopy of this particular window\r\n        const imageWidth = x2 - x1;\r\n        const imageHeight = y2 - y1;\r\n        const image = new GeonImage(imageWidth, imageHeight, this.pixelSize);\r\n        for (let y = 0; y < imageHeight; y++) {\r\n            for (let x = 0; x < imageWidth; x++) {\r\n                let pixel = this.get(x + x1, y + y1);\r\n                image.set(x, y, pixel);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toGreyscale() {\r\n        if (this.pixelSize != 4)\r\n            throw \"please, only use this when pixelsize is 4\";\r\n        let image = new GeonImage(this.width, this.height, 4);\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let pixel = this.get(x, y);\r\n                let avg = (pixel[0] + pixel[1] + pixel[2]) / 3;\r\n                image.set(x, y, [avg, avg, avg, 255]);\r\n            }\r\n        }\r\n        return image;\r\n    }\r\n    toRGBA() {\r\n        // if (this.pixelSize != 1) throw \"please, only use this when pixelsize is 1\"\r\n        return this;\r\n        // let image = new GeonImage(this.width, this.height, 4);\r\n        // for (let y = 0; y < this.height; y++) {\r\n        //     for (let x = 0; x < this.width; x++) {\r\n        //         let pixel = this.get(x,y);\r\n        //         let val = pixel[0];\r\n        //         image.set(x, y, [val, val, val, 255]);\r\n        //     }\r\n        // }\r\n        // return image;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/Image.ts\n");

/***/ }),

/***/ "./src/img/kernels.ts":
/*!****************************!*\
  !*** ./src/img/kernels.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Kernels\": () => /* binding */ Kernels\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n\r\n// kernels\r\nclass Kernels {\r\n    // inspired from https://github.com/yuta1984/CannyJS/blob/master/canny.js\r\n    static generateGaussianKernel(sigmma, size) {\r\n        // messy, probably auto-generated \r\n        var e, gaussian, i, j, kernel, s, sum, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;\r\n        s = sigmma;\r\n        e = 2.718;\r\n        kernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        sum = 0;\r\n        for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n            x = -(size - 1) / 2 + i;\r\n            for (j = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {\r\n                y = -(size - 1) / 2 + j;\r\n                gaussian = (1 / (2 * Math.PI * s * s)) * Math.pow(e, -(x * x + y * y) / (2 * s * s));\r\n                kernel.set(i, j, gaussian);\r\n                sum += gaussian;\r\n            }\r\n        }\r\n        for (i = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {\r\n            for (j = _l = 0, _ref3 = size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {\r\n                kernel.set(i, j, (kernel.get(i, j) / sum));\r\n            }\r\n        }\r\n        return kernel;\r\n    }\r\n}\r\nKernels.SmoothKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 1, 1,\r\n    1, 1, 1,\r\n    1, 1, 1\r\n]).forEachValue((i) => i * 1 / 9);\r\nKernels.SmoothKernel5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1\r\n]).forEachValue((v) => v * 1 / 25);\r\nKernels.Gauss5 = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(5, 5, [\r\n    2, 4, 5, 4, 2,\r\n    4, 9, 12, 9, 4,\r\n    5, 12, 15, 12, 5,\r\n    4, 9, 12, 9, 4,\r\n    2, 4, 5, 4, 2,\r\n]).forEachValue((v) => v * 1 / 159);\r\nKernels.TestKernel = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    0, 0, 0,\r\n    -1, 0, 1,\r\n]);\r\nKernels.SobelLeft = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 2, 1,\r\n    0, 0, 0,\r\n    -1, -2, -1,\r\n]);\r\nKernels.SobelRight = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    -1, -2, -1,\r\n    0, 0, 0,\r\n    1, 2, 1,\r\n]);\r\nKernels.SobelUp = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    1, 0, -1,\r\n    2, 0, -2,\r\n    1, 0, -1,\r\n]);\r\nKernels.SobelDown = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(3, 3, [\r\n    -1, 0, 1,\r\n    -2, 0, 2,\r\n    -1, 0, 1,\r\n]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/img/kernels.ts\n");

/***/ }),

/***/ "./src/lib.ts":
/*!********************!*\
  !*** ./src/lib.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Perlin\": () => /* reexport safe */ _algorithms_perlin_noise__WEBPACK_IMPORTED_MODULE_1__.Perlin,\n/* harmony export */   \"App\": () => /* reexport safe */ _app_app__WEBPACK_IMPORTED_MODULE_2__.App,\n/* harmony export */   \"FloatMatrix\": () => /* reexport safe */ _data_float_matrix__WEBPACK_IMPORTED_MODULE_3__.FloatMatrix,\n/* harmony export */   \"HashTable\": () => /* reexport safe */ _data_hash_table__WEBPACK_IMPORTED_MODULE_4__.HashTable,\n/* harmony export */   \"IntCube\": () => /* reexport safe */ _data_int_cube__WEBPACK_IMPORTED_MODULE_5__.IntCube,\n/* harmony export */   \"IntMatrix\": () => /* reexport safe */ _data_int_matrix__WEBPACK_IMPORTED_MODULE_6__.IntMatrix,\n/* harmony export */   \"LinkedList\": () => /* reexport safe */ _data_linked_list__WEBPACK_IMPORTED_MODULE_7__.LinkedList,\n/* harmony export */   \"Vector2Array\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_8__.Vector2Array,\n/* harmony export */   \"Vector3Array\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_8__.Vector3Array,\n/* harmony export */   \"getGeneralFloatMatrix\": () => /* reexport safe */ _data_vector_array__WEBPACK_IMPORTED_MODULE_8__.getGeneralFloatMatrix,\n/* harmony export */   \"Circle2\": () => /* reexport safe */ _geo_circle2__WEBPACK_IMPORTED_MODULE_9__.Circle2,\n/* harmony export */   \"Circle3\": () => /* reexport safe */ _geo_circle3__WEBPACK_IMPORTED_MODULE_10__.Circle3,\n/* harmony export */   \"Cube\": () => /* reexport safe */ _geo_cube__WEBPACK_IMPORTED_MODULE_11__.Cube,\n/* harmony export */   \"Geo\": () => /* reexport safe */ _geo_geo__WEBPACK_IMPORTED_MODULE_12__.Geo,\n/* harmony export */   \"LineCurve2\": () => /* reexport safe */ _geo_line__WEBPACK_IMPORTED_MODULE_14__.LineCurve2,\n/* harmony export */   \"Plane\": () => /* reexport safe */ _geo_plane__WEBPACK_IMPORTED_MODULE_15__.Plane,\n/* harmony export */   \"Polyline\": () => /* reexport safe */ _geo_polyline__WEBPACK_IMPORTED_MODULE_16__.Polyline,\n/* harmony export */   \"Rectangle2\": () => /* reexport safe */ _geo_rectangle__WEBPACK_IMPORTED_MODULE_17__.Rectangle2,\n/* harmony export */   \"Rectangle3\": () => /* reexport safe */ _geo_rectangle__WEBPACK_IMPORTED_MODULE_17__.Rectangle3,\n/* harmony export */   \"Triangle2\": () => /* reexport safe */ _geo_triangle__WEBPACK_IMPORTED_MODULE_18__.Triangle2,\n/* harmony export */   \"Triangle3\": () => /* reexport safe */ _geo_triangle__WEBPACK_IMPORTED_MODULE_18__.Triangle3,\n/* harmony export */   \"GeonImage\": () => /* reexport safe */ _img_Image__WEBPACK_IMPORTED_MODULE_19__.GeonImage,\n/* harmony export */   \"Kernels\": () => /* reexport safe */ _img_kernels__WEBPACK_IMPORTED_MODULE_20__.Kernels,\n/* harmony export */   \"Const\": () => /* reexport safe */ _math_const__WEBPACK_IMPORTED_MODULE_21__.Const,\n/* harmony export */   \"Domain\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_22__.Domain,\n/* harmony export */   \"Domain2\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_22__.Domain2,\n/* harmony export */   \"Domain3\": () => /* reexport safe */ _math_domain__WEBPACK_IMPORTED_MODULE_22__.Domain3,\n/* harmony export */   \"GeonMath\": () => /* reexport safe */ _math_math__WEBPACK_IMPORTED_MODULE_23__.GeonMath,\n/* harmony export */   \"Matrix3\": () => /* reexport safe */ _math_matrix__WEBPACK_IMPORTED_MODULE_24__.Matrix3,\n/* harmony export */   \"Matrix4\": () => /* reexport safe */ _math_matrix__WEBPACK_IMPORTED_MODULE_24__.Matrix4,\n/* harmony export */   \"Quaternion\": () => /* reexport safe */ _math_quaternion__WEBPACK_IMPORTED_MODULE_25__.Quaternion,\n/* harmony export */   \"Ray\": () => /* reexport safe */ _math_ray__WEBPACK_IMPORTED_MODULE_26__.Ray,\n/* harmony export */   \"Stat\": () => /* reexport safe */ _math_statistics__WEBPACK_IMPORTED_MODULE_27__.Stat,\n/* harmony export */   \"Util\": () => /* reexport safe */ _math_util__WEBPACK_IMPORTED_MODULE_28__.Util,\n/* harmony export */   \"Vector2\": () => /* reexport safe */ _math_vector__WEBPACK_IMPORTED_MODULE_29__.Vector2,\n/* harmony export */   \"Vector3\": () => /* reexport safe */ _math_vector__WEBPACK_IMPORTED_MODULE_29__.Vector3,\n/* harmony export */   \"Graph\": () => /* reexport safe */ _mesh_graph__WEBPACK_IMPORTED_MODULE_30__.Graph,\n/* harmony export */   \"LineArray\": () => /* reexport safe */ _mesh_line_array__WEBPACK_IMPORTED_MODULE_31__.LineArray,\n/* harmony export */   \"getDefaultIndices\": () => /* reexport safe */ _mesh_line_array__WEBPACK_IMPORTED_MODULE_31__.getDefaultIndices,\n/* harmony export */   \"Mesh\": () => /* reexport safe */ _mesh_mesh__WEBPACK_IMPORTED_MODULE_32__.Mesh,\n/* harmony export */   \"NormalKind\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_33__.NormalKind,\n/* harmony export */   \"RenderMesh\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_33__.RenderMesh,\n/* harmony export */   \"RenderMeshKind\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_33__.RenderMeshKind,\n/* harmony export */   \"meshFromObj\": () => /* reexport safe */ _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_33__.meshFromObj,\n/* harmony export */   \"TopoMesh\": () => /* reexport safe */ _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_34__.TopoMesh,\n/* harmony export */   \"BillBoardRenderer\": () => /* reexport safe */ _render_billboard_renderer__WEBPACK_IMPORTED_MODULE_35__.BillBoardRenderer,\n/* harmony export */   \"TextRenderer\": () => /* reexport safe */ _render_billboard_renderer__WEBPACK_IMPORTED_MODULE_35__.TextRenderer,\n/* harmony export */   \"Camera\": () => /* reexport safe */ _render_camera__WEBPACK_IMPORTED_MODULE_36__.Camera,\n/* harmony export */   \"DotRenderer2\": () => /* reexport safe */ _render_dot_renderer2__WEBPACK_IMPORTED_MODULE_37__.DotRenderer2,\n/* harmony export */   \"DotRenderer3\": () => /* reexport safe */ _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_38__.DotRenderer3,\n/* harmony export */   \"LineRenderer\": () => /* reexport safe */ _render_line_renderer__WEBPACK_IMPORTED_MODULE_39__.LineRenderer,\n/* harmony export */   \"MeshDebugRenderer\": () => /* reexport safe */ _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_40__.MeshDebugRenderer,\n/* harmony export */   \"NormalRenderer\": () => /* reexport safe */ _render_mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_41__.NormalRenderer,\n/* harmony export */   \"RectangleRenderer\": () => /* reexport safe */ _render_rectangle_renderer__WEBPACK_IMPORTED_MODULE_42__.RectangleRenderer,\n/* harmony export */   \"DrawSpeed\": () => /* reexport safe */ _render_renderer__WEBPACK_IMPORTED_MODULE_43__.DrawSpeed,\n/* harmony export */   \"Renderer\": () => /* reexport safe */ _render_renderer__WEBPACK_IMPORTED_MODULE_43__.Renderer,\n/* harmony export */   \"MultiRenderable\": () => /* reexport safe */ _render_scene__WEBPACK_IMPORTED_MODULE_44__.MultiRenderable,\n/* harmony export */   \"Renderable\": () => /* reexport safe */ _render_scene__WEBPACK_IMPORTED_MODULE_44__.Renderable,\n/* harmony export */   \"Scene\": () => /* reexport safe */ _render_scene__WEBPACK_IMPORTED_MODULE_44__.Scene,\n/* harmony export */   \"ShadedMeshRenderer\": () => /* reexport safe */ _render_shaded_mesh_renderer__WEBPACK_IMPORTED_MODULE_45__.ShadedMeshRenderer,\n/* harmony export */   \"SimpleMeshRenderer\": () => /* reexport safe */ _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_46__.SimpleMeshRenderer,\n/* harmony export */   \"TextureMeshRenderer\": () => /* reexport safe */ _render_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_47__.TextureMeshRenderer,\n/* harmony export */   \"addDropFileEventListeners\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_48__.addDropFileEventListeners,\n/* harmony export */   \"loadImageFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_48__.loadImageFromFile,\n/* harmony export */   \"loadJSONFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_48__.loadJSONFromFile,\n/* harmony export */   \"loadTextFromFile\": () => /* reexport safe */ _system_domwrappers__WEBPACK_IMPORTED_MODULE_48__.loadTextFromFile,\n/* harmony export */   \"FpsCounter\": () => /* reexport safe */ _system_fpsCounter__WEBPACK_IMPORTED_MODULE_49__.FpsCounter,\n/* harmony export */   \"InputState\": () => /* reexport safe */ _system_input_state__WEBPACK_IMPORTED_MODULE_50__.InputState,\n/* harmony export */   \"Parameter\": () => /* reexport safe */ _system_ui__WEBPACK_IMPORTED_MODULE_51__.Parameter,\n/* harmony export */   \"UI\": () => /* reexport safe */ _system_ui__WEBPACK_IMPORTED_MODULE_51__.UI\n/* harmony export */ });\n/* harmony import */ var _algorithms_marching_cubes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/marching-cubes */ \"./src/algorithms/marching-cubes.ts\");\n/* harmony import */ var _algorithms_perlin_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/perlin-noise */ \"./src/algorithms/perlin-noise.ts\");\n/* harmony import */ var _app_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app */ \"./src/app/app.ts\");\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _data_int_cube__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data/int-cube */ \"./src/data/int-cube.ts\");\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_linked_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./data/linked-list */ \"./src/data/linked-list.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _geo_circle2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./geo/circle2 */ \"./src/geo/circle2.ts\");\n/* harmony import */ var _geo_circle3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./geo/circle3 */ \"./src/geo/circle3.ts\");\n/* harmony import */ var _geo_cube__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./geo/cube */ \"./src/geo/cube.ts\");\n/* harmony import */ var _geo_geo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./geo/geo */ \"./src/geo/geo.ts\");\n/* harmony import */ var _geo_intersect__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./geo/intersect */ \"./src/geo/intersect.ts\");\n/* harmony import */ var _geo_line__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./geo/line */ \"./src/geo/line.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _geo_polyline__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./geo/polyline */ \"./src/geo/polyline.ts\");\n/* harmony import */ var _geo_rectangle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./geo/rectangle */ \"./src/geo/rectangle.ts\");\n/* harmony import */ var _geo_triangle__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./geo/triangle */ \"./src/geo/triangle.ts\");\n/* harmony import */ var _img_Image__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./img/Image */ \"./src/img/Image.ts\");\n/* harmony import */ var _img_kernels__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./img/kernels */ \"./src/img/kernels.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_domain__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./math/domain */ \"./src/math/domain.ts\");\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./math/math */ \"./src/math/math.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_quaternion__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./math/quaternion */ \"./src/math/quaternion.ts\");\n/* harmony import */ var _math_ray__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./math/ray */ \"./src/math/ray.ts\");\n/* harmony import */ var _math_statistics__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./math/statistics */ \"./src/math/statistics.ts\");\n/* harmony import */ var _math_util__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./math/util */ \"./src/math/util.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_graph__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./mesh/graph */ \"./src/mesh/graph.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _mesh_mesh__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./mesh/mesh */ \"./src/mesh/mesh.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _mesh_topo_mesh__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./mesh/topo-mesh */ \"./src/mesh/topo-mesh.ts\");\n/* harmony import */ var _render_billboard_renderer__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./render/billboard-renderer */ \"./src/render/billboard-renderer.ts\");\n/* harmony import */ var _render_camera__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./render/camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _render_dot_renderer2__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./render/dot-renderer2 */ \"./src/render/dot-renderer2.ts\");\n/* harmony import */ var _render_dot_renderer3__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./render/dot-renderer3 */ \"./src/render/dot-renderer3.ts\");\n/* harmony import */ var _render_line_renderer__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./render/line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _render_mesh_debug_renderer__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./render/mesh-debug-renderer */ \"./src/render/mesh-debug-renderer.ts\");\n/* harmony import */ var _render_mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./render/mesh-normals-renderer */ \"./src/render/mesh-normals-renderer.ts\");\n/* harmony import */ var _render_rectangle_renderer__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./render/rectangle-renderer */ \"./src/render/rectangle-renderer.ts\");\n/* harmony import */ var _render_renderer__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./render/renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _render_scene__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./render/scene */ \"./src/render/scene.ts\");\n/* harmony import */ var _render_shaded_mesh_renderer__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./render/shaded-mesh-renderer */ \"./src/render/shaded-mesh-renderer.ts\");\n/* harmony import */ var _render_simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./render/simple-mesh-renderer */ \"./src/render/simple-mesh-renderer.ts\");\n/* harmony import */ var _render_texture_mesh_renderer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./render/texture-mesh-renderer */ \"./src/render/texture-mesh-renderer.ts\");\n/* harmony import */ var _system_domwrappers__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./system/domwrappers */ \"./src/system/domwrappers.ts\");\n/* harmony import */ var _system_fpsCounter__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./system/fpsCounter */ \"./src/system/fpsCounter.ts\");\n/* harmony import */ var _system_input_state__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./system/input-state */ \"./src/system/input-state.ts\");\n/* harmony import */ var _system_ui__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./system/ui */ \"./src/system/ui.ts\");\n// purpose: make sure the entire library is callable from one point.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9saWIudHM/ODRmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9FQUFvRTtBQUV4QjtBQUNGO0FBRWhCO0FBRVU7QUFDRjtBQUNGO0FBQ0U7QUFDQztBQUNDO0FBRU47QUFDQTtBQUNIO0FBQ0Q7QUFDTTtBQUNMO0FBQ0M7QUFDRztBQUNDO0FBQ0Q7QUFFSDtBQUNFO0FBRUQ7QUFDQztBQUNGO0FBQ0U7QUFDSTtBQUNQO0FBQ087QUFDTjtBQUNFO0FBRUQ7QUFDSztBQUNOO0FBQ087QUFDRjtBQUVXO0FBQ1o7QUFDTztBQUNBO0FBQ0E7QUFDTTtBQUNFO0FBQ0g7QUFDVjtBQUNIO0FBQ2U7QUFDQTtBQUNDO0FBRVY7QUFDRDtBQUNDO0FBQ1QiLCJmaWxlIjoiLi9zcmMvbGliLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVycG9zZTogbWFrZSBzdXJlIHRoZSBlbnRpcmUgbGlicmFyeSBpcyBjYWxsYWJsZSBmcm9tIG9uZSBwb2ludC5cclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2FsZ29yaXRobXMvbWFyY2hpbmctY3ViZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYWxnb3JpdGhtcy9wZXJsaW4tbm9pc2VcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2FwcC9hcHBcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvZmxvYXQtbWF0cml4XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvaGFzaC10YWJsZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kYXRhL2ludC1jdWJlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvaW50LW1hdHJpeFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kYXRhL2xpbmtlZC1saXN0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vY2lyY2xlMlwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vY2lyY2xlM1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vY3ViZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vZ2VvXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlby9pbnRlcnNlY3RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL2xpbmVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ2VvL3BsYW5lXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlby9wb2x5bGluZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW8vcmVjdGFuZ2xlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlby90cmlhbmdsZVwiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vaW1nL0ltYWdlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ltZy9rZXJuZWxzXCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL2NvbnN0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21hdGgvZG9tYWluXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21hdGgvbWF0aFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL21hdHJpeFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL3F1YXRlcm5pb25cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9yYXlcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbWF0aC9zdGF0aXN0aWNzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21hdGgvdXRpbFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL3ZlY3RvclwiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vbWVzaC9ncmFwaFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbWVzaC9tZXNoXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21lc2gvcmVuZGVyLW1lc2hcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbWVzaC90b3BvLW1lc2hcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlci9iaWxsYm9hcmQtcmVuZGVyZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyL2NhbWVyYVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvZG90LXJlbmRlcmVyMlwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvZG90LXJlbmRlcmVyM1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvbGluZS1yZW5kZXJlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvbWVzaC1kZWJ1Zy1yZW5kZXJlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvbWVzaC1ub3JtYWxzLXJlbmRlcmVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlci9yZWN0YW5nbGUtcmVuZGVyZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyL3JlbmRlcmVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlci9zY2VuZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yZW5kZXIvc2hhZGVkLW1lc2gtcmVuZGVyZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcmVuZGVyL3NpbXBsZS1tZXNoLXJlbmRlcmVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3JlbmRlci90ZXh0dXJlLW1lc2gtcmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL3N5c3RlbS9kb213cmFwcGVyc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0vZnBzQ291bnRlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3lzdGVtL3VpXCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib.ts\n");

/***/ }),

/***/ "./src/math/const.ts":
/*!***************************!*\
  !*** ./src/math/const.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Const\": () => /* binding */ Const\n/* harmony export */ });\n// name:    const.ts\r\n// author:  Jos Feenstra\r\n// purpose: Certain math constances\r\n// todo:    These are somewhat like the settings of the entire application. This could be expanded upon (json's, in-app functionalitiy)\r\nclass Const {\r\n    static IsRouglyZero(value) {\r\n        return Math.abs(value) < this.TOLERANCE;\r\n    }\r\n}\r\nConst.TOLERANCE = 0.0001; // tolerance used for determining if 1 value is the same as some other value, relatively speaking\r\nConst.TOL_SQUARED = Math.pow(Const.TOLERANCE, 2);\r\n// ----- Line Render Settings ----- \r\nConst.PLANE_RENDER_LINECOUNT = 9;\r\nConst.PLANE_RENDER_LINEDISTANCE = .3;\r\nConst.CIRCLE_SEGMENTS = 100;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL2NvbnN0LnRzP2Y2NDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsbUNBQW1DO0FBQ25DLHVJQUF1STtBQUVoSSxNQUFNLEtBQUs7SUFXZCxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQWE7UUFDN0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQzs7QUFaTSxlQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsaUdBQWlHO0FBQ3JILGlCQUFXLEdBQUcsY0FBSyxDQUFDLFNBQVMsRUFBSSxDQUFDLEVBQUM7QUFFMUMsb0NBQW9DO0FBQzdCLDRCQUFzQixHQUFHLENBQUMsQ0FBQztBQUMzQiwrQkFBeUIsR0FBRyxFQUFFLENBQUM7QUFFL0IscUJBQWUsR0FBRyxHQUFHLENBQUMiLCJmaWxlIjoiLi9zcmMvbWF0aC9jb25zdC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIGNvbnN0LnRzXHJcbi8vIGF1dGhvcjogIEpvcyBGZWVuc3RyYVxyXG4vLyBwdXJwb3NlOiBDZXJ0YWluIG1hdGggY29uc3RhbmNlc1xyXG4vLyB0b2RvOiAgICBUaGVzZSBhcmUgc29tZXdoYXQgbGlrZSB0aGUgc2V0dGluZ3Mgb2YgdGhlIGVudGlyZSBhcHBsaWNhdGlvbi4gVGhpcyBjb3VsZCBiZSBleHBhbmRlZCB1cG9uIChqc29uJ3MsIGluLWFwcCBmdW5jdGlvbmFsaXRpeSlcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zdCB7XHJcbiAgICBzdGF0aWMgVE9MRVJBTkNFID0gMC4wMDAxOyAvLyB0b2xlcmFuY2UgdXNlZCBmb3IgZGV0ZXJtaW5pbmcgaWYgMSB2YWx1ZSBpcyB0aGUgc2FtZSBhcyBzb21lIG90aGVyIHZhbHVlLCByZWxhdGl2ZWx5IHNwZWFraW5nXHJcbiAgICBzdGF0aWMgVE9MX1NRVUFSRUQgPSBDb25zdC5UT0xFUkFOQ0UgKiogMjtcclxuXHJcbiAgICAvLyAtLS0tLSBMaW5lIFJlbmRlciBTZXR0aW5ncyAtLS0tLSBcclxuICAgIHN0YXRpYyBQTEFORV9SRU5ERVJfTElORUNPVU5UID0gOTtcclxuICAgIHN0YXRpYyBQTEFORV9SRU5ERVJfTElORURJU1RBTkNFID0gLjM7XHJcblxyXG4gICAgc3RhdGljIENJUkNMRV9TRUdNRU5UUyA9IDEwMDtcclxuXHJcblxyXG4gICAgc3RhdGljIElzUm91Z2x5WmVybyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHZhbHVlKSA8IHRoaXMuVE9MRVJBTkNFO1xyXG4gICAgfVxyXG59IFxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/math/const.ts\n");

/***/ }),

/***/ "./src/math/domain.ts":
/*!****************************!*\
  !*** ./src/math/domain.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Domain\": () => /* binding */ Domain,\n/* harmony export */   \"Domain2\": () => /* binding */ Domain2,\n/* harmony export */   \"Domain3\": () => /* binding */ Domain3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// domain.ts\r\n// \r\n// author: Jos Feenstra\r\n// purpose: general representation of a domain / range / bound of numbers\r\n//          \r\n\r\n\r\nclass Domain {\r\n    constructor(t0 = 0.0, t1 = 1.0) {\r\n        // if (t0 > t1) console.error(\"created a domain with negative size.\");\r\n        // if (t0 == t1) console.warn(\"created a domain with size is 0.0. could cause problems\");\r\n        this.t0 = t0;\r\n        this.t1 = t1;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain(-r, r);\r\n    }\r\n    static fromInclude(data) {\r\n        // create a new domain which bounds all parsed values\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] < min)\r\n                min = data[i];\r\n            if (data[i] > max)\r\n                max = data[i];\r\n        }\r\n        return new Domain(min, max);\r\n    }\r\n    offset(t0Offset, t1Offset) {\r\n        this.t0 += t0Offset;\r\n        this.t1 += t1Offset;\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return value >= this.t0 && value <= this.t1;\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return this.t1 - this.t0;\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return (value - this.t0) / this.size();\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return t * this.size() + this.t0;\r\n    }\r\n    remap(value, other = new Domain()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    *iter(count) {\r\n        // iterate over this Domain 'count' number of times \r\n        let step = this.size() / count;\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    *iterStep(step) {\r\n        // iterate over this domain with a stepsize of 'step'\r\n        for (let i = this.t0; i < this.t1; i += step) {\r\n            yield i;\r\n        }\r\n    }\r\n    // comform a number to the bound\r\n    comform(value) {\r\n        if (value < this.t0) {\r\n            return this.t0;\r\n        }\r\n        else if (value > this.t1) {\r\n            return this.t1;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nclass Domain2 {\r\n    constructor(x = new Domain(), y = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain2(Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromBounds(x0, x1, y0, y1) {\r\n        return new Domain2(new Domain(x0, x1), new Domain(y0, y1));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 4 times\r\n        return new Domain2(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 4)\r\n            throw \"need 4 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.size(), this.y.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.normalize(value.x), this.y.normalize(value.y));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(this.x.elevate(t.x), this.y.elevate(t.y));\r\n    }\r\n    remap(value, other = new Domain2()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    corners() {\r\n        // render the extends of this boundary / domain\r\n        let dim = 2;\r\n        let corners = Math.pow(2, dim);\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                data.push(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector2(x, y));\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\nclass Domain3 {\r\n    constructor(x = new Domain(), y = new Domain(), z = new Domain()) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static fromBounds(x0, x1, y0, y1, z0, z1) {\r\n        return new Domain3(new Domain(x0, x1), new Domain(y0, y1), new Domain(z0, z1));\r\n    }\r\n    static fromRadius(r) {\r\n        return new Domain3(Domain.fromRadius(r), Domain.fromRadius(r), Domain.fromRadius(r));\r\n    }\r\n    static fromRadii(rx, ry, rz) {\r\n        return new Domain3(Domain.fromRadius(rx), Domain.fromRadius(ry), Domain.fromRadius(rz));\r\n    }\r\n    static fromInclude(data) {\r\n        // note : could be quicker by going verbose, this now iterates over data 6 times\r\n        return new Domain3(Domain.fromInclude(data.getColumn(0)), Domain.fromInclude(data.getColumn(1)), Domain.fromInclude(data.getColumn(2)));\r\n    }\r\n    offset(xXyYoffset) {\r\n        let off = xXyYoffset;\r\n        if (off.length != 6)\r\n            throw \"need 6 values\";\r\n        this.x.offset(off[0], off[1]);\r\n        this.y.offset(off[2], off[3]);\r\n        this.z.offset(off[4], off[5]);\r\n        return this;\r\n    }\r\n    includes(value) {\r\n        // note: including t0, including t1\r\n        return this.x.includes(value.x) && this.y.includes(value.y) && this.z.includes(value.z);\r\n    }\r\n    size() {\r\n        // the size or length of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.size(), this.y.size(), this.z.size());\r\n    }\r\n    normalize(value) {\r\n        // normalize a parameter\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.normalize(value.x), this.y.normalize(value.y), this.z.normalize(value.z));\r\n    }\r\n    elevate(t) {\r\n        // elevate a normalized parameter to the parameter space of this domain\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(this.x.elevate(t.x), this.y.elevate(t.y), this.z.elevate(t.z));\r\n    }\r\n    remap(value, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let norm = this.normalize(value);\r\n        return other.elevate(norm);\r\n    }\r\n    remapAll(values, other = new Domain3()) {\r\n        // normalize a value, then elevate it to a new domain\r\n        let newValues = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(values.count());\r\n        for (let i = 0; i < values.count(); i++) {\r\n            let norm = this.normalize(values.getVector(i));\r\n            newValues.setVector(i, other.elevate(norm));\r\n        }\r\n        return newValues;\r\n    }\r\n    corners(matrix) {\r\n        // render the extends of this boundary / domain\r\n        let dim = 3;\r\n        let corners = 2 ^ dim;\r\n        let data = [];\r\n        for (let x of [this.x.t0, this.x.t1]) {\r\n            for (let y of [this.y.t0, this.y.t1]) {\r\n                for (let z of [this.z.t0, this.z.t1]) {\r\n                    data.push(matrix.multiplyVector(new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(x, y, z)));\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/domain.ts\n");

/***/ }),

/***/ "./src/math/math.ts":
/*!**************************!*\
  !*** ./src/math/math.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeonMath\": () => /* binding */ GeonMath\n/* harmony export */ });\n// purpose: simple operations with only numbers\r\nclass GeonMath {\r\n    // make sure 'value' is more than 'lower', and less than 'upper'\r\n    static clamp(value, lower, upper) {\r\n        return Math.min(Math.max(value, lower), upper);\r\n    }\r\n    static fade(t) {\r\n        // Fade function as defined by Ken Perlin.  This eases coordinate values\r\n        // so that they will ease towards integral values.  This ends up smoothing\r\n        // the final output.\r\n        return t * t * t * (t * (t * 6 - 15) + 10); // 6t^5 - 15t^4 + 10t^3\r\n    }\r\n    static lerp(a, b, x) {\r\n        return a + x * (b - a);\r\n    }\r\n    static radToDeg(r) {\r\n        return r * 180 / Math.PI;\r\n    }\r\n    static degToRad(d) {\r\n        return d * Math.PI / 180;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL21hdGgudHM/MDdkYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0NBQStDO0FBUXhDLE1BQU0sUUFBUTtJQUVqQixnRUFBZ0U7SUFDaEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEtBQWE7UUFDcEQsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQVM7UUFFdkIsd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSxvQkFBb0I7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBUyx1QkFBdUI7SUFDNUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBRTFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFTO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQVM7UUFDeEIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDMUIsQ0FBQztDQVlEIiwiZmlsZSI6Ii4vc3JjL21hdGgvbWF0aC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHB1cnBvc2U6IHNpbXBsZSBvcGVyYXRpb25zIHdpdGggb25seSBudW1iZXJzXHJcblxyXG5pbXBvcnQgeyBDb25zdCB9IGZyb20gXCIuL2NvbnN0XCI7XHJcblxyXG4gXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHZW9uTWF0aCB7XHJcbiAgICBcclxuICAgIC8vIG1ha2Ugc3VyZSAndmFsdWUnIGlzIG1vcmUgdGhhbiAnbG93ZXInLCBhbmQgbGVzcyB0aGFuICd1cHBlcidcclxuICAgIHN0YXRpYyBjbGFtcCh2YWx1ZTogbnVtYmVyLCBsb3dlcjogbnVtYmVyLCB1cHBlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBsb3dlciksIHVwcGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmFkZSh0OiBudW1iZXIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0Ly8gRmFkZSBmdW5jdGlvbiBhcyBkZWZpbmVkIGJ5IEtlbiBQZXJsaW4uICBUaGlzIGVhc2VzIGNvb3JkaW5hdGUgdmFsdWVzXHJcblx0XHQvLyBzbyB0aGF0IHRoZXkgd2lsbCBlYXNlIHRvd2FyZHMgaW50ZWdyYWwgdmFsdWVzLiAgVGhpcyBlbmRzIHVwIHNtb290aGluZ1xyXG5cdFx0Ly8gdGhlIGZpbmFsIG91dHB1dC5cclxuXHRcdHJldHVybiB0ICogdCAqIHQgKiAodCAqICh0ICogNiAtIDE1KSArIDEwKTsgICAgICAgICAvLyA2dF41IC0gMTV0XjQgKyAxMHReM1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHg6IG51bWJlcikgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gYSArIHggKiAoYiAtIGEpO1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgcmFkVG9EZWcocjogbnVtYmVyKSB7XHJcblx0XHRyZXR1cm4gciAqIDE4MCAvIE1hdGguUEk7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBkZWdUb1JhZChkOiBudW1iZXIpIHtcclxuXHRcdHJldHVybiBkICogTWF0aC5QSSAvIDE4MDtcclxuXHR9XHJcblxyXG5cdC8vIC8qKlxyXG5cdC8vICAqIHJldHVybiB0cnVlIGlmIGEgaXMgcm91Z2x5IHRoZSBzYW1lIHZhbHVlIGFzIGIuIFxyXG5cdC8vICAqIHVzZXMgdGhlIHByZWRlZmluZWQgdG9sZXJhbmNlXHJcblx0Ly8gICovXHJcblx0Ly8gc3RhdGljIGlzUm91Z2hseShhOiBudW1iZXIsIGI6IG51bWJlcikgOiBib29sZWFuIHtcclxuXHQvLyBcdGlmICgoKGEgLSBiKSA8IENvbnN0LlRPTEVSQU5DRSB8fCAoYSAtIGIpIDwgQ29uc3QuVE9MRVJBTkNFKSlcclxuXHQvLyBcdFx0cmV0dXJuIHRydWU7XHJcblx0Ly8gXHRyZXR1cm4gZmFsc2U7XHJcblx0Ly8gfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/math.ts\n");

/***/ }),

/***/ "./src/math/matrix.ts":
/*!****************************!*\
  !*** ./src/math/matrix.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix3\": () => /* binding */ Matrix3,\n/* harmony export */   \"Matrix4\": () => /* binding */ Matrix4\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector */ \"./src/math/vector.ts\");\n// matrix\r\n// author: Jos Feenstra\r\n// TODO: FIX MATRIX4 !!!\r\n// NOTE: \r\n\r\n\r\n// 3x3 matrix of floats used for 2d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix3 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(3, 3, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newProjection(width, height) {\r\n        // Note: This matrix flips the Y axis so 0 is at the top.\r\n        return new Matrix3([\r\n            2 / width, 0, 0,\r\n            0, -2 / height, 0,\r\n            -1, 1, 1,\r\n        ]);\r\n    }\r\n    static newTranslation(dx, dy) {\r\n        return new Matrix3([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1,\r\n        ]);\r\n    }\r\n    // angle in radians\r\n    static newRotation(r) {\r\n        var c = Math.cos(r);\r\n        var s = Math.sin(r);\r\n        return new Matrix3([\r\n            c, -s, 0,\r\n            s, c, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    static newScalar(sx, sy) {\r\n        return new Matrix3([\r\n            sx, 0, 0,\r\n            0, sy, 0,\r\n            0, 0, 1,\r\n        ]);\r\n    }\r\n    toMat4() {\r\n        let d = this.data;\r\n        return new Matrix4([\r\n            d[0], d[1], 0, d[2],\r\n            d[3], d[4], 0, d[5],\r\n            0, 0, 1, 0,\r\n            d[6], d[7], 0, d[8],\r\n        ]);\r\n    }\r\n    project(width, height) {\r\n        return this.multiply(Matrix3.newProjection(width, height));\r\n    }\r\n    translateN(dx, dy) {\r\n        return this.multiply(Matrix3.newTranslation(dx, dy));\r\n    }\r\n    translate(v) {\r\n        return this.multiply(Matrix3.newTranslation(v.x, v.y));\r\n    }\r\n    rotate(r) {\r\n        return this.multiply(Matrix3.newRotation(r));\r\n    }\r\n    scale(sx, sy) {\r\n        return this.multiply(Matrix3.newScalar(sx, sy));\r\n    }\r\n    // multiply two m3's \r\n    multiply(other) {\r\n        let a = this.data;\r\n        let b = other.data;\r\n        var a00 = a[0 * 3 + 0];\r\n        var a01 = a[0 * 3 + 1];\r\n        var a02 = a[0 * 3 + 2];\r\n        var a10 = a[1 * 3 + 0];\r\n        var a11 = a[1 * 3 + 1];\r\n        var a12 = a[1 * 3 + 2];\r\n        var a20 = a[2 * 3 + 0];\r\n        var a21 = a[2 * 3 + 1];\r\n        var a22 = a[2 * 3 + 2];\r\n        var b00 = b[0 * 3 + 0];\r\n        var b01 = b[0 * 3 + 1];\r\n        var b02 = b[0 * 3 + 2];\r\n        var b10 = b[1 * 3 + 0];\r\n        var b11 = b[1 * 3 + 1];\r\n        var b12 = b[1 * 3 + 2];\r\n        var b20 = b[2 * 3 + 0];\r\n        var b21 = b[2 * 3 + 1];\r\n        var b22 = b[2 * 3 + 2];\r\n        return new Matrix3([\r\n            b00 * a00 + b01 * a10 + b02 * a20,\r\n            b00 * a01 + b01 * a11 + b02 * a21,\r\n            b00 * a02 + b01 * a12 + b02 * a22,\r\n            b10 * a00 + b11 * a10 + b12 * a20,\r\n            b10 * a01 + b11 * a11 + b12 * a21,\r\n            b10 * a02 + b11 * a12 + b12 * a22,\r\n            b20 * a00 + b21 * a10 + b22 * a20,\r\n            b20 * a01 + b21 * a11 + b22 * a21,\r\n            b20 * a02 + b21 * a12 + b22 * a22,\r\n        ]);\r\n    }\r\n    // transform a vector. RECYCLE IT\r\n    transformVector(v) {\r\n        let m = this.data;\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n        v.x = (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d;\r\n        v.y = (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d;\r\n        return v;\r\n    }\r\n    // return the inverse of this matrix\r\n    inverse() {\r\n        // ive got no idea what is happening here, \r\n        // but apparantly, this is how you inverse a 3x3 matrix.\r\n        let m = this.data;\r\n        var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n        var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n        var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n        // discriminant\r\n        var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n        this.setData([\r\n            d * t00, -d * t10, d * t20,\r\n            -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n            d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n            -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n            d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n        ]);\r\n        return this;\r\n    }\r\n}\r\n// 4x4 matrix of floats used for 3d math\r\n// inspired by Gregg Tavares. \r\nclass Matrix4 extends _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix {\r\n    constructor(data = []) {\r\n        super(4, 4, data);\r\n    }\r\n    static newIdentity() {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newCopy(other) {\r\n        let result = new Matrix4();\r\n        for (let i = 0; i < 16; i++) {\r\n            result.data[i] = other.data[i];\r\n        }\r\n        return result;\r\n    }\r\n    clone() {\r\n        return Matrix4.newCopy(this);\r\n    }\r\n    multiplied(other) {\r\n        // NOTE: i swapped a and b, this makes more sense to me, but i could be wrong about it...\r\n        const a = other.data;\r\n        const b = this.data;\r\n        var b00 = b[0 * 4 + 0];\r\n        var b01 = b[0 * 4 + 1];\r\n        var b02 = b[0 * 4 + 2];\r\n        var b03 = b[0 * 4 + 3];\r\n        var b10 = b[1 * 4 + 0];\r\n        var b11 = b[1 * 4 + 1];\r\n        var b12 = b[1 * 4 + 2];\r\n        var b13 = b[1 * 4 + 3];\r\n        var b20 = b[2 * 4 + 0];\r\n        var b21 = b[2 * 4 + 1];\r\n        var b22 = b[2 * 4 + 2];\r\n        var b23 = b[2 * 4 + 3];\r\n        var b30 = b[3 * 4 + 0];\r\n        var b31 = b[3 * 4 + 1];\r\n        var b32 = b[3 * 4 + 2];\r\n        var b33 = b[3 * 4 + 3];\r\n        var a00 = a[0 * 4 + 0];\r\n        var a01 = a[0 * 4 + 1];\r\n        var a02 = a[0 * 4 + 2];\r\n        var a03 = a[0 * 4 + 3];\r\n        var a10 = a[1 * 4 + 0];\r\n        var a11 = a[1 * 4 + 1];\r\n        var a12 = a[1 * 4 + 2];\r\n        var a13 = a[1 * 4 + 3];\r\n        var a20 = a[2 * 4 + 0];\r\n        var a21 = a[2 * 4 + 1];\r\n        var a22 = a[2 * 4 + 2];\r\n        var a23 = a[2 * 4 + 3];\r\n        var a30 = a[3 * 4 + 0];\r\n        var a31 = a[3 * 4 + 1];\r\n        var a32 = a[3 * 4 + 2];\r\n        var a33 = a[3 * 4 + 3];\r\n        return new Matrix4([\r\n            b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\r\n            b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\r\n            b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\r\n            b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\r\n            b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\r\n            b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\r\n            b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\r\n            b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\r\n            b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\r\n            b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\r\n            b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\r\n            b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\r\n            b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\r\n            b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\r\n            b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\r\n            b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\r\n        ]);\r\n    }\r\n    multiply(other) {\r\n        this.data = this.multiplied(other).data;\r\n        return this;\r\n    }\r\n    transpose() {\r\n        let matrix = new Matrix4();\r\n        let res = matrix.data;\r\n        let old = this.data;\r\n        res[0] = old[0];\r\n        res[1] = old[4];\r\n        res[2] = old[8];\r\n        res[3] = old[12];\r\n        res[4] = old[1];\r\n        res[5] = old[5];\r\n        res[6] = old[9];\r\n        res[7] = old[13];\r\n        res[8] = old[2];\r\n        res[9] = old[6];\r\n        res[10] = old[10];\r\n        res[11] = old[14];\r\n        res[12] = old[3];\r\n        res[13] = old[7];\r\n        res[14] = old[11];\r\n        res[15] = old[15];\r\n        return matrix;\r\n    }\r\n    static newLookAt(cameraPosition, target, up) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        let zAxis = cameraPosition.clone().sub(target).normalize();\r\n        let xAxis = up.clone().cross(up).normalize();\r\n        let yAxis = zAxis.clone().cross(xAxis).normalize();\r\n        data[0] = xAxis.x;\r\n        data[1] = xAxis.y;\r\n        data[2] = xAxis.z;\r\n        data[3] = 0;\r\n        data[4] = yAxis.x;\r\n        data[5] = yAxis.y;\r\n        data[6] = yAxis.z;\r\n        data[7] = 0;\r\n        data[8] = zAxis.x;\r\n        data[9] = zAxis.y;\r\n        data[10] = zAxis.z;\r\n        data[11] = 0;\r\n        data[12] = cameraPosition.x;\r\n        data[13] = cameraPosition.y;\r\n        data[14] = cameraPosition.z;\r\n        data[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\r\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\r\n     * arguments define a frustum extending in the negative z direction.  The given\r\n     * angle is the vertical angle of the frustum, and the horizontal angle is\r\n     * determined to produce the given aspect ratio.  The arguments near and far are\r\n     * the distances to the near and far clipping planes.  Note that near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\r\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n     * from -1 to 1 in the z dimension.\r\n     * @param {number} fieldOfViewInRadians field of view in y axis.\r\n     * @param {number} aspect aspect of viewport (width / height)\r\n     * @param {number} near near Z clipping plane\r\n     * @param {number} far far Z clipping plane\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newPerspective(fov, aspect, near, far) {\r\n        let matrix = new Matrix4();\r\n        let data = matrix.data;\r\n        var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\r\n        var rangeInv = 1.0 / (near - far);\r\n        data[0] = f / aspect;\r\n        data[1] = 0;\r\n        data[2] = 0;\r\n        data[3] = 0;\r\n        data[4] = 0;\r\n        data[5] = f;\r\n        data[6] = 0;\r\n        data[7] = 0;\r\n        data[8] = 0;\r\n        data[9] = 0;\r\n        data[10] = (near + far) * rangeInv;\r\n        data[11] = -1;\r\n        data[12] = 0;\r\n        data[13] = 0;\r\n        data[14] = near * far * rangeInv * 2;\r\n        data[15] = 0;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\r\n     * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\r\n     * generated sends that box to the unit box.  Note that although left and right\r\n     * are x coordinates and bottom and top are y coordinates, near and far\r\n     * are not z coordinates, but rather they are distances along the negative\r\n     * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\r\n     * dimensions and from -1 to 1 in the z dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newOrthographic(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        dst[0] = 2 / (right - left);\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 / (top - bottom);\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\r\n     * top, bottom, near and far clipping planes. The arguments define a frustum\r\n     * extending in the negative z direction. The arguments near and far are the\r\n     * distances to the near and far clipping planes. Note that near and far are not\r\n     * z coordinates, but rather they are distances along the negative z-axis. The\r\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\r\n     * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\r\n     * dimension.\r\n     * @param {number} left The x coordinate of the left plane of the box.\r\n     * @param {number} right The x coordinate of the right plane of the box.\r\n     * @param {number} bottom The y coordinate of the bottom plane of the box.\r\n     * @param {number} top The y coordinate of the right plane of the box.\r\n     * @param {number} near The negative z coordinate of the near plane of the box.\r\n     * @param {number} far The negative z coordinate of the far plane of the box.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newFrustum(left, right, bottom, top, near, far) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var dx = right - left;\r\n        var dy = top - bottom;\r\n        var dz = far - near;\r\n        dst[0] = 2 * near / dx;\r\n        dst[1] = 0;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = 0;\r\n        dst[5] = 2 * near / dy;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = (left + right) / dx;\r\n        dst[9] = (top + bottom) / dy;\r\n        dst[10] = -(far + near) / dz;\r\n        dst[11] = -1;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = -2 * near * far / dz;\r\n        dst[15] = 0;\r\n        return matrix;\r\n    }\r\n    static newTranslation(tx, ty, tz) {\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            tx, ty, tz, 1\r\n        ]);\r\n    }\r\n    static newXRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newYRotation(angleInRadians) {\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        return new Matrix4([\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    static newZRotation(angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        dst[0] = c;\r\n        dst[1] = s;\r\n        dst[2] = 0;\r\n        dst[3] = 0;\r\n        dst[4] = -s;\r\n        dst[5] = c;\r\n        dst[6] = 0;\r\n        dst[7] = 0;\r\n        dst[8] = 0;\r\n        dst[9] = 0;\r\n        dst[10] = 1;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Makes an rotation matrix around an arbitrary axis\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    static newAxisRotation(axis, angleInRadians) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let x = axis.x;\r\n        let y = axis.y;\r\n        let z = axis.z;\r\n        let n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        let xx = x * x;\r\n        let yy = y * y;\r\n        let zz = z * z;\r\n        let c = Math.cos(angleInRadians);\r\n        let s = Math.sin(angleInRadians);\r\n        let oneMinusCosine = 1 - c;\r\n        dst[0] = xx + (1 - xx) * c;\r\n        dst[1] = x * y * oneMinusCosine + z * s;\r\n        dst[2] = x * z * oneMinusCosine - y * s;\r\n        dst[3] = 0;\r\n        dst[4] = x * y * oneMinusCosine - z * s;\r\n        dst[5] = yy + (1 - yy) * c;\r\n        dst[6] = y * z * oneMinusCosine + x * s;\r\n        dst[7] = 0;\r\n        dst[8] = x * z * oneMinusCosine + y * s;\r\n        dst[9] = y * z * oneMinusCosine - x * s;\r\n        dst[10] = zz + (1 - zz) * c;\r\n        dst[11] = 0;\r\n        dst[12] = 0;\r\n        dst[13] = 0;\r\n        dst[14] = 0;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    /**\r\n     * Multiply by an axis rotation matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {Vector3} axis axis to rotate around\r\n     * @param {number} angleInRadians amount to rotate\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    axisRotate(axis, angleInRadians) {\r\n        // This is the optimized version of\r\n        // return multiply(m, axisRotation(axis, angleInRadians), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var x = axis.x;\r\n        var y = axis.y;\r\n        var z = axis.z;\r\n        var n = Math.sqrt(x * x + y * y + z * z);\r\n        x /= n;\r\n        y /= n;\r\n        z /= n;\r\n        var xx = x * x;\r\n        var yy = y * y;\r\n        var zz = z * z;\r\n        var c = Math.cos(angleInRadians);\r\n        var s = Math.sin(angleInRadians);\r\n        var oneMinusCosine = 1 - c;\r\n        var r00 = xx + (1 - xx) * c;\r\n        var r01 = x * y * oneMinusCosine + z * s;\r\n        var r02 = x * z * oneMinusCosine - y * s;\r\n        var r10 = x * y * oneMinusCosine - z * s;\r\n        var r11 = yy + (1 - yy) * c;\r\n        var r12 = y * z * oneMinusCosine + x * s;\r\n        var r20 = x * z * oneMinusCosine + y * s;\r\n        var r21 = y * z * oneMinusCosine - x * s;\r\n        var r22 = zz + (1 - zz) * c;\r\n        var m00 = m[0];\r\n        var m01 = m[1];\r\n        var m02 = m[2];\r\n        var m03 = m[3];\r\n        var m10 = m[4];\r\n        var m11 = m[5];\r\n        var m12 = m[6];\r\n        var m13 = m[7];\r\n        var m20 = m[8];\r\n        var m21 = m[9];\r\n        var m22 = m[10];\r\n        var m23 = m[11];\r\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\r\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\r\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\r\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\r\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\r\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\r\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\r\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\r\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\r\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\r\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\r\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    // make a scaling matrix \r\n    static newScaler(sx, sy, sz) {\r\n        return new Matrix4([\r\n            sx, 0, 0, 0,\r\n            0, sy, 0, 0,\r\n            0, 0, sz, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n    }\r\n    /**\r\n     * Multiply by a scaling matrix\r\n     * @param {Matrix4} m matrix to multiply\r\n     * @param {number} sx x scale.\r\n     * @param {number} sy y scale.\r\n     * @param {number} sz z scale.\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     * @memberOf module:webgl-3d-math\r\n     */\r\n    scale(sx, sy, sz) {\r\n        // This is the optimized version of\r\n        // return multiply(m, scaling(sx, sy, sz), dst);\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        dst[0] = sx * m[0 * 4 + 0];\r\n        dst[1] = sx * m[0 * 4 + 1];\r\n        dst[2] = sx * m[0 * 4 + 2];\r\n        dst[3] = sx * m[0 * 4 + 3];\r\n        dst[4] = sy * m[1 * 4 + 0];\r\n        dst[5] = sy * m[1 * 4 + 1];\r\n        dst[6] = sy * m[1 * 4 + 2];\r\n        dst[7] = sy * m[1 * 4 + 3];\r\n        dst[8] = sz * m[2 * 4 + 0];\r\n        dst[9] = sz * m[2 * 4 + 1];\r\n        dst[10] = sz * m[2 * 4 + 2];\r\n        dst[11] = sz * m[2 * 4 + 3];\r\n        if (m !== dst) {\r\n            dst[12] = m[12];\r\n            dst[13] = m[13];\r\n            dst[14] = m[14];\r\n            dst[15] = m[15];\r\n        }\r\n        return matrix;\r\n    }\r\n    /**\r\n     * creates a matrix from translation, quaternion, scale\r\n     * @param {Number[]} translation [x, y, z] translation\r\n     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\r\n     * @param {Number[]} scale [x, y, z] scale\r\n     * @param {Matrix4} [dst] optional matrix to store result\r\n     * @return {Matrix4} dst or a new matrix if none provided\r\n     */\r\n    newCompose(translation, quaternion, scale) {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n        dst[0] = (1 - (yy + zz)) * sx;\r\n        dst[1] = (xy + wz) * sx;\r\n        dst[2] = (xz - wy) * sx;\r\n        dst[3] = 0;\r\n        dst[4] = (xy - wz) * sy;\r\n        dst[5] = (1 - (xx + zz)) * sy;\r\n        dst[6] = (yz + wx) * sy;\r\n        dst[7] = 0;\r\n        dst[8] = (xz + wy) * sz;\r\n        dst[9] = (yz - wx) * sz;\r\n        dst[10] = (1 - (xx + yy)) * sz;\r\n        dst[11] = 0;\r\n        dst[12] = translation.x;\r\n        dst[13] = translation.y;\r\n        dst[14] = translation.z;\r\n        dst[15] = 1;\r\n        return matrix;\r\n    }\r\n    // quatFromRotationMatrix() {\r\n    //     // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n    //     // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n    //     const m11 = m[0];\r\n    //     const m12 = m[4];\r\n    //     const m13 = m[8];\r\n    //     const m21 = m[1];\r\n    //     const m22 = m[5];\r\n    //     const m23 = m[9];\r\n    //     const m31 = m[2];\r\n    //     const m32 = m[6];\r\n    //     const m33 = m[10];\r\n    //     const trace = m11 + m22 + m33;\r\n    //     if (trace > 0) {\r\n    //         const s = 0.5 / Math.sqrt(trace + 1);\r\n    //         dst[3] = 0.25 / s;\r\n    //         dst[0] = (m32 - m23) * s;\r\n    //         dst[1] = (m13 - m31) * s;\r\n    //         dst[2] = (m21 - m12) * s;\r\n    //     } else if (m11 > m22 && m11 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\r\n    //         dst[3] = (m32 - m23) / s;\r\n    //         dst[0] = 0.25 * s;\r\n    //         dst[1] = (m12 + m21) / s;\r\n    //         dst[2] = (m13 + m31) / s;\r\n    //     } else if (m22 > m33) {\r\n    //         const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\r\n    //         dst[3] = (m13 - m31) / s;\r\n    //         dst[0] = (m12 + m21) / s;\r\n    //         dst[1] = 0.25 * s;\r\n    //         dst[2] = (m23 + m32) / s;\r\n    //     } else {\r\n    //         const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\r\n    //         dst[3] = (m21 - m12) / s;\r\n    //         dst[0] = (m13 + m31) / s;\r\n    //         dst[1] = (m23 + m32) / s;\r\n    //         dst[2] = 0.25 * s;\r\n    //     }\r\n    // }\r\n    // decompose(mat, translation, quaternion, scale) {\r\n    //     let sx = m4.length(mat.slice(0, 3));\r\n    //     const sy = m4.length(mat.slice(4, 7));\r\n    //     const sz = m4.length(mat.slice(8, 11));\r\n    //     // if determinate is negative, we need to invert one scale\r\n    //     const det = determinate(mat);\r\n    //     if (det < 0) {\r\n    //         sx = -sx;\r\n    //     }\r\n    //     translation[0] = mat[12];\r\n    //     translation[1] = mat[13];\r\n    //     translation[2] = mat[14];\r\n    //     // scale the rotation part\r\n    //     const matrix = m4.copy(mat);\r\n    //     const invSX = 1 / sx;\r\n    //     const invSY = 1 / sy;\r\n    //     const invSZ = 1 / sz;\r\n    //     matrix[0] *= invSX;\r\n    //     matrix[1] *= invSX;\r\n    //     matrix[2] *= invSX;\r\n    //     matrix[4] *= invSY;\r\n    //     matrix[5] *= invSY;\r\n    //     matrix[6] *= invSY;\r\n    //     matrix[8] *= invSZ;\r\n    //     matrix[9] *= invSZ;\r\n    //     matrix[10] *= invSZ;\r\n    //     quatFromRotationMatrix(matrix, quaternion);\r\n    //     scale[0] = sx;\r\n    //     scale[1] = sy;\r\n    //     scale[2] = sz;\r\n    // }\r\n    determinate() {\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n    }\r\n    inverse() {\r\n        let matrix = new Matrix4();\r\n        let dst = matrix.data;\r\n        let m = this.data;\r\n        var m00 = m[0 * 4 + 0];\r\n        var m01 = m[0 * 4 + 1];\r\n        var m02 = m[0 * 4 + 2];\r\n        var m03 = m[0 * 4 + 3];\r\n        var m10 = m[1 * 4 + 0];\r\n        var m11 = m[1 * 4 + 1];\r\n        var m12 = m[1 * 4 + 2];\r\n        var m13 = m[1 * 4 + 3];\r\n        var m20 = m[2 * 4 + 0];\r\n        var m21 = m[2 * 4 + 1];\r\n        var m22 = m[2 * 4 + 2];\r\n        var m23 = m[2 * 4 + 3];\r\n        var m30 = m[3 * 4 + 0];\r\n        var m31 = m[3 * 4 + 1];\r\n        var m32 = m[3 * 4 + 2];\r\n        var m33 = m[3 * 4 + 3];\r\n        var tmp_0 = m22 * m33;\r\n        var tmp_1 = m32 * m23;\r\n        var tmp_2 = m12 * m33;\r\n        var tmp_3 = m32 * m13;\r\n        var tmp_4 = m12 * m23;\r\n        var tmp_5 = m22 * m13;\r\n        var tmp_6 = m02 * m33;\r\n        var tmp_7 = m32 * m03;\r\n        var tmp_8 = m02 * m23;\r\n        var tmp_9 = m22 * m03;\r\n        var tmp_10 = m02 * m13;\r\n        var tmp_11 = m12 * m03;\r\n        var tmp_12 = m20 * m31;\r\n        var tmp_13 = m30 * m21;\r\n        var tmp_14 = m10 * m31;\r\n        var tmp_15 = m30 * m11;\r\n        var tmp_16 = m10 * m21;\r\n        var tmp_17 = m20 * m11;\r\n        var tmp_18 = m00 * m31;\r\n        var tmp_19 = m30 * m01;\r\n        var tmp_20 = m00 * m21;\r\n        var tmp_21 = m20 * m01;\r\n        var tmp_22 = m00 * m11;\r\n        var tmp_23 = m10 * m01;\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n        dst[0] = d * t0;\r\n        dst[1] = d * t1;\r\n        dst[2] = d * t2;\r\n        dst[3] = d * t3;\r\n        dst[4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\r\n        dst[5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\r\n        dst[6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\r\n        dst[7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\r\n        dst[8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\r\n        dst[9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\r\n        dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\r\n        dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\r\n        dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\r\n        dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\r\n        dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\r\n        dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\r\n        return matrix;\r\n    }\r\n    multiplyVector(v) {\r\n        let data = new Array(3);\r\n        for (var i = 0; i < 3; ++i) {\r\n            data[i] = 0.0;\r\n            for (var j = 0; j < 4; ++j) {\r\n                data[i] += v.item(j) * this.get(j, i);\r\n            }\r\n        }\r\n        return new _vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(data[0], data[1], data[2]);\r\n    }\r\n    multiplyVectors(other) {\r\n        // dumb way\r\n        for (let i = 0; i < this.count(); i++) {\r\n            let vec = other.getVector(i);\r\n            vec = this.multiplyVector(vec);\r\n            other.setVector(i, vec);\r\n        }\r\n        return other;\r\n        // smart way\r\n        // let matrix = new Vector3Array(other.count());\r\n        // // for every row\r\n        // for (var r = 0; r < other.count(); r++) {\r\n        //     // for every item in row\r\n        //     for (var c = 0; c < 3; ++c) {\r\n        //         let item = 0.0;\r\n        //         for (var j = 0; j < 4; ++j) {\r\n        //             item += other.get(r, c) * this.get(j, c);\r\n        //         }\r\n        //         matrix.set(r, c, item);\r\n        //     }\r\n        // }\r\n        // other.data = matrix.data;\r\n        return other;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/matrix.ts\n");

/***/ }),

/***/ "./src/math/quaternion.ts":
/*!********************************!*\
  !*** ./src/math/quaternion.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Quaternion\": () => /* binding */ Quaternion\n/* harmony export */ });\n// author: Jos Feenstra\r\n// purpose: Quaternion to be used for rotation\r\nclass Quaternion {\r\n    constructor(x, y, z, w) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3F1YXRlcm5pb24udHM/ZGU1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUJBQXVCO0FBQ3ZCLDhDQUE4QztBQUd2QyxNQUFNLFVBQVU7SUFNbkIsWUFBWSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ2xELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL21hdGgvcXVhdGVybmlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IFF1YXRlcm5pb24gdG8gYmUgdXNlZCBmb3Igcm90YXRpb25cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUXVhdGVybmlvbiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB6OiBudW1iZXI7XHJcbiAgICB3OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMueiA9IHo7XHJcbiAgICAgICAgdGhpcy53ID0gdztcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/quaternion.ts\n");

/***/ }),

/***/ "./src/math/ray.ts":
/*!*************************!*\
  !*** ./src/math/ray.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ray\": () => /* binding */ Ray\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n// author:  Jos Feenstra\r\n// purpose: infinite Ray used for projection and similar actions\r\n// notes:   found some nice examples at https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld004.htm\r\n\r\nclass Ray {\r\n    // i do this to force intent : from points, or from normal. Both vector3, so otherwise confusing\r\n    constructor(origin, normal) {\r\n        this.origin = origin;\r\n        this.normal = normal.normalize();\r\n    }\r\n    static fromNormal(origin, normal) {\r\n        return new Ray(origin, normal);\r\n    }\r\n    static fromPoints(origin, through) {\r\n        return new Ray(origin, through.subbed(origin).normalize());\r\n    }\r\n    at(t) {\r\n        return this.origin.added(this.normal.scaled(t));\r\n    }\r\n    xPlane(plane) {\r\n        // ray : pt = rOrigin + t * rNormal\r\n        // plane : a, b, c, d -> pNormal(a, b, c) , d\r\n        // plane : P . N + d = 0;\r\n        // substitute for p: \r\n        // t = -(rOrigin . N + d) / (V . N)\r\n        let ray = this; // to be clear\r\n        return -(ray.origin.dot(plane.normal) + plane.d) / (ray.normal.dot(plane.normal));\r\n    }\r\n    toLine(length) {\r\n        let toPoint = this.at(length);\r\n        return _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromLines([this.origin, toPoint]);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3JheS50cz8xYTgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0JBQXdCO0FBQ3hCLGdFQUFnRTtBQUNoRSw2SEFBNkg7QUFHOUU7QUFLeEMsTUFBTSxHQUFHO0lBSVosZ0dBQWdHO0lBQ2hHLFlBQW9CLE1BQWUsRUFBRSxNQUFlO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFHRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWUsRUFBRSxNQUFlO1FBQzlDLE9BQU8sSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFHRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWUsRUFBRSxPQUFnQjtRQUMvQyxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUdELEVBQUUsQ0FBQyxDQUFTO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFHRCxNQUFNLENBQUMsS0FBWTtRQUVmLG1DQUFtQztRQUNuQyw2Q0FBNkM7UUFDN0MseUJBQXlCO1FBQ3pCLHFCQUFxQjtRQUNyQixtQ0FBbUM7UUFFbkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsY0FBYztRQUM5QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUdELE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsT0FBTyxpRUFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvbWF0aC9yYXkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcclxuLy8gcHVycG9zZTogaW5maW5pdGUgUmF5IHVzZWQgZm9yIHByb2plY3Rpb24gYW5kIHNpbWlsYXIgYWN0aW9uc1xyXG4vLyBub3RlczogICBmb3VuZCBzb21lIG5pY2UgZXhhbXBsZXMgYXQgaHR0cHM6Ly93d3cuY3MucHJpbmNldG9uLmVkdS9jb3Vyc2VzL2FyY2hpdmUvZmFsbDAwL2NzNDI2L2xlY3R1cmVzL3JheWNhc3Qvc2xkMDA0Lmh0bVxyXG5cclxuXHJcbmltcG9ydCB7IExpbmVBcnJheSB9IGZyb20gXCIuLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vZ2VvL3BsYW5lXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi92ZWN0b3JcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmF5IHtcclxuICAgIG9yaWdpbjogVmVjdG9yMztcclxuICAgIG5vcm1hbDogVmVjdG9yMztcclxuXHJcbiAgICAvLyBpIGRvIHRoaXMgdG8gZm9yY2UgaW50ZW50IDogZnJvbSBwb2ludHMsIG9yIGZyb20gbm9ybWFsLiBCb3RoIHZlY3RvcjMsIHNvIG90aGVyd2lzZSBjb25mdXNpbmdcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3Iob3JpZ2luOiBWZWN0b3IzLCBub3JtYWw6IFZlY3RvcjMpIHtcclxuICAgICAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcclxuICAgICAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbC5ub3JtYWxpemUoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGZyb21Ob3JtYWwob3JpZ2luOiBWZWN0b3IzLCBub3JtYWw6IFZlY3RvcjMpIDogUmF5IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJheShvcmlnaW4sIG5vcm1hbCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBmcm9tUG9pbnRzKG9yaWdpbjogVmVjdG9yMywgdGhyb3VnaDogVmVjdG9yMykgOiBSYXkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmF5KG9yaWdpbiwgdGhyb3VnaC5zdWJiZWQob3JpZ2luKS5ub3JtYWxpemUoKSk7XHJcbiAgICB9IFxyXG4gICAgXHJcblxyXG4gICAgYXQodDogbnVtYmVyKSA6IFZlY3RvcjMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5hZGRlZCh0aGlzLm5vcm1hbC5zY2FsZWQodCkpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgeFBsYW5lKHBsYW5lOiBQbGFuZSkgOiBudW1iZXIge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHJheSA6IHB0ID0gck9yaWdpbiArIHQgKiByTm9ybWFsXHJcbiAgICAgICAgLy8gcGxhbmUgOiBhLCBiLCBjLCBkIC0+IHBOb3JtYWwoYSwgYiwgYykgLCBkXHJcbiAgICAgICAgLy8gcGxhbmUgOiBQIC4gTiArIGQgPSAwO1xyXG4gICAgICAgIC8vIHN1YnN0aXR1dGUgZm9yIHA6IFxyXG4gICAgICAgIC8vIHQgPSAtKHJPcmlnaW4gLiBOICsgZCkgLyAoViAuIE4pXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHJheSA9IHRoaXM7IC8vIHRvIGJlIGNsZWFyXHJcbiAgICAgICAgcmV0dXJuIC0ocmF5Lm9yaWdpbi5kb3QocGxhbmUubm9ybWFsKSArIHBsYW5lLmQpIC8gKHJheS5ub3JtYWwuZG90KHBsYW5lLm5vcm1hbCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0b0xpbmUobGVuZ3RoOiBudW1iZXIpIDogTGluZUFycmF5IHtcclxuICAgICAgICBsZXQgdG9Qb2ludCA9IHRoaXMuYXQobGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gTGluZUFycmF5LmZyb21MaW5lcyhbdGhpcy5vcmlnaW4sIHRvUG9pbnRdKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math/ray.ts\n");

/***/ }),

/***/ "./src/math/statistics.ts":
/*!********************************!*\
  !*** ./src/math/statistics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stat\": () => /* binding */ Stat\n/* harmony export */ });\n/* harmony import */ var _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/float-matrix */ \"./src/data/float-matrix.ts\");\n// name:    statistics.ts\r\n// author:  Jos Feenstra\r\n// purpose: functionality and documentation of variance, \r\n//          covariance, eigen vectors, least squares, and other \r\n//          statistical operations.\r\n// source:  been a while since I did this, \r\n//          https://datascienceplus.com/understanding-the-covariance-matrix/ \r\n//          https://wiki.pathmind.com/eigenvector\r\n//          used to make sure the basics are correct :).\r\n// notes:   Whats the difference between a Principal Component and an Eigen vector? \r\n//          \"Because eigenvectors trace the principal lines of force, and the axes of greatest variance and covariance illustrate where the data is most susceptible to change.\"\r\n\r\nclass Stat {\r\n    // calculate sum\r\n    static sum(x) {\r\n        let sum = 0;\r\n        for (let i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n        return sum;\r\n    }\r\n    // calculate average\r\n    static mean(x) {\r\n        return this.sum(x) / x.length;\r\n    }\r\n    // calculate variance\r\n    static variance(x) {\r\n        //σ^2x = (1/n−1) * n∑i=1 (x[i] – xAvr)^2\r\n        let n = x.length;\r\n        let avr = this.mean(x);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += Math.pow((x[i] - avr), 2);\r\n        }\r\n        return sum / (n - 1);\r\n    }\r\n    // calculate the standard deviation\r\n    static deviation(x) {\r\n        return Math.pow(this.variance(x), 0.5);\r\n    }\r\n    // calculate covariance\r\n    static covariance(x, y) {\r\n        if (x.length != y.length)\r\n            throw \"this is not how covariance works...\";\r\n        let n = x.length;\r\n        let xAvr = this.mean(x);\r\n        let yAvr = this.mean(y);\r\n        let sum = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            sum += (x[i] - xAvr) * (y[i] - yAvr);\r\n        }\r\n        return sum / (n - 1); // losing one degree of freedom\r\n    }\r\n    // calculate variance / covariance matrix\r\n    static cov(matrix) {\r\n        let size = matrix._width;\r\n        let cov = new _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix(size, size);\r\n        let columns = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            columns[i] = matrix.getColumn(i);\r\n        }\r\n        // matrix is symmertical, so only run through one half\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = i; j < size; j++) {\r\n                let value = this.covariance(columns[i], columns[j]);\r\n                cov.set(i, j, value);\r\n                cov.set(j, i, value);\r\n            }\r\n        }\r\n        return cov;\r\n    }\r\n    static eig(A) {\r\n        let results = this.svd(A);\r\n        return [results[1], results[2]];\r\n    }\r\n    /**\r\n     * Single Value Decomposition.\r\n     * Can be used for Eigen Value Decomposition\r\n     * from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970).\r\n     * Taken from numeric.js. not yet cleaned & optimized.\r\n     * https://en.wikipedia.org/wiki/Singular_value_decomposition\r\n     * @param  {FloatMatrix} A matrix to decompose, such as a covariance matrix\r\n     * @returns [U, ∑, V]\r\n     * U -> during EVD, these are the eigen vectors of A transposed, if im not mistaken\r\n     * ∑ -> during EVD, this are the eigen values\r\n     * V -> during EVD, the columns are eigen vectors\r\n     */\r\n    static svd(A) {\r\n        var prec = Math.pow(2, -52); // assumes double prec\r\n        var tolerance = 1.e-64 / prec;\r\n        var itmax = 50;\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        var l = 0;\r\n        var u = A.clone().toNative();\r\n        var m = u.length;\r\n        var n = u[0].length;\r\n        if (m < n)\r\n            throw \"Need more rows than columns\";\r\n        var e = new Array(n);\r\n        var q = new Array(n);\r\n        for (i = 0; i < n; i++)\r\n            e[i] = q[i] = 0.0;\r\n        var v = rep([n, n], 0);\r\n        function pythag(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if (a > b)\r\n                return a * Math.sqrt(1.0 + (b * b / a / a));\r\n            else if (b == 0.0)\r\n                return a;\r\n            return b * Math.sqrt(1.0 + (a * a / b / b));\r\n        }\r\n        //rep function, [JF] : dont know what this does exactly...\r\n        function rep(s, v, k = 0) {\r\n            let n = s[k];\r\n            let ret = Array(n);\r\n            let i;\r\n            if (k === s.length - 1) {\r\n                for (i = n - 2; i >= 0; i -= 2) {\r\n                    ret[i + 1] = v;\r\n                    ret[i] = v;\r\n                }\r\n                if (i === -1) {\r\n                    ret[0] = v;\r\n                }\r\n                return ret;\r\n            }\r\n            for (i = n - 1; i >= 0; i--) {\r\n                ret[i] = rep(s, v, k + 1);\r\n            }\r\n            return ret;\r\n        }\r\n        //Householder's reduction to bidiagonal form\r\n        var f = 0.0;\r\n        var g = 0.0;\r\n        var h = 0.0;\r\n        var x = 0.0;\r\n        var y = 0.0;\r\n        var z = 0.0;\r\n        var s = 0.0;\r\n        for (i = 0; i < n; i++) {\r\n            e[i] = g;\r\n            s = 0.0;\r\n            l = i + 1;\r\n            for (j = i; j < m; j++)\r\n                s += (u[j][i] * u[j][i]);\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i] = f - g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = i; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n            }\r\n            q[i] = g;\r\n            s = 0.0;\r\n            for (j = l; j < n; j++)\r\n                s = s + u[i][j] * u[i][j];\r\n            if (s <= tolerance)\r\n                g = 0.0;\r\n            else {\r\n                f = u[i][i + 1];\r\n                g = Math.sqrt(s);\r\n                if (f >= 0.0)\r\n                    g = -g;\r\n                h = f * g - s;\r\n                u[i][i + 1] = f - g;\r\n                for (j = l; j < n; j++)\r\n                    e[j] = u[i][j] / h;\r\n                for (j = l; j < m; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += (u[j][k] * u[i][k]);\r\n                    for (k = l; k < n; k++)\r\n                        u[j][k] += s * e[k];\r\n                }\r\n            }\r\n            y = Math.abs(q[i]) + Math.abs(e[i]);\r\n            if (y > x)\r\n                x = y;\r\n        }\r\n        // accumulation of right hand gtransformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            if (g != 0.0) {\r\n                h = g * u[i][i + 1];\r\n                for (j = l; j < n; j++)\r\n                    v[j][i] = u[i][j] / h;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < n; k++)\r\n                        s += u[i][k] * v[k][j];\r\n                    for (k = l; k < n; k++)\r\n                        v[k][j] += (s * v[k][i]);\r\n                }\r\n            }\r\n            for (j = l; j < n; j++) {\r\n                v[i][j] = 0;\r\n                v[j][i] = 0;\r\n            }\r\n            v[i][i] = 1;\r\n            g = e[i];\r\n            l = i;\r\n        }\r\n        // accumulation of left hand transformations\r\n        for (i = n - 1; i != -1; i += -1) {\r\n            l = i + 1;\r\n            g = q[i];\r\n            for (j = l; j < n; j++)\r\n                u[i][j] = 0;\r\n            if (g != 0.0) {\r\n                h = u[i][i] * g;\r\n                for (j = l; j < n; j++) {\r\n                    s = 0.0;\r\n                    for (k = l; k < m; k++)\r\n                        s += u[k][i] * u[k][j];\r\n                    f = s / h;\r\n                    for (k = i; k < m; k++)\r\n                        u[k][j] += f * u[k][i];\r\n                }\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = u[j][i] / g;\r\n            }\r\n            else\r\n                for (j = i; j < m; j++)\r\n                    u[j][i] = 0;\r\n            u[i][i] += 1;\r\n        }\r\n        // diagonalization of the bidiagonal form\r\n        prec = prec * x;\r\n        for (k = n - 1; k != -1; k += -1) {\r\n            for (var iteration = 0; iteration < itmax; iteration++) { // test f splitting\r\n                var test_convergence = false;\r\n                for (l = k; l != -1; l += -1) {\r\n                    if (Math.abs(e[l]) <= prec) {\r\n                        test_convergence = true;\r\n                        break;\r\n                    }\r\n                    if (Math.abs(q[l - 1]) <= prec)\r\n                        break;\r\n                }\r\n                if (!test_convergence) { // cancellation of e[l] if l>0\r\n                    c = 0.0;\r\n                    s = 1.0;\r\n                    var l1 = l - 1;\r\n                    for (i = l; i < k + 1; i++) {\r\n                        f = s * e[i];\r\n                        e[i] = c * e[i];\r\n                        if (Math.abs(f) <= prec)\r\n                            break;\r\n                        g = q[i];\r\n                        h = pythag(f, g);\r\n                        q[i] = h;\r\n                        c = g / h;\r\n                        s = -f / h;\r\n                        for (j = 0; j < m; j++) {\r\n                            y = u[j][l1];\r\n                            z = u[j][i];\r\n                            u[j][l1] = y * c + (z * s);\r\n                            u[j][i] = -y * s + (z * c);\r\n                        }\r\n                    }\r\n                }\r\n                // test f convergence\r\n                z = q[k];\r\n                if (l == k) { //convergence\r\n                    if (z < 0.0) { //q[k] is made non-negative\r\n                        q[k] = -z;\r\n                        for (j = 0; j < n; j++)\r\n                            v[j][k] = -v[j][k];\r\n                    }\r\n                    break; //break out of iteration loop and move on to next k value\r\n                }\r\n                if (iteration >= itmax - 1)\r\n                    throw 'Error: no convergence.';\r\n                // shift from bottom 2x2 minor\r\n                x = q[l];\r\n                y = q[k - 1];\r\n                g = e[k - 1];\r\n                h = e[k];\r\n                f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\r\n                g = pythag(f, 1.0);\r\n                if (f < 0.0)\r\n                    f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\r\n                else\r\n                    f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\r\n                // next QR transformation\r\n                c = 1.0;\r\n                s = 1.0;\r\n                for (i = l + 1; i < k + 1; i++) {\r\n                    g = e[i];\r\n                    y = q[i];\r\n                    h = s * g;\r\n                    g = c * g;\r\n                    z = pythag(f, h);\r\n                    e[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = x * c + g * s;\r\n                    g = -x * s + g * c;\r\n                    h = y * s;\r\n                    y = y * c;\r\n                    for (j = 0; j < n; j++) {\r\n                        x = v[j][i - 1];\r\n                        z = v[j][i];\r\n                        v[j][i - 1] = x * c + z * s;\r\n                        v[j][i] = -x * s + z * c;\r\n                    }\r\n                    z = pythag(f, h);\r\n                    q[i - 1] = z;\r\n                    c = f / z;\r\n                    s = h / z;\r\n                    f = c * g + s * y;\r\n                    x = -s * g + c * y;\r\n                    for (j = 0; j < m; j++) {\r\n                        y = u[j][i - 1];\r\n                        z = u[j][i];\r\n                        u[j][i - 1] = y * c + z * s;\r\n                        u[j][i] = -y * s + z * c;\r\n                    }\r\n                }\r\n                e[l] = 0.0;\r\n                e[k] = f;\r\n                q[k] = x;\r\n            }\r\n        }\r\n        for (i = 0; i < q.length; i++)\r\n            if (q[i] < prec)\r\n                q[i] = 0;\r\n        //sort eigenvalues\t\r\n        var temp;\r\n        for (i = 0; i < n; i++) {\r\n            for (j = i - 1; j >= 0; j--) {\r\n                if (q[j] < q[i]) {\r\n                    c = q[j];\r\n                    q[j] = q[i];\r\n                    q[i] = c;\r\n                    for (k = 0; k < u.length; k++) {\r\n                        temp = u[k][i];\r\n                        u[k][i] = u[k][j];\r\n                        u[k][j] = temp;\r\n                    }\r\n                    for (k = 0; k < v.length; k++) {\r\n                        temp = v[k][i];\r\n                        v[k][i] = v[k][j];\r\n                        v[k][j] = temp;\r\n                    }\r\n                    i = j;\r\n                }\r\n            }\r\n        }\r\n        return [_data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(u),\r\n            new Float32Array(q),\r\n            _data_float_matrix__WEBPACK_IMPORTED_MODULE_0__.FloatMatrix.fromNative(v),\r\n        ];\r\n    }\r\n    ;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/statistics.ts\n");

/***/ }),

/***/ "./src/math/util.ts":
/*!**************************!*\
  !*** ./src/math/util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Util\": () => /* binding */ Util\n/* harmony export */ });\nclass Util {\r\n    static range(n) {\r\n        let array = [];\r\n        for (let i = 0; i < n; i++) {\r\n            array.push(i);\r\n        }\r\n        return array;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9tYXRoL3V0aWwudHM/ODBlNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTSxJQUFJO0lBRWIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFTO1FBQ2xCLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBRUoiLCJmaWxlIjoiLi9zcmMvbWF0aC91dGlsLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFV0aWwge1xyXG5cclxuICAgIHN0YXRpYyByYW5nZShuOiBudW1iZXIpIDogbnVtYmVyW10ge1xyXG4gICAgICAgIGxldCBhcnJheTogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBhcnJheS5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/math/util.ts\n");

/***/ }),

/***/ "./src/math/vector.ts":
/*!****************************!*\
  !*** ./src/math/vector.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector3\": () => /* binding */ Vector3,\n/* harmony export */   \"Vector2\": () => /* binding */ Vector2\n/* harmony export */ });\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const */ \"./src/math/const.ts\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/math/math.ts\");\n/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/math/util.ts\");\n// author: \tJos Feenstra\r\n// inspiration from Three.js\r\n// note: \trecycle the class as much as possble, building a new class is expensive,\r\n// \t\t\tespecially in javascript\r\n// todo: \tBIJ NADER INZIEN: dont go the copy route. rewrite this in a more functional way creating new classes is expensive, but we really need immutable vectors. \r\n// \t\t\tthese types of consistent vectors are only useful in niche cases, and complitate a lot of common cases. \r\n\r\n\r\n\r\n\r\nclass Vector3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static calculateWheelOrder(vectors, ihat, jhat) {\r\n        let angles = [];\r\n        vectors.forEach((v) => {\r\n            angles.push(new Vector2(v.dot(ihat), v.dot(jhat)).angle());\r\n        });\r\n        //console.log(angles);\r\n        let ids = _util__WEBPACK_IMPORTED_MODULE_3__.Util.range(vectors.length);\r\n        ids.sort((a, b) => {\r\n            return angles[a] - angles[b];\r\n        });\r\n        return ids;\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector3(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha, v1.z + (v2.z - v1.z) * alpha);\r\n    }\r\n    static fromArray(a) {\r\n        return new Vector3(a[0], a[1], a[2]);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static fromSphere(radius, theta, phi) {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        return this.constructor(sinPhiRadius * Math.sin(theta), Math.cos(phi) * radius, sinPhiRadius * Math.cos(theta));\r\n    }\r\n    static fromCylinder(radius, theta, height) {\r\n        return this.constructor(radius * Math.sin(theta), height, radius * Math.cos(theta));\r\n    }\r\n    static fromLerpWeights(p1, p2, tP1, tP2, t) {\r\n        if (Math.abs(t - tP1) < 0.00001)\r\n            return (p1);\r\n        if (Math.abs(t - tP2) < 0.00001)\r\n            return (p2);\r\n        if (Math.abs(tP1 - tP2) < 0.00001)\r\n            return (p1);\r\n        let mu = (t - tP1) / (tP2 - tP1);\r\n        return new Vector3(p1.x + mu * (p2.x - p1.x), p1.y + mu * (p2.y - p1.y), p1.z + mu * (p2.z - p1.z));\r\n    }\r\n    // #endregion\r\n    // #region defaults \r\n    static zero() {\r\n        return new Vector3(0, 0, 0);\r\n    }\r\n    ;\r\n    static unitX() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n    ;\r\n    static unitY() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n    ;\r\n    static unitZ() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n    ;\r\n    // #endregion\r\n    // #region basics\r\n    toArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y}, ${this.z})`;\r\n    }\r\n    toVector2() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        this.z = v.z;\r\n        return this;\r\n    }\r\n    to2D() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    // #endregion\r\n    // #region math like vector2\r\n    largestValue() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    added(v) {\r\n        return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x,\r\n            this.y -= v.y,\r\n            this.z -= v.z;\r\n        return this;\r\n    }\r\n    item(i) {\r\n        switch (i) {\r\n            case (0): return this.x;\r\n            case (1): return this.y;\r\n            case (2): return this.z;\r\n            case (3): return 1;\r\n            default: throw \"nope\";\r\n        }\r\n    }\r\n    scaled(v) {\r\n        return new Vector3(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z;\r\n        return this;\r\n    }\r\n    multiplied(v) {\r\n        return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\r\n    }\r\n    divVector(v) {\r\n        return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\r\n    }\r\n    divided(value) {\r\n        return new Vector3(this.x / value, this.y / value, this.z / value);\r\n    }\r\n    div(value) {\r\n        this.x /= value,\r\n            this.y /= value,\r\n            this.z /= value;\r\n        return this;\r\n    }\r\n    minimumed(other) {\r\n        return new Vector3(Math.min(this.x, other.x), Math.min(this.y, other.y), Math.min(this.z, other.z));\r\n    }\r\n    maximumed(other) {\r\n        return new Vector3(Math.max(this.x, other.x), Math.max(this.y, other.y), Math.max(this.z, other.z));\r\n    }\r\n    clamped(min, max) {\r\n        return new Vector3(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\r\n    }\r\n    clampScalared(min, max) {\r\n        return new Vector3(_math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.x, min, max), _math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.y, min, max), _math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.z, min, max));\r\n    }\r\n    clampLengthed(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floored() {\r\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n    }\r\n    ceiled() {\r\n        return new Vector3(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\r\n    }\r\n    rounded() {\r\n        return new Vector3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    roundedToZero() {\r\n        return new Vector3((this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x), (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y), (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z));\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        return this;\r\n    }\r\n    negated() {\r\n        return new Vector3(-this.x, -this.y, -this.z);\r\n    }\r\n    angle(other, normal) {\r\n        let thisProjected = this.subbed(normal.scaled(this.dot(normal)));\r\n        let otherProjected = other.subbed(normal.scaled(other.dot(normal)));\r\n        console.log(thisProjected);\r\n        console.log(otherProjected);\r\n        return 0;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(other) {\r\n        const ax = this.x, ay = this.y, az = this.z;\r\n        const bx = other.x, by = other.y, bz = other.z;\r\n        return new Vector3(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\r\n    }\r\n    getLengthSquared() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.getLengthSquared());\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.divided(this.length() || 1);\r\n    }\r\n    isNormal() {\r\n        return Math.abs(this.length() - 1) < _const__WEBPACK_IMPORTED_MODULE_0__.Const.TOLERANCE;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x)\r\n            + Math.abs(this.y - v.y)\r\n            + Math.abs(this.z - v.z);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector3((other.x - this.x) * alpha, (other.y - this.y) * alpha, (other.z - this.z) * alpha);\r\n    }\r\n    // #endregion\r\n    // #region math specific \r\n    projectOnVector(other) {\r\n        // use dot product to project this vector on the other vector \r\n        const denominator = other.getLengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n    projectedOnPlane(normal) {\r\n        // project a vector \r\n        _vector.copy(this).projectOnVector(normal);\r\n        return this.minimumed(_vector);\r\n    }\r\n    mirrored(normal) {\r\n        // mirror incident vector off plane orthogonal to normal\r\n        // normal is assumed to have unit length\r\n        return this.minimumed(_vector.copy(normal).scale(2 * this.dot(normal)));\r\n    }\r\n    rotated(axis, angle) {\r\n        let mat = _matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newAxisRotation(axis, angle);\r\n        return mat.multiplyVector(this);\r\n    }\r\n}\r\nconst _vector = new Vector3(0, 0, 0);\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromArray(a) {\r\n        return new Vector2(a[0], a[1]);\r\n    }\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    // static from2Pt(from: Vector2, to: Vector2) : Vector2 {\r\n    // \treturn new Vector2(\r\n    // \t\tfrom.x - to.x,\r\n    // \t\tfrom.y - to.y\r\n    // \t)\r\n    // }\r\n    static fromCircle(center, radius, theta) {\r\n        return new Vector2(center.x + radius * Math.sin(theta), center.y + radius * Math.cos(theta));\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    to3D() {\r\n        return new Vector3(this.x, this.y, 0);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector2(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    added(v) {\r\n        return new Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    addn(arg0, arg1) {\r\n        this.x += arg0;\r\n        this.y += arg1;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    subbed(v) {\r\n        return new Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    scaled(v) {\r\n        return new Vector2(this.x * v, this.y * v);\r\n    }\r\n    divVector(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    dived(v) {\r\n        return new Vector2(this.x / v, this.y / v);\r\n    }\r\n    minimum(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    maximum(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.div(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n    lengthSquared() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.div(this.length() || 1);\r\n    }\r\n    normalized() {\r\n        return this.dived(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        let dx = this.x - v.x;\r\n        let dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        return new Vector2(this.x + (other.x - this.x) * alpha, this.y + (other.y - this.y) * alpha);\r\n    }\r\n    // calculate the 'triangle sign' of three points. Can be used to determine clockwise & counter clockwise\r\n    sign(b, c) {\r\n        return ((this.x - c.x) * (b.y - c.y)) - ((b.x - c.x) * (this.y - c.y));\r\n    }\r\n    // use dot product to project this vector on the other vector\r\n    projectOnVector(other) {\r\n        const denominator = other.lengthSquared();\r\n        if (denominator === 0)\r\n            return this.set(0, 0);\r\n        const scalar = other.dot(this) / denominator;\r\n        return this.copy(other).scale(scalar);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math/vector.ts\n");

/***/ }),

/***/ "./src/mesh/graph.ts":
/*!***************************!*\
  !*** ./src/mesh/graph.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Graph\": () => /* binding */ Graph\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mesh */ \"./src/mesh/mesh.ts\");\n// name: graph.ts\r\n// author:  Jos Feenstra\r\n// purpose: HalfEdge Mesh in 3D. \r\n// This does mean that the order around a vertex is not staight forward, and must be handled using normals.\r\n\r\n\r\n// NOTE: create an interface which hides the Edge, Vert & Face interfaces. \r\n// NOTE: half edge is implied\r\nclass Graph {\r\n    constructor() {\r\n        this.verts = [];\r\n        this.edges = [];\r\n    }\r\n    static new() {\r\n        return new Graph();\r\n    }\r\n    static fromMesh(mesh) {\r\n        let graph = Graph.new();\r\n        mesh.verts.forEach((v, i) => {\r\n        });\r\n        let width = mesh.links._width;\r\n        mesh.links.forEachRow((row, i) => {\r\n            // go through pairs\r\n            for (let i = 0; i < width; i++) {\r\n                let iNext = (i + 1) % width;\r\n                if (i < iNext) {\r\n                }\r\n            }\r\n        });\r\n        return graph;\r\n    }\r\n    // geometry trait \r\n    clone() {\r\n        throw new Error(\"not yet implemented...\");\r\n    }\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            v.data = matrix.multiplyVector(v.data);\r\n        }\r\n    }\r\n    // util\r\n    print() {\r\n        console.log(\"graph\");\r\n        console.log(\"--------\");\r\n        console.log(`${this.verts.length} verts: `);\r\n        for (let i = 0; i < this.verts.length; i++) {\r\n            let v = this.verts[i];\r\n            console.log(`v(${i}) | edge: ${v.edge}, data: ${v.data.toString()} `);\r\n        }\r\n        console.log(\"--------\");\r\n        console.log(`${this.edges.length} edges:  `);\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n            console.log(`e(${i}) | vert: ${e.vert} | twin: ${e.twin}, next: ${e.next}`);\r\n        }\r\n        console.log(\"--------\");\r\n    }\r\n    // conversion\r\n    toMesh() {\r\n        return _mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh.fromGraph(this);\r\n    }\r\n    // public getters\r\n    allVerts() {\r\n        let data = [];\r\n        this.verts.forEach((v) => {\r\n            data.push(v.data);\r\n        });\r\n        return data;\r\n    }\r\n    allEdges() {\r\n        let data = [];\r\n        let edges = new Map();\r\n        this.edges.forEach((e, i) => {\r\n            if (edges.has(i)) {\r\n                return;\r\n            }\r\n            data.push(e.vert);\r\n            data.push(this.getEdge(e.twin).vert);\r\n            edges.set(e.twin, e.twin);\r\n        });\r\n        return data;\r\n    }\r\n    allLoops() {\r\n        let loops = [];\r\n        let unvisited = new Set();\r\n        this.edges.forEach((e, i) => {\r\n            unvisited.add(i);\r\n        });\r\n        while (unvisited.size > 0) {\r\n            let loop = [];\r\n            let ei = unvisited.entries().next().value[0];\r\n            let start = ei;\r\n            do {\r\n                let e = this.getEdge(ei);\r\n                ei = e.next;\r\n                unvisited.delete(ei);\r\n                loop.push(e.vert);\r\n            } while (ei != start);\r\n            loops.push(loop);\r\n        }\r\n        return loops;\r\n    }\r\n    getVertex(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw \"out of range\";\r\n        }\r\n        return this.verts[vi].data;\r\n    }\r\n    // getters\r\n    getVert(vi) {\r\n        if (vi < 0 || vi >= this.verts.length) {\r\n            throw \"out of range\";\r\n        }\r\n        return this.verts[vi];\r\n    }\r\n    getEdge(ei) {\r\n        if (ei < 0 || ei >= this.edges.length) {\r\n            console.error(\"out of range\");\r\n        }\r\n        return this.edges[ei];\r\n    }\r\n    getVertEdgeFan(vi) {\r\n        // get all edges connected to this vertex.\r\n        // NOTE: all are outgoing (e.vert == vi)\r\n        let fan = [];\r\n        let v = this.verts[vi];\r\n        let ei = v.edge;\r\n        let start = ei;\r\n        while (true) {\r\n            let e = this.getEdge(ei);\r\n            let e_twin = this.getEdgeTwin(ei);\r\n            fan.push(e);\r\n            ei = e_twin.next;\r\n            if (ei == start) {\r\n                break;\r\n            }\r\n        }\r\n        return fan;\r\n    }\r\n    getVertNeighbors(vi) {\r\n        let nbs = [];\r\n        let v = this.verts[vi];\r\n        let ei = v.edge;\r\n        let start = ei;\r\n        while (true) {\r\n            let e_twin = this.getEdgeTwin(ei);\r\n            nbs.push(e_twin.vert);\r\n            let next = e_twin.next;\r\n            if (ei == start) {\r\n                break;\r\n            }\r\n        }\r\n        return nbs;\r\n    }\r\n    getEdgeIndex(e) {\r\n        return this.getEdge(e.twin).twin;\r\n    }\r\n    getEdgeTwin(ei) {\r\n        return this.edges[this.edges[ei].twin];\r\n    }\r\n    // public  setters\r\n    addVert(vector) {\r\n        this.verts.push({ data: vector, edge: -1 });\r\n    }\r\n    addEdge(vi_1, vi_2, normal) {\r\n        //             ei1\r\n        // / vi1 \\  ---------> / vi2 \\\r\n        // \\     / <---------  \\     /\r\n        //             ei2\r\n        let ei_1 = this.edges.length;\r\n        let ei_2 = ei_1 + 1;\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_2,\r\n            vert: vi_1,\r\n        });\r\n        this.edges.push({\r\n            next: -1,\r\n            twin: ei_1,\r\n            vert: vi_2,\r\n        });\r\n        // make sure the 'next' things are fixed, and more\r\n        this.addEdgeToDisk(vi_1, ei_1, normal);\r\n        this.addEdgeToDisk(vi_2, ei_2, normal);\r\n    }\r\n    // private setters\r\n    addEdgeToDisk(vi, ei, normal) {\r\n        let v = this.getVert(vi);\r\n        let twin = this.getEdgeTwin(ei);\r\n        if (v.edge == -1) {\r\n            // set two pointers:\r\n            v.edge = ei; // I am the vertex's first edge\r\n            twin.next = ei; // that means my twin points back to me \r\n        }\r\n        else {\r\n            // console.log(\"Doing complitated things around vertex\", vi);\r\n            // determine where this edge joins the Disk\r\n            let v_twin = this.verts[twin.vert];\r\n            let myVector = v.data.subbed(v_twin.data);\r\n            // get all vectors\r\n            let vectors = [];\r\n            // get more vectors by getting all edges currently connected to vertex v\r\n            let edges = this.getVertEdgeFan(vi);\r\n            //console.log(\"edges\", edges);\r\n            edges.forEach((edge) => {\r\n                let twin = this.getEdge(edge.twin);\r\n                let neighbor = this.verts[twin.vert];\r\n                let neighborVector = v.data.subbed(neighbor.data);\r\n                vectors.push(neighborVector);\r\n            });\r\n            //console.log(\"all vectors: \", vectors);\r\n            // order them by 'wheel'\t\t\r\n            let ihat = myVector;\r\n            let jhat = myVector.cross(normal);\r\n            let order = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.calculateWheelOrder(vectors, ihat, jhat);\r\n            //console.log(\"order\", order);\r\n            // pick. NOTE: IF CCW / CC OF GRAPH NEEDS TO BE CHANGED, CHANGE THIS ORDER \r\n            let e_before = edges[order[order.length - 1]];\r\n            let e_after = edges[order[0]];\r\n            //console.log(\"ei_before\", this.getEdgeIndex(e_before), \"ei_after\", this.getEdgeIndex(e_after));\r\n            // set two pointers: \r\n            this.getEdge(e_before.twin).next = ei;\r\n            twin.next = this.getEdgeIndex(e_after);\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/graph.ts\n");

/***/ }),

/***/ "./src/mesh/line-array.ts":
/*!********************************!*\
  !*** ./src/mesh/line-array.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineArray\": () => /* binding */ LineArray,\n/* harmony export */   \"getDefaultIndices\": () => /* binding */ getDefaultIndices\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/const */ \"./src/math/const.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    line-render-data.ts\r\n// author:  Jos Feenstra\r\n// purpose: represents an object which can be fed directly to a linerenderer.\r\n//          use it to not continuously have to calculate these aspects if the underlying object is unchanged.\r\n\r\n\r\n\r\n// represents a collection of multiple lines. These could form 1 polyline, but this is not a requirement\r\nclass LineArray {\r\n    constructor(verts, ids) {\r\n        this.verts = verts;\r\n        if (ids == undefined) {\r\n            this.ids = getDefaultIndices(verts.count());\r\n        }\r\n        else {\r\n            this.ids = ids;\r\n        }\r\n    }\r\n    // this assumes even vectices are 'from' points, and odd vertices are 'to' points\r\n    static fromLines(verts) {\r\n        let data = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(verts);\r\n        return new LineArray(data);\r\n    }\r\n    // get all lines from a mesh\r\n    static fromMesh(mesh, uv = false) {\r\n        // 3 edges per face, 2 indices per edge\r\n        let count = mesh.links.count() * 6;\r\n        let data = new Uint16Array(count);\r\n        for (let i = 0; i < mesh.links.count(); i++) {\r\n            let iData = i * 6;\r\n            data[iData] = mesh.links.get(i, 0);\r\n            data[iData + 1] = mesh.links.get(i, 1);\r\n            data[iData + 2] = mesh.links.get(i, 1);\r\n            data[iData + 3] = mesh.links.get(i, 2);\r\n            data[iData + 4] = mesh.links.get(i, 2);\r\n            data[iData + 5] = mesh.links.get(i, 0);\r\n        }\r\n        if (uv) {\r\n            return new LineArray(mesh.uvs, data);\r\n        }\r\n        else {\r\n            return new LineArray(mesh.verts, data);\r\n        }\r\n    }\r\n    // create lines as a grid centered at a plane \r\n    static fromGrid(plane, count, dis) {\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines from a plane\r\n    static fromPlane(plane) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINECOUNT;\r\n        let dis = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.PLANE_RENDER_LINEDISTANCE;\r\n        let disSmall = dis / 10;\r\n        let halfTotalSize = ((count - 1) * dis) / 2;\r\n        // 2 vectors per line, 2 lines per count\r\n        // plus 5 lines, for ihat and jhat icons \r\n        let lines = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count * 4 + 5 * 2);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, -halfTotalSize, 0));\r\n            lines.setVector(i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(t, halfTotalSize, 0));\r\n        }\r\n        // y lines \r\n        for (let i = 0; i < count; i++) {\r\n            let t = -halfTotalSize + dis * i;\r\n            lines.setVector(2 * count + i * 2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-halfTotalSize, -halfTotalSize + dis * i, 0));\r\n            lines.setVector(2 * count + i * 2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize, -halfTotalSize + dis * i, 0));\r\n        }\r\n        // icon I  to show ihat\r\n        let iconLine1 = lines.count() - 10;\r\n        lines.setVector(iconLine1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, -disSmall, 0));\r\n        lines.setVector(iconLine1 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, disSmall, 0));\r\n        let iconLine2 = lines.count() - 8;\r\n        lines.setVector(iconLine2, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall, disSmall, 0));\r\n        lines.setVector(iconLine2 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(halfTotalSize + disSmall * 4, -disSmall, 0));\r\n        // icon II to show jhat\r\n        let iconLine3 = lines.count() - 6;\r\n        lines.setVector(iconLine3, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, halfTotalSize + disSmall * 2.5, 0));\r\n        lines.setVector(iconLine3 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall * 4, 0));\r\n        let iconLine4 = lines.count() - 4;\r\n        lines.setVector(iconLine4, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(disSmall, halfTotalSize + disSmall, 0));\r\n        lines.setVector(iconLine4 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-disSmall, halfTotalSize + disSmall * 4, 0));\r\n        // icon III to show khat / normal direction\r\n        let iconLine5 = lines.count() - 2;\r\n        lines.setVector(iconLine5, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        lines.setVector(iconLine5 + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, dis));\r\n        // finally, transform everything to worldspace, and create the linerenderdata object\r\n        lines.forEach((v) => plane.pushToWorld(v));\r\n        return new LineArray(lines);\r\n    }\r\n    // get all lines representing a circle in 2d. use an optional matrix to \r\n    static fromCircle(c) {\r\n        let count = _math_const__WEBPACK_IMPORTED_MODULE_1__.Const.CIRCLE_SEGMENTS;\r\n        // let count = 12;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(count);\r\n        // x lines\r\n        for (let i = 0; i < count; i++) {\r\n            // radial fraction of a circle\r\n            let t = (i / count) * (Math.PI * 2);\r\n            verts.setVector(i, c.plane.pushToWorld(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(t) * c.radius, Math.sin(t) * c.radius, 0)));\r\n        }\r\n        return new LineArray(verts, getPairIndices(count));\r\n    }\r\n    // turn a spline into a polyline, and render it\r\n    static fromSpline() {\r\n        throw \"todo!\";\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array.fromList(cube.getCorners());\r\n        return new LineArray(verts);\r\n    }\r\n    static fromJoin(lines) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let idsCount = 0;\r\n        let vertCount = 0;\r\n        for (let line of lines) {\r\n            idsCount += line.ids.length;\r\n            vertCount += line.verts.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(vertCount);\r\n        let ids = new Uint16Array(idsCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let lineset of lines) {\r\n            for (let i = 0; i < lineset.verts.count(); i++) {\r\n                verts.setRow(accVerts + i, lineset.verts.getRow(i));\r\n            }\r\n            for (let i = 0; i < lineset.ids.length; i++) {\r\n                ids[accFaces + i] = lineset.ids[i] + accVerts;\r\n            }\r\n            accVerts += lineset.verts.count();\r\n            accFaces += lineset.ids.length;\r\n        }\r\n        return new LineArray(verts, ids);\r\n    }\r\n}\r\n// just get an int sequence from 0 to length. \r\nfunction getDefaultIndices(count) {\r\n    let data = new Uint16Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i] = i;\r\n    }\r\n    return data;\r\n}\r\nfunction getPairIndices(count) {\r\n    // given count of 3 => return 0,1 | 1,2 | 2,0\r\n    let length = count * 2;\r\n    let data = new Uint16Array(length);\r\n    for (let i = 0; i < count; i++) {\r\n        data[i * 2] = i;\r\n        data[i * 2 + 1] = (i + 1) % count;\r\n    }\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/line-array.ts\n");

/***/ }),

/***/ "./src/mesh/mesh.ts":
/*!**************************!*\
  !*** ./src/mesh/mesh.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mesh\": () => /* binding */ Mesh\n/* harmony export */ });\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graph */ \"./src/mesh/graph.ts\");\n// Mesh.Ts\r\n// Purpose: obj class for dealing with that specific filetype, and meshes in general\r\n// Author: Jos Feenstra\r\n// import { createUnsignedBytesMatrixTexture } from \"@tensorflow/tfjs-backend-webgl/dist/gpgpu_util\";\r\n// import { browserLocalStorage } from \"@tensorflow/tfjs-core/dist/io/local_storage\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n// a very pure idea of a mesh : Vertices + links between vertices. \r\n// Could be anything with these properties.\r\nclass Mesh {\r\n    constructor(verts, links) {\r\n        this.verts = verts;\r\n        this.links = links;\r\n    }\r\n    static new(verts, links) {\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromLists(verts, faces) {\r\n        return new Mesh(_data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(verts), _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix.fromList(faces, 3));\r\n    }\r\n    static fromEmpty() {\r\n        return new Mesh(new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(0), new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(0, 0));\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            faceCount += mesh.links.count();\r\n        }\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromRect(rect) {\r\n        let verts = rect.getCorners();\r\n        // we cant handle quads yet \r\n        let faces = [];\r\n        faces.push(...quadToTri(cubeFaces[0]));\r\n        let mesh = new _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMesh(4, 0, 0, 2);\r\n        mesh.verts.fillFromList(verts);\r\n        mesh.links.setData(faces);\r\n        // console.log(mesh.verts);\r\n        // console.log(mesh.links);\r\n        mesh.setUvs(new Float32Array([\r\n            0.0, 0.0,\r\n            0.0, 1.0,\r\n            1.0, 0.0,\r\n            1.0, 1.0\r\n        ]));\r\n        return mesh;\r\n    }\r\n    static fromCube(cube) {\r\n        let verts = cube.getCorners();\r\n        let faces = [];\r\n        for (let face of cubeFaces) {\r\n            faces.push(...quadToTri(face));\r\n        }\r\n        return this.fromLists(verts, faces);\r\n    }\r\n    static fromIcosahedron(scale = 1) {\r\n        let graph = new _graph__WEBPACK_IMPORTED_MODULE_5__.Graph();\r\n        let a = scale;\r\n        let phi = (1 + Math.pow(5, 0.5)) / 2;\r\n        let b = a * phi;\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-a, -b, 0));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(a, -b, 0));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-a, b, 0));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(a, b, 0));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, -a, -b));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, a, -b));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, -a, b));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, a, b));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-b, 0, -a));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(-b, 0, a));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(b, 0, -a));\r\n        graph.addVert(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(b, 0, a));\r\n        // build edges\r\n        let addEdge = (a, b) => {\r\n            let norm = graph.getVertex(a).added(graph.getVertex(b)).normalize();\r\n            graph.addEdge(a, b, norm);\r\n        };\r\n        for (let i = 0; i < 12; i += 4) {\r\n            addEdge(i + 0, i + 1);\r\n            addEdge(i + 2, i + 3);\r\n            let inext = (i + 4) % 12;\r\n            addEdge(i + 0, inext + 2);\r\n            addEdge(i + 0, inext + 0);\r\n            addEdge(i + 1, inext + 2);\r\n            addEdge(i + 1, inext + 0);\r\n            addEdge(i + 2, inext + 3);\r\n            addEdge(i + 2, inext + 1);\r\n            addEdge(i + 3, inext + 3);\r\n            addEdge(i + 3, inext + 1);\r\n        }\r\n        return this.fromGraph(graph);\r\n    }\r\n    static fromSphere(center, radius, numRings, numPerRing) {\r\n        // verts\r\n        let vertCount = numRings * numPerRing + 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.scale(radius).add(center));\r\n        };\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 1));\r\n        for (let ring = 0; ring < numRings; ring++) {\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let alpha = Math.PI * (ring + 1) / (numRings + 1);\r\n                let beta = 2 * Math.PI * perRing / numPerRing;\r\n                let x = Math.sin(alpha)\r\n                    * Math.cos(beta);\r\n                let y = Math.sin(alpha)\r\n                    * Math.sin(beta);\r\n                let z = Math.cos(alpha);\r\n                let index = 1 + ring * numPerRing + perRing;\r\n                setVert(index, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, y, z));\r\n            }\r\n        }\r\n        setVert(vertCount - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, -1));\r\n        // faces \r\n        let faceCount = numPerRing * (numRings) * 2;\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // faces top\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setFace(i, [\r\n                0,\r\n                i + 1,\r\n                (i + 1) % numPerRing + 1,\r\n            ]);\r\n        }\r\n        // faces middle\r\n        // we are at this cursor\r\n        // console.log(\"faces\", faceCount);\r\n        for (let ring = 0; ring < numRings - 1; ring++) {\r\n            let vertCursor = numPerRing * ring + 1;\r\n            let vertCursorBelow = vertCursor + numPerRing;\r\n            for (let perRing = 0; perRing < numPerRing; perRing++) {\r\n                let a = vertCursor + perRing;\r\n                let b = vertCursor + ((perRing + 1) % numPerRing);\r\n                let c = vertCursorBelow + perRing;\r\n                let d = vertCursorBelow + ((perRing + 1) % numPerRing);\r\n                let iFace = numPerRing + (numPerRing * ring * 2) + perRing * 2;\r\n                // console.log(iFace);\r\n                setFace(iFace, [a, c, b]);\r\n                setFace(iFace + 1, [c, d, b]);\r\n            }\r\n        }\r\n        // faces bottom \r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let iNext = ((i + 1) % numPerRing);\r\n            let last = vertCount - 1;\r\n            let iFace = faceCount - numPerRing + i;\r\n            let zero = vertCount - numPerRing - 1;\r\n            let vertI = zero + i;\r\n            let vertINext = zero + iNext;\r\n            // console.log(iFace);\r\n            // console.log(\"face\", last, vertINext, vertI);\r\n            setFace(iFace, [\r\n                last,\r\n                vertINext,\r\n                vertI,\r\n            ]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromCylinder(from, to, radius, numPerRing) {\r\n        let normal = to.subbed(from);\r\n        let numVerts = numPerRing * 2 + 2;\r\n        let numFaces = (numVerts - 2) * 4;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(numVerts);\r\n        // some dumb stuff \r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector);\r\n        };\r\n        // planes to represent top & bottom\r\n        let planeFrom = _geo_plane__WEBPACK_IMPORTED_MODULE_4__.Plane.fromPN(from, normal);\r\n        // console.log(planeFrom);\r\n        let planeTo = _geo_plane__WEBPACK_IMPORTED_MODULE_4__.Plane.fromPN(to, normal);\r\n        // console.log(planeFrom);\r\n        // verts 'from ring\r\n        setVert(0, from);\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(Math.PI * 2 * i / numPerRing), Math.sin(Math.PI * 2 * i / numPerRing), 0).scale(radius);\r\n            v = planeFrom.matrix.multiplyVector(v);\r\n            setVert(i + 1, v);\r\n        }\r\n        // verts 'to' ring\r\n        let numVertsHalf = numVerts / 2;\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let v = new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(Math.PI * 2 * i / numPerRing), Math.sin(Math.PI * 2 * i / numPerRing), 0).scale(radius);\r\n            v = planeTo.matrix.multiplyVector(v);\r\n            setVert(numVertsHalf + i, v);\r\n        }\r\n        setVert(numVerts - 1, to);\r\n        // start making links\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set faces \r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = 1 + i;\r\n            let c = 1 + ((i + 1) % numPerRing);\r\n            let d = numVerts - 1;\r\n            let e = numVertsHalf + i;\r\n            let f = numVertsHalf + ((i + 1) % numPerRing);\r\n            setFace(i * 4, [a, c, b]);\r\n            setFace(i * 4 + 1, [b, c, e]);\r\n            setFace(i * 4 + 2, [c, f, e]);\r\n            setFace(i * 4 + 3, [d, e, f]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromCone(center, radius, height, numPerRing) {\r\n        let numVerts = numPerRing + 2;\r\n        let numFaces = numPerRing * 2;\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(numVerts);\r\n        let setVert = function (i, vector) {\r\n            verts.setVector(i, vector.add(center));\r\n        };\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(numFaces, 3);\r\n        links.fill(-1);\r\n        let setFace = function (i, row) {\r\n            links.setRow(i, row);\r\n        };\r\n        // set verts\r\n        setVert(0, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0));\r\n        for (let i = 0; i < numPerRing; i++) {\r\n            setVert(i + 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.cos(Math.PI * 2 * i / numPerRing), Math.sin(Math.PI * 2 * i / numPerRing), 0).scale(radius));\r\n        }\r\n        setVert(numVerts - 1, new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, height));\r\n        // set faces \r\n        for (let i = 0; i < numPerRing; i++) {\r\n            let a = 0;\r\n            let b = numVerts - 1;\r\n            let c = 1 + i;\r\n            let d = 1 + ((i + 1) % numPerRing);\r\n            setFace(i * 2, [a, d, c]);\r\n            setFace(i * 2 + 1, [c, d, b]);\r\n        }\r\n        return new Mesh(verts, links);\r\n    }\r\n    static fromGraph(graph) {\r\n        // NOTE : doesnt really work if the loops are not of size 3.\r\n        let verts = _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array.fromList(graph.allVerts());\r\n        let loops = graph.allLoops();\r\n        let links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(loops.length, 3);\r\n        loops.forEach((loop, i) => {\r\n            if (loop.length == 3) {\r\n                links.setRow(i, loop);\r\n            }\r\n            else {\r\n                // console.log(\"cant convert loop\");\r\n            }\r\n        });\r\n        return Mesh.new(verts, links);\r\n    }\r\n    // TODO fix this later\r\n    toDisplayMesh() {\r\n        let mesh = new _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMesh(this.verts.count(), 0, 0, this.links.count());\r\n        mesh.verts.data = this.verts.data;\r\n        mesh.links.data = this.links.data;\r\n        return mesh;\r\n    }\r\n    toGraph() {\r\n        return _graph__WEBPACK_IMPORTED_MODULE_5__.Graph.fromMesh(this);\r\n    }\r\n    getType() {\r\n        if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Points) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Points;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Lines) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Lines;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Triangles) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Triangles;\r\n        }\r\n        else if (this.links._width == _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Quads) {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Quads;\r\n        }\r\n        else {\r\n            return _render_mesh__WEBPACK_IMPORTED_MODULE_3__.RenderMeshKind.Invalid;\r\n        }\r\n    }\r\n}\r\n// ================ Help ==================\r\n// 0 ------- 1\r\n// | \\     / |\r\n// |  4---5  |\r\n// |  |   |  |\r\n// |  6---7  |\r\n// | /     \\ |\r\n// 2 ------- 3\r\nconst cubeFaces = [\r\n    [0, 1, 3, 2],\r\n    [4, 0, 2, 6],\r\n    [1, 0, 4, 5],\r\n    [1, 5, 7, 3],\r\n    [2, 3, 7, 6],\r\n    [5, 4, 6, 7],\r\n];\r\nfunction quadToTri(abcd) {\r\n    return [\r\n        abcd[0], abcd[2], abcd[1],\r\n        abcd[0], abcd[3], abcd[2]\r\n    ];\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/mesh.ts\n");

/***/ }),

/***/ "./src/mesh/render-mesh.ts":
/*!*********************************!*\
  !*** ./src/mesh/render-mesh.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RenderMeshKind\": () => /* binding */ RenderMeshKind,\n/* harmony export */   \"NormalKind\": () => /* binding */ NormalKind,\n/* harmony export */   \"RenderMesh\": () => /* binding */ RenderMesh,\n/* harmony export */   \"meshFromObj\": () => /* binding */ meshFromObj\n/* harmony export */ });\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n// Name: render-mesh.ts \r\n// Author: Jos Feenstra \r\n// Purpose: \r\n// a mesh representation with the sole purpose of to be renderer. \r\n// - fixed length attributes \r\n// - can represent:\r\n//   - pointcloud (links = null)\r\n//   - graph (links.width = 2)\r\n//   - triangles (links.width = 3)\r\n//   - quads (links.width = 4. will need to be converted to triangles)\r\n\r\n\r\nvar RenderMeshKind;\r\n(function (RenderMeshKind) {\r\n    RenderMeshKind[RenderMeshKind[\"Invalid\"] = 0] = \"Invalid\";\r\n    RenderMeshKind[RenderMeshKind[\"Points\"] = 1] = \"Points\";\r\n    RenderMeshKind[RenderMeshKind[\"Lines\"] = 2] = \"Lines\";\r\n    RenderMeshKind[RenderMeshKind[\"Triangles\"] = 3] = \"Triangles\";\r\n    RenderMeshKind[RenderMeshKind[\"Quads\"] = 4] = \"Quads\";\r\n})(RenderMeshKind || (RenderMeshKind = {}));\r\nvar NormalKind;\r\n(function (NormalKind) {\r\n    NormalKind[NormalKind[\"None\"] = 0] = \"None\";\r\n    NormalKind[NormalKind[\"Vertex\"] = 1] = \"Vertex\";\r\n    NormalKind[NormalKind[\"Face\"] = 2] = \"Face\";\r\n    NormalKind[NormalKind[\"MultiVertex\"] = 3] = \"MultiVertex\";\r\n})(NormalKind || (NormalKind = {}));\r\nclass RenderMesh {\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        var _a;\r\n        this._normKind = NormalKind.None;\r\n        this.verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(vertCount);\r\n        this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(normCount);\r\n        this.uvs = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector2Array(uvCount);\r\n        this.ambi = new Float32Array(vertCount);\r\n        this.links = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_0__.IntMatrix(faceCount, 3);\r\n        (_a = this.links) === null || _a === void 0 ? void 0 : _a.fill(-1);\r\n        this.texture = texture;\r\n    }\r\n    static fromData(verts, norms, uvs, faces) {\r\n        // NOTE : this type of parsing makes my life easy, but is dangerous. This is why i created the \r\n        // Array class. \r\n        let mesh = new RenderMesh(verts.length / 3, norms.length / 3, uvs.length / 2, faces.length / 3);\r\n        mesh.verts.fillWith(verts);\r\n        mesh.norms.fillWith(norms);\r\n        mesh.uvs.fillWith(uvs);\r\n        mesh.links.fillWith(faces);\r\n        return mesh;\r\n    }\r\n    static fromJoin(meshes) {\r\n        // join meshes, dont try to look for duplicate vertices\r\n        // TODO : make this the trouble of Matrices and Arrays\r\n        let vertCount = 0;\r\n        let faceCount = 0;\r\n        for (let mesh of meshes) {\r\n            vertCount += mesh.verts.count();\r\n            if (mesh.links)\r\n                faceCount += mesh.links.count();\r\n        }\r\n        let joined = new RenderMesh(vertCount, 0, 0, faceCount);\r\n        let accVerts = 0;\r\n        let accFaces = 0;\r\n        for (let mesh of meshes) {\r\n            for (let i = 0; i < mesh.verts.count(); i++) {\r\n                joined.verts.setVector(accVerts + i, mesh.verts.getVector(i));\r\n            }\r\n            if (!mesh.links)\r\n                continue;\r\n            for (let i = 0; i < mesh.links.count(); i++) {\r\n                let face = mesh.links.getRow(i);\r\n                for (let j = 0; j < face.length; j++) {\r\n                    face[j] = face[j] + accVerts;\r\n                }\r\n                joined.links.setRow(accFaces + i, face);\r\n            }\r\n            accVerts += mesh.verts.count();\r\n            accFaces += mesh.links.count();\r\n        }\r\n        return joined;\r\n    }\r\n    // geometry trait\r\n    transform(matrix) {\r\n        for (let i = 0; i < this.verts.count(); i++) {\r\n            let v = this.verts.getVector(i);\r\n            this.verts.setVector(i, matrix.multiplyVector(v));\r\n        }\r\n    }\r\n    // getters & selectors \r\n    getAdjacentFaces(v) {\r\n        let faces = [];\r\n        let count = this.links.count();\r\n        for (let i = 0; i < count; i++) {\r\n            if (this.links.getRow(i).includes(v)) {\r\n                faces.push(i);\r\n            }\r\n        }\r\n        return faces;\r\n    }\r\n    getFaceVertices(f) {\r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.links._width);\r\n        this.links.getRow(f).forEach((v, i) => {\r\n            verts.setVector(i, (this.verts.getVector(v)));\r\n        });\r\n        return verts;\r\n    }\r\n    getKind() {\r\n        if (this.links._width == RenderMeshKind.Points) {\r\n            return RenderMeshKind.Points;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Lines) {\r\n            return RenderMeshKind.Lines;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Triangles) {\r\n            return RenderMeshKind.Triangles;\r\n        }\r\n        else if (this.links._width == RenderMeshKind.Quads) {\r\n            return RenderMeshKind.Quads;\r\n        }\r\n        else {\r\n            return RenderMeshKind.Invalid;\r\n        }\r\n    }\r\n    getNormalType() {\r\n        return this._normKind;\r\n    }\r\n    // setters \r\n    setTexture(texture) {\r\n        this.texture = texture;\r\n        // recalculate things if needed\r\n    }\r\n    setUvs(uvs) {\r\n        if (uvs instanceof Float32Array) {\r\n            this.uvs.data = uvs;\r\n        }\r\n        else {\r\n            this.uvs = uvs;\r\n        }\r\n        // recalculate if needed\r\n    }\r\n    // convert\r\n    exportToObj(path) {\r\n        throw \"todo\";\r\n    }\r\n    // ------ normals ------\r\n    // set 1 normal per face \r\n    calculateFaceNormals() {\r\n        if (this.getKind() != RenderMeshKind.Triangles) {\r\n            console.error(\"can only calculate normals from triangular meshes\");\r\n            this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(0);\r\n            return;\r\n        }\r\n        this._normKind = NormalKind.Face;\r\n        let faceCount = this.links.count();\r\n        this.norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(faceCount);\r\n        for (let f = 0; f < faceCount; f++) {\r\n            let verts = this.getFaceVertices(f).toList();\r\n            let normal = verts[1].subbed(verts[0]).cross(verts[2].subbed(verts[0])).normalize();\r\n            this.norms.setVector(f, normal);\r\n        }\r\n    }\r\n    calculateVertexNormals() {\r\n        this._normKind = NormalKind.Vertex;\r\n    }\r\n    calculateMultiVertexNormals() {\r\n        // set type \r\n        this._normKind = NormalKind.MultiVertex;\r\n        // calculate \r\n        this.calculateFaceNormals();\r\n        let vertNormals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_1__.Vector3Array(this.verts.count());\r\n        this.verts.forEach((v, i) => {\r\n            let adjFaces = this.getAdjacentFaces(i);\r\n            vertNormals.setVector(i, this.norms.take(adjFaces).average());\r\n        });\r\n        this.norms = vertNormals;\r\n    }\r\n}\r\n;\r\n// ================ Obj ===================\r\nfunction meshFromObj(text) {\r\n    // This is not a full .obj parser.\r\n    // see http://paulbourke.net/dataformats/obj/\r\n    // INDEXES ORIGINALLY REFER TO LINES, so -1 is needed\r\n    // run through all lines, and temporarely store\r\n    // all data in raw number lists, since we dont know how \r\n    // many vertices or faces well get. \r\n    let verts = []; // 3 long float\r\n    let norms = []; // 3 long float\r\n    let uvs = []; // 2 long float \r\n    let faces = []; // 9 long ints, u16's should suffice. \r\n    // note : this is very inefficient, but it'll have to do for now...\r\n    const keywordRE = /(\\w*)(?: )*(.*)/;\r\n    const lines = text.split('\\n');\r\n    for (let i = 0; i < lines.length; ++i) {\r\n        const line = lines[i].trim();\r\n        // filter out comments\r\n        if (line === '' || line.startsWith('#')) {\r\n            continue;\r\n        }\r\n        const m = keywordRE.exec(line);\r\n        if (!m) {\r\n            continue;\r\n        }\r\n        const [, keyword, unparsedArgs] = m;\r\n        const parts = line.split(/\\s+/).slice(1);\r\n        switch (keyword) {\r\n            case 'v':\r\n                for (const part of parts) {\r\n                    verts.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'vn':\r\n                for (const part of parts) {\r\n                    norms.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'vt':\r\n                for (const part of parts) {\r\n                    uvs.push(parseFloat(part));\r\n                }\r\n                break;\r\n            case 'f':\r\n                for (const value of ProcessObjFace(parts)) {\r\n                    faces.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn('unhandled keyword:', keyword); // eslint-disable-line no-console\r\n                continue;\r\n        }\r\n    }\r\n    // console.log(\"number of vertices: \" + verts.length / 3);\r\n    // console.log(\"number of faces: \" + faces.length / 3);\r\n    // console.log(\"number of uvs: \" + uvs.length / 2);\r\n    // console.log(\"number of norms: \" + norms.length / 3);\r\n    let mesh = RenderMesh.fromData(verts, norms, uvs, faces);\r\n    return mesh;\r\n}\r\n// NOTE: for now, uv and normals are completely ignored!!!\r\n// we assume the indices are the same als the vertices!!!\r\n// verbose way of processing one single vertex/normal/uv combination in a face. \r\nfunction ProcessObjFaceVertex(part) {\r\n    // make sure data always has length: 3\r\n    let data = [];\r\n    // cut string apart and process it\r\n    let subparts = part.split('/');\r\n    if (subparts.length == 1) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(0);\r\n        // data.push(0);\r\n    }\r\n    else if (subparts.length == 3) {\r\n        data.push(parseInt(subparts[0]) - 1);\r\n        // data.push(parseInt(subparts[1])-1);\r\n        // data.push(parseInt(subparts[2])-1);\r\n    }\r\n    else {\r\n        throw \"invalid face found when processing\";\r\n    }\r\n    return data;\r\n}\r\n// process a face entry in an obj file\r\nfunction ProcessObjFace(parts) {\r\n    let data = [];\r\n    if (parts.length == 4) {\r\n        // i dont want to deal with quads for now, create 2 faces from a quad\r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        let d = ProcessObjFaceVertex(parts[3]);\r\n        data.push(...a, ...b, ...c, ...a, ...c, ...d);\r\n    }\r\n    else if (parts.length == 3) {\r\n        // as normal        \r\n        let a = ProcessObjFaceVertex(parts[0]);\r\n        let b = ProcessObjFaceVertex(parts[1]);\r\n        let c = ProcessObjFaceVertex(parts[2]);\r\n        data.push(...a, ...b, ...c);\r\n    }\r\n    // data always has length 9 or 18\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/render-mesh.ts\n");

/***/ }),

/***/ "./src/mesh/topo-mesh.ts":
/*!*******************************!*\
  !*** ./src/mesh/topo-mesh.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TopoMesh\": () => /* binding */ TopoMesh\n/* harmony export */ });\n/* harmony import */ var _data_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/hash-table */ \"./src/data/hash-table.ts\");\n/* harmony import */ var _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/int-matrix */ \"./src/data/int-matrix.ts\");\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _render_mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _geo_triangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geo/triangle */ \"./src/geo/triangle.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n// a mesh with topological information\r\nclass TopoMesh extends _render_mesh__WEBPACK_IMPORTED_MODULE_4__.RenderMesh {\r\n    // private -> should only be used with factory methods\r\n    constructor(vertCount, normCount, uvCount, faceCount, texture = undefined) {\r\n        super(vertCount, normCount, uvCount, faceCount, texture);\r\n        this.lastTouched = 0; // needed for triangle walk\r\n        this.neighborMap = new _data_int_matrix__WEBPACK_IMPORTED_MODULE_1__.IntMatrix(this.links.count(), 3);\r\n    }\r\n    static copyFromMesh(mesh) {\r\n        let topoMesh = new TopoMesh(mesh.verts.count(), mesh.norms.count(), mesh.uvs.count(), mesh.links.count());\r\n        topoMesh.verts = mesh.verts.clone();\r\n        topoMesh.norms = mesh.norms.clone();\r\n        topoMesh.uvs = mesh.uvs.clone();\r\n        topoMesh.links = mesh.links.clone();\r\n        topoMesh.setNeighborMap();\r\n        return topoMesh;\r\n    }\r\n    setNeighborMap() {\r\n        // this method fills this.neighborMap after data is loaded\r\n        // \r\n        let edges = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        let pairs = new _data_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable();\r\n        // 1 | per triangle\r\n        this.links.forEachRow((f, faceIndex) => {\r\n            let faceEdges = [\r\n                [f[0], f[1]],\r\n                [f[1], f[2]],\r\n                [f[2], f[0]]\r\n            ];\r\n            faceEdges.forEach(e => {\r\n                // if (4, 1), orientation is True | if (1, 4), orientation is False\r\n                let orientation = e[0] > e[1];\r\n                // use this min max construction to only store one edge per triangle pair\r\n                // let edge: [number, number] = e.sort();\r\n                let edge = new Int32Array([Math.min(...e), Math.max(...e)]);\r\n                // console.log(edge);\r\n                if (!edges.has(edge)) {\r\n                    // orientation, first tr ID, second tr ID\r\n                    edges.set(edge, [orientation, faceIndex, -1]);\r\n                }\r\n                else {\r\n                    // an edge match is made!\r\n                    // console.log(\"matched!\");\r\n                    let other = edges.get(edge);\r\n                    let nbOrientation = other[0];\r\n                    let nbIndex = other[1];\r\n                    other[2] = faceIndex;\r\n                    edges.set(edge, other); // edge is put away again, if an edge map is ever needed.\r\n                    // assign neighbours\r\n                    this.setNb(faceIndex, edge, nbIndex);\r\n                    this.setNb(nbIndex, edge, faceIndex);\r\n                    // use this info to fill self.pairs\r\n                    // if orientation != other orientation, edge is 'good' -> False\r\n                    // else -> True, one of the neighbour triangles needs to be flipped\r\n                    let pair = [nbIndex, faceIndex];\r\n                    pair.sort();\r\n                    // pair = (Math.min(...pair), Math.max(...pair))\r\n                    if (orientation != nbOrientation)\r\n                        pairs.set(pair, false);\r\n                    else\r\n                        pairs.set(pair, true);\r\n                }\r\n            });\r\n        });\r\n        // Done. Give feedback\r\n        let count = 0;\r\n        // for pair in pairs.items():\r\n        //     if not pair: count +=1;\r\n        console.log(\"number of 'wrong' face neighbours: \", count);\r\n        return;\r\n    }\r\n    /**\r\n     * Get the triangle based on a UV point somewhere on the mesh.\r\n     * Returns -1 if the point is not on the mesh TODO OR IF THE PATH HAS HOLES IN IT TODO FIX THIS!\r\n     * @param  {Vector2} point\r\n     * @returns triangleIndex, or -1 if failure\r\n     */\r\n    walkUV(point) {\r\n        // start where we last stopped\r\n        let faceIndex = this.lastTouched;\r\n        // make sure we never take more steps than triangles in the triangulation.\r\n        // this would mean something went wrong\r\n        let count = this.links.count();\r\n        for (let _ = 0; _ < count; _++) {\r\n            // i dont know how, but if we accidentally landed outside of the mesh\r\n            if (faceIndex == -1) {\r\n                return -1;\r\n            }\r\n            for (let i = 0; i < 3; i++) {\r\n                let j = (i + 1) % 3;\r\n                let face = this.links.getRow(faceIndex);\r\n                let edge = [face[i], face[j]];\r\n                let b = this.uvs.getVector(edge[0]);\r\n                let c = this.uvs.getVector(edge[1]);\r\n                let sign = point.sign(b, c);\r\n                if (sign < 0) {\r\n                    faceIndex = this.getNb(faceIndex, edge);\r\n                    // if its ouside, return -1\r\n                    if (faceIndex == -1)\r\n                        return -1;\r\n                    // else: go there immidiately\r\n                    this.lastTouched = faceIndex;\r\n                    break;\r\n                }\r\n                // if this ran 3 times, the point must be within the triangle\r\n                if (i == 2)\r\n                    return faceIndex;\r\n            }\r\n        }\r\n        // something went wrong\r\n        return -1;\r\n    }\r\n    // find the faces closest to the point \r\n    // -1 if the mesh does not contain triangles\r\n    closestFaces(point) {\r\n        let closestVertexId = this.verts.closestId(point);\r\n        // get all face ids containing closestVertex, along with their centers\r\n        let closestFaces = [];\r\n        //let centers: Vector3[] = []\r\n        this.links.forEachRow((tr, i) => {\r\n            if (tr.includes(closestVertexId)) {\r\n                closestFaces.push(i);\r\n                //let center = Vector3Array.fromList(this.getFacePoints(i, false)).average();\r\n                //centers.push(center);\r\n            }\r\n        });\r\n        // select the triangle with the closest baricenter\r\n        return closestFaces;\r\n    }\r\n    elevate(p) {\r\n        // 'elevate' a point in UV space to vertex space using a barycentric remap   \r\n        // figure out where this point is located on the mesh\r\n        let face = this.walkUV(p);\r\n        if (face == -1) {\r\n            console.warn(\"got a point not on triangle...\");\r\n            return new _math_vector__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0);\r\n        }\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr2.toBarycentric(p);\r\n        return tr3.fromBarycentric(bari);\r\n    }\r\n    closestFace(p) {\r\n        // NOTE this doesnt really work all that well...\r\n        let faceIds = this.closestFaces(p);\r\n        let closestPoints = new _data_vector_array__WEBPACK_IMPORTED_MODULE_2__.Vector3Array(faceIds.length);\r\n        faceIds.forEach((id, i) => {\r\n            let tr = this.getTriangle3(id);\r\n            let cp = tr.closestPoint(p);\r\n            closestPoints.setVector(i, cp);\r\n        });\r\n        // find the closest closest point \r\n        let id = closestPoints.closestId(p);\r\n        return faceIds[id];\r\n    }\r\n    // 'flatten' a point in vertex space to uv space using a barycentric remap\r\n    // NOTE : this is not exactly a 'project to closest triangle', something like that wouldnt always work\r\n    flatten(p, face) {\r\n        let tr3 = this.getTriangle3(face);\r\n        let tr2 = this.getTriangle2(face);\r\n        let bari = tr3.toBarycentric(p);\r\n        return tr2.fromBarycentric(bari);\r\n    }\r\n    // combo\r\n    flattenClosestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        return this.flatten(p, face);\r\n    }\r\n    closestPoint(p) {\r\n        let face = this.closestFace(p);\r\n        let triangle = this.getTriangle3(face);\r\n        let bari = triangle.toBarycentric(p);\r\n        return triangle.fromBarycentric(bari);\r\n    }\r\n    getTriangle2(id) {\r\n        let p = this.getFacePoints(id, true);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle2(p[0], p[1], p[2]);\r\n    }\r\n    getTriangle3(id) {\r\n        let p = this.getFacePoints(id, false);\r\n        return new _geo_triangle__WEBPACK_IMPORTED_MODULE_5__.Triangle3(p[0], p[1], p[2]);\r\n    }\r\n    setNb(faceIndex, commonEdge, nbIndex) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.links.get(faceIndex, j))) {\r\n                this.neighborMap.set(faceIndex, j, nbIndex);\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"these are not actually neighbors!\";\r\n    }\r\n    getNb(faceIndex, commonEdge) {\r\n        for (let j = 0; j < 3; j++) {\r\n            if (!commonEdge.includes(this.links.get(faceIndex, j))) {\r\n                return this.neighborMap.get(faceIndex, j);\r\n            }\r\n        }\r\n        console.log(this.links.getRow(faceIndex));\r\n        console.log(commonEdge);\r\n        throw \"common edge does not match triangle index!\";\r\n    }\r\n    getFacePoints(tr, uv) {\r\n        let pointIds = this.links.getRow(tr);\r\n        if (uv) {\r\n            return [\r\n                this.uvs.getVector(pointIds[0]),\r\n                this.uvs.getVector(pointIds[1]),\r\n                this.uvs.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n        else {\r\n            return [\r\n                this.verts.getVector(pointIds[0]),\r\n                this.verts.getVector(pointIds[1]),\r\n                this.verts.getVector(pointIds[2]),\r\n            ];\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/mesh/topo-mesh.ts\n");

/***/ }),

/***/ "./src/render/billboard-renderer.ts":
/*!******************************************!*\
  !*** ./src/render/billboard-renderer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BillBoardRenderer\": () => /* binding */ BillBoardRenderer,\n/* harmony export */   \"TextRenderer\": () => /* binding */ TextRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    billboard-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: Renderer images as billboards.\r\n\r\n// mooi font om te gebruiken \r\n// https://datagoblin.itch.io/monogram\r\nclass BillBoardRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    // TODO\r\n    // accepts a texture & dots\r\n    constructor(gl) {\r\n        let vs = \"\";\r\n        let fs = \"\";\r\n        super(gl, vs, fs);\r\n    }\r\n    set(texture, dots, textureDots, speed) {\r\n        // TODO\r\n    }\r\n    render() {\r\n        // TODO\r\n    }\r\n    setAndRender(texture, dots, textureDots, speed) {\r\n        this.set(texture, dots, textureDots, speed);\r\n        this.render();\r\n    }\r\n}\r\nclass TextRenderer {\r\n    // todo horizontal justification\r\n    // todo vertical justification\r\n    constructor(gl) {\r\n        this.br = new BillBoardRenderer(gl);\r\n    }\r\n    set(strings, locations) {\r\n        if (strings.length != locations.count()) {\r\n            console.warn(\"couldnt set TextRenderer: strings not equal to locations...\");\r\n        }\r\n        let length = strings.length;\r\n        // TODO: set a whole bunch of stuff \r\n    }\r\n    render() {\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXIvYmlsbGJvYXJkLXJlbmRlcmVyLnRzP2VkODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQWlDO0FBQ2pDLHdCQUF3QjtBQUN4QiwwQ0FBMEM7QUFJTztBQUdqRCw2QkFBNkI7QUFDN0Isc0NBQXNDO0FBRS9CLE1BQU0saUJBQWtCLFNBQVEsK0NBQVE7SUFDM0MsT0FBTztJQUVQLDJCQUEyQjtJQUUzQixZQUFZLEVBQXlCO1FBRWpDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNaLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVaLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsR0FBRyxDQUFDLE9BQWtCLEVBQUUsSUFBa0IsRUFBRSxXQUF5QixFQUFFLEtBQWdCO1FBQ25GLE9BQU87SUFDWCxDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU87SUFDWCxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQWtCLEVBQUUsSUFBa0IsRUFBRSxXQUF5QixFQUFFLEtBQWdCO1FBQzVGLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUVNLE1BQU0sWUFBWTtJQVNyQixnQ0FBZ0M7SUFDaEMsOEJBQThCO0lBRTlCLFlBQVksRUFBeUI7UUFDakMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBaUIsRUFBRSxTQUF1QjtRQUUxQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3JDLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkRBQTZELENBQUMsQ0FBQztTQUMvRTtRQUNELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFNUIsb0NBQW9DO0lBQ3hDLENBQUM7SUFFRCxNQUFNO0lBRU4sQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlci9iaWxsYm9hcmQtcmVuZGVyZXIudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICBiaWxsYm9hcmQtcmVuZGVyZXIudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IFJlbmRlcmVyIGltYWdlcyBhcyBiaWxsYm9hcmRzLlxyXG5cclxuaW1wb3J0IHsgVmVjdG9yMkFycmF5LCBWZWN0b3IzQXJyYXkgfSBmcm9tIFwiLi4vZGF0YS92ZWN0b3ItYXJyYXlcIjtcclxuaW1wb3J0IHsgR2VvbkltYWdlIH0gZnJvbSBcIi4uL2ltZy9JbWFnZVwiO1xyXG5pbXBvcnQgeyBEcmF3U3BlZWQsIFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcclxuXHJcblxyXG4vLyBtb29pIGZvbnQgb20gdGUgZ2VicnVpa2VuIFxyXG4vLyBodHRwczovL2RhdGFnb2JsaW4uaXRjaC5pby9tb25vZ3JhbVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxCb2FyZFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xyXG4gICAgLy8gVE9ET1xyXG5cclxuICAgIC8vIGFjY2VwdHMgYSB0ZXh0dXJlICYgZG90c1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuXHJcbiAgICAgICAgbGV0IHZzID0gXCJcIjtcclxuICAgICAgICBsZXQgZnMgPSBcIlwiO1xyXG5cclxuICAgICAgICBzdXBlcihnbCwgdnMsIGZzKVxyXG4gICAgfVxyXG5cclxuICAgIHNldCh0ZXh0dXJlOiBHZW9uSW1hZ2UsIGRvdHM6IFZlY3RvcjNBcnJheSwgdGV4dHVyZURvdHM6IFZlY3RvcjJBcnJheSwgc3BlZWQ6IERyYXdTcGVlZCkge1xyXG4gICAgICAgIC8vIFRPRE9cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFuZFJlbmRlcih0ZXh0dXJlOiBHZW9uSW1hZ2UsIGRvdHM6IFZlY3RvcjNBcnJheSwgdGV4dHVyZURvdHM6IFZlY3RvcjJBcnJheSwgc3BlZWQ6IERyYXdTcGVlZCkge1xyXG4gICAgICAgIHRoaXMuc2V0KHRleHR1cmUsIGRvdHMsIHRleHR1cmVEb3RzLCBzcGVlZCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRleHRSZW5kZXJlciB7XHJcblxyXG4gICAgLy8gVE9ET1xyXG5cclxuICAgIC8vIHVzZSB0aGUgYmlsbGJvYXJkIHJlbmRlcmVyIHRvIHJlbmRlciBzZXJpZXMgb2YgYXNjaWkgY2hhcmFjdGVycywgXHJcbiAgICAvLyBieSB1c2luZyBzdGFuZGFyZCBwb3NpdGlvbnMgb2YgY2VydGFpbiBmb250IGltYWdlcy4gXHJcblxyXG4gICAgYnI6IEJpbGxCb2FyZFJlbmRlcmVyXHJcblxyXG4gICAgLy8gdG9kbyBob3Jpem9udGFsIGp1c3RpZmljYXRpb25cclxuICAgIC8vIHRvZG8gdmVydGljYWwganVzdGlmaWNhdGlvblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmJyID0gbmV3IEJpbGxCb2FyZFJlbmRlcmVyKGdsKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoc3RyaW5nczogc3RyaW5nW10sIGxvY2F0aW9uczogVmVjdG9yM0FycmF5KSB7XHJcblxyXG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPSBsb2NhdGlvbnMuY291bnQoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJjb3VsZG50IHNldCBUZXh0UmVuZGVyZXI6IHN0cmluZ3Mgbm90IGVxdWFsIHRvIGxvY2F0aW9ucy4uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmluZ3MubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBzZXQgYSB3aG9sZSBidW5jaCBvZiBzdHVmZiBcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/render/billboard-renderer.ts\n");

/***/ }),

/***/ "./src/render/camera.ts":
/*!******************************!*\
  !*** ./src/render/camera.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Camera\": () => /* binding */ Camera\n/* harmony export */ });\n/* harmony import */ var _geo_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geo/plane */ \"./src/geo/plane.ts\");\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _math_ray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/ray */ \"./src/math/ray.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// author : Jos Feenstra\r\n// purpose : contain all logic regarding \r\n\r\n\r\n\r\n\r\n\r\nclass Camera {\r\n    constructor(canvas, z_offset = 1, canMove = false) {\r\n        this.angleAlpha = 0; // rotation x \r\n        this.angleBeta = 0; // rotation y\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector2.zero();\r\n        // camera matrix properties\r\n        this.fov = 20. * Math.PI / 100.;\r\n        this.zFar = 10000.;\r\n        this.zNear = 0.1;\r\n        // other consts\r\n        this.speed = 1;\r\n        this.worldPlane = _geo_plane__WEBPACK_IMPORTED_MODULE_0__.Plane.WorldXY();\r\n        this.canMove = canMove;\r\n        this.pos = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0);\r\n        this.z_offset = -z_offset;\r\n        this.offset = new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -z_offset);\r\n        this.updateMatrices(canvas);\r\n    }\r\n    update(state) {\r\n        this.updateControls(state);\r\n        this.updateMatrices(state.canvas);\r\n        this.updateClick(state);\r\n        if (state.IsKeyPressed(\"p\")) {\r\n            console.log(this.pos);\r\n            console.log(this.offset);\r\n            console.log(\"speed is now: \" + this.speed);\r\n        }\r\n    }\r\n    updateMatrices(canvas) {\r\n        this.worldMatrix = this.getWorldMatrix();\r\n        this.projectMatrix = this.getProjectionMatrix(canvas);\r\n        this.totalMatrix = this.worldMatrix.multiplied(this.projectMatrix);\r\n    }\r\n    lookat(position, target) {\r\n        // set matrices to the thing\r\n        let matrix = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newLookAt(position, target, this.worldPlane.khat);\r\n    }\r\n    updateClick(state) {\r\n        // todo\r\n    }\r\n    updateControls(state) {\r\n        let deltaScroll = state.scrollValue * 1.2;\r\n        this.offset.z = this.z_offset - deltaScroll;\r\n        if (state.IsKeyPressed(\"Shift\")) {\r\n            this.speed *= 2;\r\n        }\r\n        if (state.IsKeyPressed(\"Control\")) {\r\n            this.speed = Math.max(this.speed * 0.5, 0.1);\r\n        }\r\n        // deal with mouse\r\n        let prevPos = this.mousePos.clone();\r\n        this.mousePos = state.mousePos.clone();\r\n        let delta = prevPos.clone().sub(this.mousePos);\r\n        this.getMouseWorldRay(state.canvas.width, state.canvas.height);\r\n        if (state.mouseRightDown) {\r\n            this.angleAlpha = _math_math__WEBPACK_IMPORTED_MODULE_1__.GeonMath.clamp(this.angleAlpha + delta.y * 0.01, 0, Math.PI);\r\n            this.angleBeta += delta.x * -0.01;\r\n        }\r\n        function relativeUnitY(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitY());\r\n        }\r\n        function relativeUnitX(angle) {\r\n            let m = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angle);\r\n            return m.multiplyVector(_math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3.unitX());\r\n        }\r\n        if (!this.canMove) {\r\n            return;\r\n        }\r\n        if (state.IsKeyDown(\"s\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"w\"))\r\n            this.pos.add(relativeUnitY(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"a\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(0.01 * this.speed));\r\n        if (state.IsKeyDown(\"d\"))\r\n            this.pos.add(relativeUnitX(-this.angleBeta).scale(-0.01 * this.speed));\r\n        if (state.IsKeyDown(\"q\"))\r\n            this.pos.z += 0.01 * this.speed;\r\n        if (state.IsKeyDown(\"e\"))\r\n            this.pos.z -= 0.01 * this.speed;\r\n    }\r\n    getCameraPoint() {\r\n        return this.worldMatrix.inverse().multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n    }\r\n    getMouseWorldRay(canvasWidth, canvasHeight, useMouse = true) {\r\n        // get a ray from origin through mousepos \r\n        // mouse unit screen position: \r\n        //       -------------- -0.5\r\n        //       |            |\r\n        //       |      .(0,0)|\r\n        //       |            | \r\n        //       -------------- 0.5\r\n        //     -0.72        0.72     \r\n        //    (0.72 = 0.5 * aspect)\r\n        // \r\n        let size = 0.5; // size indicator of the fustrum\r\n        let mp = this.mousePos;\r\n        let aspect = canvasWidth / canvasHeight;\r\n        let mouseUnitX = (-size + (mp.x / canvasWidth)) * aspect;\r\n        let mouseUnitY = -size + (mp.y / canvasHeight);\r\n        let f = size / Math.tan(this.fov / 2); // focal length \r\n        let invWorld = this.worldMatrix.inverse();\r\n        let origin = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0));\r\n        // TODO instead of doing this, just extract the x, y, and z columns of invWorld \r\n        let iDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 0, 0));\r\n        let jDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 1, 0));\r\n        let kDestiny = invWorld.multiplyVector(new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, -1));\r\n        let ihat = iDestiny.sub(origin).normalize();\r\n        let jhat = jDestiny.sub(origin).normalize();\r\n        let khat = kDestiny.sub(origin).normalize();\r\n        // pardon this insanely ugly statement\r\n        let screenPoint = useMouse ?\r\n            origin\r\n                .added(khat.scaled(f))\r\n                .add(ihat.scaled(mouseUnitX))\r\n                .add(jhat.scaled(-mouseUnitY)) :\r\n            origin\r\n                .added(khat.scaled(f));\r\n        return _math_ray__WEBPACK_IMPORTED_MODULE_3__.Ray.fromPoints(origin, screenPoint);\r\n    }\r\n    getWorldMatrix() {\r\n        let offset = this.offset;\r\n        let angleA = this.angleAlpha;\r\n        let angleB = this.angleBeta;\r\n        // translate so z means 'up'\r\n        let yzFlip = new _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4([\r\n            1, 0, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 0, 1,\r\n        ]);\r\n        // translated to fit screen\r\n        let position = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(this.pos.x, this.pos.y, this.pos.z);\r\n        let mOffset = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newTranslation(offset.x, offset.y, offset.z);\r\n        // rotated by user\r\n        let x_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newXRotation(angleA);\r\n        let z_rotation = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newZRotation(angleB);\r\n        let rotation = z_rotation.multiply(x_rotation);\r\n        // let transform = mOffset.multiply(rotation).multiply(position);\r\n        let transform = position.multiply(rotation).multiply(mOffset);\r\n        return transform;\r\n    }\r\n    getProjectionMatrix(canvas) {\r\n        // aspects\r\n        let aspect = canvas.width / canvas.height; // note: this should be constant\r\n        // let z_plane = -1. / Math.tan(pi / 8.);        \r\n        // projection to screen\r\n        // let projection = Matrix4.newOrthographic(-1, 1, -1, 1, 0.1, 0.1);\r\n        let projection = _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newPerspective(this.fov, aspect, this.zNear, this.zFar);\r\n        return projection;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXIvY2FtZXJhLnRzP2JkYjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0Esd0JBQXdCO0FBQ3hCLHlDQUF5QztBQUdKO0FBQ0c7QUFDQztBQUNQO0FBQ2U7QUFHMUMsTUFBTSxNQUFNO0lBMkJmLFlBQVksTUFBeUIsRUFBRSxRQUFRLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBQyxLQUFLO1FBdEJsRSxlQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYztRQUM5QixjQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsYUFBYTtRQUM1QixhQUFRLEdBQUcsc0RBQVksRUFBRSxDQUFDO1FBRTFCLDJCQUEyQjtRQUMzQixRQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxVQUFLLEdBQUcsR0FBRyxDQUFDO1FBRVosZUFBZTtRQUNmLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFVixlQUFVLEdBQUcscURBQWEsRUFBRSxDQUFDO1FBWXpCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxpREFBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaURBQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWlCO1FBQ3BCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUM7SUFDTCxDQUFDO0lBRUQsY0FBYyxDQUFDLE1BQXlCO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBaUIsRUFBRSxNQUFlO1FBQ3JDLDRCQUE0QjtRQUM1QixJQUFJLE1BQU0sR0FBRywyREFBaUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUdPLFdBQVcsQ0FBQyxLQUFpQjtRQUNqQyxPQUFPO0lBQ1gsQ0FBQztJQUVPLGNBQWMsQ0FBQyxLQUFpQjtRQUVwQyxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUUxQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUM1QyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDbkI7UUFDRCxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsa0JBQWtCO1FBQ2xCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9ELElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtZQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLHNEQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztTQUNyQztRQUVELFNBQVMsYUFBYSxDQUFDLEtBQWE7WUFDaEMsSUFBSSxDQUFDLEdBQUcsOERBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLHVEQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFhO1lBQ2hDLElBQUksQ0FBQyxHQUFHLDhEQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyx1REFBYSxFQUFFLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZixPQUFPO1NBQ1Y7UUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFFLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFFLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDeEMsQ0FBQztJQUVELGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksaURBQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELGdCQUFnQixDQUFDLFdBQW1CLEVBQUUsWUFBb0IsRUFBRSxRQUFRLEdBQUcsSUFBSTtRQUV2RSwwQ0FBMEM7UUFFMUMsK0JBQStCO1FBQy9CLDRCQUE0QjtRQUM1Qix1QkFBdUI7UUFDdkIsdUJBQXVCO1FBQ3ZCLHdCQUF3QjtRQUN4QiwyQkFBMkI7UUFDM0IsNkJBQTZCO1FBQzdCLDJCQUEyQjtRQUMzQixHQUFHO1FBRUgsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFDLGdDQUFnQztRQUMvQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLElBQUksTUFBTSxHQUFHLFdBQVcsR0FBRyxZQUFZLENBQUM7UUFDeEMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDekQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7UUFFdkQsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksaURBQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekQsZ0ZBQWdGO1FBQ2hGLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxpREFBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksaURBQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLGlEQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUQsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM1QyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVDLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFNUMsc0NBQXNDO1FBQ3RDLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1lBQ3hCLE1BQU07aUJBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3JCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNO2lCQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0IsT0FBTyxxREFBYyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsY0FBYztRQUNWLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBRTVCLDRCQUE0QjtRQUM1QixJQUFJLE1BQU0sR0FBRyxJQUFJLGlEQUFPLENBQUM7WUFDckIsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDO1lBQ1AsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztTQUNWLENBQUM7UUFFRiwyQkFBMkI7UUFDM0IsSUFBSSxRQUFRLEdBQUcsZ0VBQXNCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLE9BQU8sR0FBRyxnRUFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5FLGtCQUFrQjtRQUNsQixJQUFJLFVBQVUsR0FBRyw4REFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLFVBQVUsR0FBRyw4REFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9DLGlFQUFpRTtRQUVqRSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsbUJBQW1CLENBQUMsTUFBeUI7UUFFekMsVUFBVTtRQUNWLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdDQUFnQztRQUUzRSxpREFBaUQ7UUFFakQsdUJBQXVCO1FBQ3ZCLG9FQUFvRTtRQUNwRSxJQUFJLFVBQVUsR0FBRyxnRUFBc0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRixPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvcmVuZGVyL2NhbWVyYS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vLyBhdXRob3IgOiBKb3MgRmVlbnN0cmFcclxuLy8gcHVycG9zZSA6IGNvbnRhaW4gYWxsIGxvZ2ljIHJlZ2FyZGluZyBcclxuXHJcbmltcG9ydCB7IExpbmVBcnJheSB9IGZyb20gXCIuLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vZ2VvL3BsYW5lXCI7XHJcbmltcG9ydCB7IEdlb25NYXRoIH0gZnJvbSBcIi4uL21hdGgvbWF0aFwiO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XHJcbmltcG9ydCB7IFJheSB9IGZyb20gXCIuLi9tYXRoL3JheVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCJcclxuaW1wb3J0IHsgSW5wdXRTdGF0ZSB9IGZyb20gXCIuLi9zeXN0ZW0vaW5wdXQtc3RhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDYW1lcmEge1xyXG5cclxuICAgIHBvczogVmVjdG9yMztcclxuICAgIG9mZnNldDogVmVjdG9yMzsgLy8gb2Zmc2V0IGZyb20gcm90YXRpb24gY2VudGVyXHJcbiAgICB6X29mZnNldDogbnVtYmVyO1xyXG4gICAgYW5nbGVBbHBoYSA9IDA7IC8vIHJvdGF0aW9uIHggXHJcbiAgICBhbmdsZUJldGEgPSAwOyAvLyByb3RhdGlvbiB5XHJcbiAgICBtb3VzZVBvcyA9IFZlY3RvcjIuemVybygpO1xyXG5cclxuICAgIC8vIGNhbWVyYSBtYXRyaXggcHJvcGVydGllc1xyXG4gICAgZm92ID0gMjAuICogTWF0aC5QSSAvIDEwMC47XHJcbiAgICB6RmFyID0gMTAwMDAuO1xyXG4gICAgek5lYXIgPSAwLjE7XHJcblxyXG4gICAgLy8gb3RoZXIgY29uc3RzXHJcbiAgICBzcGVlZCA9IDE7XHJcblxyXG4gICAgd29ybGRQbGFuZSA9IFBsYW5lLldvcmxkWFkoKTtcclxuICAgIFxyXG4gICAgLy8gISBtZWFuczogZG9udCB3b3JyeSwgdGhlc2Ugd2lsbCBiZSBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yXHJcbiAgICB0b3RhbE1hdHJpeCE6IE1hdHJpeDQ7XHJcbiAgICB3b3JsZE1hdHJpeCE6IE1hdHJpeDQ7XHJcbiAgICBwcm9qZWN0TWF0cml4ITogTWF0cml4NDsgICAgXHJcblxyXG4gICAgLy8gc2V0dGluZ3NcclxuICAgIGNhbk1vdmU6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgel9vZmZzZXQgPSAxLCBjYW5Nb3ZlPWZhbHNlKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jYW5Nb3ZlID0gY2FuTW92ZTtcclxuXHJcbiAgICAgICAgdGhpcy5wb3MgPSBuZXcgVmVjdG9yMygwLDAsMCk7XHJcbiAgICAgICAgdGhpcy56X29mZnNldCA9IC16X29mZnNldDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IzKDAsMCwgLXpfb2Zmc2V0KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZU1hdHJpY2VzKGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb250cm9scyhzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVNYXRyaWNlcyhzdGF0ZS5jYW52YXMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2xpY2soc3RhdGUpO1xyXG5cclxuICAgICAgICBpZihzdGF0ZS5Jc0tleVByZXNzZWQoXCJwXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucG9zKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5vZmZzZXQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNwZWVkIGlzIG5vdzogXCIgKyB0aGlzLnNwZWVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTWF0cmljZXMoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMud29ybGRNYXRyaXggPSB0aGlzLmdldFdvcmxkTWF0cml4KCk7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0TWF0cml4ID0gdGhpcy5nZXRQcm9qZWN0aW9uTWF0cml4KGNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy50b3RhbE1hdHJpeCA9IHRoaXMud29ybGRNYXRyaXgubXVsdGlwbGllZCh0aGlzLnByb2plY3RNYXRyaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvb2thdChwb3NpdGlvbjogVmVjdG9yMywgdGFyZ2V0OiBWZWN0b3IzKSB7XHJcbiAgICAgICAgLy8gc2V0IG1hdHJpY2VzIHRvIHRoZSB0aGluZ1xyXG4gICAgICAgIGxldCBtYXRyaXggPSBNYXRyaXg0Lm5ld0xvb2tBdChwb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLndvcmxkUGxhbmUua2hhdCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlQ2xpY2soc3RhdGU6IElucHV0U3RhdGUpIHtcclxuICAgICAgICAvLyB0b2RvXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVDb250cm9scyhzdGF0ZTogSW5wdXRTdGF0ZSkge1xyXG5cclxuICAgICAgICBsZXQgZGVsdGFTY3JvbGwgPSBzdGF0ZS5zY3JvbGxWYWx1ZSAqIDEuMjtcclxuXHJcbiAgICAgICAgdGhpcy5vZmZzZXQueiA9IHRoaXMuel9vZmZzZXQgLSBkZWx0YVNjcm9sbDtcclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlQcmVzc2VkKFwiU2hpZnRcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5zcGVlZCAqPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlQcmVzc2VkKFwiQ29udHJvbFwiKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gTWF0aC5tYXgodGhpcy5zcGVlZCAqIDAuNSwgMC4xKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlYWwgd2l0aCBtb3VzZVxyXG4gICAgICAgIGxldCBwcmV2UG9zID0gdGhpcy5tb3VzZVBvcy5jbG9uZSgpO1xyXG4gICAgICAgIHRoaXMubW91c2VQb3MgPSBzdGF0ZS5tb3VzZVBvcy5jbG9uZSgpO1xyXG4gICAgICAgIGxldCBkZWx0YSA9IHByZXZQb3MuY2xvbmUoKS5zdWIodGhpcy5tb3VzZVBvcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0TW91c2VXb3JsZFJheShzdGF0ZS5jYW52YXMud2lkdGgsIHN0YXRlLmNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdGUubW91c2VSaWdodERvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5hbmdsZUFscGhhID0gR2Vvbk1hdGguY2xhbXAodGhpcy5hbmdsZUFscGhhICsgZGVsdGEueSAqIDAuMDEsIDAsIE1hdGguUEkpO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ2xlQmV0YSArPSBkZWx0YS54ICogLTAuMDE7XHJcbiAgICAgICAgfSAgIFxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWxhdGl2ZVVuaXRZKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IG0gPSBNYXRyaXg0Lm5ld1pSb3RhdGlvbihhbmdsZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtLm11bHRpcGx5VmVjdG9yKFZlY3RvcjMudW5pdFkoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWxhdGl2ZVVuaXRYKGFuZ2xlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IG0gPSBNYXRyaXg0Lm5ld1pSb3RhdGlvbihhbmdsZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtLm11bHRpcGx5VmVjdG9yKFZlY3RvcjMudW5pdFgoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2FuTW92ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwic1wiKSlcclxuICAgICAgICAgICAgdGhpcy5wb3MuYWRkKHJlbGF0aXZlVW5pdFkoLXRoaXMuYW5nbGVCZXRhKS5zY2FsZSgwLjAxICogdGhpcy5zcGVlZCkpO1xyXG4gICAgICAgIGlmIChzdGF0ZS5Jc0tleURvd24oXCJ3XCIpKVxyXG4gICAgICAgICAgICB0aGlzLnBvcy5hZGQocmVsYXRpdmVVbml0WSgtdGhpcy5hbmdsZUJldGEpLnNjYWxlKC0wLjAxICogdGhpcy5zcGVlZCkpOyAgICAgICAgICAgXHJcbiAgICAgICAgaWYgKHN0YXRlLklzS2V5RG93bihcImFcIikpXHJcbiAgICAgICAgICAgIHRoaXMucG9zLmFkZChyZWxhdGl2ZVVuaXRYKC10aGlzLmFuZ2xlQmV0YSkuc2NhbGUoMC4wMSAqIHRoaXMuc3BlZWQpKTtcclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwiZFwiKSlcclxuICAgICAgICAgICAgdGhpcy5wb3MuYWRkKHJlbGF0aXZlVW5pdFgoLXRoaXMuYW5nbGVCZXRhKS5zY2FsZSgtMC4wMSAqIHRoaXMuc3BlZWQpKTtcclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwicVwiKSlcclxuICAgICAgICAgICAgdGhpcy5wb3MueiArPSAwLjAxICogdGhpcy5zcGVlZDtcclxuICAgICAgICBpZiAoc3RhdGUuSXNLZXlEb3duKFwiZVwiKSlcclxuICAgICAgICAgICAgdGhpcy5wb3MueiAtPSAwLjAxICogdGhpcy5zcGVlZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDYW1lcmFQb2ludCgpIDogVmVjdG9yMyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGRNYXRyaXguaW52ZXJzZSgpLm11bHRpcGx5VmVjdG9yKG5ldyBWZWN0b3IzKDAsMCwwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TW91c2VXb3JsZFJheShjYW52YXNXaWR0aDogbnVtYmVyLCBjYW52YXNIZWlnaHQ6IG51bWJlciwgdXNlTW91c2UgPSB0cnVlKSA6IFJheSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZ2V0IGEgcmF5IGZyb20gb3JpZ2luIHRocm91Z2ggbW91c2Vwb3MgXHJcblxyXG4gICAgICAgIC8vIG1vdXNlIHVuaXQgc2NyZWVuIHBvc2l0aW9uOiBcclxuICAgICAgICAvLyAgICAgICAtLS0tLS0tLS0tLS0tLSAtMC41XHJcbiAgICAgICAgLy8gICAgICAgfCAgICAgICAgICAgIHxcclxuICAgICAgICAvLyAgICAgICB8ICAgICAgLigwLDApfFxyXG4gICAgICAgIC8vICAgICAgIHwgICAgICAgICAgICB8IFxyXG4gICAgICAgIC8vICAgICAgIC0tLS0tLS0tLS0tLS0tIDAuNVxyXG4gICAgICAgIC8vICAgICAtMC43MiAgICAgICAgMC43MiAgICAgXHJcbiAgICAgICAgLy8gICAgKDAuNzIgPSAwLjUgKiBhc3BlY3QpXHJcbiAgICAgICAgLy8gXHJcblxyXG4gICAgICAgIGxldCBzaXplID0gMC41IC8vIHNpemUgaW5kaWNhdG9yIG9mIHRoZSBmdXN0cnVtXHJcbiAgICAgICAgbGV0IG1wID0gdGhpcy5tb3VzZVBvcztcclxuICAgICAgICBsZXQgYXNwZWN0ID0gY2FudmFzV2lkdGggLyBjYW52YXNIZWlnaHQ7XHJcbiAgICAgICAgbGV0IG1vdXNlVW5pdFggPSAoLXNpemUgKyAobXAueCAvIGNhbnZhc1dpZHRoKSkgKiBhc3BlY3Q7XHJcbiAgICAgICAgbGV0IG1vdXNlVW5pdFkgPSAtc2l6ZSArIChtcC55IC8gY2FudmFzSGVpZ2h0KTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZiA9IHNpemUgLyBNYXRoLnRhbih0aGlzLmZvdiAvIDIpOyAvLyBmb2NhbCBsZW5ndGggXHJcblxyXG4gICAgICAgIGxldCBpbnZXb3JsZCA9IHRoaXMud29ybGRNYXRyaXguaW52ZXJzZSgpO1xyXG4gICAgICAgIGxldCBvcmlnaW4gPSBpbnZXb3JsZC5tdWx0aXBseVZlY3RvcihuZXcgVmVjdG9yMygwLDAsMCkpO1xyXG5cclxuICAgICAgICAvLyBUT0RPIGluc3RlYWQgb2YgZG9pbmcgdGhpcywganVzdCBleHRyYWN0IHRoZSB4LCB5LCBhbmQgeiBjb2x1bW5zIG9mIGludldvcmxkIFxyXG4gICAgICAgIGxldCBpRGVzdGlueSA9IGludldvcmxkLm11bHRpcGx5VmVjdG9yKG5ldyBWZWN0b3IzKDEsMCwwKSk7XHJcbiAgICAgICAgbGV0IGpEZXN0aW55ID0gaW52V29ybGQubXVsdGlwbHlWZWN0b3IobmV3IFZlY3RvcjMoMCwxLDApKTtcclxuICAgICAgICBsZXQga0Rlc3RpbnkgPSBpbnZXb3JsZC5tdWx0aXBseVZlY3RvcihuZXcgVmVjdG9yMygwLDAsLTEpKTtcclxuXHJcbiAgICAgICAgbGV0IGloYXQgPSBpRGVzdGlueS5zdWIob3JpZ2luKS5ub3JtYWxpemUoKTtcclxuICAgICAgICBsZXQgamhhdCA9IGpEZXN0aW55LnN1YihvcmlnaW4pLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIGxldCBraGF0ID0ga0Rlc3Rpbnkuc3ViKG9yaWdpbikubm9ybWFsaXplKCk7XHJcblxyXG4gICAgICAgIC8vIHBhcmRvbiB0aGlzIGluc2FuZWx5IHVnbHkgc3RhdGVtZW50XHJcbiAgICAgICAgbGV0IHNjcmVlblBvaW50ID0gdXNlTW91c2UgPyBcclxuICAgICAgICAgICAgb3JpZ2luXHJcbiAgICAgICAgICAgICAgICAuYWRkZWQoa2hhdC5zY2FsZWQoZikpXHJcbiAgICAgICAgICAgICAgICAuYWRkKGloYXQuc2NhbGVkKG1vdXNlVW5pdFgpKVxyXG4gICAgICAgICAgICAgICAgLmFkZChqaGF0LnNjYWxlZCgtbW91c2VVbml0WSkpIDogXHJcbiAgICAgICAgICAgIG9yaWdpblxyXG4gICAgICAgICAgICAgICAgLmFkZGVkKGtoYXQuc2NhbGVkKGYpKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIHJldHVybiBSYXkuZnJvbVBvaW50cyhvcmlnaW4sIHNjcmVlblBvaW50KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRXb3JsZE1hdHJpeCgpIDogTWF0cml4NCB7XHJcbiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGxldCBhbmdsZUEgPSB0aGlzLmFuZ2xlQWxwaGE7XHJcbiAgICAgICAgbGV0IGFuZ2xlQiA9IHRoaXMuYW5nbGVCZXRhO1xyXG4gICAgXHJcbiAgICAgICAgLy8gdHJhbnNsYXRlIHNvIHogbWVhbnMgJ3VwJ1xyXG4gICAgICAgIGxldCB5ekZsaXAgPSBuZXcgTWF0cml4NChbXHJcbiAgICAgICAgICAgIDEsMCwwLDAsXHJcbiAgICAgICAgICAgIDAsMCwxLDAsXHJcbiAgICAgICAgICAgIDAsMSwwLDAsXHJcbiAgICAgICAgICAgIDAsMCwwLDEsXHJcbiAgICAgICAgXSlcclxuXHJcbiAgICAgICAgLy8gdHJhbnNsYXRlZCB0byBmaXQgc2NyZWVuXHJcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gTWF0cml4NC5uZXdUcmFuc2xhdGlvbih0aGlzLnBvcy54LCB0aGlzLnBvcy55LCB0aGlzLnBvcy56KTtcclxuICAgICAgICBsZXQgbU9mZnNldCA9IE1hdHJpeDQubmV3VHJhbnNsYXRpb24ob2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gcm90YXRlZCBieSB1c2VyXHJcbiAgICAgICAgbGV0IHhfcm90YXRpb24gPSBNYXRyaXg0Lm5ld1hSb3RhdGlvbihhbmdsZUEpO1xyXG4gICAgICAgIGxldCB6X3JvdGF0aW9uID0gTWF0cml4NC5uZXdaUm90YXRpb24oYW5nbGVCKTtcclxuICAgICAgICBsZXQgcm90YXRpb24gPSB6X3JvdGF0aW9uLm11bHRpcGx5KHhfcm90YXRpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGxldCB0cmFuc2Zvcm0gPSBtT2Zmc2V0Lm11bHRpcGx5KHJvdGF0aW9uKS5tdWx0aXBseShwb3NpdGlvbik7XHJcbiAgICBcclxuICAgICAgICBsZXQgdHJhbnNmb3JtID0gcG9zaXRpb24ubXVsdGlwbHkocm90YXRpb24pLm11bHRpcGx5KG1PZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvamVjdGlvbk1hdHJpeChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSA6IE1hdHJpeDQge1xyXG5cclxuICAgICAgICAvLyBhc3BlY3RzXHJcbiAgICAgICAgbGV0IGFzcGVjdCA9IGNhbnZhcy53aWR0aCAvIGNhbnZhcy5oZWlnaHQ7IC8vIG5vdGU6IHRoaXMgc2hvdWxkIGJlIGNvbnN0YW50XHJcblxyXG4gICAgICAgIC8vIGxldCB6X3BsYW5lID0gLTEuIC8gTWF0aC50YW4ocGkgLyA4Lik7ICAgICAgICBcclxuXHJcbiAgICAgICAgLy8gcHJvamVjdGlvbiB0byBzY3JlZW5cclxuICAgICAgICAvLyBsZXQgcHJvamVjdGlvbiA9IE1hdHJpeDQubmV3T3J0aG9ncmFwaGljKC0xLCAxLCAtMSwgMSwgMC4xLCAwLjEpO1xyXG4gICAgICAgIGxldCBwcm9qZWN0aW9uID0gTWF0cml4NC5uZXdQZXJzcGVjdGl2ZSh0aGlzLmZvdiwgYXNwZWN0LCB0aGlzLnpOZWFyLCB0aGlzLnpGYXIpO1xyXG4gICAgICAgIHJldHVybiBwcm9qZWN0aW9uO1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/render/camera.ts\n");

/***/ }),

/***/ "./src/render/dot-renderer2.ts":
/*!*************************************!*\
  !*** ./src/render/dot-renderer2.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotRenderer2\": () => /* binding */ DotRenderer2\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\nclass DotRenderer2 extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, size = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        attribute vec2 a_position;\r\n        \r\n        uniform vec2 u_resolution;\r\n        uniform float u_size;\r\n\r\n        void main() {\r\n            vec2 clipped = ((a_position / u_resolution) * 2.0) - 1.0;\r\n      \r\n            gl_PointSize = u_size;\r\n            gl_Position = vec4(clipped, 0, 1);\r\n            // gl_Position = vec4(0,0,0,1);\r\n        }\r\n        `;\r\n        let fragmentSourceSquare = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_Color;\r\n        vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            gl_FragColor = vec4(1,1,1,1);\r\n        }\r\n        `;\r\n        let fragmentSourceRound = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_Color;\r\n        vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            if (distance(center, gl_PointCoord) > 0.5) {\r\n               discard;\r\n            }\r\n            gl_FragColor = vec4(1,1,1,1);\r\n        }\r\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_resolution = gl.getUniformLocation(this.program, \"u_resolution\");\r\n        this.u_size = gl.getUniformLocation(this.program, \"u_size\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        this.color = color;\r\n        this.size = size;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, dots) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // fill with data;\r\n        let data = this.toFloat32Array(dots);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);\r\n        // Draw the point.\r\n        var primitiveType = gl.POINTS;\r\n        var offset = 0;\r\n        var count = dots.length;\r\n        gl.drawArrays(primitiveType, offset, count);\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    toFloat32Array(dots) {\r\n        let data = new Float32Array(dots.length * 2);\r\n        for (let i = 0; i < dots.length; i++) {\r\n            data[i * 2] = dots[i].x;\r\n            data[i * 2 + 1] = dots[i].y;\r\n        }\r\n        return data;\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/dot-renderer2.ts\n");

/***/ }),

/***/ "./src/render/dot-renderer3.ts":
/*!*************************************!*\
  !*** ./src/render/dot-renderer3.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DotRenderer3\": () => /* binding */ DotRenderer3\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\n\r\nclass DotRenderer3 extends _renderer__WEBPACK_IMPORTED_MODULE_1__.Renderer {\r\n    constructor(gl, radius = 5, color = [1, 1, 1, 1], square = true) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n        uniform float u_size;\r\n\r\n        attribute vec3 a_vertex;\r\n\r\n        void main() {\r\n            // Set the size of a rendered point.\r\n            gl_PointSize = u_size;\r\n\r\n            // Transform the location of the vertex.\r\n            gl_Position = u_transform * vec4(a_vertex, 1.0);\r\n        }\r\n\r\n        `;\r\n        let fragmentSourceSquare = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        // vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        let fragmentSourceRound = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        vec2 center = vec2(0.5, 0.5);\r\n\r\n        void main() {\r\n            if (distance(center, gl_PointCoord) > 0.5) {\r\n               discard;\r\n            }\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program\r\n        if (square) {\r\n            super(gl, vertexSource, fragmentSourceSquare);\r\n        }\r\n        else {\r\n            super(gl, vertexSource, fragmentSourceRound);\r\n        }\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_size = gl.getUniformLocation(this.program, \"u_size\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        this.color = color;\r\n        this.size = radius;\r\n        this.count = 0;\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    set(vectors, speed) {\r\n        let gl = this.gl;\r\n        gl.useProgram(this.program);\r\n        // convert all possible entries to a general entry\r\n        let array = (0,_data_vector_array__WEBPACK_IMPORTED_MODULE_0__.getGeneralFloatMatrix)(vectors);\r\n        // from some other thing\r\n        this.count = array.count();\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, array._width, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, array.data, super.convertDrawSpeed(speed));\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        // console.log(matrix.data);\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        gl.uniform1f(this.u_size, this.size);\r\n        gl.uniform4f(this.u_color, this.color[0], this.color[1], this.color[2], this.color[3]);\r\n        // // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        // Draw the point.\r\n        gl.drawArrays(gl.POINTS, 0, this.count);\r\n    }\r\n    setAndRender(gl, matrix, vectors) {\r\n        this.set(vectors, _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/dot-renderer3.ts\n");

/***/ }),

/***/ "./src/render/line-renderer.ts":
/*!*************************************!*\
  !*** ./src/render/line-renderer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineRenderer\": () => /* binding */ LineRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\nclass LineRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.5]) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n\r\n        void main () {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // set uniforms which wont change\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n    }\r\n    set(gl, data, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = data.ids.length;\r\n        this.vertCount = data.verts._width;\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, data.verts.data, drawspeed);\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data.ids.buffer, drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    setAndRender(gl, matrix, data) {\r\n        this.set(gl, data, _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/line-renderer.ts\n");

/***/ }),

/***/ "./src/render/mesh-debug-renderer.ts":
/*!*******************************************!*\
  !*** ./src/render/mesh-debug-renderer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MeshDebugRenderer\": () => /* binding */ MeshDebugRenderer\n/* harmony export */ });\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _line_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-renderer */ \"./src/render/line-renderer.ts\");\n/* harmony import */ var _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simple-mesh-renderer */ \"./src/render/simple-mesh-renderer.ts\");\n/* harmony import */ var _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mesh-normals-renderer */ \"./src/render/mesh-normals-renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\n\r\n\r\n\r\n\r\nclass MeshDebugRenderer {\r\n    constructor(gl, faceColor = [1, 0, 0, 0.25], edgeColor = [1, 0, 0, 1]) {\r\n        this.faceRend = new _simple_mesh_renderer__WEBPACK_IMPORTED_MODULE_3__.SimpleMeshRenderer(gl, faceColor);\r\n        this.lineRend = new _line_renderer__WEBPACK_IMPORTED_MODULE_2__.LineRenderer(gl, edgeColor);\r\n        this.normRend = new _mesh_normals_renderer__WEBPACK_IMPORTED_MODULE_4__.NormalRenderer(gl);\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, mesh) {\r\n        this.faceRend.setMesh(gl, mesh);\r\n        this.lineRend.set(gl, _mesh_line_array__WEBPACK_IMPORTED_MODULE_0__.LineArray.fromMesh(mesh), _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.StaticDraw);\r\n        this.normRend.set(gl, mesh, _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawSpeed.StaticDraw);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        this.faceRend.render(gl, matrix);\r\n        this.lineRend.render(gl, matrix);\r\n        this.normRend.render(gl, matrix);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXIvbWVzaC1kZWJ1Zy1yZW5kZXJlci50cz9mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsNENBQTRDO0FBR0c7QUFJRTtBQUNGO0FBQ2E7QUFDSDtBQUVsRCxNQUFNLGlCQUFpQjtJQU0xQixZQUFZLEVBQXlCLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxxRUFBa0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHdEQUFZLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrRUFBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUFZLENBQUMsRUFBeUIsRUFBRSxNQUFlLEVBQUUsSUFBZ0I7UUFDckUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELEdBQUcsQ0FBQyxFQUF5QixFQUFFLElBQWdCO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsZ0VBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsMkRBQW9CLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLDJEQUFvQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELCtCQUErQjtJQUMvQixNQUFNLENBQUMsRUFBeUIsRUFBRSxNQUFlO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9yZW5kZXIvbWVzaC1kZWJ1Zy1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIG1lc2gtcmVuZGVyZXIudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IFdlYkdMIGJhc2VkIHJlbmRlcmluZyBvZiBhIG1lc2guXHJcblxyXG5pbXBvcnQgeyBJbnRNYXRyaXggfSBmcm9tIFwiLi4vZGF0YS9pbnQtbWF0cml4XCI7XHJcbmltcG9ydCB7IExpbmVBcnJheSB9IGZyb20gXCIuLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuaW1wb3J0IHsgVmVjdG9yM0FycmF5IH0gZnJvbSBcIi4uL2RhdGEvdmVjdG9yLWFycmF5XCI7XHJcbmltcG9ydCB7IFJlbmRlck1lc2ggfSBmcm9tIFwiLi4vbWVzaC9yZW5kZXItbWVzaFwiO1xyXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XHJcbmltcG9ydCB7IERyYXdTcGVlZCwgUmVuZGVyZXIgfSBmcm9tIFwiLi9yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tIFwiLi9saW5lLXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IFNpbXBsZU1lc2hSZW5kZXJlciB9IGZyb20gXCIuL3NpbXBsZS1tZXNoLXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IE5vcm1hbFJlbmRlcmVyIH0gZnJvbSBcIi4vbWVzaC1ub3JtYWxzLXJlbmRlcmVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzaERlYnVnUmVuZGVyZXIge1xyXG5cclxuICAgIGZhY2VSZW5kOiBTaW1wbGVNZXNoUmVuZGVyZXI7XHJcbiAgICBsaW5lUmVuZDogTGluZVJlbmRlcmVyO1xyXG4gICAgbm9ybVJlbmQ6IE5vcm1hbFJlbmRlcmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGZhY2VDb2xvciA9IFsxLDAsMCwwLjI1XSwgZWRnZUNvbG9yID0gWzEsMCwwLDFdKSB7XHJcbiAgICAgICAgdGhpcy5mYWNlUmVuZCA9IG5ldyBTaW1wbGVNZXNoUmVuZGVyZXIoZ2wsIGZhY2VDb2xvcik7XHJcbiAgICAgICAgdGhpcy5saW5lUmVuZCA9IG5ldyBMaW5lUmVuZGVyZXIoZ2wsIGVkZ2VDb2xvcik7XHJcbiAgICAgICAgdGhpcy5ub3JtUmVuZCA9IG5ldyBOb3JtYWxSZW5kZXJlcihnbCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QW5kUmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCwgbWVzaDogUmVuZGVyTWVzaCkge1xyXG4gICAgICAgIHRoaXMuc2V0KGdsLCBtZXNoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcihnbCwgbWF0cml4KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWVzaDogUmVuZGVyTWVzaCkge1xyXG4gICAgICAgIHRoaXMuZmFjZVJlbmQuc2V0TWVzaChnbCwgbWVzaCk7XHJcbiAgICAgICAgdGhpcy5saW5lUmVuZC5zZXQoZ2wsIExpbmVBcnJheS5mcm9tTWVzaChtZXNoKSwgRHJhd1NwZWVkLlN0YXRpY0RyYXcpO1xyXG4gICAgICAgIHRoaXMubm9ybVJlbmQuc2V0KGdsLCBtZXNoLCBEcmF3U3BlZWQuU3RhdGljRHJhdyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVuZGVyIDEgaW1hZ2UgdG8gdGhlIHNjcmVlblxyXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogTWF0cml4NCkge1xyXG4gICAgICAgIHRoaXMuZmFjZVJlbmQucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgICAgIHRoaXMubGluZVJlbmQucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgICAgIHRoaXMubm9ybVJlbmQucmVuZGVyKGdsLCBtYXRyaXgpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/render/mesh-debug-renderer.ts\n");

/***/ }),

/***/ "./src/render/mesh-normals-renderer.ts":
/*!*********************************************!*\
  !*** ./src/render/mesh-normals-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NormalRenderer\": () => /* binding */ NormalRenderer\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _mesh_line_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mesh/line-array */ \"./src/mesh/line-array.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    simple-line-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of lines.\r\n\r\n\r\n\r\n\r\n\r\nclass NormalRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_4__.Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_vertex;\r\n        attribute vec4 a_vertex_color;\r\n\r\n        uniform mat4 u_transform;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_vertex;\r\n            v_color = a_vertex_color;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        varying vec4 v_color;\r\n\r\n        void main () {\r\n            gl_FragColor = v_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        // we need 2 buffers \r\n        this.a_position = gl.getAttribLocation(this.program, \"a_vertex\");\r\n        this.a_color = gl.getAttribLocation(this.program, \"a_vertex_color\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_color_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.vertCount = 0;\r\n        this.scale = 0.4;\r\n    }\r\n    // take a general render mesh, and extract normals\r\n    set(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_4__.DrawSpeed.StaticDraw) {\r\n        // save how many verts need to be drawn\r\n        gl.useProgram(this.program);\r\n        let drawspeed = this.convertDrawSpeed(speed);\r\n        this.vertCount = 3;\r\n        let lineverts;\r\n        let normals;\r\n        // different buffer fills based upon normal kind\r\n        let normalKind = mesh.getNormalType();\r\n        if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Face) {\r\n            let faceCount = mesh.links.count();\r\n            this.count = faceCount * 2;\r\n            lineverts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            normals = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n            for (let f = 0; f < faceCount; f++) {\r\n                let center = mesh.getFaceVertices(f).average();\r\n                let normal = mesh.norms.getVector(f);\r\n                let i1 = f * 2;\r\n                let i2 = f * 2 + 1;\r\n                lineverts.setVector(i1, center);\r\n                lineverts.setVector(i2, center.add(normal.scaled(this.scale)));\r\n                let color = normal.add(new _math_vector__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1).div(2));\r\n                normals.setVector(i1, color);\r\n                normals.setVector(i2, color);\r\n            }\r\n        }\r\n        else if (normalKind == _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Vertex) {\r\n            console.warn(\"TODO\");\r\n            return;\r\n        }\r\n        else {\r\n            // console.log(\"no normals\");\r\n            this.count = 0;\r\n            return;\r\n        }\r\n        // vertices  \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, lineverts.data, drawspeed);\r\n        // normals\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_color_buffer);\r\n        gl.enableVertexAttribArray(this.a_color);\r\n        gl.vertexAttribPointer(this.a_color, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, normals.data, drawspeed);\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (0,_mesh_line_array__WEBPACK_IMPORTED_MODULE_3__.getDefaultIndices)(this.count), drawspeed);\r\n    }\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        // POINTERS MUST ALSO BE SET, DO EVERYTHING EXCEPT GL.BUFFERDATA\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.vertCount, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.LINES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/mesh-normals-renderer.ts\n");

/***/ }),

/***/ "./src/render/rectangle-renderer.ts":
/*!******************************************!*\
  !*** ./src/render/rectangle-renderer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RectangleRenderer\": () => /* binding */ RectangleRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// jos feenstra\r\n\r\nclass RectangleRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl) {\r\n        // note: I like vertex & fragments to be included in the script itself.\r\n        // when you change vertex or fragment, this class has to deal with it. \r\n        // putting them somewhere else doesnt make sense to me, \r\n        // they are coupled 1 to 1.\r\n        let vertexSource = `\r\n        attribute vec2 a_position;\r\n\r\n        uniform vec2 u_resolution;\r\n\r\n        void main() {\r\n            // convert the rectangle from pixels to 0.0 to 1.0\r\n            vec2 zeroToOne = ((a_position / u_resolution) * 2.0) - 1.0;\r\n\r\n            // convert from 0->1 to 0->2\r\n            // vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n            // convert from 0->2 to -1->+1 (clipspace)\r\n            // vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n            gl_Position = vec4(zeroToOne * vec2(1, -1), 0, 1);\r\n        }\r\n        `;\r\n        let fragmentSource = `\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        \r\n        void main() {\r\n           gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program\r\n        super(gl, vertexSource, fragmentSource);\r\n        // look up where the vertex data needs to go.\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.u_resolution = gl.getUniformLocation(this.program, \"u_resolution\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        // Create a buffer to put three 2d clip space points in\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n    }\r\n    render(gl, rs) {\r\n        // Clear the canvas\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        // Turn on the attribute\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.uniform2f(this.u_resolution, gl.canvas.width, gl.canvas.height);\r\n        // Bind the position buffer.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 2; // 2 components per iteration\r\n        var type = gl.FLOAT; // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0; // start at the beginning of the buffer\r\n        gl.vertexAttribPointer(this.a_position, size, type, normalize, stride, offset);\r\n        // draw 50 random rectangles in random colors\r\n        for (let r of rs) {\r\n            // Setup a random rectangle\r\n            // This will write to positionBuffer because\r\n            // its the last thing we bound on the ARRAY_BUFFER\r\n            // bind point\r\n            this.setRectangle(gl, r);\r\n            // Set a random color.\r\n            gl.uniform4f(this.u_color, Math.random(), Math.random(), Math.random(), 1);\r\n            // Draw the rectangle.\r\n            var primitiveType = gl.TRIANGLES;\r\n            var offset = 0;\r\n            var count = 6;\r\n            gl.drawArrays(primitiveType, offset, count);\r\n        }\r\n    }\r\n    // Fill the buffer with the values that define a rectangle.\r\n    setRectangle(gl, r) {\r\n        let verts = r.getVertices();\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            verts[0].x, verts[0].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[2].x, verts[2].y,\r\n            verts[1].x, verts[1].y,\r\n            verts[3].x, verts[3].y,\r\n        ]), gl.STATIC_DRAW);\r\n    }\r\n    randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/rectangle-renderer.ts\n");

/***/ }),

/***/ "./src/render/renderer.ts":
/*!********************************!*\
  !*** ./src/render/renderer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DrawSpeed\": () => /* binding */ DrawSpeed,\n/* harmony export */   \"Renderer\": () => /* binding */ Renderer\n/* harmony export */ });\n// webgl-helpers.ts\r\n// \r\n// author: Jos Feenstra\r\n// credits to : https://webglfundamentals.org/\r\n// note: im still figuring out how to organize this \r\nvar nextTextureId = 0;\r\nvar rendercallsperframe = 0;\r\nvar DrawSpeed;\r\n(function (DrawSpeed) {\r\n    DrawSpeed[DrawSpeed[\"StaticDraw\"] = 0] = \"StaticDraw\";\r\n    DrawSpeed[DrawSpeed[\"DynamicDraw\"] = 1] = \"DynamicDraw\"; // if you plan on using the 'set' method every frame \r\n})(DrawSpeed || (DrawSpeed = {}));\r\nclass Renderer {\r\n    constructor(gl, vertexScript, fragmentScript) {\r\n        this.gl = gl;\r\n        this.program = Renderer.createProgramFromScripts(gl, vertexScript, fragmentScript);\r\n    }\r\n    buffer(...vars) {\r\n        rendercallsperframe += 1;\r\n    }\r\n    render(...vars) {\r\n        rendercallsperframe += 1;\r\n    }\r\n    static getNextTextureID() {\r\n        let id = nextTextureId;\r\n        nextTextureId += 1;\r\n        return id;\r\n    }\r\n    static resizeCanvas(gl) {\r\n        // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n        let canvas = gl.canvas;\r\n        const displayWidth = canvas.clientWidth;\r\n        const displayHeight = canvas.clientHeight;\r\n        // Check if the canvas is not the same size.\r\n        const needResize = gl.canvas.width !== displayWidth ||\r\n            gl.canvas.height !== displayHeight;\r\n        if (needResize) {\r\n            // Make the canvas the same size\r\n            gl.canvas.width = displayWidth;\r\n            gl.canvas.height = displayHeight;\r\n        }\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        return needResize;\r\n    }\r\n    convertDrawSpeed(speed) {\r\n        if (speed == DrawSpeed.DynamicDraw) {\r\n            return this.gl.DYNAMIC_DRAW;\r\n        }\r\n        else {\r\n            return this.gl.STATIC_DRAW;\r\n        }\r\n    }\r\n    static initWebglContext(canvas) {\r\n        let possiblyGl = canvas.getContext(\"webgl\");\r\n        if (possiblyGl == undefined) {\r\n            console.log(\"webgl unavailable...\");\r\n        }\r\n        let gl = possiblyGl;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        gl.clearDepth(1.);\r\n        return gl;\r\n    }\r\n    static compileShader(gl, shaderSource, shaderType) {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (!success) {\r\n            throw \"could not compile shader:\" + shaderSource + gl.getShaderInfoLog(shader);\r\n        }\r\n        return shader;\r\n    }\r\n    static createProgram(gl, vertexShader, fragmentShader) {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!success) {\r\n            throw (\"program failed to link:\" + gl.getProgramInfoLog(program));\r\n        }\r\n        return program;\r\n    }\r\n    ;\r\n    static createProgramFromScripts(gl, vertexScript, fragmentScript) {\r\n        let vertexShader = Renderer.compileShader(gl, vertexScript, gl.VERTEX_SHADER);\r\n        let fragmentShader = Renderer.compileShader(gl, fragmentScript, gl.FRAGMENT_SHADER);\r\n        return Renderer.createProgram(gl, vertexShader, fragmentShader);\r\n    }\r\n}\r\nRenderer.rendercallsperframe = 0;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/renderer.ts\n");

/***/ }),

/***/ "./src/render/scene.ts":
/*!*****************************!*\
  !*** ./src/render/scene.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Scene\": () => /* binding */ Scene,\n/* harmony export */   \"Renderable\": () => /* binding */ Renderable,\n/* harmony export */   \"MultiRenderable\": () => /* binding */ MultiRenderable\n/* harmony export */ });\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera */ \"./src/render/camera.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// Name:    scene.ts\r\n// Author:  Jos Feenstra     \r\n// Purpose: Experiment: a collection of renderers, things to render, and Camera's, as common as many 3d engines  \r\n// NOTE:    Implement this correctly later, this is just a sketch for now\r\n\r\n\r\n\r\nclass Scene {\r\n    constructor(gl, canvas) {\r\n        // TODO abstract this to scene\r\n        this.camera = new _camera__WEBPACK_IMPORTED_MODULE_0__.Camera(canvas);\r\n        this.lighting = new _math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 0, 0);\r\n        this.renderables = [];\r\n    }\r\n    add(r) {\r\n        for (let i = 0; i < this.renderables.length; i++) {\r\n            let r = this.renderables[i];\r\n            if (!r) {\r\n                this.renderables[i] = r;\r\n                return;\r\n            }\r\n        }\r\n        this.renderables.push(r);\r\n    }\r\n    remove(r) {\r\n        for (let i = 0; i < this.renderables.length; i++) {\r\n            let other = this.renderables[i];\r\n            if (r === other) {\r\n                this.renderables[i] = null;\r\n            }\r\n        }\r\n        console.log(\"current state of renderables: \", this.renderables);\r\n    }\r\n    update(state) {\r\n        // move the camera with the mouse\r\n        this.camera.update(state);\r\n    }\r\n    render(gl) {\r\n        for (let i = 0; i < this.renderables.length; i++) {\r\n            let r = this.renderables[i];\r\n            if (r) {\r\n                r.render(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n// small tie-together of data & renderer. \r\n// used to interact with the rendering behaviour of a renderableMesh.\r\n// TODO: typecheck if data & renderer are compatible\r\nclass Renderable {\r\n    constructor(renderer, data, speed) {\r\n        this.renderer = renderer;\r\n        this.data = data;\r\n        this.speed = speed;\r\n    }\r\n    setData(data) {\r\n        this.data = data;\r\n    }\r\n    buffer() {\r\n        this.renderer.buffer(this.data, this.speed);\r\n    }\r\n    render(context) {\r\n        if (this.speed == _renderer__WEBPACK_IMPORTED_MODULE_2__.DrawSpeed.DynamicDraw) {\r\n            this.buffer();\r\n        }\r\n        this.renderer.render(context);\r\n    }\r\n}\r\n// one p\r\nclass MultiRenderable {\r\n    constructor(speed) {\r\n        this.renderer = [];\r\n        this.data;\r\n        this.speed = speed;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXIvc2NlbmUudHM/Mzg1YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsNkJBQTZCO0FBQzdCLGlIQUFpSDtBQUNqSCx5RUFBeUU7QUFPdkM7QUFJTztBQUNRO0FBRzFDLE1BQU0sS0FBSztJQU9kLFlBQVksRUFBeUIsRUFBRSxNQUF5QjtRQUU1RCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDJDQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGlEQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBR0QsR0FBRyxDQUFDLENBQWE7UUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNKLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixPQUFPO2FBQ1Y7U0FDSjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFHRCxNQUFNLENBQUMsQ0FBYTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDOUI7U0FDSjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFHRCxNQUFNLENBQUMsS0FBaUI7UUFFcEIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFHRCxNQUFNLENBQUMsRUFBeUI7UUFFNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEVBQUU7Z0JBQ0gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNsQjtTQUNKO0lBQ0wsQ0FBQztDQUNKO0FBR0QsMENBQTBDO0FBQzFDLHFFQUFxRTtBQUNyRSxvREFBb0Q7QUFDN0MsTUFBTSxVQUFVO0lBTW5CLFlBQVksUUFBa0IsRUFBRSxJQUFTLEVBQUUsS0FBZ0I7UUFFdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUdELE9BQU8sQ0FBQyxJQUFTO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUdELE1BQU07UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBR0QsTUFBTSxDQUFDLE9BQWM7UUFDakIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLDREQUFxQixFQUFFO1lBQ3JDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQUdELFFBQVE7QUFDRCxNQUFNLGVBQWU7SUFNeEIsWUFBWSxLQUFnQjtRQUV4QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlci9zY2VuZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5hbWU6ICAgIHNjZW5lLnRzXHJcbi8vIEF1dGhvcjogIEpvcyBGZWVuc3RyYSAgICAgXHJcbi8vIFB1cnBvc2U6IEV4cGVyaW1lbnQ6IGEgY29sbGVjdGlvbiBvZiByZW5kZXJlcnMsIHRoaW5ncyB0byByZW5kZXIsIGFuZCBDYW1lcmEncywgYXMgY29tbW9uIGFzIG1hbnkgM2QgZW5naW5lcyAgXHJcbi8vIE5PVEU6ICAgIEltcGxlbWVudCB0aGlzIGNvcnJlY3RseSBsYXRlciwgdGhpcyBpcyBqdXN0IGEgc2tldGNoIGZvciBub3dcclxuXHJcbmltcG9ydCB7IExpbmVBcnJheSB9IGZyb20gXCIuLi9tZXNoL2xpbmUtYXJyYXlcIjtcclxuaW1wb3J0IHsgUGxhbmUgfSBmcm9tIFwiLi4vZ2VvL3BsYW5lXCI7XHJcbmltcG9ydCB7IFJlbmRlck1lc2ggfSBmcm9tIFwiLi4vbWVzaC9yZW5kZXItbWVzaFwiO1xyXG5pbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4uL3N5c3RlbS9pbnB1dC1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vc3lzdGVtL3VpXCI7XHJcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuL2NhbWVyYVwiO1xyXG5pbXBvcnQgeyBEb3RSZW5kZXJlcjMgfSBmcm9tIFwiLi9kb3QtcmVuZGVyZXIzXCI7XHJcbmltcG9ydCB7IE1lc2hEZWJ1Z1JlbmRlcmVyIH0gZnJvbSBcIi4vbWVzaC1kZWJ1Zy1yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tIFwiLi9saW5lLXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgRHJhd1NwZWVkLCBSZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNjZW5lIHtcclxuXHJcbiAgICAvLyByZW5kZXJpbmZvXHJcbiAgICBjYW1lcmE6IENhbWVyYTtcclxuICAgIGxpZ2h0aW5nOiBWZWN0b3IzO1xyXG4gICAgcmVuZGVyYWJsZXM6IChSZW5kZXJhYmxlIHwgbnVsbClbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XHJcblxyXG4gICAgICAgIC8vIFRPRE8gYWJzdHJhY3QgdGhpcyB0byBzY2VuZVxyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYShjYW52YXMpO1xyXG4gICAgICAgIHRoaXMubGlnaHRpbmcgPSBuZXcgVmVjdG9yMygxLDAsMCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhZGQocjogUmVuZGVyYWJsZSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IHRoaXMucmVuZGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHIgPSB0aGlzLnJlbmRlcmFibGVzW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyYWJsZXNbaV0gPSByO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlcy5wdXNoKHIpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgcmVtb3ZlKHI6IFJlbmRlcmFibGUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLnJlbmRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBvdGhlciA9IHRoaXMucmVuZGVyYWJsZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChyID09PSBvdGhlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJhYmxlc1tpXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50IHN0YXRlIG9mIHJlbmRlcmFibGVzOiBcIiwgdGhpcy5yZW5kZXJhYmxlcyk7XHJcbiAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbW92ZSB0aGUgY2FtZXJhIHdpdGggdGhlIG1vdXNlXHJcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKHN0YXRlKTsgXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLnJlbmRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCByID0gdGhpcy5yZW5kZXJhYmxlc1tpXTtcclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgIHIucmVuZGVyKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gc21hbGwgdGllLXRvZ2V0aGVyIG9mIGRhdGEgJiByZW5kZXJlci4gXHJcbi8vIHVzZWQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgcmVuZGVyaW5nIGJlaGF2aW91ciBvZiBhIHJlbmRlcmFibGVNZXNoLlxyXG4vLyBUT0RPOiB0eXBlY2hlY2sgaWYgZGF0YSAmIHJlbmRlcmVyIGFyZSBjb21wYXRpYmxlXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJhYmxlIHtcclxuICAgIFxyXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyO1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgc3BlZWQ6IERyYXdTcGVlZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIsIGRhdGE6IGFueSwgc3BlZWQ6IERyYXdTcGVlZCkge1xyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNldERhdGEoZGF0YTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYnVmZmVyKCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYnVmZmVyKHRoaXMuZGF0YSwgdGhpcy5zcGVlZCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcihjb250ZXh0OiBTY2VuZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNwZWVkID09IERyYXdTcGVlZC5EeW5hbWljRHJhdykge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcihjb250ZXh0KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIG9uZSBwXHJcbmV4cG9ydCBjbGFzcyBNdWx0aVJlbmRlcmFibGUge1xyXG5cclxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcltdO1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgc3BlZWQ6IERyYXdTcGVlZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzcGVlZDogRHJhd1NwZWVkKSB7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBbXTtcclxuICAgICAgICB0aGlzLmRhdGE7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IHNwZWVkO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/render/scene.ts\n");

/***/ }),

/***/ "./src/render/shaded-mesh-renderer.ts":
/*!********************************************!*\
  !*** ./src/render/shaded-mesh-renderer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShadedMeshRenderer\": () => /* binding */ ShadedMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _data_vector_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/vector-array */ \"./src/data/vector-array.ts\");\n/* harmony import */ var _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mesh/render-mesh */ \"./src/mesh/render-mesh.ts\");\n/* harmony import */ var _math_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/matrix */ \"./src/math/matrix.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: A shader wrapper for rendering shaded, textured, meshes\r\n\r\n\r\n\r\n\r\n\r\nclass ShadedMeshRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_3__.Renderer {\r\n    constructor(gl) {\r\n        const vs = `\r\n\r\n        attribute vec4 a_vertex_position;\r\n        attribute vec3 a_vertex_normal;\r\n        attribute float a_vertex_ambi;\r\n    \r\n        uniform mat4 u_normal_matrix;\r\n        uniform mat4 u_model_view_matrix;\r\n        uniform mat4 u_projection_matrix;\r\n\r\n        // should be uniforms constances\r\n        uniform vec3 u_ambient_light;\r\n        uniform vec3 u_dir_light_color;\r\n        uniform vec3 u_dir_light_vector;  \r\n\r\n        // varying vec2 v_texture_coord;\r\n        varying vec3 v_lighting;\r\n    \r\n        void main(void) {\r\n\r\n            gl_Position = u_projection_matrix * u_model_view_matrix * a_vertex_position;\r\n            // v_texture_coord = a_texture_coord;\r\n        \r\n            // Apply lighting effect\r\n            // highpr is removed\r\n            vec4 transformedNormal = u_normal_matrix * vec4(a_vertex_normal, 1.0);\r\n            float directional = max(dot(transformedNormal.xyz, u_dir_light_vector), 0.0);\r\n            v_lighting = (u_ambient_light + (u_dir_light_color * directional));\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump float;\r\n\r\n        // Calculates the diffuse factor produced by the light illumination  \r\n        // if done like this, color could look nicer\r\n        // float diffuseFactor(vec3 normal, vec3 light_direction) {\r\n        //     float df = dot(normalize(normal), normalize(light_direction));\r\n        //     if (gl_FrontFacing) {\r\n        //         df = -df;\r\n        //     }\r\n        //     return max(0.0, df);\r\n        // }\r\n\r\n        varying vec3 v_lighting;\r\n\r\n        void main() {\r\n\r\n            // Fragment shader output\r\n            gl_FragColor = vec4(v_lighting, 1.0);\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms \r\n        this.u_normal_matrix = gl.getUniformLocation(this.program, \"u_normal_matrix\");\r\n        this.u_model_view_matrix = gl.getUniformLocation(this.program, \"u_model_view_matrix\");\r\n        this.u_projection_matrix = gl.getUniformLocation(this.program, \"u_projection_matrix\");\r\n        // light uniforms\r\n        this.u_ambient_light = gl.getUniformLocation(this.program, \"u_ambient_light\");\r\n        this.u_dir_light_color = gl.getUniformLocation(this.program, \"u_dir_light_color\");\r\n        this.u_dir_light_vector = gl.getUniformLocation(this.program, \"u_dir_light_vector\");\r\n        // init attributes: verts | normals | ambi\r\n        this.a_vertex_position = gl.getAttribLocation(this.program, \"a_vertex_position\");\r\n        this.a_vertex_postition_buffer = gl.createBuffer();\r\n        this.a_vertex_normal = gl.getAttribLocation(this.program, \"a_vertex_normal\");\r\n        this.a_vertex_normal_buffer = gl.createBuffer();\r\n        this.a_vertex_ambi = gl.getAttribLocation(this.program, \"a_vertex_ambi\");\r\n        this.a_vertex_ambi_buffer = gl.createBuffer();\r\n        // this.index_buffer = gl.createBuffer()!; \r\n    }\r\n    set(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_3__.DrawSpeed.StaticDraw) {\r\n        // NOTE: processing time is longer: we use DrawArray instead of DrawElements, to deal with normals & uv data\r\n        if (mesh.getNormalType() != _mesh_render_mesh__WEBPACK_IMPORTED_MODULE_1__.NormalKind.Face) {\r\n            console.warn(\"cannot\");\r\n            return;\r\n        }\r\n        const T = 3;\r\n        // save how many verts need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.links.data.length;\r\n        let ds = this.convertDrawSpeed(speed);\r\n        // convert to non-indexed verts & norms \r\n        let verts = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n        let norms = new _data_vector_array__WEBPACK_IMPORTED_MODULE_0__.Vector3Array(this.count);\r\n        let ambi = new Float32Array(this.count);\r\n        let faceCount = mesh.links.count();\r\n        for (let i = 0; i < mesh.links.count(); i++) {\r\n            let norm = mesh.norms.getVector(i);\r\n            mesh.links.getRow(i).forEach((v, j) => {\r\n                let id = i * 3 + j;\r\n                verts.setVector(id, mesh.verts.getVector(v));\r\n                norms.setVector(id, norm);\r\n                ambi[id] = 1;\r\n            });\r\n        }\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, ds);\r\n        // buffer 2 \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, norms.data, ds);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_ambi, 1, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, ambi, ds);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, camera) {\r\n        // console.log(\"rendering..\");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_normal_matrix, false, _math_matrix__WEBPACK_IMPORTED_MODULE_2__.Matrix4.newIdentity().data);\r\n        gl.uniformMatrix4fv(this.u_model_view_matrix, false, camera.worldMatrix.data);\r\n        gl.uniformMatrix4fv(this.u_projection_matrix, false, camera.projectMatrix.data);\r\n        let vec = camera.getMouseWorldRay(gl.canvas.width, gl.canvas.height, false).normal;\r\n        gl.uniform3fv(this.u_ambient_light, new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(0.2, 0.2, 0.2).toArray());\r\n        gl.uniform3fv(this.u_dir_light_color, new _math_vector__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1.0).toArray());\r\n        gl.uniform3fv(this.u_dir_light_vector, vec.scale(-1).toArray());\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_vertex_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_postition_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_vertex_normal);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_normal_buffer);\r\n        gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        // gl.enableVertexAttribArray(this.a_vertex_ambi);\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, this.a_vertex_ambi_buffer);\r\n        // gl.vertexAttribPointer(this.a_vertex_normal, 3, gl.FLOAT, false, 0, 0);\r\n        // draw!\r\n        gl.drawArrays(gl.TRIANGLES, 0, this.count);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/shaded-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/render/simple-mesh-renderer.ts":
/*!********************************************!*\
  !*** ./src/render/simple-mesh-renderer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimpleMeshRenderer\": () => /* binding */ SimpleMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass SimpleMeshRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl, color = [1, 0, 0, 0.25]) {\r\n        const vs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        uniform mat4 u_transform;\r\n        uniform vec4 u_color;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump int;\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n\r\n        void main () {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_color = gl.getUniformLocation(this.program, \"u_color\");\r\n        gl.useProgram(this.program);\r\n        gl.uniform4f(this.u_color, color[0], color[1], color[2], color[3]);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // we need 2 buffers \r\n        // -> 1 float buffer for the positions of all vertices.\r\n        // -> 1 int buffer for the index of all triangles\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n    }\r\n    setMesh(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        return this.set(gl, mesh.verts, mesh.links, speed);\r\n    }\r\n    set(gl, verts, faces, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = faces.data.length;\r\n        // vertices \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        this.size = 3;\r\n        var type = gl.FLOAT;\r\n        var normalize = false;\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, verts.data, this.convertDrawSpeed(speed));\r\n        // indices \r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces.data), this.convertDrawSpeed(speed));\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // Tell it to use our program (pair of shaders)\r\n        gl.useProgram(this.program);\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, this.size, gl.FLOAT, false, 0, 0);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // Draw the point.\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9yZW5kZXIvc2ltcGxlLW1lc2gtcmVuZGVyZXIudHM/ZDkxMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRCQUE0QjtBQUM1Qix3QkFBd0I7QUFDeEIsNENBQTRDO0FBTUs7QUFFMUMsTUFBTSxrQkFBbUIsU0FBUSwrQ0FBUTtJQVU1QyxZQUFZLEVBQXlCLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDO1FBRXZELE1BQU0sRUFBRSxHQUFHOzs7Ozs7Ozs7OztTQVdWLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRzs7Ozs7Ozs7O1NBU1YsQ0FBQztRQUVGLG9CQUFvQjtRQUNwQixLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFDL0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFFZCxxQkFBcUI7UUFDckIsdURBQXVEO1FBQ3ZELGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFHLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFHLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUF5QixFQUFFLElBQWdCLEVBQUUsUUFBbUIsMkRBQW9CO1FBQ3hGLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxHQUFHLENBQUMsRUFBeUIsRUFBRSxLQUFtQixFQUFFLEtBQWdCLEVBQUUsUUFBbUIsMkRBQW9CO1FBRXpHLHVDQUF1QztRQUN2QyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUU5QixZQUFZO1FBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNwQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsRUFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFekUsV0FBVztRQUNYLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELCtCQUErQjtJQUMvQixNQUFNLENBQUMsRUFBeUIsRUFBRSxNQUFlO1FBRTdDLCtDQUErQztRQUMvQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2RCxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUQsZUFBZTtRQUNmLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUQsa0JBQWtCO1FBQ2xCLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNKIiwiZmlsZSI6Ii4vc3JjL3JlbmRlci9zaW1wbGUtbWVzaC1yZW5kZXJlci50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG5hbWU6ICAgIG1lc2gtcmVuZGVyZXIudHNcclxuLy8gYXV0aG9yOiAgSm9zIEZlZW5zdHJhXHJcbi8vIHB1cnBvc2U6IFdlYkdMIGJhc2VkIHJlbmRlcmluZyBvZiBhIG1lc2guXHJcblxyXG5pbXBvcnQgeyBJbnRNYXRyaXggfSBmcm9tIFwiLi4vZGF0YS9pbnQtbWF0cml4XCI7XHJcbmltcG9ydCB7IFZlY3RvcjNBcnJheSB9IGZyb20gXCIuLi9kYXRhL3ZlY3Rvci1hcnJheVwiO1xyXG5pbXBvcnQgeyBSZW5kZXJNZXNoIH0gZnJvbSBcIi4uL21lc2gvcmVuZGVyLW1lc2hcIjtcclxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gXCIuLi9tYXRoL21hdHJpeFwiO1xyXG5pbXBvcnQgeyBEcmF3U3BlZWQsIFJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVNZXNoUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XHJcblxyXG4gICAgLy8gYXR0cmlidXRlICYgdW5pZm9ybSBsb2NhdGlvbnNcclxuICAgIGFfcG9zaXRpb246IG51bWJlcjtcclxuICAgIGFfcG9zaXRpb25fYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcclxuICAgIGluZGV4X2J1ZmZlcjogV2ViR0xCdWZmZXI7XHJcbiAgICB1X3RyYW5zZm9ybTogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcbiAgICB1X2NvbG9yOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcclxuICAgIGNvdW50OiBudW1iZXI7XHJcbiAgICBzaXplOiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBjb2xvciA9IFsxLDAsMCwwLjI1XSkge1xyXG5cclxuICAgICAgICBjb25zdCB2cyA9IGBcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XHJcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcblxyXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247XHJcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHVfdHJhbnNmb3JtO1xyXG4gICAgICAgIHVuaWZvcm0gdmVjNCB1X2NvbG9yO1xyXG5cclxuICAgICAgICB2b2lkIG1haW4oKSB7XHJcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdV90cmFuc2Zvcm0gKiBhX3Bvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICBjb25zdCBmcyA9IGBcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XHJcbiAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcblxyXG4gICAgICAgIHVuaWZvcm0gdmVjNCB1X2NvbG9yO1xyXG5cclxuICAgICAgICB2b2lkIG1haW4gKCkge1xyXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB1X2NvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICAvLyBzZXR1cCBwcm9ncmFtICAgIFxyXG4gICAgICAgIHN1cGVyKGdsLCB2cywgZnMpO1xyXG5cclxuICAgICAgICB0aGlzLnVfdHJhbnNmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X3RyYW5zZm9ybVwiKSE7XHJcbiAgICAgICAgdGhpcy51X2NvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgXCJ1X2NvbG9yXCIpITtcclxuICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XHJcbiAgICAgICAgZ2wudW5pZm9ybTRmKHRoaXMudV9jb2xvciwgY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSwgY29sb3JbM10pO1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcblxyXG4gICAgICAgIC8vIHdlIG5lZWQgMiBidWZmZXJzIFxyXG4gICAgICAgIC8vIC0+IDEgZmxvYXQgYnVmZmVyIGZvciB0aGUgcG9zaXRpb25zIG9mIGFsbCB2ZXJ0aWNlcy5cclxuICAgICAgICAvLyAtPiAxIGludCBidWZmZXIgZm9yIHRoZSBpbmRleCBvZiBhbGwgdHJpYW5nbGVzXHJcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgdGhpcy5hX3Bvc2l0aW9uX2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITtcclxuICAgICAgICB0aGlzLmluZGV4X2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpITsgIFxyXG4gICAgfVxyXG5cclxuICAgIHNldE1lc2goZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWVzaDogUmVuZGVyTWVzaCwgc3BlZWQ6IERyYXdTcGVlZCA9IERyYXdTcGVlZC5TdGF0aWNEcmF3KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KGdsLCBtZXNoLnZlcnRzLCBtZXNoLmxpbmtzLCBzcGVlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZlcnRzOiBWZWN0b3IzQXJyYXksIGZhY2VzOiBJbnRNYXRyaXgsIHNwZWVkOiBEcmF3U3BlZWQgPSBEcmF3U3BlZWQuU3RhdGljRHJhdykge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHNhdmUgaG93IG1hbnkgZmFjZXMgbmVlZCB0byBiZSBkcmF3blxyXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gZmFjZXMuZGF0YS5sZW5ndGhcclxuXHJcbiAgICAgICAgLy8gdmVydGljZXMgXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYV9wb3NpdGlvbl9idWZmZXIpO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDM7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnbC5GTE9BVDtcclxuICAgICAgICB2YXIgbm9ybWFsaXplID0gZmFsc2U7IFxyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uLCB0aGlzLnNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHZlcnRzLmRhdGEsIHRoaXMuY29udmVydERyYXdTcGVlZChzcGVlZCkpO1xyXG5cclxuICAgICAgICAvLyBpbmRpY2VzIFxyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kZXhfYnVmZmVyKTtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoZmFjZXMuZGF0YSksIHRoaXMuY29udmVydERyYXdTcGVlZChzcGVlZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlbmRlciAxIGltYWdlIHRvIHRoZSBzY3JlZW5cclxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IE1hdHJpeDQpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUZWxsIGl0IHRvIHVzZSBvdXIgcHJvZ3JhbSAocGFpciBvZiBzaGFkZXJzKVxyXG4gICAgICAgIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfcG9zaXRpb24pO1xyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmFfcG9zaXRpb25fYnVmZmVyKTtcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV9wb3NpdGlvbiwgdGhpcy5zaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kZXhfYnVmZmVyKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzZXQgdW5pZm9ybXNcclxuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV90cmFuc2Zvcm0sIGZhbHNlLCBtYXRyaXguZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIERyYXcgdGhlIHBvaW50LlxyXG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMuY291bnQsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/render/simple-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/render/texture-mesh-renderer.ts":
/*!*********************************************!*\
  !*** ./src/render/texture-mesh-renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextureMeshRenderer\": () => /* binding */ TextureMeshRenderer\n/* harmony export */ });\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer */ \"./src/render/renderer.ts\");\n// name:    mesh-renderer.ts\r\n// author:  Jos Feenstra\r\n// purpose: WebGL based rendering of a mesh.\r\n\r\nclass TextureMeshRenderer extends _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer {\r\n    constructor(gl) {\r\n        const vs = `\r\n        // precision mediump int;\r\n        // precision mediump float;\r\n\r\n        attribute vec4 a_position;\r\n        attribute vec2 a_texcoord;\r\n\r\n        uniform mat4 u_transform;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        void main() {\r\n            gl_Position = u_transform * a_position;\r\n            v_texcoord = a_texcoord;\r\n        }\r\n        `;\r\n        const fs = `\r\n        precision mediump float;\r\n\r\n        varying vec2 v_texcoord;\r\n\r\n        uniform sampler2D u_texture;\r\n\r\n        void main() {\r\n            gl_FragColor = texture2D(u_texture, v_texcoord);\r\n        }\r\n        `;\r\n        // setup program    \r\n        super(gl, vs, fs);\r\n        gl.useProgram(this.program);\r\n        this.count = 0;\r\n        this.size = 0;\r\n        // init uniforms \r\n        this.u_transform = gl.getUniformLocation(this.program, \"u_transform\");\r\n        this.u_texture = gl.getUniformLocation(this.program, \"u_texture\");\r\n        // init three buffers: verts | uvs | links\r\n        this.a_position = gl.getAttribLocation(this.program, \"a_position\");\r\n        this.a_position_buffer = gl.createBuffer();\r\n        this.a_texcoord = gl.getAttribLocation(this.program, \"a_texcoord\");\r\n        this.a_texcoord_buffer = gl.createBuffer();\r\n        this.index_buffer = gl.createBuffer();\r\n        // init texture\r\n        this.texture_id = _renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer.getNextTextureID();\r\n        this.texture = gl.createTexture();\r\n    }\r\n    setAndRender(gl, matrix, mesh) {\r\n        this.set(gl, mesh, _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.DynamicDraw);\r\n        this.render(gl, matrix);\r\n    }\r\n    set(gl, mesh, speed = _renderer__WEBPACK_IMPORTED_MODULE_0__.DrawSpeed.StaticDraw) {\r\n        if (!mesh.texture) {\r\n            console.warn(\"Mesh does not contain a texture!\");\r\n            return;\r\n        }\r\n        // save how many faces need to be drawn\r\n        gl.useProgram(this.program);\r\n        this.count = mesh.links.data.length;\r\n        // buffer 1\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.verts.data, this.convertDrawSpeed(speed));\r\n        // buffer 2 \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        gl.bufferData(gl.ARRAY_BUFFER, mesh.uvs.data, this.convertDrawSpeed(speed));\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(mesh.links.data), this.convertDrawSpeed(speed));\r\n        // texture \r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture);\r\n        // alternative texture -> Fill the texture with a 1x1 blue pixel.\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 128, 128, 255]));\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, mesh.texture.data);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    // render 1 image to the screen\r\n    render(gl, matrix) {\r\n        // console.log(\"rendering..\");\r\n        // use the program\r\n        gl.useProgram(this.program);\r\n        // set uniforms\r\n        gl.uniformMatrix4fv(this.u_transform, false, matrix.data);\r\n        // set texture \r\n        gl.uniform1i(this.u_texture, this.texture_id);\r\n        gl.activeTexture(gl.TEXTURE0 + this.texture_id);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // buffer 1\r\n        gl.enableVertexAttribArray(this.a_position);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_position_buffer);\r\n        gl.vertexAttribPointer(this.a_position, 3, gl.FLOAT, false, 0, 0);\r\n        // buffer 2\r\n        gl.enableVertexAttribArray(this.a_texcoord);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.a_texcoord_buffer);\r\n        gl.vertexAttribPointer(this.a_texcoord, 2, gl.FLOAT, false, 0, 0);\r\n        // buffer 3\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\r\n        // draw!\r\n        gl.drawElements(gl.TRIANGLES, this.count, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/render/texture-mesh-renderer.ts\n");

/***/ }),

/***/ "./src/system/core.ts":
/*!****************************!*\
  !*** ./src/system/core.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Core\": () => /* binding */ Core\n/* harmony export */ });\n/* harmony import */ var _input_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input-state */ \"./src/system/input-state.ts\");\n/* harmony import */ var _fpsCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fpsCounter */ \"./src/system/fpsCounter.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ \"./src/system/ui.ts\");\n// Author: Jos Feenstra\r\n// Purpose: The Core app. This can hold multiple other apps with their own Update and Draw calls. \r\n// Use this to switch between Apps, or run multiple Apps.\r\n\r\n\r\n\r\nclass Core {\r\n    constructor(canvas, gl, uiFrame) {\r\n        this.STOP = false;\r\n        this.canvas = canvas;\r\n        this.gl = gl;\r\n        this.state = new _input_state__WEBPACK_IMPORTED_MODULE_0__.InputState(canvas);\r\n        this.fpsCounter = new _fpsCounter__WEBPACK_IMPORTED_MODULE_1__.FpsCounter();\r\n        this.ui = new _ui__WEBPACK_IMPORTED_MODULE_2__.UI(uiFrame);\r\n        this.apps = new Map();\r\n    }\r\n    // todo: cycle through apps\r\n    addApp(app) {\r\n        this.apps.set(app.name, app);\r\n        this.activateApp(app);\r\n    }\r\n    removeApp(appName) {\r\n        this.ui.removeContext(appName);\r\n        this.apps.delete(appName);\r\n    }\r\n    activateApp(app) {\r\n        this.ui.addContext(app.name);\r\n        app.ui(this.ui);\r\n        app.start();\r\n    }\r\n    update() {\r\n        this.state.preUpdate();\r\n        this.fpsCounter.update(this.state);\r\n        if (this.state.IsKeyPressed(\"Esc\"))\r\n            this.STOP = true;\r\n        this.apps.forEach((app) => {\r\n            app.update(this.state);\r\n        });\r\n        this.state.postUpdate();\r\n    }\r\n    draw() {\r\n        const canvas = this.canvas;\r\n        const gl = this.gl;\r\n        // put fps in the titel\r\n        document.title = \"fps: \" + this.fpsCounter.getFps();\r\n        // pre-gl business\r\n        if (window.innerHeight != canvas.height ||\r\n            window.innerWidth != canvas.width) {\r\n            canvas.height = window.innerHeight;\r\n            // canvas.clientHeight = window.innerHeight;\r\n            canvas.style.height = window.innerHeight.toString();\r\n            canvas.width = window.innerWidth;\r\n            // canvas.clientWidth = window.innerWidth;\r\n            canvas.style.width = window.innerWidth.toString();\r\n            gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        }\r\n        // Renderer.resizeCanvas(this.gl);\r\n        this.gl.clearColor(0, 0, 0, 0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        // render all apps\r\n        // TODO : reverse order\r\n        this.apps.forEach((app) => {\r\n            app.draw(this.gl);\r\n        });\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vY29yZS50cz8wOTAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1QkFBdUI7QUFDdkIsa0dBQWtHO0FBQ2xHLHlEQUF5RDtBQUVkO0FBRUQ7QUFDaEI7QUFFbkIsTUFBTSxJQUFJO0lBWWIsWUFBWSxNQUF5QixFQUFFLEVBQXlCLEVBQUUsT0FBdUI7UUFGekYsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUdULElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG9EQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLG1EQUFVLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksbUNBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUdELDJCQUEyQjtJQUMzQixNQUFNLENBQUMsR0FBUTtRQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQWU7UUFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUdELFdBQVcsQ0FBQyxHQUFRO1FBRWhCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUdELE1BQU07UUFFRixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBR0QsSUFBSTtRQUVBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFFbEIsdUJBQXVCO1FBQ3ZCLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFcEQsa0JBQWtCO1FBQ2xCLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTTtZQUNuQyxNQUFNLENBQUMsVUFBVSxJQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQ3RDO1lBQ0ksTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ25DLDRDQUE0QztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXBELE1BQU0sQ0FBQyxLQUFLLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNsQywwQ0FBMEM7WUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVsRCxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXhDLGtCQUFrQjtRQUNsQix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvc3lzdGVtL2NvcmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBdXRob3I6IEpvcyBGZWVuc3RyYVxyXG4vLyBQdXJwb3NlOiBUaGUgQ29yZSBhcHAuIFRoaXMgY2FuIGhvbGQgbXVsdGlwbGUgb3RoZXIgYXBwcyB3aXRoIHRoZWlyIG93biBVcGRhdGUgYW5kIERyYXcgY2FsbHMuIFxyXG4vLyBVc2UgdGhpcyB0byBzd2l0Y2ggYmV0d2VlbiBBcHBzLCBvciBydW4gbXVsdGlwbGUgQXBwcy5cclxuXHJcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tIFwiLi9pbnB1dC1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwL2FwcFwiO1xyXG5pbXBvcnQgeyBGcHNDb3VudGVyIH0gZnJvbSBcIi4vZnBzQ291bnRlclwiO1xyXG5pbXBvcnQgeyBVSSB9IGZyb20gXCIuL3VpXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yZSB7XHJcblxyXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBzdGF0ZTogSW5wdXRTdGF0ZTtcclxuICAgIHVpOiBVSTtcclxuICAgIGZwc0NvdW50ZXI6IEZwc0NvdW50ZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBzOiBNYXA8c3RyaW5nLCBBcHA+O1xyXG4gICAgXHJcbiAgICBTVE9QID0gZmFsc2U7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHVpRnJhbWU6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgSW5wdXRTdGF0ZShjYW52YXMpO1xyXG4gICAgICAgIHRoaXMuZnBzQ291bnRlciA9IG5ldyBGcHNDb3VudGVyKCk7XHJcbiAgICAgICAgdGhpcy51aSA9IG5ldyBVSSh1aUZyYW1lKTtcclxuICAgICAgICB0aGlzLmFwcHMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIHRvZG86IGN5Y2xlIHRocm91Z2ggYXBwc1xyXG4gICAgYWRkQXBwKGFwcDogQXBwKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hcHBzLnNldChhcHAubmFtZSwgYXBwKTtcclxuICAgICAgICB0aGlzLmFjdGl2YXRlQXBwKGFwcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlQXBwKGFwcE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudWkucmVtb3ZlQ29udGV4dChhcHBOYW1lKTtcclxuICAgICAgICB0aGlzLmFwcHMuZGVsZXRlKGFwcE5hbWUpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhY3RpdmF0ZUFwcChhcHA6IEFwcCkge1xyXG5cclxuICAgICAgICB0aGlzLnVpLmFkZENvbnRleHQoYXBwLm5hbWUpO1xyXG4gICAgICAgIGFwcC51aSh0aGlzLnVpKTtcclxuICAgICAgICBhcHAuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RhdGUucHJlVXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5mcHNDb3VudGVyLnVwZGF0ZSh0aGlzLnN0YXRlKTtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5Jc0tleVByZXNzZWQoXCJFc2NcIikpXHJcbiAgICAgICAgICAgIHRoaXMuU1RPUCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hcHBzLmZvckVhY2goKGFwcCkgPT4ge1xyXG4gICAgICAgICAgICBhcHAudXBkYXRlKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RhdGUucG9zdFVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbFxyXG5cclxuICAgICAgICAvLyBwdXQgZnBzIGluIHRoZSB0aXRlbFxyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gXCJmcHM6IFwiICsgdGhpcy5mcHNDb3VudGVyLmdldEZwcygpO1xyXG5cclxuICAgICAgICAvLyBwcmUtZ2wgYnVzaW5lc3NcclxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0ICE9IGNhbnZhcy5oZWlnaHQgfHwgXHJcbiAgICAgICAgICAgIHdpbmRvdy5pbm5lcldpZHRoICAhPSBjYW52YXMud2lkdGgpIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgLy8gY2FudmFzLmNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodC50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY2FudmFzLndpZHRoICA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICAvLyBjYW52YXMuY2xpZW50V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGgudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVuZGVyZXIucmVzaXplQ2FudmFzKHRoaXMuZ2wpO1xyXG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gICAgICAgIC8vIHJlbmRlciBhbGwgYXBwc1xyXG4gICAgICAgIC8vIFRPRE8gOiByZXZlcnNlIG9yZGVyXHJcbiAgICAgICAgdGhpcy5hcHBzLmZvckVhY2goKGFwcCkgPT4ge1xyXG4gICAgICAgICAgICBhcHAuZHJhdyh0aGlzLmdsKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/system/core.ts\n");

/***/ }),

/***/ "./src/system/domwrappers.ts":
/*!***********************************!*\
  !*** ./src/system/domwrappers.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addDropFileEventListeners\": () => /* binding */ addDropFileEventListeners,\n/* harmony export */   \"loadTextFromFile\": () => /* binding */ loadTextFromFile,\n/* harmony export */   \"loadJSONFromFile\": () => /* binding */ loadJSONFromFile,\n/* harmony export */   \"loadImageFromFile\": () => /* binding */ loadImageFromFile\n/* harmony export */ });\n// domwrappers.ts\r\n// author : Jos Feenstra\r\n// purpuse : wrap certain DOM functionalities \r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction addDropFileEventListeners(canvas, filesCallback) {\r\n    console.log(\"setting up drag events...\");\r\n    canvas.addEventListener('dragenter', function (ev) {\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"entering entering...\");\r\n        return true;\r\n    }, true);\r\n    // setup file upload\r\n    canvas.addEventListener('dragover', function (ev) {\r\n        //add hover class when drag over\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"over drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener('dragleave', function (ev) {\r\n        //remove hover class when drag out\r\n        // ev.stopPropagation();\r\n        ev.preventDefault();\r\n        console.log(\"leaving drag....\");\r\n        return true;\r\n    }, true);\r\n    canvas.addEventListener('drop', function (ev) {\r\n        //prevent browser from open the file when drop off\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n        //retrieve uploaded files data\r\n        var files = ev.dataTransfer.files;\r\n        filesCallback(files);\r\n        return true;\r\n    }, true);\r\n}\r\nfunction loadImageTest(files) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let image = yield loadImageFromFile(files.item(0));\r\n    });\r\n}\r\nfunction loadTextFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadJSONFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(file);\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            resolve(JSON.parse(reader.result));\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n    });\r\n}\r\nfunction loadImageFromFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => loadImageHelper1(reader).then(imageData => resolve(imageData), error => reject(error));\r\n    });\r\n}\r\nfunction loadImageHelper1(fileReader) {\r\n    return new Promise(function (resolve, reject) {\r\n        let img = document.createElement('img');\r\n        img.src = fileReader.result;\r\n        img.onload = () => resolve(loadImageHelper2(img));\r\n        img.onerror = () => reject(new Error(`Script load error for ${img}`));\r\n    });\r\n}\r\nfunction loadImageHelper2(image) {\r\n    var _a;\r\n    // turn it into image data by building a complete canvas and sampling it\r\n    let canvas = document.createElement('canvas');\r\n    ;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    let ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0);\r\n    let data = ctx.getImageData(0, 0, image.width, image.height);\r\n    (_a = canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(canvas);\r\n    return data;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/domwrappers.ts\n");

/***/ }),

/***/ "./src/system/fpsCounter.ts":
/*!**********************************!*\
  !*** ./src/system/fpsCounter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FpsCounter\": () => /* binding */ FpsCounter\n/* harmony export */ });\nclass FpsCounter {\r\n    constructor() {\r\n        this.fps = 0;\r\n        this.updateEveryXTicks = 100;\r\n        this.elapsed = 0;\r\n        this.frames = 0;\r\n    }\r\n    update(state) {\r\n        this.frames += 1;\r\n        this.elapsed += state.tick;\r\n        if (this.elapsed > this.updateEveryXTicks) {\r\n            this.setFps();\r\n            this.elapsed = 0;\r\n            this.frames = 0;\r\n        }\r\n    }\r\n    setFps() {\r\n        this.fps = Math.round(this.frames / this.elapsed * 1000);\r\n    }\r\n    getFps() {\r\n        return this.fps;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vZnBzQ291bnRlci50cz82NzhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLFVBQVU7SUFPbkI7UUFMQSxRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1Isc0JBQWlCLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixXQUFNLEdBQUcsQ0FBQyxDQUFDO0lBSVgsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFpQjtRQUNwQixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN2QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUNuQjtJQUNMLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0NBQ0oiLCJmaWxlIjoiLi9zcmMvc3lzdGVtL2Zwc0NvdW50ZXIudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dFN0YXRlIH0gZnJvbSBcIi4vaW5wdXQtc3RhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGcHNDb3VudGVyIHtcclxuXHJcbiAgICBmcHMgPSAwO1xyXG4gICAgdXBkYXRlRXZlcnlYVGlja3MgPSAxMDA7XHJcbiAgICBlbGFwc2VkID0gMDtcclxuICAgIGZyYW1lcyA9IDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHN0YXRlOiBJbnB1dFN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5mcmFtZXMgKz0gMTtcclxuICAgICAgICB0aGlzLmVsYXBzZWQgKz0gc3RhdGUudGljaztcclxuICAgICAgICBpZiAodGhpcy5lbGFwc2VkID4gdGhpcy51cGRhdGVFdmVyeVhUaWNrcykge1xyXG4gICAgICAgICAgICB0aGlzLnNldEZwcygpO1xyXG4gICAgICAgICAgICB0aGlzLmVsYXBzZWQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lcyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfSAgICBcclxuICAgIFxyXG4gICAgc2V0RnBzKCkge1xyXG4gICAgICAgIHRoaXMuZnBzID0gTWF0aC5yb3VuZCh0aGlzLmZyYW1lcyAvIHRoaXMuZWxhcHNlZCAqIDEwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZwcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mcHM7ICAgXHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/system/fpsCounter.ts\n");

/***/ }),

/***/ "./src/system/input-state.ts":
/*!***********************************!*\
  !*** ./src/system/input-state.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InputState\": () => /* binding */ InputState\n/* harmony export */ });\n/* harmony import */ var _math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/vector */ \"./src/math/vector.ts\");\n// CanvasInputHandler.ts\r\n// author : Jos Feenstra\r\n// purpose : handle all input events.\r\n\r\nvar Key;\r\n(function (Key) {\r\n    Key[Key[\"A\"] = 0] = \"A\";\r\n    Key[Key[\"B\"] = 1] = \"B\";\r\n    Key[Key[\"C\"] = 2] = \"C\";\r\n    Key[Key[\"D\"] = 3] = \"D\";\r\n    Key[Key[\"E\"] = 4] = \"E\";\r\n    Key[Key[\"F\"] = 5] = \"F\";\r\n    Key[Key[\"G\"] = 6] = \"G\";\r\n    Key[Key[\"H\"] = 7] = \"H\";\r\n    Key[Key[\"I\"] = 8] = \"I\";\r\n    Key[Key[\"J\"] = 9] = \"J\";\r\n    Key[Key[\"K\"] = 10] = \"K\";\r\n    Key[Key[\"L\"] = 11] = \"L\";\r\n    Key[Key[\"M\"] = 12] = \"M\";\r\n    Key[Key[\"N\"] = 13] = \"N\";\r\n    Key[Key[\"O\"] = 14] = \"O\";\r\n    Key[Key[\"P\"] = 15] = \"P\";\r\n    Key[Key[\"Q\"] = 16] = \"Q\";\r\n    Key[Key[\"R\"] = 17] = \"R\";\r\n    Key[Key[\"S\"] = 18] = \"S\";\r\n    Key[Key[\"T\"] = 19] = \"T\";\r\n    Key[Key[\"U\"] = 20] = \"U\";\r\n    Key[Key[\"V\"] = 21] = \"V\";\r\n    Key[Key[\"W\"] = 22] = \"W\";\r\n    Key[Key[\"X\"] = 23] = \"X\";\r\n    Key[Key[\"Y\"] = 24] = \"Y\";\r\n    Key[Key[\"Z\"] = 25] = \"Z\";\r\n    Key[Key[\"Up\"] = 26] = \"Up\";\r\n    Key[Key[\"Down\"] = 27] = \"Down\";\r\n    Key[Key[\"Left\"] = 28] = \"Left\";\r\n    Key[Key[\"Right\"] = 29] = \"Right\";\r\n    Key[Key[\"Space\"] = 30] = \"Space\";\r\n    Key[Key[\"Control\"] = 31] = \"Control\";\r\n    Key[Key[\"Alt\"] = 32] = \"Alt\";\r\n    Key[Key[\"Shift\"] = 33] = \"Shift\";\r\n    Key[Key[\"Enter\"] = 34] = \"Enter\";\r\n    Key[Key[\"Esc\"] = 35] = \"Esc\";\r\n    Key[Key[\"N1\"] = 36] = \"N1\";\r\n    Key[Key[\"N2\"] = 37] = \"N2\";\r\n    Key[Key[\"N3\"] = 38] = \"N3\";\r\n    Key[Key[\"N4\"] = 39] = \"N4\";\r\n    Key[Key[\"N5\"] = 40] = \"N5\";\r\n    Key[Key[\"N6\"] = 41] = \"N6\";\r\n    Key[Key[\"N7\"] = 42] = \"N7\";\r\n    Key[Key[\"N8\"] = 43] = \"N8\";\r\n    Key[Key[\"N9\"] = 44] = \"N9\";\r\n    Key[Key[\"N0\"] = 45] = \"N0\";\r\n    Key[Key[\"Plus\"] = 46] = \"Plus\";\r\n    Key[Key[\"Minus\"] = 47] = \"Minus\";\r\n    Key[Key[\"Backspace\"] = 48] = \"Backspace\";\r\n})(Key || (Key = {}));\r\nfunction toMapping(key) {\r\n    switch (key) {\r\n        case (Key.A): return 1;\r\n        case (Key.B): return 2;\r\n        case (Key.C): return 3;\r\n        case (Key.D): return 4;\r\n        case (Key.E): return 5;\r\n        case (Key.F): return 6;\r\n        default: return 0;\r\n    }\r\n}\r\nclass InputState {\r\n    constructor(canvas) {\r\n        this.mousePos = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseDelta = _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.scrollValue = 0;\r\n        // link\r\n        this.canvas = canvas;\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        this.startTime = Date.now();\r\n        this.minimumTick = 1000 / 144;\r\n        // mouse\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"mousedown\", this.setMouseDown.bind(this));\r\n        canvas.addEventListener(\"mouseup\", this.setMouseUp.bind(this));\r\n        canvas.addEventListener(\"contextmenu\", (e) => { e.preventDefault(); e.stopPropagation(); });\r\n        canvas.addEventListener(\"mousemove\", this.setMousePos.bind(this));\r\n        canvas.addEventListener(\"wheel\", this.setMouseScroll.bind(this));\r\n        canvas.addEventListener(\"touchmove\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchstart\", this.setTouch.bind(this));\r\n        canvas.addEventListener(\"touchend\", this.setTouchUp.bind(this));\r\n        for (let i = 0; i < 223; i++)\r\n            this.keysDown[i] = false;\r\n        // keyboard\r\n        canvas.addEventListener(\"keydown\", this.onKeyDown.bind(this));\r\n        // canvas.addEventListener(\"keypressed\", this.onKeyPressed.bind(this));\r\n        canvas.addEventListener(\"keyup\", this.onKeyUp.bind(this));\r\n        // final   \r\n        canvas.focus();\r\n    }\r\n    preUpdate() {\r\n        // this must be called every tick within whatever context this is used\r\n        // update time\r\n        this.newTime = Date.now();\r\n        this.tick = (this.newTime - this.oldTime);\r\n        this.oldTime = this.newTime;\r\n        // update mouse\r\n        this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n        this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n        this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n        this.mouseLeftPrev = this.mouseLeftDown;\r\n        this.mouseRightPrev = this.mouseRightDown;\r\n        this.mouseMiddlePrev = this.mouseMiddleDown;\r\n    }\r\n    postUpdate() {\r\n        // this also must be called for keyIsPressed to work\r\n        // refresh keypresses\r\n        this.keysPressed = [];\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n        // NOTE: i made a different system to handle this, see onKeyDown\r\n    }\r\n    setTouch(e) {\r\n        e.preventDefault();\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.touches[0].clientX, e.touches[0].clientY);\r\n        this.mouseLeftDown = true;\r\n    }\r\n    setTouchUp(e) {\r\n        e.preventDefault();\r\n        this.mouseLeftDown = false;\r\n    }\r\n    setMouseScroll(e) {\r\n        // console.log(\"we be scrollin' now...\")\r\n        // normalize all scrolling behaviour\r\n        let value = 0.1;\r\n        if (e.deltaY < 0)\r\n            value = -0.1;\r\n        // we dont want negative scroll values...\r\n        this.scrollValue = Math.max(0, this.scrollValue + value);\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mousePos = new _math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(e.clientX, e.clientY);\r\n        ;\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/system/input-state.ts\n");

/***/ }),

/***/ "./src/system/ui.ts":
/*!**************************!*\
  !*** ./src/system/ui.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UI\": () => /* binding */ UI,\n/* harmony export */   \"Parameter\": () => /* binding */ Parameter\n/* harmony export */ });\n/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ \"./src/math/math.ts\");\n// name:    ui.js\r\n// author:  Jos Feenstra\r\n// purpose: lets create the UI using html & dom api, because why the hell not\r\n\r\nclass UI {\r\n    constructor(frame) {\r\n        this.globalContext = frame;\r\n        this.currentContext = frame;\r\n    }\r\n    addContext(appName) {\r\n        this.currentContext = this.globalContext;\r\n        let appDiv = this.addDiv(appName);\r\n        this.currentContext = appDiv;\r\n    }\r\n    setContext(appName) {\r\n        this.globalContext.getElementsByClassName(appName);\r\n    }\r\n    removeContext(appName) {\r\n        this.setContext(appName);\r\n        let count = this.currentContext.childElementCount;\r\n        for (let i = count - 1; i >= 0; i -= 1) {\r\n            this.currentContext.removeChild(this.currentContext.children.item(i));\r\n        }\r\n        let temp = this.currentContext;\r\n        this.currentContext = this.globalContext;\r\n        this.currentContext.removeChild(temp);\r\n    }\r\n    addDiv(classname, items = []) {\r\n        let div = this.addElement(\"div\", classname);\r\n        items.forEach(item => {\r\n            div.appendChild(item);\r\n        });\r\n        return div;\r\n    }\r\n    addBooleanParameter(param, onInput = () => { }) {\r\n        let checkbox = this.addElement(\"input\", \"checkbox-slider-control\");\r\n        checkbox.type = \"checkbox\";\r\n        checkbox.addEventListener('change', () => {\r\n            let state = checkbox.checked;\r\n            param.set(state ? 1 : 0);\r\n            onInput(checkbox.valueAsNumber);\r\n            text1.innerText = param.name;\r\n        });\r\n        checkbox.checked = param.get() == 1;\r\n        let text1 = this.addElement(\"p\", \"slider-text\");\r\n        text1.innerText = param.name;\r\n        // TODO update beyond our control\r\n        param.onset = () => {\r\n            // console.log(\"TODO\");\r\n        };\r\n        this.addDiv(\"slider\", [\r\n            text1,\r\n            checkbox,\r\n        ]);\r\n        return checkbox;\r\n    }\r\n    addParameter(param, onInput = () => { }) {\r\n        let slider = this.addRangeInput(param, onInput);\r\n        let text1 = this.addElement(\"p\", \"slider-text\");\r\n        text1.innerText = param.name;\r\n        let text2 = this.addElement(\"p\", \"slider-value\");\r\n        text2.innerText = slider.value;\r\n        this.addDiv(\"slider\", [\r\n            text1,\r\n            text2,\r\n            slider,\r\n        ]);\r\n        // on update beyond our control\r\n        param.onset = () => {\r\n            // console.log(\"TODO\");\r\n        };\r\n        slider.oninput = () => {\r\n            param.set(slider.valueAsNumber);\r\n            onInput(slider.valueAsNumber);\r\n            text1.innerText = param.name;\r\n            text2.innerText = slider.value;\r\n        };\r\n        return slider;\r\n    }\r\n    addRangeInput(param, onInput = () => { }) {\r\n        // a slider looks like this : <input type=\"range\" min=\"1\" max=\"100\" step=\"1\" value=\"50\">\r\n        let slider = this.addElement(\"input\", \"slider-control\");\r\n        slider.type = \"range\";\r\n        slider.min = param.min.toString();\r\n        slider.max = param.max.toString();\r\n        slider.valueAsNumber = param.state;\r\n        slider.step = param.step.toString();\r\n        return slider;\r\n    }\r\n    addText() {\r\n        this.addElement(\"\");\r\n    }\r\n    addEnum(keys, values, onchange) {\r\n        // <select>\r\n        //  <option>Cappuccino</option>\r\n        //  <option>Mocha</option>\r\n        // </select>\r\n        if (keys.length != values.length) {\r\n            console.error(\"need same amount of keys & values\");\r\n        }\r\n        let count = keys.length;\r\n        let e = this.addElement(\"select\", \"enum-selector\");\r\n        for (let i = 0; i < count; i++) {\r\n            let o = this.addElement(\"option\", \"enum-item\");\r\n            o.innerText = keys[i];\r\n            e.appendChild(o);\r\n        }\r\n        console.log(e);\r\n        e.addEventListener(\"change\", (e) => {\r\n            let target = e.target;\r\n            let i = keys.indexOf(target.value);\r\n            onchange(values[i]);\r\n        });\r\n        return e;\r\n    }\r\n    addElement(element, className = \"\") {\r\n        let el = document.createElement(element);\r\n        el.className = className;\r\n        this.currentContext.appendChild(el);\r\n        return el;\r\n    }\r\n}\r\n// a slider parameter\r\nclass Parameter {\r\n    constructor(name, state, min = -Infinity, max = Infinity, step = 0.1) {\r\n        this.name = name;\r\n        this.state = state;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n    }\r\n    get() {\r\n        return this.state;\r\n    }\r\n    set(state) {\r\n        // TODO ROUND TO NEAREST STEP\r\n        let clamped = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.clamp(state, this.min, this.max);\r\n        let rest = this.state - this.min;\r\n        let times = Math.min(rest / this.step);\r\n        let stepped = this.min + this.step * times;\r\n        this.state = _math_math__WEBPACK_IMPORTED_MODULE_0__.GeonMath.clamp(state, this.min, this.max);\r\n        if (this.onset)\r\n            this.onset(this.state);\r\n    }\r\n    getNPermutations() {\r\n        return Math.min((this.max - this.min) / this.step + 1);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLWVuZ2luZS8uL3NyYy9zeXN0ZW0vdWkudHM/MDRiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpQkFBaUI7QUFDakIsd0JBQXdCO0FBQ3hCLDZFQUE2RTtBQUVyQztBQUVqQyxNQUFNLEVBQUU7SUFNWCxZQUFZLEtBQXFCO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFHRCxVQUFVLENBQUMsT0FBZTtRQUV0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBR0QsVUFBVSxDQUFDLE9BQWU7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBR0QsYUFBYSxDQUFDLE9BQWU7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDO1FBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRyxDQUFDLElBQUcsQ0FBQyxFQUFHLENBQUMsSUFBRSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUM7U0FDMUU7UUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBR0QsTUFBTSxDQUFDLFNBQWlCLEVBQUUsUUFBcUIsRUFBRTtRQUM3QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQW1CLENBQUM7UUFDOUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBR0QsbUJBQW1CLENBQUMsS0FBZ0IsRUFBRSxVQUErQixHQUFHLEVBQUUsR0FBRSxDQUFDO1FBQ3pFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFxQixDQUFDO1FBQ3ZGLFFBQVEsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO1FBQzNCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBRXJDLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDN0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXhCLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUc3QixpQ0FBaUM7UUFDakMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDZix1QkFBdUI7UUFDM0IsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ2xCLEtBQUs7WUFDTCxRQUFRO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUdELFlBQVksQ0FBQyxLQUFnQixFQUFFLFVBQStCLEdBQUcsRUFBRSxHQUFFLENBQUM7UUFFbEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDaEQsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBRTdCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pELEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUUvQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNsQixLQUFLO1lBQ0wsS0FBSztZQUNMLE1BQU07U0FDVCxDQUFDLENBQUM7UUFFSCwrQkFBK0I7UUFDL0IsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDZix1QkFBdUI7UUFDM0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQzdCLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNuQyxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUdELGFBQWEsQ0FBQyxLQUFnQixFQUFFLFVBQStCLEdBQUcsRUFBRSxHQUFFLENBQUM7UUFFbkUsd0ZBQXdGO1FBQ3hGLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFxQixDQUFDO1FBRTVFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVwQyxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBR0QsT0FBTztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFHRCxPQUFPLENBQUksSUFBYyxFQUFFLE1BQVcsRUFBRSxRQUFnQztRQUNwRSxXQUFXO1FBQ1gsK0JBQStCO1FBQy9CLDBCQUEwQjtRQUMxQixZQUFZO1FBRVosSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV4QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQXNCLENBQUM7UUFDeEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFRLEVBQUUsRUFBRTtZQUN0QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBMkIsQ0FBQztZQUMzQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFHTyxVQUFVLENBQUMsT0FBZSxFQUFFLFlBQW9CLEVBQUU7UUFFdEQsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFFeEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0o7QUFFRCxxQkFBcUI7QUFDZCxNQUFNLFNBQVM7SUFVbEIsWUFBWSxJQUFZLEVBQUUsS0FBYSxFQUFFLEdBQUcsR0FBRSxDQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsUUFBUSxFQUFFLElBQUksR0FBQyxHQUFHO1FBQzlFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsR0FBRztRQUNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWE7UUFDYiw2QkFBNkI7UUFDN0IsSUFBSSxPQUFPLEdBQUcsc0RBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2pDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQzNDLElBQUksQ0FBQyxLQUFLLEdBQUcsc0RBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsS0FBSztZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDSiIsImZpbGUiOiIuL3NyYy9zeXN0ZW0vdWkudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBuYW1lOiAgICB1aS5qc1xyXG4vLyBhdXRob3I6ICBKb3MgRmVlbnN0cmFcclxuLy8gcHVycG9zZTogbGV0cyBjcmVhdGUgdGhlIFVJIHVzaW5nIGh0bWwgJiBkb20gYXBpLCBiZWNhdXNlIHdoeSB0aGUgaGVsbCBub3RcclxuXHJcbmltcG9ydCB7IEdlb25NYXRoIH0gZnJvbSBcIi4uL21hdGgvbWF0aFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVJIHtcclxuXHJcbiAgICByZWFkb25seSBnbG9iYWxDb250ZXh0OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIGN1cnJlbnRDb250ZXh0ITogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZyYW1lOiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsQ29udGV4dCA9IGZyYW1lO1xyXG4gICAgICAgIHRoaXMuY3VycmVudENvbnRleHQgPSBmcmFtZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYWRkQ29udGV4dChhcHBOYW1lOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IHRoaXMuZ2xvYmFsQ29udGV4dDtcclxuICAgICAgICBsZXQgYXBwRGl2ID0gdGhpcy5hZGREaXYoYXBwTmFtZSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IGFwcERpdjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc2V0Q29udGV4dChhcHBOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmdsb2JhbENvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhcHBOYW1lKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVtb3ZlQ29udGV4dChhcHBOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNldENvbnRleHQoYXBwTmFtZSk7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5jdXJyZW50Q29udGV4dC5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgICBmb3IgKGxldCBpID0gY291bnQgLSAxIDsgaSA+PTAgOyBpLT0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRleHQucmVtb3ZlQ2hpbGQodGhpcy5jdXJyZW50Q29udGV4dC5jaGlsZHJlbi5pdGVtKGkpISk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGVtcCA9IHRoaXMuY3VycmVudENvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IHRoaXMuZ2xvYmFsQ29udGV4dDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRDb250ZXh0LnJlbW92ZUNoaWxkKHRlbXApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhZGREaXYoY2xhc3NuYW1lOiBzdHJpbmcsIGl0ZW1zOiBIVE1MRWxlbWVudFtdPVtdKSA6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgICAgICBsZXQgZGl2ID0gdGhpcy5hZGRFbGVtZW50KFwiZGl2XCIsIGNsYXNzbmFtZSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkaXY7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFkZEJvb2xlYW5QYXJhbWV0ZXIocGFyYW06IFBhcmFtZXRlciwgb25JbnB1dDogKHY6IG51bWJlcikgPT4gdm9pZCA9ICgpID0+IHt9KSB7XHJcbiAgICAgICAgbGV0IGNoZWNrYm94ID0gdGhpcy5hZGRFbGVtZW50KFwiaW5wdXRcIiwgXCJjaGVja2JveC1zbGlkZXItY29udHJvbFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50OyAgICBcclxuICAgICAgICBjaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IGNoZWNrYm94LmNoZWNrZWQ7XHJcbiAgICAgICAgICAgIHBhcmFtLnNldChzdGF0ZT8gMSA6IDApO1xyXG5cclxuICAgICAgICAgICAgb25JbnB1dChjaGVja2JveC52YWx1ZUFzTnVtYmVyKTtcclxuICAgICAgICAgICAgdGV4dDEuaW5uZXJUZXh0ID0gcGFyYW0ubmFtZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gcGFyYW0uZ2V0KCkgPT0gMTtcclxuXHJcbiAgICAgICAgbGV0IHRleHQxID0gdGhpcy5hZGRFbGVtZW50KFwicFwiLCBcInNsaWRlci10ZXh0XCIpO1xyXG4gICAgICAgIHRleHQxLmlubmVyVGV4dCA9IHBhcmFtLm5hbWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVE9ETyB1cGRhdGUgYmV5b25kIG91ciBjb250cm9sXHJcbiAgICAgICAgcGFyYW0ub25zZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVE9ET1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRkRGl2KFwic2xpZGVyXCIsIFtcclxuICAgICAgICAgICAgdGV4dDEsXHJcbiAgICAgICAgICAgIGNoZWNrYm94LFxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hlY2tib3g7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFkZFBhcmFtZXRlcihwYXJhbTogUGFyYW1ldGVyLCBvbklucHV0OiAodjogbnVtYmVyKSA9PiB2b2lkID0gKCkgPT4ge30pIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgc2xpZGVyID0gdGhpcy5hZGRSYW5nZUlucHV0KHBhcmFtLCBvbklucHV0KTtcclxuICAgICAgICBsZXQgdGV4dDEgPSB0aGlzLmFkZEVsZW1lbnQoXCJwXCIsIFwic2xpZGVyLXRleHRcIik7XHJcbiAgICAgICAgdGV4dDEuaW5uZXJUZXh0ID0gcGFyYW0ubmFtZTtcclxuXHJcbiAgICAgICAgbGV0IHRleHQyID0gdGhpcy5hZGRFbGVtZW50KFwicFwiLCBcInNsaWRlci12YWx1ZVwiKTtcclxuICAgICAgICB0ZXh0Mi5pbm5lclRleHQgPSBzbGlkZXIudmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkRGl2KFwic2xpZGVyXCIsIFtcclxuICAgICAgICAgICAgdGV4dDEsXHJcbiAgICAgICAgICAgIHRleHQyLFxyXG4gICAgICAgICAgICBzbGlkZXIsXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIC8vIG9uIHVwZGF0ZSBiZXlvbmQgb3VyIGNvbnRyb2xcclxuICAgICAgICBwYXJhbS5vbnNldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJUT0RPXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2xpZGVyLm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHBhcmFtLnNldChzbGlkZXIudmFsdWVBc051bWJlcik7XHJcbiAgICAgICAgICAgIG9uSW5wdXQoc2xpZGVyLnZhbHVlQXNOdW1iZXIpO1xyXG4gICAgICAgICAgICB0ZXh0MS5pbm5lclRleHQgPSBwYXJhbS5uYW1lO1xyXG4gICAgICAgICAgICB0ZXh0Mi5pbm5lclRleHQgPSBzbGlkZXIudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzbGlkZXI7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFkZFJhbmdlSW5wdXQocGFyYW06IFBhcmFtZXRlciwgb25JbnB1dDogKHY6IG51bWJlcikgPT4gdm9pZCA9ICgpID0+IHt9KSB7XHJcblxyXG4gICAgICAgIC8vIGEgc2xpZGVyIGxvb2tzIGxpa2UgdGhpcyA6IDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIxXCIgbWF4PVwiMTAwXCIgc3RlcD1cIjFcIiB2YWx1ZT1cIjUwXCI+XHJcbiAgICAgICAgbGV0IHNsaWRlciA9IHRoaXMuYWRkRWxlbWVudChcImlucHV0XCIsIFwic2xpZGVyLWNvbnRyb2xcIikgYXMgSFRNTElucHV0RWxlbWVudDsgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgc2xpZGVyLnR5cGUgPSBcInJhbmdlXCI7XHJcbiAgICAgICAgc2xpZGVyLm1pbiA9IHBhcmFtLm1pbi50b1N0cmluZygpO1xyXG4gICAgICAgIHNsaWRlci5tYXggPSBwYXJhbS5tYXgudG9TdHJpbmcoKTtcclxuICAgICAgICBzbGlkZXIudmFsdWVBc051bWJlciA9IHBhcmFtLnN0YXRlO1xyXG4gICAgICAgIHNsaWRlci5zdGVwID0gcGFyYW0uc3RlcC50b1N0cmluZygpO1xyXG4gXHJcbiAgICAgICAgcmV0dXJuIHNsaWRlcjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYWRkVGV4dCgpIHtcclxuICAgICAgICB0aGlzLmFkZEVsZW1lbnQoXCJcIilcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGFkZEVudW08VD4oa2V5czogc3RyaW5nW10sIHZhbHVlczogVFtdLCBvbmNoYW5nZTogKHNlbGVjdGlvbjogVCkgPT4gdm9pZCkgOiBIVE1MU2VsZWN0RWxlbWVudCB7XHJcbiAgICAgICAgLy8gPHNlbGVjdD5cclxuICAgICAgICAvLyAgPG9wdGlvbj5DYXBwdWNjaW5vPC9vcHRpb24+XHJcbiAgICAgICAgLy8gIDxvcHRpb24+TW9jaGE8L29wdGlvbj5cclxuICAgICAgICAvLyA8L3NlbGVjdD5cclxuXHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoICE9IHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm5lZWQgc2FtZSBhbW91bnQgb2Yga2V5cyAmIHZhbHVlc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvdW50ID0ga2V5cy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGxldCBlID0gdGhpcy5hZGRFbGVtZW50KFwic2VsZWN0XCIsIFwiZW51bS1zZWxlY3RvclwiKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBvID0gdGhpcy5hZGRFbGVtZW50KFwib3B0aW9uXCIsIFwiZW51bS1pdGVtXCIpO1xyXG4gICAgICAgICAgICBvLmlubmVyVGV4dCA9IGtleXNbaV07XHJcbiAgICAgICAgICAgIGUuYXBwZW5kQ2hpbGQobyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG5cclxuICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGU6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgICAgICAgICAgbGV0IGkgPSBrZXlzLmluZGV4T2YodGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgICAgb25jaGFuZ2UodmFsdWVzW2ldKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBhZGRFbGVtZW50KGVsZW1lbnQ6IHN0cmluZywgY2xhc3NOYW1lOiBzdHJpbmcgPSBcIlwiKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KVxyXG5cclxuICAgICAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udGV4dC5hcHBlbmRDaGlsZChlbCk7XHJcbiAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBhIHNsaWRlciBwYXJhbWV0ZXJcclxuZXhwb3J0IGNsYXNzIFBhcmFtZXRlciB7XHJcblxyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgc3RhdGU6IG51bWJlcjtcclxuICAgIG1pbjogbnVtYmVyO1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICBzdGVwOiBudW1iZXJcclxuICAgIG9uc2V0PzogRnVuY3Rpb247XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc3RhdGU6IG51bWJlciwgbWluID0tIEluZmluaXR5LCBtYXggPSBJbmZpbml0eSwgc3RlcD0wLjEpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICAgICAgdGhpcy5taW4gPSBtaW47XHJcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XHJcbiAgICAgICAgdGhpcy5zdGVwID0gc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoc3RhdGU6IG51bWJlcikge1xyXG4gICAgICAgIC8vIFRPRE8gUk9VTkQgVE8gTkVBUkVTVCBTVEVQXHJcbiAgICAgICAgbGV0IGNsYW1wZWQgPSBHZW9uTWF0aC5jbGFtcChzdGF0ZSwgdGhpcy5taW4sIHRoaXMubWF4KTtcclxuICAgICAgICBsZXQgcmVzdCA9IHRoaXMuc3RhdGUgLSB0aGlzLm1pbjtcclxuICAgICAgICBsZXQgdGltZXMgPSBNYXRoLm1pbihyZXN0IC8gdGhpcy5zdGVwKTtcclxuICAgICAgICBsZXQgc3RlcHBlZCA9IHRoaXMubWluICsgdGhpcy5zdGVwICogdGltZXM7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEdlb25NYXRoLmNsYW1wKHN0YXRlLCB0aGlzLm1pbiwgdGhpcy5tYXgpOyAgXHJcbiAgICAgICAgaWYgKHRoaXMub25zZXQpIFxyXG4gICAgICAgICAgICB0aGlzLm9uc2V0KHRoaXMuc3RhdGUpOyAgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldE5QZXJtdXRhdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKCh0aGlzLm1heCAtIHRoaXMubWluKSAvIHRoaXMuc3RlcCArIDEpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/system/ui.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./demo/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;